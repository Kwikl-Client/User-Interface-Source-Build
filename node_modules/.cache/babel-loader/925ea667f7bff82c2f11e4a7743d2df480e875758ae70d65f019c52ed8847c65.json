{"ast":null,"code":"import { _TrueTypeReader } from './ttf-reader';\nimport { _PdfDictionary, _PdfName, Dictionary } from './../pdf-primitives';\nimport { _PdfFontMetrics } from './pdf-font-metrics';\nimport { _StandardWidthTable } from './pdf-font-metrics';\nimport { _FontDescriptorFlag } from '../enumerator';\nimport { _decode } from '../utils';\nimport { _PdfStream } from './../base-stream';\nvar _UnicodeTrueTypeFont = /** @class */function () {\n  function _UnicodeTrueTypeFont(base64String, size) {\n    this._nameString = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    this._isEmbedFont = false;\n    this._cmapPrefix = '/CIDInit /ProcSet findresource begin\\n12 dict begin\\nbegincmap' + '\\r\\n' + '/CIDSystemInfo << /Registry (Adobe)/Ordering (UCS)/Supplement 0>> def\\n/CMapName ' + '/Adobe-Identity-UCS def\\n/CMapType 2 def\\n1 beginCodeSpacerange' + '\\r\\n';\n    this._cmapEndCodeSpaceRange = 'endCodeSpacerange' + '\\r\\n';\n    this._cmapBeginRange = 'beginbfrange' + '\\r\\n';\n    this._cmapEndRange = 'endbfrange' + '\\r\\n';\n    this._cmapSuffix = 'endbfrange\\nendcmap\\nCMapName currentdict ' + '/CMap defineresource pop\\nend end' + '\\r\\n';\n    if (base64String === null || typeof base64String === 'undefined') {\n      throw new Error('ArgumentNullException:base64String');\n    }\n    this._fontSize = size;\n    this._fontString = base64String;\n    this._Initialize();\n  }\n  _UnicodeTrueTypeFont.prototype._beginSave = function () {\n    this._descendantFontBeginSave();\n    this._cmapBeginSave();\n    this._fontDictionaryBeginSave();\n    this._fontProgramBeginSave();\n    if (this._fontDescriptor) {\n      this._fontDescriptor.update('FontFile2', this._fontProgram);\n      this._fontDescriptor._updated = true;\n      this._fontDescriptor._isFont = true;\n    }\n  };\n  _UnicodeTrueTypeFont.prototype._descendantFontBeginSave = function () {\n    if (this._usedChars !== null && typeof this._usedChars !== 'undefined' && this._usedChars._size() > 0) {\n      var width = this._getDescendantWidth(); // eslint-disable-line\n      if (width !== null) {\n        this._descendantFont.set('W', width);\n      }\n    }\n  };\n  _UnicodeTrueTypeFont.prototype._fontDictionaryBeginSave = function () {\n    if (this._usedChars !== null && typeof this._usedChars !== 'undefined' && this._usedChars._size() > 0) {\n      this._fontDictionary.update('ToUnicode', this._cmap);\n    }\n  };\n  _UnicodeTrueTypeFont.prototype._Initialize = function () {\n    var byteArray = _decode(this._fontString);\n    this._fontData = byteArray;\n    this._ttfReader = new _TrueTypeReader(this._fontData);\n    this._ttfMetrics = this._ttfReader._metrics;\n  };\n  _UnicodeTrueTypeFont.prototype._createInternals = function () {\n    this._fontDictionary = new _PdfDictionary();\n    this._descendantFont = new _PdfDictionary();\n    this._metrics = new _PdfFontMetrics();\n    this._ttfReader._createInternals();\n    this._usedChars = null;\n    var data = []; // eslint-disable-line\n    this._fontProgram = new _PdfStream(data, new _PdfDictionary());\n    this._cmap = new _PdfStream(data, new _PdfDictionary());\n    this._ttfMetrics = this._ttfReader._metrics;\n    this._initializeMetrics();\n    this._subsetName = this._getFontName();\n    this._createDescendantFont();\n    this._createFontDictionary();\n  };\n  _UnicodeTrueTypeFont.prototype._getInternals = function () {\n    return this._fontDictionary;\n  };\n  _UnicodeTrueTypeFont.prototype._initializeMetrics = function () {\n    var ttfMetrics = this._ttfReader._metrics;\n    this._metrics._ascent = ttfMetrics._macAscent;\n    this._metrics._descent = ttfMetrics._macDescent;\n    this._metrics._height = ttfMetrics._macAscent - ttfMetrics._macDescent + ttfMetrics._lineGap;\n    this._metrics._name = ttfMetrics._fontFamily;\n    this._metrics._postScriptName = ttfMetrics._postScriptName;\n    this._metrics._size = this._fontSize;\n    this._metrics._widthTable = new _StandardWidthTable(ttfMetrics._widthTable);\n    this._metrics._lineGap = ttfMetrics._lineGap;\n    this._metrics._subScriptSizeFactor = ttfMetrics._subScriptSizeFactor;\n    this._metrics._superscriptSizeFactor = ttfMetrics._superscriptSizeFactor;\n    this._metrics._isBold = ttfMetrics._isBold;\n  };\n  _UnicodeTrueTypeFont.prototype._getFontName = function () {\n    var builder = '';\n    for (var i = 0; i < 6; i++) {\n      var index = Math.floor(Math.random() * (25 - 0 + 1)) + 0;\n      builder += this._nameString[Number.parseInt(index.toString(), 10)];\n    }\n    builder += '+';\n    builder += this._ttfReader._metrics._postScriptName;\n    return builder.toString();\n  };\n  _UnicodeTrueTypeFont.prototype._createDescendantFont = function () {\n    this._descendantFont = new _PdfDictionary();\n    this._descendantFont._updated = true;\n    this._descendantFont.set('Type', new _PdfName('Font'));\n    this._descendantFont.set('Subtype', new _PdfName('CIDFontType2'));\n    this._descendantFont.set('BaseFont', new _PdfName(this._subsetName));\n    this._descendantFont.set('CIDToGIDMap', new _PdfName('Identity'));\n    this._descendantFont.set('DW', 1000);\n    this._fontDescriptor = this._createFontDescriptor();\n    this._descendantFont.set('FontDescriptor', this._fontDescriptor);\n    var systemInfo = this._createSystemInfo();\n    this._descendantFont.set('CIDSystemInfo', systemInfo);\n    this._descendantFont._isFont = true;\n  };\n  _UnicodeTrueTypeFont.prototype._createFontDescriptor = function () {\n    var descriptor = new _PdfDictionary();\n    var metrics = this._ttfReader._metrics;\n    descriptor.set('Type', new _PdfName('FontDescriptor'));\n    descriptor.set('FontName', new _PdfName(this._subsetName));\n    descriptor.set('Flags', this._getDescriptorFlags());\n    descriptor.set('FontBBox', this._getBoundBox());\n    descriptor.set('MissingWidth', metrics._widthTable[32]);\n    descriptor.set('StemV', metrics._stemV);\n    descriptor.set('ItalicAngle', metrics._italicAngle);\n    descriptor.set('CapHeight', metrics._capHeight);\n    descriptor.set('Ascent', metrics._winAscent);\n    descriptor.set('Descent', metrics._winDescent);\n    descriptor.set('Leading', metrics._leading);\n    descriptor.set('AvgWidth', metrics._widthTable[32]);\n    descriptor.set('MaxWidth', metrics._widthTable[32]);\n    descriptor.set('XHeight', 0);\n    descriptor.set('StemH', 0);\n    descriptor._updated = true;\n    return descriptor;\n  };\n  _UnicodeTrueTypeFont.prototype._generateFontProgram = function () {\n    var fontProgram = [];\n    this._usedChars = this._usedChars === null || typeof this._usedChars === 'undefined' ? new Dictionary() : this._usedChars;\n    this._ttfReader._setOffset(0);\n    fontProgram = this._ttfReader._readFontProgram(this._usedChars);\n    this._fontProgram._clearStream();\n    this._fontProgram._writeBytes(fontProgram);\n  };\n  _UnicodeTrueTypeFont.prototype._getBoundBox = function () {\n    var rect = this._ttfReader._metrics._fontBox;\n    var width = Math.abs(rect[2] - rect[0]);\n    var height = Math.abs(rect[1] - rect[3]);\n    var rectangle = [rect[0], rect[3], width, height];\n    return rectangle;\n  };\n  _UnicodeTrueTypeFont.prototype._cmapBeginSave = function () {\n    this._generateCmap();\n  };\n  _UnicodeTrueTypeFont.prototype._fontProgramBeginSave = function () {\n    this._generateFontProgram();\n  };\n  _UnicodeTrueTypeFont.prototype._toHexString = function (n, isCaseChange) {\n    var s = n.toString(16);\n    if (isCaseChange) {\n      s = s.toUpperCase();\n    }\n    return '<0000'.substring(0, 5 - s.length) + s + '>';\n  };\n  _UnicodeTrueTypeFont.prototype._generateCmap = function () {\n    if (this._usedChars !== null && typeof this._usedChars !== 'undefined' && this._usedChars._size() > 0) {\n      var glyphChars = this._ttfReader._getGlyphChars(this._usedChars);\n      if (glyphChars._size() > 0) {\n        var keys = glyphChars.keys().sort();\n        var first = keys[0];\n        var last = keys[keys.length - 1];\n        var middlePart = this._toHexString(first, false) + this._toHexString(last, false) + '\\r\\n';\n        var builder = '';\n        builder += this._cmapPrefix;\n        builder += middlePart;\n        builder += this._cmapEndCodeSpaceRange;\n        var nextRange = 0;\n        for (var i = 0; i < keys.length; i++) {\n          if (nextRange === 0) {\n            if (i !== 0) {\n              builder += this._cmapEndRange;\n            }\n            nextRange = Math.min(100, keys.length - i);\n            builder += nextRange;\n            builder += ' ';\n            builder += this._cmapBeginRange;\n          }\n          nextRange -= 1;\n          var key = keys[Number.parseInt(i.toString(), 10)];\n          builder += this._toHexString(key, true) + this._toHexString(key, true);\n          builder += this._toHexString(glyphChars.getValue(key), true) + '\\n';\n        }\n        builder += this._cmapSuffix;\n        this._cmap._clearStream();\n        this._cmap._write(builder);\n      }\n    }\n  };\n  _UnicodeTrueTypeFont.prototype._createFontDictionary = function () {\n    this._fontDictionary._updated = true;\n    this._fontDictionary.set('Type', _PdfName.get('Font'));\n    this._fontDictionary.set('Subtype', _PdfName.get('Type0'));\n    this._fontDictionary.set('BaseFont', new _PdfName(this._subsetName));\n    this._fontDictionary.set('Encoding', _PdfName.get('Identity-H'));\n    this._fontDictionary.set('DescendantFonts', this._descendantFont);\n    this._fontDictionary._isFont = true;\n    this._fontDictionary._currentObj = this;\n  };\n  _UnicodeTrueTypeFont.prototype._createSystemInfo = function () {\n    var systemInfo = new _PdfDictionary();\n    systemInfo._updated = true;\n    systemInfo.set('Registry', 'Adobe');\n    systemInfo.set('Ordering', 'Identity');\n    systemInfo.set('Supplement', 0);\n    return systemInfo;\n  };\n  _UnicodeTrueTypeFont.prototype._getDescriptorFlags = function () {\n    var flags = 0;\n    var metrics = this._ttfReader._metrics;\n    if (metrics._isFixedPitch) {\n      flags |= _FontDescriptorFlag.fixedPitch;\n    }\n    if (metrics._isSymbol) {\n      flags |= _FontDescriptorFlag.symbolic;\n    } else {\n      flags |= _FontDescriptorFlag.nonSymbolic;\n    }\n    if (metrics._isItalic) {\n      flags |= _FontDescriptorFlag.italic;\n    }\n    if (metrics._isBold) {\n      flags |= _FontDescriptorFlag.forceBold;\n    }\n    return flags;\n  };\n  _UnicodeTrueTypeFont.prototype._getCharacterWidth = function (charCode) {\n    var codeWidth = this._ttfReader._getCharacterWidth(charCode);\n    return codeWidth;\n  };\n  _UnicodeTrueTypeFont.prototype._setSymbols = function (text) {\n    if (text !== null && typeof text !== 'undefined') {\n      if (this._usedChars === null || typeof this._usedChars === 'undefined') {\n        this._usedChars = new Dictionary();\n      }\n      for (var i = 0; i < text.length; i++) {\n        var ch = text[Number.parseInt(i.toString(), 10)];\n        this._usedChars.setValue(ch, String.fromCharCode(0));\n      }\n    }\n  };\n  _UnicodeTrueTypeFont.prototype._getDescendantWidth = function () {\n    var array = new Array(); // eslint-disable-line\n    if (this._usedChars !== null && typeof this._usedChars !== 'undefined' && this._usedChars._size() > 0) {\n      var glyphInfo = [];\n      var keys = this._usedChars.keys();\n      for (var i = 0; i < keys.length; i++) {\n        var chLen = keys[Number.parseInt(i.toString(), 10)];\n        var glyph = this._ttfReader._getGlyph(chLen);\n        glyphInfo.push(glyph);\n      }\n      glyphInfo.sort(function (a, b) {\n        return a._index - b._index;\n      });\n      var firstGlyphIndex = 0;\n      var lastGlyphIndex = 0;\n      var firstGlyphIndexWasSet = false;\n      var widthDetails = new Array(); // eslint-disable-line\n      for (var i = 0; i < glyphInfo.length; i++) {\n        var glyph = glyphInfo[Number.parseInt(i.toString(), 10)];\n        if (!firstGlyphIndexWasSet) {\n          firstGlyphIndexWasSet = true;\n          firstGlyphIndex = glyph._index;\n          lastGlyphIndex = glyph._index - 1;\n        }\n        if ((lastGlyphIndex + 1 !== glyph._index || i + 1 === glyphInfo.length) && glyphInfo.length > 1) {\n          array.push(Number(firstGlyphIndex));\n          if (i !== 0) {\n            array.push(widthDetails);\n          }\n          firstGlyphIndex = glyph._index;\n          widthDetails = new Array(); // eslint-disable-line\n        }\n        widthDetails.push(Number(glyph._width));\n        if (i + 1 === glyphInfo.length) {\n          array.push(Number(firstGlyphIndex));\n          array.push(widthDetails);\n        }\n        lastGlyphIndex = glyph._index;\n      }\n    }\n    return array;\n  };\n  return _UnicodeTrueTypeFont;\n}();\nexport { _UnicodeTrueTypeFont };","map":{"version":3,"names":["_TrueTypeReader","_PdfDictionary","_PdfName","Dictionary","_PdfFontMetrics","_StandardWidthTable","_FontDescriptorFlag","_decode","_PdfStream","_UnicodeTrueTypeFont","base64String","size","_nameString","_isEmbedFont","_cmapPrefix","_cmapEndCodeSpaceRange","_cmapBeginRange","_cmapEndRange","_cmapSuffix","Error","_fontSize","_fontString","_Initialize","prototype","_beginSave","_descendantFontBeginSave","_cmapBeginSave","_fontDictionaryBeginSave","_fontProgramBeginSave","_fontDescriptor","update","_fontProgram","_updated","_isFont","_usedChars","_size","width","_getDescendantWidth","_descendantFont","set","_fontDictionary","_cmap","byteArray","_fontData","_ttfReader","_ttfMetrics","_metrics","_createInternals","data","_initializeMetrics","_subsetName","_getFontName","_createDescendantFont","_createFontDictionary","_getInternals","ttfMetrics","_ascent","_macAscent","_descent","_macDescent","_height","_lineGap","_name","_fontFamily","_postScriptName","_widthTable","_subScriptSizeFactor","_superscriptSizeFactor","_isBold","builder","i","index","Math","floor","random","Number","parseInt","toString","_createFontDescriptor","systemInfo","_createSystemInfo","descriptor","metrics","_getDescriptorFlags","_getBoundBox","_stemV","_italicAngle","_capHeight","_winAscent","_winDescent","_leading","_generateFontProgram","fontProgram","_setOffset","_readFontProgram","_clearStream","_writeBytes","rect","_fontBox","abs","height","rectangle","_generateCmap","_toHexString","n","isCaseChange","s","toUpperCase","substring","length","glyphChars","_getGlyphChars","keys","sort","first","last","middlePart","nextRange","min","key","getValue","_write","get","_currentObj","flags","_isFixedPitch","fixedPitch","_isSymbol","symbolic","nonSymbolic","_isItalic","italic","forceBold","_getCharacterWidth","charCode","codeWidth","_setSymbols","text","ch","setValue","String","fromCharCode","array","Array","glyphInfo","chLen","glyph","_getGlyph","push","a","b","_index","firstGlyphIndex","lastGlyphIndex","firstGlyphIndexWasSet","widthDetails","_width"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/unicode-true-type-font.js"],"sourcesContent":["import { _TrueTypeReader } from './ttf-reader';\nimport { _PdfDictionary, _PdfName, Dictionary } from './../pdf-primitives';\nimport { _PdfFontMetrics } from './pdf-font-metrics';\nimport { _StandardWidthTable } from './pdf-font-metrics';\nimport { _FontDescriptorFlag } from '../enumerator';\nimport { _decode } from '../utils';\nimport { _PdfStream } from './../base-stream';\nvar _UnicodeTrueTypeFont = /** @class */ (function () {\n    function _UnicodeTrueTypeFont(base64String, size) {\n        this._nameString = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        this._isEmbedFont = false;\n        this._cmapPrefix = '/CIDInit /ProcSet findresource begin\\n12 dict begin\\nbegincmap' + '\\r\\n' + '/CIDSystemInfo << /Registry (Adobe)/Ordering (UCS)/Supplement 0>> def\\n/CMapName ' + '/Adobe-Identity-UCS def\\n/CMapType 2 def\\n1 beginCodeSpacerange' + '\\r\\n';\n        this._cmapEndCodeSpaceRange = 'endCodeSpacerange' + '\\r\\n';\n        this._cmapBeginRange = 'beginbfrange' + '\\r\\n';\n        this._cmapEndRange = 'endbfrange' + '\\r\\n';\n        this._cmapSuffix = 'endbfrange\\nendcmap\\nCMapName currentdict ' + '/CMap defineresource pop\\nend end' + '\\r\\n';\n        if (base64String === null || typeof base64String === 'undefined') {\n            throw new Error('ArgumentNullException:base64String');\n        }\n        this._fontSize = size;\n        this._fontString = base64String;\n        this._Initialize();\n    }\n    _UnicodeTrueTypeFont.prototype._beginSave = function () {\n        this._descendantFontBeginSave();\n        this._cmapBeginSave();\n        this._fontDictionaryBeginSave();\n        this._fontProgramBeginSave();\n        if (this._fontDescriptor) {\n            this._fontDescriptor.update('FontFile2', this._fontProgram);\n            this._fontDescriptor._updated = true;\n            this._fontDescriptor._isFont = true;\n        }\n    };\n    _UnicodeTrueTypeFont.prototype._descendantFontBeginSave = function () {\n        if (this._usedChars !== null && typeof this._usedChars !== 'undefined' && this._usedChars._size() > 0) {\n            var width = this._getDescendantWidth(); // eslint-disable-line\n            if (width !== null) {\n                this._descendantFont.set('W', width);\n            }\n        }\n    };\n    _UnicodeTrueTypeFont.prototype._fontDictionaryBeginSave = function () {\n        if (this._usedChars !== null && typeof this._usedChars !== 'undefined' && this._usedChars._size() > 0) {\n            this._fontDictionary.update('ToUnicode', this._cmap);\n        }\n    };\n    _UnicodeTrueTypeFont.prototype._Initialize = function () {\n        var byteArray = _decode(this._fontString);\n        this._fontData = byteArray;\n        this._ttfReader = new _TrueTypeReader(this._fontData);\n        this._ttfMetrics = this._ttfReader._metrics;\n    };\n    _UnicodeTrueTypeFont.prototype._createInternals = function () {\n        this._fontDictionary = new _PdfDictionary();\n        this._descendantFont = new _PdfDictionary();\n        this._metrics = new _PdfFontMetrics();\n        this._ttfReader._createInternals();\n        this._usedChars = null;\n        var data = []; // eslint-disable-line\n        this._fontProgram = new _PdfStream(data, new _PdfDictionary());\n        this._cmap = new _PdfStream(data, new _PdfDictionary());\n        this._ttfMetrics = this._ttfReader._metrics;\n        this._initializeMetrics();\n        this._subsetName = this._getFontName();\n        this._createDescendantFont();\n        this._createFontDictionary();\n    };\n    _UnicodeTrueTypeFont.prototype._getInternals = function () {\n        return this._fontDictionary;\n    };\n    _UnicodeTrueTypeFont.prototype._initializeMetrics = function () {\n        var ttfMetrics = this._ttfReader._metrics;\n        this._metrics._ascent = ttfMetrics._macAscent;\n        this._metrics._descent = ttfMetrics._macDescent;\n        this._metrics._height = ttfMetrics._macAscent - ttfMetrics._macDescent + ttfMetrics._lineGap;\n        this._metrics._name = ttfMetrics._fontFamily;\n        this._metrics._postScriptName = ttfMetrics._postScriptName;\n        this._metrics._size = this._fontSize;\n        this._metrics._widthTable = new _StandardWidthTable(ttfMetrics._widthTable);\n        this._metrics._lineGap = ttfMetrics._lineGap;\n        this._metrics._subScriptSizeFactor = ttfMetrics._subScriptSizeFactor;\n        this._metrics._superscriptSizeFactor = ttfMetrics._superscriptSizeFactor;\n        this._metrics._isBold = ttfMetrics._isBold;\n    };\n    _UnicodeTrueTypeFont.prototype._getFontName = function () {\n        var builder = '';\n        for (var i = 0; i < 6; i++) {\n            var index = Math.floor(Math.random() * (25 - 0 + 1)) + 0;\n            builder += this._nameString[Number.parseInt(index.toString(), 10)];\n        }\n        builder += '+';\n        builder += this._ttfReader._metrics._postScriptName;\n        return builder.toString();\n    };\n    _UnicodeTrueTypeFont.prototype._createDescendantFont = function () {\n        this._descendantFont = new _PdfDictionary();\n        this._descendantFont._updated = true;\n        this._descendantFont.set('Type', new _PdfName('Font'));\n        this._descendantFont.set('Subtype', new _PdfName('CIDFontType2'));\n        this._descendantFont.set('BaseFont', new _PdfName(this._subsetName));\n        this._descendantFont.set('CIDToGIDMap', new _PdfName('Identity'));\n        this._descendantFont.set('DW', 1000);\n        this._fontDescriptor = this._createFontDescriptor();\n        this._descendantFont.set('FontDescriptor', this._fontDescriptor);\n        var systemInfo = this._createSystemInfo();\n        this._descendantFont.set('CIDSystemInfo', systemInfo);\n        this._descendantFont._isFont = true;\n    };\n    _UnicodeTrueTypeFont.prototype._createFontDescriptor = function () {\n        var descriptor = new _PdfDictionary();\n        var metrics = this._ttfReader._metrics;\n        descriptor.set('Type', new _PdfName('FontDescriptor'));\n        descriptor.set('FontName', new _PdfName(this._subsetName));\n        descriptor.set('Flags', this._getDescriptorFlags());\n        descriptor.set('FontBBox', this._getBoundBox());\n        descriptor.set('MissingWidth', metrics._widthTable[32]);\n        descriptor.set('StemV', metrics._stemV);\n        descriptor.set('ItalicAngle', metrics._italicAngle);\n        descriptor.set('CapHeight', metrics._capHeight);\n        descriptor.set('Ascent', metrics._winAscent);\n        descriptor.set('Descent', metrics._winDescent);\n        descriptor.set('Leading', metrics._leading);\n        descriptor.set('AvgWidth', metrics._widthTable[32]);\n        descriptor.set('MaxWidth', metrics._widthTable[32]);\n        descriptor.set('XHeight', 0);\n        descriptor.set('StemH', 0);\n        descriptor._updated = true;\n        return descriptor;\n    };\n    _UnicodeTrueTypeFont.prototype._generateFontProgram = function () {\n        var fontProgram = [];\n        this._usedChars = (this._usedChars === null || typeof this._usedChars === 'undefined') ? new Dictionary()\n            : this._usedChars;\n        this._ttfReader._setOffset(0);\n        fontProgram = this._ttfReader._readFontProgram(this._usedChars);\n        this._fontProgram._clearStream();\n        this._fontProgram._writeBytes(fontProgram);\n    };\n    _UnicodeTrueTypeFont.prototype._getBoundBox = function () {\n        var rect = this._ttfReader._metrics._fontBox;\n        var width = Math.abs(rect[2] - rect[0]);\n        var height = Math.abs(rect[1] - rect[3]);\n        var rectangle = [rect[0], rect[3], width, height];\n        return rectangle;\n    };\n    _UnicodeTrueTypeFont.prototype._cmapBeginSave = function () {\n        this._generateCmap();\n    };\n    _UnicodeTrueTypeFont.prototype._fontProgramBeginSave = function () {\n        this._generateFontProgram();\n    };\n    _UnicodeTrueTypeFont.prototype._toHexString = function (n, isCaseChange) {\n        var s = n.toString(16);\n        if (isCaseChange) {\n            s = s.toUpperCase();\n        }\n        return '<0000'.substring(0, 5 - s.length) + s + '>';\n    };\n    _UnicodeTrueTypeFont.prototype._generateCmap = function () {\n        if (this._usedChars !== null && typeof this._usedChars !== 'undefined' && this._usedChars._size() > 0) {\n            var glyphChars = this._ttfReader._getGlyphChars(this._usedChars);\n            if (glyphChars._size() > 0) {\n                var keys = glyphChars.keys().sort();\n                var first = keys[0];\n                var last = keys[keys.length - 1];\n                var middlePart = this._toHexString(first, false) + this._toHexString(last, false) + '\\r\\n';\n                var builder = '';\n                builder += this._cmapPrefix;\n                builder += middlePart;\n                builder += this._cmapEndCodeSpaceRange;\n                var nextRange = 0;\n                for (var i = 0; i < keys.length; i++) {\n                    if (nextRange === 0) {\n                        if (i !== 0) {\n                            builder += this._cmapEndRange;\n                        }\n                        nextRange = Math.min(100, keys.length - i);\n                        builder += nextRange;\n                        builder += ' ';\n                        builder += this._cmapBeginRange;\n                    }\n                    nextRange -= 1;\n                    var key = keys[Number.parseInt(i.toString(), 10)];\n                    builder += this._toHexString(key, true) + this._toHexString(key, true);\n                    builder += this._toHexString(glyphChars.getValue(key), true) + '\\n';\n                }\n                builder += this._cmapSuffix;\n                this._cmap._clearStream();\n                this._cmap._write(builder);\n            }\n        }\n    };\n    _UnicodeTrueTypeFont.prototype._createFontDictionary = function () {\n        this._fontDictionary._updated = true;\n        this._fontDictionary.set('Type', _PdfName.get('Font'));\n        this._fontDictionary.set('Subtype', _PdfName.get('Type0'));\n        this._fontDictionary.set('BaseFont', new _PdfName(this._subsetName));\n        this._fontDictionary.set('Encoding', _PdfName.get('Identity-H'));\n        this._fontDictionary.set('DescendantFonts', this._descendantFont);\n        this._fontDictionary._isFont = true;\n        this._fontDictionary._currentObj = this;\n    };\n    _UnicodeTrueTypeFont.prototype._createSystemInfo = function () {\n        var systemInfo = new _PdfDictionary();\n        systemInfo._updated = true;\n        systemInfo.set('Registry', 'Adobe');\n        systemInfo.set('Ordering', 'Identity');\n        systemInfo.set('Supplement', 0);\n        return systemInfo;\n    };\n    _UnicodeTrueTypeFont.prototype._getDescriptorFlags = function () {\n        var flags = 0;\n        var metrics = this._ttfReader._metrics;\n        if (metrics._isFixedPitch) {\n            flags |= _FontDescriptorFlag.fixedPitch;\n        }\n        if (metrics._isSymbol) {\n            flags |= _FontDescriptorFlag.symbolic;\n        }\n        else {\n            flags |= _FontDescriptorFlag.nonSymbolic;\n        }\n        if (metrics._isItalic) {\n            flags |= _FontDescriptorFlag.italic;\n        }\n        if (metrics._isBold) {\n            flags |= _FontDescriptorFlag.forceBold;\n        }\n        return flags;\n    };\n    _UnicodeTrueTypeFont.prototype._getCharacterWidth = function (charCode) {\n        var codeWidth = this._ttfReader._getCharacterWidth(charCode);\n        return codeWidth;\n    };\n    _UnicodeTrueTypeFont.prototype._setSymbols = function (text) {\n        if (text !== null && typeof text !== 'undefined') {\n            if (this._usedChars === null || typeof this._usedChars === 'undefined') {\n                this._usedChars = new Dictionary();\n            }\n            for (var i = 0; i < text.length; i++) {\n                var ch = text[Number.parseInt(i.toString(), 10)];\n                this._usedChars.setValue(ch, String.fromCharCode(0));\n            }\n        }\n    };\n    _UnicodeTrueTypeFont.prototype._getDescendantWidth = function () {\n        var array = new Array(); // eslint-disable-line\n        if (this._usedChars !== null && typeof this._usedChars !== 'undefined' && this._usedChars._size() > 0) {\n            var glyphInfo = [];\n            var keys = this._usedChars.keys();\n            for (var i = 0; i < keys.length; i++) {\n                var chLen = keys[Number.parseInt(i.toString(), 10)];\n                var glyph = this._ttfReader._getGlyph(chLen);\n                glyphInfo.push(glyph);\n            }\n            glyphInfo.sort(function (a, b) { return a._index - b._index; });\n            var firstGlyphIndex = 0;\n            var lastGlyphIndex = 0;\n            var firstGlyphIndexWasSet = false;\n            var widthDetails = new Array(); // eslint-disable-line\n            for (var i = 0; i < glyphInfo.length; i++) {\n                var glyph = glyphInfo[Number.parseInt(i.toString(), 10)];\n                if (!firstGlyphIndexWasSet) {\n                    firstGlyphIndexWasSet = true;\n                    firstGlyphIndex = glyph._index;\n                    lastGlyphIndex = glyph._index - 1;\n                }\n                if ((lastGlyphIndex + 1 !== glyph._index || (i + 1 === glyphInfo.length)) && glyphInfo.length > 1) {\n                    array.push(Number(firstGlyphIndex));\n                    if (i !== 0) {\n                        array.push(widthDetails);\n                    }\n                    firstGlyphIndex = glyph._index;\n                    widthDetails = new Array(); // eslint-disable-line\n                }\n                widthDetails.push(Number(glyph._width));\n                if ((i + 1) === glyphInfo.length) {\n                    array.push(Number(firstGlyphIndex));\n                    array.push(widthDetails);\n                }\n                lastGlyphIndex = glyph._index;\n            }\n        }\n        return array;\n    };\n    return _UnicodeTrueTypeFont;\n}());\nexport { _UnicodeTrueTypeFont };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}