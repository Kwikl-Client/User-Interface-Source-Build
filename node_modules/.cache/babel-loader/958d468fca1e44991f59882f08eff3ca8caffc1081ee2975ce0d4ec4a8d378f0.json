{"ast":null,"code":"import { _PdfDictionary, _PdfName, _PdfReference } from './../pdf-primitives';\nimport { PdfField, PdfTextBoxField, PdfButtonField, PdfCheckBoxField, PdfRadioButtonListField, PdfComboBoxField, PdfListBoxField, PdfSignatureField } from './field';\nimport { _getInheritableProperty, _getPageIndex } from './../utils';\nimport { PdfFormFieldsTabOrder, _FieldFlag, _SignatureFlag } from './../enumerator';\nimport { PdfPage } from './../pdf-page';\n/**\n * Represents a PDF form.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Access the form of the PDF document\n * let form: PdfForm = document.form;\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfForm = /** @class */function () {\n  /**\n   * Represents a loaded from the PDF document.\n   *\n   * @private\n   * @param {_PdfDictionary} dictionary Form dictionary.\n   * @param {_PdfCrossReference} crossReference Cross reference object.\n   */\n  function PdfForm(dictionary, crossReference) {\n    this._hasKids = false;\n    this._setAppearance = false;\n    this._exportEmptyFields = false;\n    this._fieldCollection = [];\n    this._signFlag = _SignatureFlag.none;\n    this._dictionary = dictionary;\n    this._crossReference = crossReference;\n    this._parsedFields = new Map();\n    this._fields = [];\n    this._createFields();\n  }\n  Object.defineProperty(PdfForm.prototype, \"count\", {\n    /**\n     * Gets the fields count (Read only).\n     *\n     * @returns {number} Fields count.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access loaded form\n     * let form: PdfForm = document.form;\n     * // Gets the fields count\n     * let count: number = form.count;\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._fields.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfForm.prototype, \"needAppearances\", {\n    /**\n     *  Gets a value indicating whether need appearances (Read only).\n     *\n     * @returns {boolean} Need appearances.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access loaded form\n     * let form: PdfForm = document.form;\n     * // Gets the boolean flag indicating need appearances\n     * let needAppearances: number = form.needAppearances;\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (this._dictionary.has('NeedAppearances')) {\n        this._needAppearances = this._dictionary.get('NeedAppearances');\n      }\n      return this._needAppearances;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfForm.prototype, \"exportEmptyFields\", {\n    /**\n     *  Gets a value indicating whether allow to export empty fields or not.\n     *\n     * @returns {boolean} Export empty fields.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access loaded form\n     * let form: PdfForm = document.form;\n     * // Gets a value indicating whether allow to export empty fields or not.\n     * let exportEmptyFields: boolean = form.exportEmptyFields;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._exportEmptyFields;\n    },\n    /**\n     *  Sets a value indicating whether allow to export empty fields or not.\n     *\n     * @param {boolean} value Export empty fields.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access loaded form\n     * let form: PdfForm = document.form;\n     * // Sets a value indicating whether allow to export empty fields or not.\n     * form.exportEmptyFields = false;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      this._exportEmptyFields = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfForm.prototype, \"_signatureFlag\", {\n    get: function () {\n      return this._signFlag;\n    },\n    set: function (value) {\n      if (value !== this._signFlag) {\n        this._signFlag = value;\n        this._dictionary.update('SigFlags', value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Gets the `PdfField` at the specified index.\n   *\n   * @param {number} index Field index.\n   * @returns {PdfField} Loaded PDF form field at the specified index.\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access the loaded form field\n   * let field: PdfField = document.form.fieldAt(0);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfForm.prototype.fieldAt = function (index) {\n    if (index < 0 || index >= this._fields.length) {\n      throw Error('Index out of range.');\n    }\n    var field;\n    if (this._parsedFields.has(index)) {\n      field = this._parsedFields.get(index);\n    } else {\n      var dictionary = void 0;\n      var ref = this._fields[index]; // eslint-disable-line\n      if (ref && ref instanceof _PdfReference) {\n        dictionary = this._crossReference._fetch(ref);\n      }\n      if (dictionary) {\n        var key = _getInheritableProperty(dictionary, 'FT', false, true, 'Parent');\n        var fieldFlags = 0;\n        var flag = _getInheritableProperty(dictionary, 'Ff', false, true, 'Parent');\n        if (typeof flag !== 'undefined') {\n          fieldFlags = flag;\n        }\n        if (key) {\n          switch (key.name.toLowerCase()) {\n            case 'tx':\n              field = PdfTextBoxField._load(this, dictionary, this._crossReference, ref);\n              break;\n            case 'btn':\n              if ((fieldFlags & _FieldFlag.pushButton) !== 0) {\n                field = PdfButtonField._load(this, dictionary, this._crossReference, ref);\n              } else if ((fieldFlags & _FieldFlag.radio) !== 0) {\n                field = PdfRadioButtonListField._load(this, dictionary, this._crossReference, ref);\n              } else {\n                field = PdfCheckBoxField._load(this, dictionary, this._crossReference, ref);\n              }\n              break;\n            case 'ch':\n              if ((fieldFlags & _FieldFlag.combo) !== 0) {\n                field = PdfComboBoxField._load(this, dictionary, this._crossReference, ref);\n              } else {\n                field = PdfListBoxField._load(this, dictionary, this._crossReference, ref);\n              }\n              break;\n            case 'sig':\n              field = PdfSignatureField._load(this, dictionary, this._crossReference, ref);\n              break;\n          }\n        }\n        this._parsedFields.set(index, field);\n        if (field && field instanceof PdfField) {\n          field._annotationIndex = index;\n        }\n      }\n    }\n    return field;\n  };\n  /**\n   * Add a new `PdfField`.\n   *\n   * @param {PdfField} field Field object to add.\n   * @returns {number} Field index.\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Add a new form field\n   * let index: number = document.form.add(field);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfForm.prototype.add = function (field) {\n    this._fields.push(field._ref);\n    this._dictionary.update('Fields', this._fields);\n    this._parsedFields.set(this._fields.length - 1, field);\n    field._form = this;\n    this._crossReference._allowCatalog = true;\n    this._crossReference._root._updated = true;\n    if (field._kidsCount > 0) {\n      for (var i = 0; i < field._kidsCount; i++) {\n        var item = field.itemAt(i);\n        var page = item._page;\n        page.annotations._annotations.push(item._ref);\n        page._pageDictionary.set('Annots', page.annotations._annotations);\n        page._pageDictionary._updated = true;\n      }\n    } else if (field._dictionary.has('Subtype') && field._dictionary.get('Subtype').name === 'Widget') {\n      var page = field._page;\n      page.annotations._annotations.push(field._ref);\n      field._page._pageDictionary.set('Annots', field.page.annotations._annotations);\n      field._page._pageDictionary._updated = true;\n    }\n    if (field instanceof PdfSignatureField) {\n      field._form._signatureFlag = _SignatureFlag.signatureExists | _SignatureFlag.appendOnly;\n    }\n    return this._fields.length - 1;\n  };\n  /**\n   * Remove the specified PDF form field.\n   *\n   * @param {PdfField} field Field object to remove.\n   * @returns {void} Nothing.\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access the loaded form field\n   * let field: PdfField = document.form.fieldAt(3);\n   * // Remove the form field\n   * document.form.removeField(field);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfForm.prototype.removeField = function (field) {\n    var index = this._fields.indexOf(field._ref);\n    if (index >= 0) {\n      this.removeFieldAt(index);\n    }\n  };\n  /**\n   * Remove the PDF form field from specified index.\n   *\n   * @param {number} index Field index to remove.\n   * @returns {void} Nothing.\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Remove the form field from the specified index\n   * document.form.removeFieldAt(3);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfForm.prototype.removeFieldAt = function (index) {\n    var field = this.fieldAt(index);\n    if (field) {\n      if (field._kidsCount > 0) {\n        for (var i = field._kidsCount - 1; i >= 0; i--) {\n          var item = field.itemAt(i);\n          var page = item._getPage();\n          if (page) {\n            page._removeAnnotation(item._ref);\n          }\n        }\n      } else if (field._dictionary.has('Subtype') && field._dictionary.get('Subtype').name === 'Widget') {\n        var page = field.page;\n        if (page) {\n          page._removeAnnotation(field._ref);\n        }\n      }\n      this._parsedFields.delete(index);\n    }\n    this._fields.splice(index, 1);\n    this._dictionary.set('Fields', this._fields);\n    this._dictionary._updated = true;\n  };\n  /**\n   * Sets the flag to indicate the new appearance creation\n   * If true, appearance will not be created. Default appearance has been considered.\n   * If false, new appearance stream has been created from field values and updated as normal appearance.\n   *\n   * @param {boolean} value Set default appearance.\n   * @returns {void} Nothing.\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Set boolean flag to create a new appearance stream for form fields.\n   * document.form.setDefaultAppearance(false);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfForm.prototype.setDefaultAppearance = function (value) {\n    this._setAppearance = !value;\n    this._needAppearances = value;\n    this._dictionary.update('NeedAppearances', value);\n  };\n  PdfForm.prototype.orderFormFields = function (tabOrder) {\n    var _this = this;\n    if (tabOrder === null || typeof tabOrder === 'undefined') {\n      this.orderFormFields(new Map());\n    } else {\n      var tab = void 0;\n      var document_1 = this._crossReference._document;\n      var value = void 0;\n      if (tabOrder && tabOrder instanceof Map) {\n        var setTabOrder = true;\n        if (tabOrder.size > 0) {\n          this._tabCollection = tabOrder;\n        } else {\n          setTabOrder = false;\n          this._tabCollection = tabOrder;\n        }\n        var fieldCollection = new Map();\n        this._fieldCollection = this._getFields();\n        if (this._fieldCollection && this._fieldCollection.length > 0) {\n          var page = this._fieldCollection[0].page;\n          if (page && document_1) {\n            for (var i = 0; i < this._fieldCollection.length; i++) {\n              var field = this._fieldCollection[Number.parseInt(i.toString(), 10)];\n              var index = _getPageIndex(document_1, field.page._pageDictionary);\n              if (fieldCollection.has(index)) {\n                value = fieldCollection.get(index);\n                value.push(field);\n              } else {\n                value = [];\n                value.push(field);\n                fieldCollection.set(index, value);\n              }\n              var page_1 = document_1.getPage(index);\n              if (!this._tabCollection.has(index)) {\n                this._tabCollection.set(index, page_1.tabOrder);\n              }\n              if (setTabOrder) {\n                page_1.tabOrder = this._tabCollection.get(index);\n              }\n            }\n            var fieldsCount_1 = 0;\n            fieldCollection.forEach(function (value, key) {\n              _this._tabOrder = _this._tabCollection.get(key);\n              var fields = value;\n              fields.sort(function (pdfField1, pdfField2) {\n                return _this._compareFields(pdfField1, pdfField2);\n              });\n              for (var j = 0; j < fields.length; j++) {\n                var fieldIndex = _this._fieldCollection.indexOf(fields[Number.parseInt(j.toString(), 10)]);\n                if (fieldIndex !== -1 && fieldIndex !== fieldsCount_1 + j) {\n                  var field = _this._fieldCollection[Number.parseInt(fieldIndex.toString(), 10)];\n                  _this._fieldCollection.splice(fieldIndex, 1);\n                  _this._fieldCollection.splice(fieldsCount_1 + j, 0, field);\n                }\n              }\n              fieldsCount_1 += value.length;\n            });\n          }\n        }\n      } else {\n        this._tabOrder = tabOrder;\n        tab = this._getOrder(this._tabOrder);\n        this._fieldCollection = this._getFields();\n        this._fieldCollection.sort(function (pdfField1, pdfField2) {\n          return _this._compareFields(pdfField1, pdfField2);\n        });\n      }\n      this._parsedFields.clear();\n      for (var i = 0; i < this._fieldCollection.length; i++) {\n        this._parsedFields.set(Number.parseInt(i.toString(), 10), this._fieldCollection[Number.parseInt(i.toString(), 10)]);\n        this._fields[Number.parseInt(i.toString(), 10)] = this._fieldCollection[Number.parseInt(i.toString(), 10)]._ref;\n        if (tab) {\n          this._fieldCollection[Number.parseInt(i.toString(), 10)].page._pageDictionary.update('Tabs', tab);\n        }\n      }\n      this._dictionary.update('Fields', this._fields);\n    }\n  };\n  PdfForm.prototype._createFields = function () {\n    var fields; // eslint-disable-line\n    if (this._dictionary.has('Fields')) {\n      fields = this._dictionary.get('Fields');\n    }\n    var count = 0;\n    var nodes = []; // eslint-disable-line\n    while (typeof fields !== 'undefined' && fields !== null) {\n      for (; count < fields.length; count++) {\n        var ref = fields[count]; // eslint-disable-line\n        var fieldDictionary = void 0;\n        if (ref && ref instanceof _PdfReference) {\n          fieldDictionary = this._crossReference._fetch(ref);\n        }\n        var fieldKids = void 0;\n        if (fieldDictionary && fieldDictionary.has('Kids')) {\n          fieldKids = fieldDictionary.get('Kids');\n          if (typeof fieldKids !== 'undefined' && fieldKids.length > 0) {\n            for (var i = 0; i < fieldKids.length; i++) {\n              var reference = fieldKids[Number.parseInt(i.toString(), 10)];\n              if (reference && reference instanceof _PdfReference) {\n                var kidsDict = this._crossReference._fetch(reference);\n                if (typeof kidsDict !== 'undefined' && !kidsDict.has('Parent')) {\n                  kidsDict.update('Parent', ref);\n                }\n              }\n            }\n          }\n        }\n        if (typeof fieldKids === 'undefined') {\n          if (typeof fieldDictionary !== 'undefined') {\n            if (this._fields.indexOf(ref) === -1) {\n              this._fields.push(ref);\n            }\n          }\n        } else {\n          var isNode = !fieldDictionary.has('FT') || this._isNode(fieldKids);\n          if (isNode) {\n            nodes.push({\n              fields: fields,\n              count: count\n            });\n            this._hasKids = true;\n            count = -1;\n            fields = fieldKids;\n          } else {\n            this._fields.push(ref);\n          }\n        }\n      }\n      if (nodes.length === 0) {\n        break;\n      }\n      var entry = nodes.pop(); // eslint-disable-line\n      fields = entry.fields;\n      count = entry.count + 1;\n    }\n  };\n  PdfForm.prototype._isNode = function (kids) {\n    var isNode = false;\n    if (typeof kids !== 'undefined' && kids.length > 0) {\n      var entry = kids[0]; // eslint-disable-line\n      var dictionary = void 0;\n      if (typeof entry !== 'undefined' && entry !== null) {\n        if (entry instanceof _PdfDictionary) {\n          dictionary = entry;\n        } else if (entry instanceof _PdfReference) {\n          dictionary = this._crossReference._fetch(entry);\n        }\n      }\n      if (typeof dictionary !== 'undefined' && dictionary.has('Subtype')) {\n        var subtype = dictionary.get('Subtype');\n        if (subtype && subtype.name !== 'Widget') {\n          isNode = true;\n        }\n      }\n    }\n    return isNode;\n  };\n  PdfForm.prototype._parseWidgetReferences = function () {\n    var _this = this;\n    if (typeof this._widgetReferences === 'undefined' && this.count > 0) {\n      this._widgetReferences = [];\n      this._fields.forEach(function (fieldReference) {\n        var dictionary = _this._crossReference._fetch(fieldReference);\n        if (dictionary) {\n          if (dictionary.has('Kids')) {\n            var fieldKids = dictionary.get('Kids');\n            if (fieldKids && fieldKids.length > 0) {\n              fieldKids.forEach(function (kidReference) {\n                var kidDictionary;\n                if (kidReference instanceof _PdfDictionary) {\n                  kidDictionary = kidReference;\n                } else if (kidReference instanceof _PdfReference) {\n                  kidDictionary = _this._crossReference._fetch(kidReference);\n                }\n                if (typeof kidDictionary !== 'undefined' && kidDictionary.has('Subtype')) {\n                  var subtype = kidDictionary.get('Subtype');\n                  if (subtype && subtype.name === 'Widget') {\n                    _this._widgetReferences.push(kidReference);\n                  }\n                }\n              });\n            }\n          } else {\n            _this._widgetReferences.push(fieldReference);\n          }\n        }\n      });\n    }\n    return this._widgetReferences;\n  };\n  PdfForm.prototype._doPostProcess = function (isFlatten) {\n    for (var i = this.count - 1; i >= 0; i--) {\n      var field = this.fieldAt(i);\n      if (field) {\n        field._doPostProcess(isFlatten || field.flatten);\n        if (!isFlatten && field.flatten) {\n          this.removeFieldAt(i);\n        }\n      }\n    }\n  };\n  PdfForm.prototype._getFieldIndex = function (name) {\n    var index = -1;\n    if (this.count > 0) {\n      if (!this._fieldNames) {\n        this._fieldNames = [];\n      }\n      if (!this._indexedFieldNames) {\n        this._indexedFieldNames = [];\n      }\n      if (!this._actualFieldNames) {\n        this._actualFieldNames = [];\n      }\n      if (!this._indexedActualFieldNames) {\n        this._indexedActualFieldNames = [];\n      }\n      for (var i = 0; i < this.count; i++) {\n        var field = this.fieldAt(i);\n        if (field) {\n          var fieldName = field.name;\n          if (fieldName) {\n            this._fieldNames.push(fieldName);\n            this._indexedFieldNames.push(fieldName.split('[')[0]);\n          }\n          var actualName = field.actualName;\n          if (actualName) {\n            this._actualFieldNames.push(actualName);\n            this._indexedActualFieldNames.push(actualName.split('[')[0]);\n          }\n        }\n      }\n      var nameIndex = this._fieldNames.indexOf(name);\n      if (nameIndex !== -1) {\n        index = nameIndex;\n      } else {\n        nameIndex = this._indexedFieldNames.indexOf(name);\n        if (nameIndex !== -1) {\n          index = nameIndex;\n        } else {\n          nameIndex = this._actualFieldNames.indexOf(name);\n          if (nameIndex !== -1) {\n            index = nameIndex;\n          } else {\n            nameIndex = this._indexedActualFieldNames.indexOf(name);\n            if (nameIndex !== -1) {\n              index = nameIndex;\n            }\n          }\n        }\n      }\n    }\n    return index;\n  };\n  PdfForm.prototype._getFields = function () {\n    var fields = [];\n    for (var i = 0; i < this._fields.length; i++) {\n      var field = this.fieldAt(i);\n      if (field && field instanceof PdfField) {\n        fields.push(field);\n      }\n    }\n    return fields;\n  };\n  PdfForm.prototype._getOrder = function (tabOrder) {\n    if (tabOrder !== PdfFormFieldsTabOrder.none) {\n      var tabs = '';\n      if (tabOrder === PdfFormFieldsTabOrder.row) {\n        tabs = 'R';\n      } else if (tabOrder === PdfFormFieldsTabOrder.column) {\n        tabs = 'C';\n      } else if (tabOrder === PdfFormFieldsTabOrder.structure) {\n        tabs = 'S';\n      }\n      return _PdfName.get(tabs);\n    }\n    return null;\n  };\n  PdfForm.prototype._compareFields = function (field1, field2) {\n    var result = 0;\n    var xdiff;\n    var index;\n    var page1 = field1.page;\n    var page2 = field2.page;\n    if (page1 && page1 instanceof PdfPage && page2 && page2 instanceof PdfPage) {\n      var page1Index = page1._pageIndex;\n      var page2Index = page2._pageIndex;\n      var rectangle1 = this._getRectangle(field1._dictionary);\n      var rectangle2 = this._getRectangle(field2._dictionary);\n      if (rectangle1 && rectangle1.length >= 2 && rectangle2 && rectangle2.length >= 2) {\n        var x1 = rectangle1[0];\n        var y1 = rectangle1[1];\n        var x2 = rectangle2[0];\n        var y2 = rectangle2[1];\n        if (typeof x1 === 'number' && typeof x2 === 'number' && typeof y1 === 'number' && typeof y2 === 'number') {\n          index = page1Index - page2Index;\n          if (this._tabOrder === PdfFormFieldsTabOrder.row) {\n            xdiff = this._compare(y2, y1);\n            if (index !== 0) {\n              result = index;\n            } else if (xdiff !== 0) {\n              result = xdiff;\n            } else {\n              result = this._compare(x1, x2);\n            }\n          } else if (this._tabOrder === PdfFormFieldsTabOrder.column) {\n            xdiff = this._compare(x1, x2);\n            if (index !== 0) {\n              result = index;\n            } else if (xdiff !== 0) {\n              result = xdiff;\n            } else {\n              result = this._compare(y2, y1);\n            }\n          } else if (this._tabOrder === PdfFormFieldsTabOrder.manual || this._tabOrder === PdfFormFieldsTabOrder.none || this._tabOrder === PdfFormFieldsTabOrder.structure) {\n            if (field1 instanceof PdfField && field2 instanceof PdfField) {\n              var field1Index = field1.tabIndex;\n              var field2Index = field2.tabIndex;\n              xdiff = this._compare(field1Index, field2Index);\n              if (index !== 0) {\n                result = index;\n              } else {\n                result = xdiff;\n              }\n            }\n          }\n        }\n      }\n    }\n    return result;\n  };\n  PdfForm.prototype._getRectangle = function (dictionary) {\n    var _this = this;\n    if (dictionary.has('Rect')) {\n      var rect = dictionary.get('Rect');\n      if (rect) {\n        return rect;\n      }\n    } else {\n      if (dictionary.has('Kids')) {\n        var kidsArray = dictionary.get('Kids');\n        if (kidsArray) {\n          if (kidsArray.length > 1) {\n            kidsArray.sort(function (x, y) {\n              return _this._compareKidsElement(x, y);\n            });\n          }\n          var dictionary_1 = this._crossReference._fetch(kidsArray[0]);\n          return this._getRectangle(dictionary_1);\n        }\n      }\n    }\n    return null;\n  };\n  PdfForm.prototype._compare = function (x, y) {\n    if (x > y) {\n      return 1;\n    } else if (x < y) {\n      return -1;\n    } else {\n      return 0;\n    }\n  };\n  PdfForm.prototype._compareKidsElement = function (x, y) {\n    var xDictionary = this._crossReference._fetch(x);\n    var yDictionary = this._crossReference._fetch(y);\n    var xRect = this._getRectangle(xDictionary);\n    var yRect = this._getRectangle(yDictionary);\n    if (xRect && xRect.length >= 2 && yRect && yRect.length >= 2) {\n      var x1 = xRect[0];\n      var y1 = xRect[1];\n      var x2 = yRect[0];\n      var y2 = yRect[1];\n      if (typeof x1 === 'number' && typeof x2 === 'number' && typeof y1 === 'number' && typeof y2 === 'number') {\n        var result = 0;\n        var xdiff = void 0;\n        if (this._tabOrder === PdfFormFieldsTabOrder.row) {\n          xdiff = this._compare(y2, y1);\n          if (xdiff !== 0) {\n            result = xdiff;\n          } else {\n            result = this._compare(x1, x2);\n          }\n        } else if (this._tabOrder === PdfFormFieldsTabOrder.column) {\n          xdiff = this._compare(x1, x2);\n          if (xdiff !== 0) {\n            result = xdiff;\n          } else {\n            result = this._compare(y2, y1);\n          }\n        }\n        return result;\n      }\n    }\n    return null;\n  };\n  PdfForm.prototype._clear = function () {\n    this._fields = [];\n    this._parsedFields = new Map();\n  };\n  return PdfForm;\n}();\nexport { PdfForm };","map":{"version":3,"names":["_PdfDictionary","_PdfName","_PdfReference","PdfField","PdfTextBoxField","PdfButtonField","PdfCheckBoxField","PdfRadioButtonListField","PdfComboBoxField","PdfListBoxField","PdfSignatureField","_getInheritableProperty","_getPageIndex","PdfFormFieldsTabOrder","_FieldFlag","_SignatureFlag","PdfPage","PdfForm","dictionary","crossReference","_hasKids","_setAppearance","_exportEmptyFields","_fieldCollection","_signFlag","none","_dictionary","_crossReference","_parsedFields","Map","_fields","_createFields","Object","defineProperty","prototype","get","length","enumerable","configurable","has","_needAppearances","set","value","update","fieldAt","index","Error","field","ref","_fetch","key","fieldFlags","flag","name","toLowerCase","_load","pushButton","radio","combo","_annotationIndex","add","push","_ref","_form","_allowCatalog","_root","_updated","_kidsCount","i","item","itemAt","page","_page","annotations","_annotations","_pageDictionary","_signatureFlag","signatureExists","appendOnly","removeField","indexOf","removeFieldAt","_getPage","_removeAnnotation","delete","splice","setDefaultAppearance","orderFormFields","tabOrder","_this","tab","document_1","_document","setTabOrder","size","_tabCollection","fieldCollection","_getFields","Number","parseInt","toString","page_1","getPage","fieldsCount_1","forEach","_tabOrder","fields","sort","pdfField1","pdfField2","_compareFields","j","fieldIndex","_getOrder","clear","count","nodes","fieldDictionary","fieldKids","reference","kidsDict","isNode","_isNode","entry","pop","kids","subtype","_parseWidgetReferences","_widgetReferences","fieldReference","kidReference","kidDictionary","_doPostProcess","isFlatten","flatten","_getFieldIndex","_fieldNames","_indexedFieldNames","_actualFieldNames","_indexedActualFieldNames","fieldName","split","actualName","nameIndex","tabs","row","column","structure","field1","field2","result","xdiff","page1","page2","page1Index","_pageIndex","page2Index","rectangle1","_getRectangle","rectangle2","x1","y1","x2","y2","_compare","manual","field1Index","tabIndex","field2Index","rect","kidsArray","x","y","_compareKidsElement","dictionary_1","xDictionary","yDictionary","xRect","yRect","_clear"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-pdf/src/pdf/core/form/form.js"],"sourcesContent":["import { _PdfDictionary, _PdfName, _PdfReference } from './../pdf-primitives';\nimport { PdfField, PdfTextBoxField, PdfButtonField, PdfCheckBoxField, PdfRadioButtonListField, PdfComboBoxField, PdfListBoxField, PdfSignatureField } from './field';\nimport { _getInheritableProperty, _getPageIndex } from './../utils';\nimport { PdfFormFieldsTabOrder, _FieldFlag, _SignatureFlag } from './../enumerator';\nimport { PdfPage } from './../pdf-page';\n/**\n * Represents a PDF form.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Access the form of the PDF document\n * let form: PdfForm = document.form;\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfForm = /** @class */ (function () {\n    /**\n     * Represents a loaded from the PDF document.\n     *\n     * @private\n     * @param {_PdfDictionary} dictionary Form dictionary.\n     * @param {_PdfCrossReference} crossReference Cross reference object.\n     */\n    function PdfForm(dictionary, crossReference) {\n        this._hasKids = false;\n        this._setAppearance = false;\n        this._exportEmptyFields = false;\n        this._fieldCollection = [];\n        this._signFlag = _SignatureFlag.none;\n        this._dictionary = dictionary;\n        this._crossReference = crossReference;\n        this._parsedFields = new Map();\n        this._fields = [];\n        this._createFields();\n    }\n    Object.defineProperty(PdfForm.prototype, \"count\", {\n        /**\n         * Gets the fields count (Read only).\n         *\n         * @returns {number} Fields count.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access loaded form\n         * let form: PdfForm = document.form;\n         * // Gets the fields count\n         * let count: number = form.count;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._fields.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfForm.prototype, \"needAppearances\", {\n        /**\n         *  Gets a value indicating whether need appearances (Read only).\n         *\n         * @returns {boolean} Need appearances.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access loaded form\n         * let form: PdfForm = document.form;\n         * // Gets the boolean flag indicating need appearances\n         * let needAppearances: number = form.needAppearances;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (this._dictionary.has('NeedAppearances')) {\n                this._needAppearances = this._dictionary.get('NeedAppearances');\n            }\n            return this._needAppearances;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfForm.prototype, \"exportEmptyFields\", {\n        /**\n         *  Gets a value indicating whether allow to export empty fields or not.\n         *\n         * @returns {boolean} Export empty fields.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access loaded form\n         * let form: PdfForm = document.form;\n         * // Gets a value indicating whether allow to export empty fields or not.\n         * let exportEmptyFields: boolean = form.exportEmptyFields;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._exportEmptyFields;\n        },\n        /**\n         *  Sets a value indicating whether allow to export empty fields or not.\n         *\n         * @param {boolean} value Export empty fields.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access loaded form\n         * let form: PdfForm = document.form;\n         * // Sets a value indicating whether allow to export empty fields or not.\n         * form.exportEmptyFields = false;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._exportEmptyFields = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfForm.prototype, \"_signatureFlag\", {\n        get: function () {\n            return this._signFlag;\n        },\n        set: function (value) {\n            if (value !== this._signFlag) {\n                this._signFlag = value;\n                this._dictionary.update('SigFlags', value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the `PdfField` at the specified index.\n     *\n     * @param {number} index Field index.\n     * @returns {PdfField} Loaded PDF form field at the specified index.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the loaded form field\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfForm.prototype.fieldAt = function (index) {\n        if (index < 0 || index >= this._fields.length) {\n            throw Error('Index out of range.');\n        }\n        var field;\n        if (this._parsedFields.has(index)) {\n            field = this._parsedFields.get(index);\n        }\n        else {\n            var dictionary = void 0;\n            var ref = this._fields[index]; // eslint-disable-line\n            if (ref && ref instanceof _PdfReference) {\n                dictionary = this._crossReference._fetch(ref);\n            }\n            if (dictionary) {\n                var key = _getInheritableProperty(dictionary, 'FT', false, true, 'Parent');\n                var fieldFlags = 0;\n                var flag = _getInheritableProperty(dictionary, 'Ff', false, true, 'Parent');\n                if (typeof flag !== 'undefined') {\n                    fieldFlags = flag;\n                }\n                if (key) {\n                    switch (key.name.toLowerCase()) {\n                        case 'tx':\n                            field = PdfTextBoxField._load(this, dictionary, this._crossReference, ref);\n                            break;\n                        case 'btn':\n                            if ((fieldFlags & _FieldFlag.pushButton) !== 0) {\n                                field = PdfButtonField._load(this, dictionary, this._crossReference, ref);\n                            }\n                            else if ((fieldFlags & _FieldFlag.radio) !== 0) {\n                                field = PdfRadioButtonListField._load(this, dictionary, this._crossReference, ref);\n                            }\n                            else {\n                                field = PdfCheckBoxField._load(this, dictionary, this._crossReference, ref);\n                            }\n                            break;\n                        case 'ch':\n                            if ((fieldFlags & _FieldFlag.combo) !== 0) {\n                                field = PdfComboBoxField._load(this, dictionary, this._crossReference, ref);\n                            }\n                            else {\n                                field = PdfListBoxField._load(this, dictionary, this._crossReference, ref);\n                            }\n                            break;\n                        case 'sig':\n                            field = PdfSignatureField._load(this, dictionary, this._crossReference, ref);\n                            break;\n                    }\n                }\n                this._parsedFields.set(index, field);\n                if (field && field instanceof PdfField) {\n                    field._annotationIndex = index;\n                }\n            }\n        }\n        return field;\n    };\n    /**\n     * Add a new `PdfField`.\n     *\n     * @param {PdfField} field Field object to add.\n     * @returns {number} Field index.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Add a new form field\n     * let index: number = document.form.add(field);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfForm.prototype.add = function (field) {\n        this._fields.push(field._ref);\n        this._dictionary.update('Fields', this._fields);\n        this._parsedFields.set(this._fields.length - 1, field);\n        field._form = this;\n        this._crossReference._allowCatalog = true;\n        this._crossReference._root._updated = true;\n        if (field._kidsCount > 0) {\n            for (var i = 0; i < field._kidsCount; i++) {\n                var item = field.itemAt(i);\n                var page = item._page;\n                page.annotations._annotations.push(item._ref);\n                page._pageDictionary.set('Annots', page.annotations._annotations);\n                page._pageDictionary._updated = true;\n            }\n        }\n        else if (field._dictionary.has('Subtype') && field._dictionary.get('Subtype').name === 'Widget') {\n            var page = field._page;\n            page.annotations._annotations.push(field._ref);\n            field._page._pageDictionary.set('Annots', field.page.annotations._annotations);\n            field._page._pageDictionary._updated = true;\n        }\n        if (field instanceof PdfSignatureField) {\n            field._form._signatureFlag = _SignatureFlag.signatureExists | _SignatureFlag.appendOnly;\n        }\n        return (this._fields.length - 1);\n    };\n    /**\n     * Remove the specified PDF form field.\n     *\n     * @param {PdfField} field Field object to remove.\n     * @returns {void} Nothing.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the loaded form field\n     * let field: PdfField = document.form.fieldAt(3);\n     * // Remove the form field\n     * document.form.removeField(field);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfForm.prototype.removeField = function (field) {\n        var index = this._fields.indexOf(field._ref);\n        if (index >= 0) {\n            this.removeFieldAt(index);\n        }\n    };\n    /**\n     * Remove the PDF form field from specified index.\n     *\n     * @param {number} index Field index to remove.\n     * @returns {void} Nothing.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Remove the form field from the specified index\n     * document.form.removeFieldAt(3);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfForm.prototype.removeFieldAt = function (index) {\n        var field = this.fieldAt(index);\n        if (field) {\n            if (field._kidsCount > 0) {\n                for (var i = field._kidsCount - 1; i >= 0; i--) {\n                    var item = field.itemAt(i);\n                    var page = item._getPage();\n                    if (page) {\n                        page._removeAnnotation(item._ref);\n                    }\n                }\n            }\n            else if (field._dictionary.has('Subtype') && field._dictionary.get('Subtype').name === 'Widget') {\n                var page = field.page;\n                if (page) {\n                    page._removeAnnotation(field._ref);\n                }\n            }\n            this._parsedFields.delete(index);\n        }\n        this._fields.splice(index, 1);\n        this._dictionary.set('Fields', this._fields);\n        this._dictionary._updated = true;\n    };\n    /**\n     * Sets the flag to indicate the new appearance creation\n     * If true, appearance will not be created. Default appearance has been considered.\n     * If false, new appearance stream has been created from field values and updated as normal appearance.\n     *\n     * @param {boolean} value Set default appearance.\n     * @returns {void} Nothing.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Set boolean flag to create a new appearance stream for form fields.\n     * document.form.setDefaultAppearance(false);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfForm.prototype.setDefaultAppearance = function (value) {\n        this._setAppearance = !value;\n        this._needAppearances = value;\n        this._dictionary.update('NeedAppearances', value);\n    };\n    PdfForm.prototype.orderFormFields = function (tabOrder) {\n        var _this = this;\n        if (tabOrder === null || typeof tabOrder === 'undefined') {\n            this.orderFormFields(new Map());\n        }\n        else {\n            var tab = void 0;\n            var document_1 = this._crossReference._document;\n            var value = void 0;\n            if (tabOrder && tabOrder instanceof Map) {\n                var setTabOrder = true;\n                if (tabOrder.size > 0) {\n                    this._tabCollection = tabOrder;\n                }\n                else {\n                    setTabOrder = false;\n                    this._tabCollection = tabOrder;\n                }\n                var fieldCollection = new Map();\n                this._fieldCollection = this._getFields();\n                if (this._fieldCollection && this._fieldCollection.length > 0) {\n                    var page = this._fieldCollection[0].page;\n                    if (page && document_1) {\n                        for (var i = 0; i < this._fieldCollection.length; i++) {\n                            var field = this._fieldCollection[Number.parseInt(i.toString(), 10)];\n                            var index = _getPageIndex(document_1, field.page._pageDictionary);\n                            if (fieldCollection.has(index)) {\n                                value = fieldCollection.get(index);\n                                value.push(field);\n                            }\n                            else {\n                                value = [];\n                                value.push(field);\n                                fieldCollection.set(index, value);\n                            }\n                            var page_1 = document_1.getPage(index);\n                            if (!this._tabCollection.has(index)) {\n                                this._tabCollection.set(index, page_1.tabOrder);\n                            }\n                            if (setTabOrder) {\n                                page_1.tabOrder = this._tabCollection.get(index);\n                            }\n                        }\n                        var fieldsCount_1 = 0;\n                        fieldCollection.forEach(function (value, key) {\n                            _this._tabOrder = _this._tabCollection.get(key);\n                            var fields = value;\n                            fields.sort(function (pdfField1, pdfField2) {\n                                return _this._compareFields(pdfField1, pdfField2);\n                            });\n                            for (var j = 0; j < fields.length; j++) {\n                                var fieldIndex = _this._fieldCollection.indexOf(fields[Number.parseInt(j.toString(), 10)]);\n                                if (fieldIndex !== -1 && fieldIndex !== fieldsCount_1 + j) {\n                                    var field = _this._fieldCollection[Number.parseInt(fieldIndex.toString(), 10)];\n                                    _this._fieldCollection.splice(fieldIndex, 1);\n                                    _this._fieldCollection.splice(fieldsCount_1 + j, 0, field);\n                                }\n                            }\n                            fieldsCount_1 += value.length;\n                        });\n                    }\n                }\n            }\n            else {\n                this._tabOrder = tabOrder;\n                tab = this._getOrder(this._tabOrder);\n                this._fieldCollection = this._getFields();\n                this._fieldCollection.sort(function (pdfField1, pdfField2) {\n                    return _this._compareFields(pdfField1, pdfField2);\n                });\n            }\n            this._parsedFields.clear();\n            for (var i = 0; i < this._fieldCollection.length; i++) {\n                this._parsedFields.set(Number.parseInt(i.toString(), 10), this._fieldCollection[Number.parseInt(i.toString(), 10)]);\n                this._fields[Number.parseInt(i.toString(), 10)] = this._fieldCollection[Number.parseInt(i.toString(), 10)]._ref;\n                if (tab) {\n                    this._fieldCollection[Number.parseInt(i.toString(), 10)].page._pageDictionary.update('Tabs', tab);\n                }\n            }\n            this._dictionary.update('Fields', this._fields);\n        }\n    };\n    PdfForm.prototype._createFields = function () {\n        var fields; // eslint-disable-line\n        if (this._dictionary.has('Fields')) {\n            fields = this._dictionary.get('Fields');\n        }\n        var count = 0;\n        var nodes = []; // eslint-disable-line\n        while (typeof fields !== 'undefined' && fields !== null) {\n            for (; count < fields.length; count++) {\n                var ref = fields[count]; // eslint-disable-line\n                var fieldDictionary = void 0;\n                if (ref && ref instanceof _PdfReference) {\n                    fieldDictionary = this._crossReference._fetch(ref);\n                }\n                var fieldKids = void 0;\n                if (fieldDictionary && fieldDictionary.has('Kids')) {\n                    fieldKids = fieldDictionary.get('Kids');\n                    if (typeof fieldKids !== 'undefined' && fieldKids.length > 0) {\n                        for (var i = 0; i < fieldKids.length; i++) {\n                            var reference = fieldKids[Number.parseInt(i.toString(), 10)];\n                            if (reference && reference instanceof _PdfReference) {\n                                var kidsDict = this._crossReference._fetch(reference);\n                                if (typeof kidsDict !== 'undefined' && !kidsDict.has('Parent')) {\n                                    kidsDict.update('Parent', ref);\n                                }\n                            }\n                        }\n                    }\n                }\n                if (typeof fieldKids === 'undefined') {\n                    if (typeof fieldDictionary !== 'undefined') {\n                        if (this._fields.indexOf(ref) === -1) {\n                            this._fields.push(ref);\n                        }\n                    }\n                }\n                else {\n                    var isNode = (!fieldDictionary.has('FT')) || this._isNode(fieldKids);\n                    if (isNode) {\n                        nodes.push({ fields: fields, count: count });\n                        this._hasKids = true;\n                        count = -1;\n                        fields = fieldKids;\n                    }\n                    else {\n                        this._fields.push(ref);\n                    }\n                }\n            }\n            if (nodes.length === 0) {\n                break;\n            }\n            var entry = nodes.pop(); // eslint-disable-line\n            fields = entry.fields;\n            count = entry.count + 1;\n        }\n    };\n    PdfForm.prototype._isNode = function (kids) {\n        var isNode = false;\n        if (typeof kids !== 'undefined' && kids.length > 0) {\n            var entry = kids[0]; // eslint-disable-line\n            var dictionary = void 0;\n            if (typeof entry !== 'undefined' && entry !== null) {\n                if (entry instanceof _PdfDictionary) {\n                    dictionary = entry;\n                }\n                else if (entry instanceof _PdfReference) {\n                    dictionary = this._crossReference._fetch(entry);\n                }\n            }\n            if (typeof dictionary !== 'undefined' && dictionary.has('Subtype')) {\n                var subtype = dictionary.get('Subtype');\n                if (subtype && subtype.name !== 'Widget') {\n                    isNode = true;\n                }\n            }\n        }\n        return isNode;\n    };\n    PdfForm.prototype._parseWidgetReferences = function () {\n        var _this = this;\n        if (typeof this._widgetReferences === 'undefined' && this.count > 0) {\n            this._widgetReferences = [];\n            this._fields.forEach(function (fieldReference) {\n                var dictionary = _this._crossReference._fetch(fieldReference);\n                if (dictionary) {\n                    if (dictionary.has('Kids')) {\n                        var fieldKids = dictionary.get('Kids');\n                        if (fieldKids && fieldKids.length > 0) {\n                            fieldKids.forEach(function (kidReference) {\n                                var kidDictionary;\n                                if (kidReference instanceof _PdfDictionary) {\n                                    kidDictionary = kidReference;\n                                }\n                                else if (kidReference instanceof _PdfReference) {\n                                    kidDictionary = _this._crossReference._fetch(kidReference);\n                                }\n                                if (typeof kidDictionary !== 'undefined' && kidDictionary.has('Subtype')) {\n                                    var subtype = kidDictionary.get('Subtype');\n                                    if (subtype && subtype.name === 'Widget') {\n                                        _this._widgetReferences.push(kidReference);\n                                    }\n                                }\n                            });\n                        }\n                    }\n                    else {\n                        _this._widgetReferences.push(fieldReference);\n                    }\n                }\n            });\n        }\n        return this._widgetReferences;\n    };\n    PdfForm.prototype._doPostProcess = function (isFlatten) {\n        for (var i = this.count - 1; i >= 0; i--) {\n            var field = this.fieldAt(i);\n            if (field) {\n                field._doPostProcess(isFlatten || field.flatten);\n                if (!isFlatten && field.flatten) {\n                    this.removeFieldAt(i);\n                }\n            }\n        }\n    };\n    PdfForm.prototype._getFieldIndex = function (name) {\n        var index = -1;\n        if (this.count > 0) {\n            if (!this._fieldNames) {\n                this._fieldNames = [];\n            }\n            if (!this._indexedFieldNames) {\n                this._indexedFieldNames = [];\n            }\n            if (!this._actualFieldNames) {\n                this._actualFieldNames = [];\n            }\n            if (!this._indexedActualFieldNames) {\n                this._indexedActualFieldNames = [];\n            }\n            for (var i = 0; i < this.count; i++) {\n                var field = this.fieldAt(i);\n                if (field) {\n                    var fieldName = field.name;\n                    if (fieldName) {\n                        this._fieldNames.push(fieldName);\n                        this._indexedFieldNames.push(fieldName.split('[')[0]);\n                    }\n                    var actualName = field.actualName;\n                    if (actualName) {\n                        this._actualFieldNames.push(actualName);\n                        this._indexedActualFieldNames.push(actualName.split('[')[0]);\n                    }\n                }\n            }\n            var nameIndex = this._fieldNames.indexOf(name);\n            if (nameIndex !== -1) {\n                index = nameIndex;\n            }\n            else {\n                nameIndex = this._indexedFieldNames.indexOf(name);\n                if (nameIndex !== -1) {\n                    index = nameIndex;\n                }\n                else {\n                    nameIndex = this._actualFieldNames.indexOf(name);\n                    if (nameIndex !== -1) {\n                        index = nameIndex;\n                    }\n                    else {\n                        nameIndex = this._indexedActualFieldNames.indexOf(name);\n                        if (nameIndex !== -1) {\n                            index = nameIndex;\n                        }\n                    }\n                }\n            }\n        }\n        return index;\n    };\n    PdfForm.prototype._getFields = function () {\n        var fields = [];\n        for (var i = 0; i < this._fields.length; i++) {\n            var field = this.fieldAt(i);\n            if (field && field instanceof PdfField) {\n                fields.push(field);\n            }\n        }\n        return fields;\n    };\n    PdfForm.prototype._getOrder = function (tabOrder) {\n        if (tabOrder !== PdfFormFieldsTabOrder.none) {\n            var tabs = '';\n            if (tabOrder === PdfFormFieldsTabOrder.row) {\n                tabs = 'R';\n            }\n            else if (tabOrder === PdfFormFieldsTabOrder.column) {\n                tabs = 'C';\n            }\n            else if (tabOrder === PdfFormFieldsTabOrder.structure) {\n                tabs = 'S';\n            }\n            return _PdfName.get(tabs);\n        }\n        return null;\n    };\n    PdfForm.prototype._compareFields = function (field1, field2) {\n        var result = 0;\n        var xdiff;\n        var index;\n        var page1 = field1.page;\n        var page2 = field2.page;\n        if (page1 && page1 instanceof PdfPage && page2 && page2 instanceof PdfPage) {\n            var page1Index = page1._pageIndex;\n            var page2Index = page2._pageIndex;\n            var rectangle1 = this._getRectangle(field1._dictionary);\n            var rectangle2 = this._getRectangle(field2._dictionary);\n            if (rectangle1 && rectangle1.length >= 2 && rectangle2 && rectangle2.length >= 2) {\n                var x1 = rectangle1[0];\n                var y1 = rectangle1[1];\n                var x2 = rectangle2[0];\n                var y2 = rectangle2[1];\n                if (typeof x1 === 'number' && typeof x2 === 'number' &&\n                    typeof y1 === 'number' && typeof y2 === 'number') {\n                    index = page1Index - page2Index;\n                    if (this._tabOrder === PdfFormFieldsTabOrder.row) {\n                        xdiff = this._compare(y2, y1);\n                        if (index !== 0) {\n                            result = index;\n                        }\n                        else if (xdiff !== 0) {\n                            result = xdiff;\n                        }\n                        else {\n                            result = this._compare(x1, x2);\n                        }\n                    }\n                    else if (this._tabOrder === PdfFormFieldsTabOrder.column) {\n                        xdiff = this._compare(x1, x2);\n                        if (index !== 0) {\n                            result = index;\n                        }\n                        else if (xdiff !== 0) {\n                            result = xdiff;\n                        }\n                        else {\n                            result = this._compare(y2, y1);\n                        }\n                    }\n                    else if (this._tabOrder === PdfFormFieldsTabOrder.manual ||\n                        this._tabOrder === PdfFormFieldsTabOrder.none || this._tabOrder === PdfFormFieldsTabOrder.structure) {\n                        if (field1 instanceof PdfField && field2 instanceof PdfField) {\n                            var field1Index = field1.tabIndex;\n                            var field2Index = field2.tabIndex;\n                            xdiff = this._compare(field1Index, field2Index);\n                            if (index !== 0) {\n                                result = index;\n                            }\n                            else {\n                                result = xdiff;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    };\n    PdfForm.prototype._getRectangle = function (dictionary) {\n        var _this = this;\n        if (dictionary.has('Rect')) {\n            var rect = dictionary.get('Rect');\n            if (rect) {\n                return rect;\n            }\n        }\n        else {\n            if (dictionary.has('Kids')) {\n                var kidsArray = dictionary.get('Kids');\n                if (kidsArray) {\n                    if (kidsArray.length > 1) {\n                        kidsArray.sort(function (x, y) {\n                            return _this._compareKidsElement(x, y);\n                        });\n                    }\n                    var dictionary_1 = this._crossReference._fetch(kidsArray[0]);\n                    return this._getRectangle(dictionary_1);\n                }\n            }\n        }\n        return null;\n    };\n    PdfForm.prototype._compare = function (x, y) {\n        if (x > y) {\n            return 1;\n        }\n        else if (x < y) {\n            return -1;\n        }\n        else {\n            return 0;\n        }\n    };\n    PdfForm.prototype._compareKidsElement = function (x, y) {\n        var xDictionary = this._crossReference._fetch(x);\n        var yDictionary = this._crossReference._fetch(y);\n        var xRect = this._getRectangle(xDictionary);\n        var yRect = this._getRectangle(yDictionary);\n        if (xRect && xRect.length >= 2 && yRect && yRect.length >= 2) {\n            var x1 = xRect[0];\n            var y1 = xRect[1];\n            var x2 = yRect[0];\n            var y2 = yRect[1];\n            if (typeof x1 === 'number' && typeof x2 === 'number' &&\n                typeof y1 === 'number' && typeof y2 === 'number') {\n                var result = 0;\n                var xdiff = void 0;\n                if (this._tabOrder === PdfFormFieldsTabOrder.row) {\n                    xdiff = this._compare(y2, y1);\n                    if (xdiff !== 0) {\n                        result = xdiff;\n                    }\n                    else {\n                        result = this._compare(x1, x2);\n                    }\n                }\n                else if (this._tabOrder === PdfFormFieldsTabOrder.column) {\n                    xdiff = this._compare(x1, x2);\n                    if (xdiff !== 0) {\n                        result = xdiff;\n                    }\n                    else {\n                        result = this._compare(y2, y1);\n                    }\n                }\n                return result;\n            }\n        }\n        return null;\n    };\n    PdfForm.prototype._clear = function () {\n        this._fields = [];\n        this._parsedFields = new Map();\n    };\n    return PdfForm;\n}());\nexport { PdfForm };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}