{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { _PdfDictionary, _PdfReference, _PdfName } from './../pdf-primitives';\nimport { PdfRadioButtonListItem, PdfStateItem, PdfWidgetAnnotation, PdfListFieldItem, _PaintParameter, PdfInteractiveBorder } from './../annotations/annotation';\nimport { _getItemValue, _checkField, _removeReferences, _removeDuplicateReference, _updateVisibility, _styleToString, _getStateTemplate, _findPage, _getInheritableProperty, _getNewGuidString, _calculateBounds, _parseColor, _mapHighlightMode, _reverseMapHighlightMode, _mapBorderStyle, _getUpdatedBounds, _setMatrix, _obtainFontDetails } from './../utils';\nimport { _PdfCheckFieldState, PdfFormFieldVisibility, _FieldFlag, PdfAnnotationFlag, PdfTextAlignment, PdfHighlightMode, PdfBorderStyle, PdfRotationAngle, PdfCheckBoxStyle, PdfFormFieldsTabOrder, PdfFillMode } from './../enumerator';\nimport { PdfTemplate } from './../graphics/pdf-template';\nimport { PdfStringFormat, PdfVerticalAlignment } from './../fonts/pdf-string-format';\nimport { _TextRenderingMode, PdfBrush, PdfPen } from './../graphics/pdf-graphics';\nimport { PdfFontFamily, PdfStandardFont, PdfFont, PdfFontStyle, PdfTrueTypeFont } from './../fonts/pdf-standard-font';\nimport { _PdfPath } from './../graphics/pdf-path';\nimport { PdfAnnotationCollection } from '../annotations/annotation-collection';\n/**\n * `PdfField` class represents the base class for form field objects.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Access the form field at index 0\n * let field: PdfField = document.form.fieldAt(0);\n * // Gets the count of the loaded field items\n * let count: number = field.itemsCount;\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfField = /** @class */function () {\n  function PdfField() {\n    this._visible = true;\n    this._isTransparentBackColor = false;\n    this._defaultFont = new PdfStandardFont(PdfFontFamily.helvetica, 8);\n    this._appearanceFont = new PdfStandardFont(PdfFontFamily.helvetica, 10, PdfFontStyle.regular);\n    this._defaultItemFont = new PdfStandardFont(PdfFontFamily.timesRoman, 12);\n    this._flatten = false;\n    this._hasData = false;\n    this._circleCaptionFont = new PdfStandardFont(PdfFontFamily.helvetica, 8, PdfFontStyle.regular);\n  }\n  Object.defineProperty(PdfField.prototype, \"itemsCount\", {\n    /**\n     * Gets the count of the loaded field items (Read only).\n     *\n     * @returns {number} Items count.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the count of the loaded field items\n     * let count: number = field.itemsCount;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._kids ? this._kids.length : 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"form\", {\n    /**\n     * Gets the form object of the field (Read only).\n     *\n     * @returns {PdfForm} Form.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the form object of the field\n     * let form: PdfForm = field.form;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._form;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"name\", {\n    /**\n     * Gets the name of the field (Read only).\n     *\n     * @returns {string} Field name.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the name of the field\n     * let name: string = field.name;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (typeof this._name === 'undefined') {\n        var names = _getInheritableProperty(this._dictionary, 'T', false, false, 'Parent');\n        if (names && names.length > 0) {\n          if (names.length === 1) {\n            this._name = names[0];\n          } else {\n            this._name = names.join('.');\n          }\n        }\n      }\n      return this._name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"actualName\", {\n    /**\n     * Gets the actual name of the field (Read only).\n     *\n     * @private\n     * @returns {string} Actual name.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the actual name of the field\n     * let name: string = field.actualName;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (typeof this._actualName === 'undefined' && this._dictionary.has('T')) {\n        var name_1 = this._dictionary.get('T');\n        if (name_1 && typeof name_1 === 'string') {\n          this._actualName = name_1;\n        }\n      }\n      return this._actualName;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"mappingName\", {\n    /**\n     * Gets the mapping name to be used when exporting interactive form field data from the document.\n     *\n     * @returns {string} Mapping name.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the mapping name of the field\n     * let name: string = field.mappingName;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (typeof this._mappingName === 'undefined' && this._dictionary.has('TM')) {\n        var name_2 = this._dictionary.get('TM');\n        if (name_2 && typeof name_2 === 'string') {\n          this._mappingName = name_2;\n        }\n      }\n      return this._mappingName;\n    },\n    /**\n     * Sets the mapping name to be used when exporting interactive form field data from the document.\n     *\n     * @param {string} value Mapping name.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Sets the mapping name of the field\n     * field.mappingName = ‘Author’;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (typeof this.mappingName === 'undefined' || this._mappingName !== value) {\n        this._mappingName = value;\n        this._dictionary.update('TM', value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"toolTip\", {\n    /**\n     * Gets the tool tip of the form field.\n     *\n     * @returns {string} Tooltip.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the tool tip value of the field\n     * let toolTip: string = field.toolTip;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (typeof this._alternateName === 'undefined' && this._dictionary.has('TU')) {\n        var name_3 = this._dictionary.get('TU');\n        if (name_3 && typeof name_3 === 'string') {\n          this._alternateName = name_3;\n        }\n      }\n      return this._alternateName;\n    },\n    /**\n     * Sets the tool tip of the form field.\n     *\n     * @param {string} value Tooltip.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Sets the tool tip value of the field\n     * field.toolTip = ‘Author of the document’;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (typeof this.toolTip === 'undefined' || this._alternateName !== value) {\n        this._alternateName = value;\n        this._dictionary.update('TU', value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"visibility\", {\n    /**\n     * Gets the form field visibility.\n     *\n     * @returns {PdfFormFieldVisibility} Field visibility option.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the form field visibility.\n     * let visibility: PdfFormFieldVisibility = field.visibility;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      var value;\n      if (this._isLoaded) {\n        value = PdfFormFieldVisibility.visible;\n        var widget = this.itemAt(this._defaultIndex);\n        var flag = PdfAnnotationFlag.default;\n        if (widget && widget._hasFlags) {\n          flag = widget.flags;\n        } else if (this._dictionary.has('F')) {\n          flag = this._dictionary.get('F');\n        } else {\n          return PdfFormFieldVisibility.visibleNotPrintable;\n        }\n        var flagValue = 3;\n        if ((flag & PdfAnnotationFlag.hidden) === PdfAnnotationFlag.hidden) {\n          flagValue = 0;\n        }\n        if ((flag & PdfAnnotationFlag.noView) === PdfAnnotationFlag.noView) {\n          flagValue = 1;\n        }\n        if ((flag & PdfAnnotationFlag.print) !== PdfAnnotationFlag.print) {\n          flagValue &= 2;\n        }\n        switch (flagValue) {\n          case 0:\n            value = PdfFormFieldVisibility.hidden;\n            break;\n          case 1:\n            value = PdfFormFieldVisibility.hiddenPrintable;\n            break;\n          case 2:\n            value = PdfFormFieldVisibility.visibleNotPrintable;\n            break;\n          case 3:\n            value = PdfFormFieldVisibility.visible;\n            break;\n        }\n      } else {\n        if (typeof this._visibility === 'undefined') {\n          this._visibility = PdfFormFieldVisibility.visible;\n        }\n        value = this._visibility;\n      }\n      return value;\n    },\n    /**\n     * Sets the form field visibility.\n     *\n     * @param {PdfFormFieldVisibility} value visibility.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Sets the form field visibility.\n     * field.visibility = PdfFormFieldVisibility.visible;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      var widget = this.itemAt(this._defaultIndex);\n      if (this._isLoaded) {\n        if (widget && (!widget._hasFlags || this.visibility !== value)) {\n          _updateVisibility(widget._dictionary, value);\n          this._dictionary._updated = true;\n        } else if (!this._dictionary.has('F') || this.visibility !== value) {\n          _updateVisibility(this._dictionary, value);\n          this._dictionary._updated = true;\n        }\n      } else {\n        if (this.visibility !== value) {\n          this._visibility = value;\n          switch (value) {\n            case PdfFormFieldVisibility.hidden:\n              widget.flags = PdfAnnotationFlag.hidden;\n              break;\n            case PdfFormFieldVisibility.hiddenPrintable:\n              widget.flags = PdfAnnotationFlag.noView | PdfAnnotationFlag.print;\n              break;\n            case PdfFormFieldVisibility.visible:\n              widget.flags = PdfAnnotationFlag.print;\n              break;\n            case PdfFormFieldVisibility.visibleNotPrintable:\n              widget.flags = PdfAnnotationFlag.default;\n              break;\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"bounds\", {\n    /**\n     * Gets the bounds.\n     *\n     * @returns {{ x: number, y: number, width: number, height: number }} Bounds.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the bounds of list box field.\n     * let bounds: {x: number, y: number, width: number, height: number} = field.bounds;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      var value;\n      var widget = this.itemAt(this._defaultIndex);\n      if (widget) {\n        widget._page = this.page;\n      }\n      if (widget && widget.bounds) {\n        value = widget.bounds;\n      } else if (this._dictionary.has('Rect')) {\n        value = _calculateBounds(this._dictionary, this.page);\n      }\n      if (typeof value === 'undefined' || value === null) {\n        value = {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n      return value;\n    },\n    /**\n     * Sets the bounds.\n     *\n     * @param {{ x: number, y: number, width: number, height: number }} value bounds.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Sets the bounds.\n     * field.bounds = {x: 10, y: 10, width: 100, height: 20};\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (value.x === 0 && value.y === 0 && value.width === 0 && value.height === 0) {\n        throw new Error('Cannot set empty bounds');\n      }\n      var widget = this.itemAt(this._defaultIndex);\n      if (this._isLoaded) {\n        if (typeof widget === 'undefined' || this._dictionary.has('Rect')) {\n          this._dictionary.update('Rect', _getUpdatedBounds([value.x, value.y, value.width, value.height], this.page));\n        } else {\n          widget._page = this.page;\n          widget.bounds = value;\n        }\n      } else {\n        widget._page = this.page;\n        widget.bounds = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"rotate\", {\n    /**\n     * Gets the rotation angle of the field.\n     *\n     * @returns {number} angle.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the rotation angle of the form field.\n     * let rotate: number = field.rotate;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      var widget = this.itemAt(this._defaultIndex);\n      var angle;\n      if (widget && typeof widget.rotate !== 'undefined') {\n        angle = widget.rotate;\n      } else if (this._dictionary.has('R')) {\n        angle = this._dictionary.get('R');\n      } else {\n        for (var i = 0; i < this._kidsCount && typeof angle === 'undefined'; i++) {\n          if (i !== this._defaultIndex) {\n            widget = this.itemAt(i);\n            if (widget && typeof widget.rotate !== 'undefined') {\n              angle = widget.rotate;\n            }\n          }\n        }\n      }\n      if (typeof angle === 'undefined') {\n        angle = 0;\n      }\n      return angle;\n    },\n    /**\n     * Sets the rotation angle of the field.\n     *\n     * @param {number} value rotation angle.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Sets the rotation angle.\n     * field.rotate = 90;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      var widget = this.itemAt(this._defaultIndex);\n      if (widget) {\n        widget.rotate = value;\n      } else if (!this._dictionary.has('R') || this._dictionary.get('R') !== value) {\n        this._dictionary.update('R', value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"color\", {\n    /**\n     * Gets the fore color of the field.\n     *\n     * @returns {number[]} R, G, B color values in between 0 to 255.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the fore color of the field.\n     * let color: number[] = field.color;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      var value;\n      var widget = this.itemAt(this._defaultIndex);\n      if (widget && widget.color) {\n        value = widget.color;\n      } else if (this._defaultAppearance) {\n        value = this._da.color;\n      }\n      return value;\n    },\n    /**\n     * Sets the fore color of the field.\n     *\n     * @param {number[]} value R, G, B color values in between 0 to 255.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Sets the fore color of the field.\n     * field.color = [255, 0, 0];\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      var widget = this.itemAt(this._defaultIndex);\n      if (widget && widget.color) {\n        widget.color = value;\n      } else {\n        var isNew = false;\n        if (!this._defaultAppearance) {\n          this._da = new _PdfDefaultAppearance('');\n          isNew = true;\n        }\n        if (isNew || this._da.color !== value) {\n          this._da.color = value;\n          this._dictionary.update('DA', this._da.toString());\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"backColor\", {\n    /**\n     * Gets the background color of the field.\n     *\n     * @returns {number[]} R, G, B color values in between 0 to 255.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the background color of the field.\n     * let backColor: number[] = field.backColor;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._parseBackColor(false);\n    },\n    /**\n     * Sets the background color of the field.\n     *\n     * @param {number[]} value R, G, B color values in between 0 to 255.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Sets the background color of the field.\n     * field.backColor = [255, 0, 0];\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      this._updateBackColor(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"borderColor\", {\n    /**\n     * Gets the border color of the field.\n     *\n     * @returns {number[]} R, G, B color values in between 0 to 255.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the border color of the field.\n     * let borderColor: number[] = field.borderColor;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      var value;\n      var widget = this.itemAt(this._defaultIndex);\n      if (widget && widget.borderColor) {\n        value = widget.borderColor;\n      } else if (this._mkDictionary) {\n        var dictionary = this._mkDictionary;\n        if (dictionary && dictionary.has('BC')) {\n          var colorArray = dictionary.getArray('BC');\n          if (colorArray) {\n            value = _parseColor(colorArray);\n          }\n        }\n      }\n      if (typeof value === 'undefined' || value === null) {\n        value = [0, 0, 0];\n      }\n      return value;\n    },\n    /**\n     * Sets the border color of the field.\n     *\n     * @param {number[]} value R, G, B color values in between 0 to 255.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Sets the border color of the field.\n     * field.borderColor = [255, 0, 0];\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      var widget = this.itemAt(this._defaultIndex);\n      if (widget && widget.borderColor !== value) {\n        widget.borderColor = value;\n      } else {\n        var mkDict = this._mkDictionary;\n        if (typeof mkDict === 'undefined') {\n          var dictionary = new _PdfDictionary(this._crossReference);\n          dictionary.update('BC', [Number.parseFloat((value[0] / 255).toFixed(3)), Number.parseFloat((value[1] / 255).toFixed(3)), Number.parseFloat((value[2] / 255).toFixed(3))]);\n          this._dictionary.update('MK', dictionary);\n        } else if (!mkDict.has('BC') || _parseColor(mkDict.getArray('BC')) !== value) {\n          mkDict.update('BC', [Number.parseFloat((value[0] / 255).toFixed(3)), Number.parseFloat((value[1] / 255).toFixed(3)), Number.parseFloat((value[2] / 255).toFixed(3))]);\n          this._dictionary._updated = true;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"readOnly\", {\n    /**\n     * Gets a value indicating whether read only.\n     *\n     * @returns {boolean} read only or not.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets a value indicating whether read only.\n     * let readOnly: boolean = field.readOnly;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return (this._fieldFlags & _FieldFlag.readOnly) !== 0;\n    },\n    /**\n     * Sets a value indicating whether read only.\n     *\n     * @param {boolean} value read only or not.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Sets a value indicating whether read only.\n     * field.readOnly = true;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (value) {\n        this._fieldFlags |= _FieldFlag.readOnly;\n      } else {\n        if (this._fieldFlags === _FieldFlag.readOnly) {\n          this._fieldFlags |= _FieldFlag.default;\n        }\n        this._fieldFlags &= ~_FieldFlag.readOnly;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"required\", {\n    /**\n     * Gets a value indicating whether the field is required.\n     *\n     * @returns {boolean} required or not.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets a value indicating whether the field is required.\n     * let required: boolean = field.required;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return (this._fieldFlags & _FieldFlag.required) !== 0;\n    },\n    /**\n     * Sets a value indicating whether the field is required.\n     *\n     * @param {boolean} value required or not.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Sets a value indicating whether the field is required.\n     * field.required = true;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (value) {\n        this._fieldFlags |= _FieldFlag.required;\n      } else {\n        this._fieldFlags &= ~_FieldFlag.required;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"visible\", {\n    /**\n     * Gets a value indicating the visibility of the field (Read only).\n     *\n     * @returns {boolean} visible or not.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets a value indicating the visibility of the field.\n     * let visible: boolean = field.visible;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (this._isLoaded) {\n        var widget = this.itemAt(this._defaultIndex);\n        var flag = PdfAnnotationFlag.default;\n        if (widget && widget._hasFlags) {\n          flag = widget.flags;\n        } else if (this._dictionary.has('F')) {\n          flag = this._dictionary.get('F');\n        }\n        return flag !== PdfAnnotationFlag.hidden;\n      } else {\n        return this._visible;\n      }\n    },\n    /**\n     * Sets a value indicating the visibility of the field.\n     * Only applicable for newly created PDF form fields.\n     *\n     * @param {boolean} value or not.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Sets a value indicating the visibility of the field\n     * field.visible = true;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (!this._isLoaded && this._visible !== value && !value) {\n        this._visible = value;\n        this.itemAt(this._defaultIndex).flags = PdfAnnotationFlag.hidden;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"border\", {\n    /**\n     * Gets the width, style and dash of the border of the field.\n     *\n     * @returns {PdfInteractiveBorder} Border properties.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the width, style and dash of the border of the field.\n     * let border: PdfInteractiveBorder = field.border;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      var widget = this.itemAt(this._defaultIndex);\n      var value;\n      if (widget && widget._dictionary.has('BS')) {\n        value = widget.border;\n      } else {\n        value = new PdfInteractiveBorder();\n        if (!(this instanceof PdfButtonField)) {\n          value._width = 0;\n        }\n        value._dictionary = this._dictionary;\n        if (this._dictionary.has('BS')) {\n          var border = this._dictionary.get('BS');\n          if (border) {\n            if (border.has('W')) {\n              value._width = border.get('W');\n            }\n            if (border.has('S')) {\n              var borderStyle = border.get('S');\n              if (borderStyle) {\n                switch (borderStyle.name) {\n                  case 'D':\n                    value._style = PdfBorderStyle.dashed;\n                    break;\n                  case 'B':\n                    value._style = PdfBorderStyle.beveled;\n                    break;\n                  case 'I':\n                    value._style = PdfBorderStyle.inset;\n                    break;\n                  case 'U':\n                    value._style = PdfBorderStyle.underline;\n                    break;\n                  default:\n                    value._style = PdfBorderStyle.solid;\n                    break;\n                }\n              }\n            }\n            if (border.has('D')) {\n              value._dash = border.getArray('D');\n            }\n          }\n        }\n      }\n      return value;\n    },\n    /**\n     * Sets the width, style and dash of the border of the field.\n     *\n     * @param {PdfInteractiveBorder} value Border properties.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Sets the width, style and dash of the border of the field.\n     * field.border = new PdfInteractiveBorder(2, PdfBorderStyle.solid);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      var widget = this.itemAt(this._defaultIndex);\n      if (widget) {\n        this._updateBorder(widget._dictionary, value);\n      } else {\n        this._updateBorder(this._dictionary, value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"rotationAngle\", {\n    /**\n     * Gets the rotation of the field (Read only).\n     *\n     * @returns {PdfRotationAngle} Rotation angle.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the rotation of the field.\n     * let rotate: PdfRotationAngle = field.rotationAngle;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      var value = PdfRotationAngle.angle0;\n      var widget = this.itemAt(this._defaultIndex);\n      if (widget) {\n        value = widget.rotationAngle;\n      }\n      return value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"export\", {\n    /**\n     * Gets a value indicating whether the field is allow to export data or not.\n     *\n     * @returns {boolean} Allow to export data or not.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets a value indicating whether the field is allow to export data or not.\n     * let export: boolean = field.export;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return !((this._fieldFlags & _FieldFlag.noExport) !== 0);\n    },\n    /**\n     * Sets a value indicating whether the field is allow to export data or not.\n     *\n     * @param {boolean} value Allow to export data or not.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Sets a value indicating whether the field is allow to export data or not.\n     * field.export = true;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (value) {\n        this._fieldFlags &= ~_FieldFlag.noExport;\n      } else {\n        this._fieldFlags |= _FieldFlag.noExport;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"tabIndex\", {\n    /**\n     * Gets the tab index of annotation in current page.\n     *\n     * @returns {number} tab index.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the tab index of annotation in current page.\n     * let tabIndex: number = field.tabIndex;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      var annots;\n      if (this.page._pageDictionary.has('Annots')) {\n        annots = this.page._pageDictionary.get('Annots');\n      }\n      if (this._kids && this._kids.length > 0) {\n        for (var i = 0; i < this._kids.length; i++) {\n          var reference = this._kids[Number.parseInt(i.toString(), 10)];\n          if (reference) {\n            if (this.page._pageDictionary.has('Annots')) {\n              if (annots) {\n                var index1 = annots.indexOf(reference);\n                if (index1 !== -1) {\n                  return index1;\n                }\n              }\n            }\n          }\n        }\n      } else if (this._dictionary.has('Subtype') && this._dictionary.get('Subtype').name === 'Widget') {\n        if (this._ref) {\n          if (annots) {\n            var index1 = annots.indexOf(this._ref);\n            if (index1 !== -1) {\n              return index1;\n            }\n          }\n        }\n      }\n      return -1;\n    },\n    /**\n     * Sets the tab index of a annotation in the current page.\n     *\n     * @param {number} value index.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Sets the tab index of annotation in current page.\n     * field.tabIndex = 5;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      this._tabIndex = value;\n      var page = this.page;\n      if (page && (this.form._tabOrder === PdfFormFieldsTabOrder.manual || page.tabOrder === PdfFormFieldsTabOrder.manual)) {\n        if (page._pageDictionary.has('Annots')) {\n          var annots = page._pageDictionary.get('Annots');\n          var annotationCollection = new PdfAnnotationCollection(annots, this._crossReference, page);\n          page._annotations = annotationCollection;\n          var index = annots.indexOf(this._ref);\n          if (index < 0) {\n            index = this._annotationIndex;\n          }\n          var annotations = page.annotations._reArrange(this._ref, this._tabIndex, index);\n          page._pageDictionary.update('Annots', annotations);\n          page._pageDictionary._updated = true;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"page\", {\n    /**\n     * Gets the page object of the form field (Read only).\n     *\n     * @returns {PdfPage} Page object.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the page object of the form field.\n     * let page: PdfPage = field.page;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (!this._page) {\n        var widget = this.itemAt(this._defaultIndex);\n        var dictionary = typeof widget !== 'undefined' ? widget._dictionary : this._dictionary;\n        var document_1;\n        if (this._crossReference) {\n          document_1 = this._crossReference._document;\n        }\n        var page = void 0;\n        if (dictionary.has('P')) {\n          var ref = dictionary.getRaw('P');\n          if (ref && document_1) {\n            for (var i = 0; i < document_1.pageCount; i++) {\n              var entry = document_1.getPage(i);\n              if (entry && entry._ref === ref) {\n                page = entry;\n                break;\n              }\n            }\n          }\n        }\n        if (!page && document_1) {\n          var widgetRef = typeof widget !== 'undefined' ? widget._ref : this._ref;\n          if (!page && widgetRef) {\n            page = _findPage(document_1, widgetRef);\n          }\n          if (!page && this._kids && this._kids.length > 0) {\n            for (var i = 0; i < this._kids.length; i++) {\n              page = _findPage(document_1, this._kids[Number.parseInt(i.toString(), 10)]);\n              if (page) {\n                break;\n              }\n            }\n          }\n        }\n        this._page = page;\n      }\n      return this._page;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"flatten\", {\n    /**\n     * Gets the boolean flag indicating whether the form field have been flattened or not.\n     *\n     * @returns {boolean} Flatten.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Get the first field\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the boolean flag indicating whether the form field have been flattened or not.\n     * let flatten: boolean = field.flatten;\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._flatten;\n    },\n    /**\n     * Sets the boolean flag indicating whether the form field have been flattened or not.\n     *\n     * @param {boolean} value Flatten.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Get the first field\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Sets the boolean flag indicating whether the form field have been flattened or not.\n     * field.flatten = true;\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      this._flatten = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"_grayBrush\", {\n    get: function () {\n      if (!this._gray) {\n        this._gray = new PdfBrush([128, 128, 128]);\n      }\n      return this._gray;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"_silverBrush\", {\n    get: function () {\n      if (!this._silver) {\n        this._silver = new PdfBrush([198, 198, 198]);\n      }\n      return this._silver;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"_whiteBrush\", {\n    get: function () {\n      if (!this._white) {\n        this._white = new PdfBrush([255, 255, 255]);\n      }\n      return this._white;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"_blackBrush\", {\n    get: function () {\n      if (!this._black) {\n        this._black = new PdfBrush([0, 0, 0]);\n      }\n      return this._black;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"_kidsCount\", {\n    get: function () {\n      return this._kids ? this._kids.length : 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"_hasBackColor\", {\n    get: function () {\n      if (this._isLoaded) {\n        var mkDictionary = this._mkDictionary;\n        if (!mkDictionary) {\n          var item = this.itemAt(this._defaultIndex);\n          if (item && item._dictionary.has('MK')) {\n            mkDictionary = item._dictionary.get('MK');\n          }\n        }\n        return mkDictionary && mkDictionary.has('BG');\n      } else {\n        return !this._isTransparentBackColor;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfField.prototype._parseBackColor = function (hasTransparency) {\n    var value;\n    if (!hasTransparency || this._isLoaded && this._hasBackColor || !this._isLoaded && !this._isTransparentBackColor) {\n      var widget = this.itemAt(this._defaultIndex);\n      if (widget && widget.backColor) {\n        value = widget.backColor;\n      } else if (this._mkDictionary) {\n        var mkDict = this._mkDictionary;\n        if (mkDict && mkDict.has('BG')) {\n          var bgArray = mkDict.getArray('BG');\n          if (bgArray) {\n            value = _parseColor(bgArray);\n          }\n        }\n      }\n      if (typeof value === 'undefined' || value === null) {\n        value = [255, 255, 255];\n      }\n    }\n    return value;\n  };\n  PdfField.prototype._updateBackColor = function (value, hasTransparency) {\n    if (hasTransparency === void 0) {\n      hasTransparency = false;\n    }\n    if (hasTransparency && value.length === 4 && value[3] !== 255) {\n      this._isTransparentBackColor = true;\n      if (this._dictionary.has('BG')) {\n        delete this._dictionary._map.BG;\n      }\n      var mkDictionary = this._mkDictionary;\n      if (mkDictionary && mkDictionary.has('BG')) {\n        delete mkDictionary._map.BG;\n        this._dictionary._updated = true;\n      }\n      var item = this.itemAt(this._defaultIndex);\n      if (item) {\n        item.backColor = value;\n      }\n    } else {\n      this._isTransparentBackColor = false;\n      var widget = this.itemAt(this._defaultIndex);\n      if (widget && widget.backColor !== value) {\n        widget.backColor = value;\n      } else {\n        var mkDictionary = this._mkDictionary;\n        if (typeof mkDictionary === 'undefined') {\n          var dictionary = new _PdfDictionary(this._crossReference);\n          dictionary.update('BG', [Number.parseFloat((value[0] / 255).toFixed(3)), Number.parseFloat((value[1] / 255).toFixed(3)), Number.parseFloat((value[2] / 255).toFixed(3))]);\n          this._dictionary.update('MK', dictionary);\n        } else if (!mkDictionary.has('BG') || _parseColor(mkDictionary.getArray('BG')) !== value) {\n          mkDictionary.update('BG', [Number.parseFloat((value[0] / 255).toFixed(3)), Number.parseFloat((value[1] / 255).toFixed(3)), Number.parseFloat((value[2] / 255).toFixed(3))]);\n          this._dictionary._updated = true;\n        }\n      }\n    }\n  };\n  /**\n   * Gets the field item as `PdfWidgetAnnotation` at the specified index.\n   *\n   * @param {number} index Item index.\n   * @returns {PdfWidgetAnnotation} Loaded PDF form field item at the specified index.\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access the loaded form field\n   * let field: PdfField = document.form.fieldAt(0);\n   * // Access the count of the field items.\n   * let count: number = field.count;\n   * // Access the first item\n   * let item: PdfWidgetAnnotation = field.itemAt(0);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfField.prototype.itemAt = function (index) {\n    var item;\n    if (index >= 0 && index < this._kidsCount) {\n      if (this._parsedItems.has(index)) {\n        item = this._parsedItems.get(index);\n      } else {\n        var dictionary = void 0;\n        var reference = this._kids[Number.parseInt(index.toString(), 10)];\n        if (reference && reference instanceof _PdfReference) {\n          dictionary = this._crossReference._fetch(reference);\n        }\n        if (dictionary) {\n          item = PdfWidgetAnnotation._load(dictionary, this._crossReference);\n          item._ref = reference;\n          this._parsedItems.set(index, item);\n        }\n      }\n    }\n    return item;\n  };\n  /**\n   * Sets the flag to indicate the new appearance creation.\n   *\n   * @param {boolean} value Set appearance.\n   * @returns {void} Nothing.\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Set boolean flag to create a new appearance stream for form fields.\n   * document.form.fieldAt(0).setAppearance(true);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfField.prototype.setAppearance = function (value) {\n    this._setAppearance = value;\n  };\n  /**\n   * Gets the value associated with the specified key.\n   *\n   * @param {string} name Key.\n   * @returns {string} Value associated with the key.\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Gets the value associated with the key 'Author'.\n   * let value: string = document.form.fieldAt(0).getValue('Author');\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfField.prototype.getValue = function (name) {\n    var value;\n    if (this._dictionary.has(name)) {\n      var element = this._dictionary.get(name); // eslint-disable-line\n      if (element instanceof _PdfName) {\n        value = element.name;\n      } else if (typeof element === 'string') {\n        value = element;\n      } else {\n        throw new Error('PdfException: ' + name + ' is not found');\n      }\n    } else {\n      throw new Error('PdfException: ' + name + ' is not found');\n    }\n    return value;\n  };\n  /**\n   * Sets the value associated with the specified key.\n   *\n   * @param {string} name Key.\n   * @param {string} value Value associated with the key..\n   * @returns {void} Nothing.\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access the form field at index 0\n   * let field: PdfField = document.form.fieldAt(0);\n   * // Set custom value\n   * field.setValue('Author', 'John');\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfField.prototype.setValue = function (name, value) {\n    if (name && name !== '' && value && value !== '') {\n      this._dictionary.update(name, value);\n    }\n  };\n  /**\n   * Remove the form field item from the specified index.\n   *\n   * @param {number} index Item index to remove.\n   * @returns {void} Nothing.\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access the form field at index 0\n   * let field: PdfField = document.form.fieldAt(0);\n   * // Remove the first item of the form field\n   * field.removeItemAt(0);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfField.prototype.removeItemAt = function (index) {\n    if (this._dictionary.has('Kids') && this.itemsCount > 0) {\n      var item = this.itemAt(index);\n      if (item && item._ref) {\n        var page = item._getPage();\n        if (page) {\n          page._removeAnnotation(item._ref);\n        }\n        this._kids.splice(index, 1);\n        this._dictionary.set('Kids', this._kids);\n        this._dictionary._updated = true;\n        this._parsedItems.delete(index);\n        if (this._parsedItems.size > 0) {\n          var parsedItems_1 = new Map();\n          this._parsedItems.forEach(function (value, key) {\n            if (key > index) {\n              parsedItems_1.set(key - 1, value);\n            } else {\n              parsedItems_1.set(key, value);\n            }\n          });\n          this._parsedItems = parsedItems_1;\n        }\n      }\n    }\n  };\n  /**\n   * Remove the specified form field item.\n   *\n   * @param {PdfWidgetAnnotation} item Item to remove.\n   * @returns {void} Nothing.\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access the form field at index 0\n   * let field: PdfField = document.form.fieldAt(0);\n   * // Remove the first item of the form field\n   * field.removeItem(field.itemAt(0));\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfField.prototype.removeItem = function (item) {\n    if (item && item._ref) {\n      var index = this._kids.indexOf(item._ref);\n      if (index !== -1) {\n        this.removeItemAt(index);\n      }\n    }\n  };\n  Object.defineProperty(PdfField.prototype, \"_fieldFlags\", {\n    get: function () {\n      if (typeof this._flags === 'undefined') {\n        this._flags = _getInheritableProperty(this._dictionary, 'Ff', false, true, 'Parent');\n        if (typeof this._flags === 'undefined') {\n          this._flags = _FieldFlag.default;\n        }\n      }\n      return this._flags;\n    },\n    set: function (value) {\n      if (this._fieldFlags !== value) {\n        this._flags = value;\n        this._dictionary.update('Ff', value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"_defaultAppearance\", {\n    get: function () {\n      if (typeof this._da === 'undefined') {\n        var da = _getInheritableProperty(this._dictionary, 'DA', false, true, 'Parent');\n        if (da && da !== '') {\n          this._da = new _PdfDefaultAppearance(da);\n        }\n      }\n      return this._da;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfField.prototype, \"_mkDictionary\", {\n    get: function () {\n      var value;\n      if (this._dictionary.has('MK')) {\n        value = this._dictionary.get('MK');\n      }\n      return value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfField.prototype._updateBorder = function (dictionary, value) {\n    var bs;\n    var isNew = false;\n    if (dictionary.has('BS')) {\n      bs = dictionary.get('BS');\n    } else {\n      bs = new _PdfDictionary(this._crossReference);\n      dictionary.update('BS', bs);\n      isNew = true;\n    }\n    if (typeof value.width !== 'undefined') {\n      bs.update('W', value.width);\n      dictionary._updated = true;\n    } else if (isNew) {\n      bs.update('W', 0);\n    }\n    if (typeof value.style !== 'undefined') {\n      bs.update('S', _mapBorderStyle(value.style));\n      dictionary._updated = true;\n    } else if (isNew) {\n      bs.update('S', _mapBorderStyle(PdfBorderStyle.solid));\n    }\n    if (typeof value.dash !== 'undefined') {\n      bs.update('D', value.dash);\n      dictionary._updated = true;\n    }\n  };\n  PdfField.prototype._checkFieldFlag = function (dictionary) {\n    var flag = dictionary.get('F');\n    return typeof flag !== 'undefined' && flag === 6;\n  };\n  PdfField.prototype._initializeFont = function (font) {\n    this._font = font;\n    var document = this._crossReference._document;\n    var resource;\n    if (document) {\n      if (document.form._dictionary.has('DR')) {\n        resource = document.form._dictionary.get('DR');\n      } else {\n        resource = new _PdfDictionary(this._crossReference);\n      }\n    }\n    var fontDict;\n    var isReference = false;\n    if (resource.has('Font')) {\n      var obj = resource.getRaw('Font'); // eslint-disable-line\n      if (obj && obj instanceof _PdfReference) {\n        isReference = true;\n        fontDict = this._crossReference._fetch(obj);\n      } else if (obj instanceof _PdfDictionary) {\n        fontDict = obj;\n      }\n    }\n    if (!fontDict) {\n      fontDict = new _PdfDictionary(this._crossReference);\n      resource.update('Font', fontDict);\n    }\n    var keyName = _PdfName.get(_getNewGuidString());\n    var reference = this._crossReference._getNextReference();\n    if (font instanceof PdfTrueTypeFont) {\n      if (this._font._pdfFontInternals) {\n        this._crossReference._cacheMap.set(reference, this._font._pdfFontInternals);\n      }\n    } else if (this._font._dictionary) {\n      this._crossReference._cacheMap.set(reference, this._font._dictionary);\n    }\n    fontDict.update(keyName.name, reference);\n    resource._updated = true;\n    document.form._dictionary.update('DR', resource);\n    document.form._dictionary._updated = true;\n    this._fontName = keyName.name;\n    var defaultAppearance = new _PdfDefaultAppearance();\n    defaultAppearance.fontName = this._fontName;\n    defaultAppearance.fontSize = this._font._size;\n    defaultAppearance.color = this.color ? this.color : [0, 0, 0];\n    if (this._dictionary.has('Kids')) {\n      var widgetDictionary = this._dictionary.getArray('Kids');\n      for (var i = 0; i < widgetDictionary.length; i++) {\n        var dictionary = widgetDictionary[Number.parseInt(i.toString(), 10)];\n        dictionary.update('DA', defaultAppearance.toString());\n      }\n    } else if (this._dictionary.has('Subtype') && this._dictionary.get('Subtype').name === 'Widget') {\n      this._dictionary.update('DA', defaultAppearance.toString());\n    }\n    if (isReference) {\n      resource._updated = true;\n    }\n  };\n  PdfField.prototype._drawRectangularControl = function (g, parameter) {\n    g.drawRectangle(parameter.bounds[0], parameter.bounds[1], parameter.bounds[2], parameter.bounds[3], parameter.backBrush);\n    this._drawBorder(g, parameter.bounds, parameter.borderPen, parameter.borderStyle, parameter.borderWidth);\n    switch (parameter.borderStyle) {\n      case PdfBorderStyle.inset:\n        this._drawLeftTopShadow(g, parameter.bounds, parameter.borderWidth, this._grayBrush);\n        this._drawRightBottomShadow(g, parameter.bounds, parameter.borderWidth, this._silverBrush);\n        break;\n      case PdfBorderStyle.beveled:\n        this._drawLeftTopShadow(g, parameter.bounds, parameter.borderWidth, this._whiteBrush);\n        this._drawRightBottomShadow(g, parameter.bounds, parameter.borderWidth, parameter.shadowBrush);\n        break;\n    }\n  };\n  PdfField.prototype._drawBorder = function (g, bounds, borderPen, style, borderWidth) {\n    if (borderPen && borderWidth > 0) {\n      if (style === PdfBorderStyle.underline) {\n        g.drawLine(borderPen, bounds[0], bounds[0] + bounds[3] - borderWidth / 2, bounds[0] + bounds[2], bounds[1] + bounds[3] - borderWidth / 2);\n      } else {\n        g.drawRectangle(bounds[0] + borderWidth / 2, bounds[1] + borderWidth / 2, bounds[2] - borderWidth, bounds[3] - borderWidth, borderPen);\n      }\n    }\n  };\n  PdfField.prototype._drawLeftTopShadow = function (g, bounds, width, brush) {\n    var path = new _PdfPath();\n    var points = [];\n    points.push([bounds[0] + width, bounds[1] + width]);\n    points.push([bounds[0] + width, bounds[1] + bounds[3] - width]);\n    points.push([bounds[0] + 2 * width, bounds[1] + bounds[3] - 2 * width]);\n    points.push([bounds[0] + 2 * width, bounds[1] + 2 * width]);\n    points.push([bounds[0] + bounds[2] - 2 * width, bounds[1] + 2 * width]);\n    points.push([bounds[0] + bounds[2] - width, bounds[1] + width]);\n    path._addPolygon(points);\n    g._drawPath(path, null, brush);\n  };\n  PdfField.prototype._drawRightBottomShadow = function (g, bounds, width, brush) {\n    var path = new _PdfPath();\n    var points = [];\n    points.push([bounds[0] + width, bounds[1] + bounds[3] - width]);\n    points.push([bounds[0] + 2 * width, bounds[1] + bounds[3] - 2 * width]);\n    points.push([bounds[0] + bounds[2] - 2 * width, bounds[1] + bounds[3] - 2 * width]);\n    points.push([bounds[0] + bounds[2] - 2 * width, bounds[1] + 2 * width]);\n    points.push([bounds[0] + bounds[2] - width, bounds[1] + width]);\n    points.push([bounds[0] + bounds[2] - width, bounds[1] + bounds[3] - width]);\n    path._addPolygon(points);\n    g._drawPath(path, null, brush);\n  };\n  PdfField.prototype._drawRadioButton = function (graphics, parameter, checkSymbol, state) {\n    if (checkSymbol === 'l') {\n      var bounds = parameter.bounds;\n      switch (state) {\n        case _PdfCheckFieldState.checked:\n        case _PdfCheckFieldState.unchecked:\n          graphics.drawEllipse(bounds[0], bounds[1], bounds[2], bounds[3], parameter.backBrush);\n          break;\n        case _PdfCheckFieldState.pressedChecked:\n        case _PdfCheckFieldState.pressedUnchecked:\n          if (parameter.borderStyle === PdfBorderStyle.beveled || parameter.borderStyle === PdfBorderStyle.underline) {\n            graphics.drawEllipse(bounds[0], bounds[1], bounds[2], bounds[3], parameter.backBrush);\n          } else {\n            graphics.drawEllipse(bounds[0], bounds[1], bounds[2], bounds[3], parameter.shadowBrush);\n          }\n          break;\n      }\n      this._drawRoundBorder(graphics, bounds, parameter.borderPen, parameter.borderWidth);\n      this._drawRoundShadow(graphics, parameter, state);\n      if (state === _PdfCheckFieldState.checked || state === _PdfCheckFieldState.pressedChecked) {\n        var outward = [bounds[0] + parameter.borderWidth / 2, bounds[1] + parameter.borderWidth / 2, bounds[2] - parameter.borderWidth, bounds[3] - parameter.borderWidth];\n        graphics.drawEllipse(outward[0] + outward[2] / 4, outward[1] + outward[2] / 4, outward[2] - outward[2] / 2, outward[3] - outward[2] / 2, parameter.foreBrush);\n      }\n    } else {\n      this._drawCheckBox(graphics, parameter, checkSymbol, state);\n    }\n  };\n  PdfField.prototype._drawRoundBorder = function (graphics, bounds, borderPen, borderWidth) {\n    if (bounds[0] !== 0 || bounds[1] !== 0 || bounds[2] !== 0 || bounds[3] !== 0) {\n      graphics.drawEllipse(bounds[0] + borderWidth / 2, bounds[1] + borderWidth / 2, bounds[2] - borderWidth, bounds[3] - borderWidth, borderPen);\n    }\n  };\n  PdfField.prototype._drawRoundShadow = function (graphics, parameter, state) {\n    var borderWidth = parameter.borderWidth;\n    var inflateValue = -1.5 * borderWidth;\n    var x = parameter.bounds[0] + inflateValue;\n    var y = parameter.bounds[1] + inflateValue;\n    var width = parameter.bounds[2] + 2 * inflateValue;\n    var height = parameter.bounds[3] + 2 * inflateValue;\n    var shadowBrush = parameter.shadowBrush;\n    if (shadowBrush) {\n      var shadowColor = shadowBrush._color;\n      var leftTop = void 0;\n      var rightBottom = void 0;\n      switch (parameter.borderStyle) {\n        case PdfBorderStyle.beveled:\n          switch (state) {\n            case _PdfCheckFieldState.pressedChecked:\n            case _PdfCheckFieldState.pressedUnchecked:\n              leftTop = new PdfPen(shadowColor, borderWidth);\n              rightBottom = new PdfPen([255, 255, 255], borderWidth);\n              break;\n            case _PdfCheckFieldState.checked:\n            case _PdfCheckFieldState.unchecked:\n              leftTop = new PdfPen([255, 255, 255], borderWidth);\n              rightBottom = new PdfPen(shadowColor, borderWidth);\n              break;\n          }\n          break;\n        case PdfBorderStyle.inset:\n          switch (state) {\n            case _PdfCheckFieldState.pressedChecked:\n            case _PdfCheckFieldState.pressedUnchecked:\n              leftTop = new PdfPen([0, 0, 0], borderWidth);\n              rightBottom = new PdfPen([0, 0, 0], borderWidth);\n              break;\n            case _PdfCheckFieldState.checked:\n            case _PdfCheckFieldState.unchecked:\n              leftTop = new PdfPen([128, 128, 128], borderWidth);\n              rightBottom = new PdfPen([192, 192, 192], borderWidth);\n              break;\n          }\n          break;\n      }\n      if (leftTop && rightBottom) {\n        graphics.drawArc(x, y, width, height, 135, 180, leftTop);\n        graphics.drawArc(x, y, width, height, -45, 180, rightBottom);\n      }\n    }\n  };\n  PdfField.prototype._drawCheckBox = function (graphics, parameter, checkSymbol, state, font) {\n    switch (state) {\n      case _PdfCheckFieldState.unchecked:\n      case _PdfCheckFieldState.checked:\n        if (parameter.borderPen) {\n          graphics.drawRectangle(parameter.bounds[0], parameter.bounds[1], parameter.bounds[2], parameter.bounds[3], parameter.backBrush);\n        }\n        break;\n      case _PdfCheckFieldState.pressedChecked:\n      case _PdfCheckFieldState.pressedUnchecked:\n        if (parameter.borderStyle === PdfBorderStyle.beveled || parameter.borderStyle === PdfBorderStyle.underline) {\n          if (parameter.borderPen) {\n            graphics.drawRectangle(parameter.bounds[0], parameter.bounds[1], parameter.bounds[2], parameter.bounds[3], parameter.backBrush);\n          }\n        } else if (parameter.borderPen) {\n          graphics.drawRectangle(parameter.bounds[0], parameter.bounds[1], parameter.bounds[2], parameter.bounds[3], parameter.shadowBrush);\n        }\n        break;\n    }\n    var rectangle = parameter.bounds;\n    this._drawBorder(graphics, parameter.bounds, parameter.borderPen, parameter.borderStyle, parameter.borderWidth);\n    if (state === _PdfCheckFieldState.pressedChecked || state === _PdfCheckFieldState.pressedUnchecked) {\n      switch (parameter.borderStyle) {\n        case PdfBorderStyle.inset:\n          this._drawLeftTopShadow(graphics, parameter.bounds, parameter.borderWidth, this._blackBrush);\n          this._drawRightBottomShadow(graphics, parameter.bounds, parameter.borderWidth, this._whiteBrush);\n          break;\n        case PdfBorderStyle.beveled:\n          this._drawLeftTopShadow(graphics, parameter.bounds, parameter.borderWidth, parameter.shadowBrush);\n          this._drawRightBottomShadow(graphics, parameter.bounds, parameter.borderWidth, this._whiteBrush);\n          break;\n      }\n    } else {\n      switch (parameter.borderStyle) {\n        case PdfBorderStyle.inset:\n          this._drawLeftTopShadow(graphics, parameter.bounds, parameter.borderWidth, this._grayBrush);\n          this._drawRightBottomShadow(graphics, parameter.bounds, parameter.borderWidth, this._silverBrush);\n          break;\n        case PdfBorderStyle.beveled:\n          this._drawLeftTopShadow(graphics, parameter.bounds, parameter.borderWidth, this._whiteBrush);\n          this._drawRightBottomShadow(graphics, parameter.bounds, parameter.borderWidth, parameter.shadowBrush);\n          break;\n      }\n    }\n    var yOffset = 0;\n    var size = 0;\n    switch (state) {\n      case _PdfCheckFieldState.pressedChecked:\n      case _PdfCheckFieldState.checked:\n        if (!font) {\n          var extraBorder = parameter.borderStyle === PdfBorderStyle.beveled || parameter.borderStyle === PdfBorderStyle.inset;\n          var borderWidth = parameter.borderWidth;\n          if (extraBorder) {\n            borderWidth *= 2;\n          }\n          var xPosition = Math.max(extraBorder ? 2 * parameter.borderWidth : parameter.borderWidth, 1);\n          var xOffset = Math.min(borderWidth, xPosition);\n          size = parameter.bounds[2] > parameter.bounds[3] ? parameter.bounds[3] : parameter.bounds[2];\n          var fontSize = size - 2 * xOffset;\n          font = new PdfStandardFont(PdfFontFamily.zapfDingbats, fontSize);\n          if (parameter.bounds[2] > parameter.bounds[3]) {\n            yOffset = (parameter.bounds[3] - font._metrics._getHeight()) / 2;\n          }\n        } else {\n          font = new PdfStandardFont(PdfFontFamily.zapfDingbats, font._size);\n        }\n        if (size === 0) {\n          size = parameter.bounds[3];\n        }\n        if (parameter.pageRotationAngle !== PdfRotationAngle.angle0 || parameter.rotationAngle > 0) {\n          var state_1 = graphics.save();\n          var size_1 = graphics._size;\n          if (parameter.pageRotationAngle !== PdfRotationAngle.angle0) {\n            if (parameter.pageRotationAngle === PdfRotationAngle.angle90) {\n              graphics.translateTransform(size_1[1], 0);\n              graphics.rotateTransform(90);\n              var y = size_1[1] - (rectangle[0] + rectangle[2]);\n              var x = rectangle[1];\n              rectangle = [x, y, rectangle[3], rectangle[2]];\n            } else if (parameter.pageRotationAngle === PdfRotationAngle.angle180) {\n              graphics.translateTransform(size_1[0], size_1[1]);\n              graphics.rotateTransform(-180);\n              var x = size_1[0] - (rectangle[0] + rectangle[2]);\n              var y = size_1[1] - (rectangle[1] + rectangle[3]);\n              rectangle = [x, y, rectangle[2], rectangle[3]];\n            } else if (parameter.pageRotationAngle === PdfRotationAngle.angle270) {\n              graphics.translateTransform(0, size_1[0]);\n              graphics.rotateTransform(270);\n              var x = size_1[0] - (rectangle[1] + rectangle[3]);\n              var y = rectangle[0];\n              rectangle = [x, y, rectangle[3], rectangle[2]];\n            }\n          }\n          if (parameter.rotationAngle > 0) {\n            if (parameter.rotationAngle === 90) {\n              if (parameter.pageRotationAngle === PdfRotationAngle.angle90) {\n                graphics.translateTransform(0, size_1[1]);\n                graphics.rotateTransform(-90);\n                var x = size_1[1] - (rectangle[1] + rectangle[3]);\n                var y = rectangle[0];\n                rectangle = [x, y, rectangle[3], rectangle[2]];\n              } else {\n                if (rectangle[2] > rectangle[3]) {\n                  graphics.translateTransform(0, size_1[1]);\n                  graphics.rotateTransform(-90);\n                  rectangle = [parameter.bounds[0], parameter.bounds[1], parameter.bounds[2], parameter.bounds[3]];\n                } else {\n                  var z = rectangle[0];\n                  rectangle[0] = -(rectangle[1] + rectangle[3]);\n                  rectangle[1] = z;\n                  var height = rectangle[3];\n                  rectangle[3] = rectangle[2] > font._metrics._getHeight() ? rectangle[2] : font._metrics._getHeight();\n                  rectangle[2] = height;\n                  graphics.rotateTransform(-90);\n                  rectangle = [rectangle[0], rectangle[1], rectangle[2], rectangle[3]];\n                }\n              }\n            } else if (parameter.rotationAngle === 270) {\n              graphics.translateTransform(size_1[0], 0);\n              graphics.rotateTransform(-270);\n              var x = rectangle[1];\n              var y = size_1[0] - (rectangle[0] + rectangle[2]);\n              rectangle = [x, y, rectangle[3], rectangle[2]];\n            } else if (parameter.rotationAngle === 180) {\n              graphics.translateTransform(size_1[0], size_1[1]);\n              graphics.rotateTransform(-180);\n              var x = size_1[0] - (rectangle[0] + rectangle[2]);\n              var y = size_1[1] - (rectangle[1] + rectangle[3]);\n              rectangle = [x, y, rectangle[2], rectangle[3]];\n            }\n            graphics.drawString(checkSymbol, font, [rectangle[0], rectangle[1] - yOffset, rectangle[2], rectangle[3]], null, parameter.foreBrush, new PdfStringFormat(PdfTextAlignment.center, PdfVerticalAlignment.middle));\n            graphics.restore(state_1);\n          } else {\n            graphics.drawString(checkSymbol, font, [rectangle[0], rectangle[1] - yOffset, rectangle[2], rectangle[3]], null, parameter.foreBrush, new PdfStringFormat(PdfTextAlignment.center, PdfVerticalAlignment.middle));\n          }\n          break;\n        }\n    }\n  };\n  PdfField.prototype._addToKid = function (item) {\n    if (this._dictionary.has('Kids')) {\n      this._kids = this._dictionary.get('Kids');\n    } else {\n      this._kids = [];\n      this._dictionary.update('Kids', this._kids);\n      this._parsedItems = new Map();\n    }\n    var currentIndex = this._kidsCount;\n    item._index = currentIndex;\n    this._kids.push(item._ref);\n    this._parsedItems.set(currentIndex, item);\n  };\n  PdfField.prototype._drawTemplate = function (template, page, bounds) {\n    if (template && page) {\n      var graphics = page.graphics;\n      graphics.save();\n      if (page.rotation === PdfRotationAngle.angle90) {\n        graphics.translateTransform(graphics._size[0], graphics._size[1]);\n        graphics.rotateTransform(90);\n      } else if (page.rotation === PdfRotationAngle.angle180) {\n        graphics.translateTransform(graphics._size[0], graphics._size[1]);\n        graphics.rotateTransform(-180);\n      } else if (page.rotation === PdfRotationAngle.angle270) {\n        graphics.translateTransform(graphics._size[0], graphics._size[1]);\n        graphics.rotateTransform(270);\n      }\n      graphics._sw._setTextRenderingMode(_TextRenderingMode.fill);\n      graphics._drawTemplate(template, bounds);\n      graphics.restore();\n    }\n  };\n  PdfField.prototype._addToOptions = function (item, field) {\n    if (field instanceof PdfListBoxField) {\n      field._listValues.push(item._text);\n    }\n    field._options.push([item._value, item._text]);\n    field._dictionary.set('Opt', field._options);\n    field._dictionary._updated = true;\n    if (!item._isFont && item._pdfFont) {\n      this._initializeFont(item._pdfFont);\n    }\n  };\n  PdfField.prototype._addAppearance = function (dictionary, template, key) {\n    var appearance = new _PdfDictionary();\n    if (dictionary.has('AP')) {\n      appearance = dictionary.get('AP');\n      _removeDuplicateReference(dictionary.get('AP'), this._crossReference, key);\n    } else {\n      appearance = new _PdfDictionary(this._crossReference);\n      dictionary.update('AP', appearance);\n    }\n    var reference = this._crossReference._getNextReference();\n    this._crossReference._cacheMap.set(reference, template._content);\n    appearance.update(key, reference);\n  };\n  PdfField.prototype._rotateTextBox = function (rect, size, angle) {\n    var rectangle = [0, 0, 0, 0];\n    if (angle === PdfRotationAngle.angle180) {\n      rectangle = [size[0] - (rect[0] + rect[2]), size[1] - (rect[1] + rect[3]), rect[2], rect[3]];\n    } else if (angle === PdfRotationAngle.angle270) {\n      rectangle = [rect[1], size[0] - (rect[0] + rect[2]), rect[3], rect[2]];\n    } else if (angle === PdfRotationAngle.angle90) {\n      rectangle = [size[1] - (rect[1] + rect[3]), rect[0], rect[3], rect[2]];\n    }\n    return rectangle;\n  };\n  PdfField.prototype._checkIndex = function (value, length) {\n    if (value < 0 || value !== 0 && value >= length) {\n      throw Error('Index out of range.');\n    }\n  };\n  PdfField.prototype._getAppearanceStateValue = function () {\n    var value;\n    if (this._dictionary.has('Kids')) {\n      for (var i = 0; i < this._kidsCount; i++) {\n        var item = this.itemAt(i);\n        if (item && item._dictionary && item._dictionary.has('AS')) {\n          var state = item._dictionary.get('AS');\n          if (state && state.name !== 'Off') {\n            value = state.name;\n            break;\n          }\n        }\n      }\n    } else if (this._dictionary.has('AS')) {\n      var state = this._dictionary.get('AS');\n      if (state && state.name !== 'Off') {\n        value = state.name;\n      }\n    }\n    return value;\n  };\n  PdfField.prototype._getTextAlignment = function () {\n    if (this._textAlignment === null || typeof this._textAlignment === 'undefined') {\n      if (this._isLoaded) {\n        var widget = this.itemAt(this._defaultIndex);\n        if (widget && widget._dictionary && widget._dictionary.has('Q')) {\n          this._textAlignment = widget._dictionary.get('Q');\n        } else if (this._dictionary.has('Q')) {\n          this._textAlignment = this._dictionary.get('Q');\n        } else {\n          this._textAlignment = PdfTextAlignment.left;\n        }\n      } else {\n        this._textAlignment = PdfTextAlignment.left;\n      }\n    }\n    return this._textAlignment;\n  };\n  PdfField.prototype._setTextAlignment = function (value) {\n    var widget = this.itemAt(this._defaultIndex);\n    if (this._isLoaded && !this.readOnly) {\n      if (widget && widget._dictionary) {\n        widget._dictionary.update('Q', value);\n      } else {\n        this._dictionary.update('Q', value);\n      }\n    }\n    if (!this._isLoaded && this._textAlignment !== value) {\n      if (widget && widget._dictionary) {\n        widget._dictionary.update('Q', value);\n      } else if (this._dictionary) {\n        this._dictionary.update('Q', value);\n      }\n    }\n    this._textAlignment = value;\n    this._stringFormat = new PdfStringFormat(value, PdfVerticalAlignment.middle);\n  };\n  return PdfField;\n}();\nexport { PdfField };\n/**\n * `PdfTextBoxField` class represents the text box field objects.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Access text box field\n * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfTextBoxField = /** @class */function (_super) {\n  __extends(PdfTextBoxField, _super);\n  function PdfTextBoxField(page, name, bounds) {\n    var _this = _super.call(this) || this;\n    _this._autoResizeText = false;\n    if (page && name && bounds) {\n      _this._initialize(page, name, bounds);\n    }\n    return _this;\n  }\n  /**\n   * Parse an existing text box field.\n   *\n   * @private\n   * @param {PdfForm} form Form object.\n   * @param {_PdfDictionary} dictionary Field dictionary.\n   * @param {_PdfCrossReference} crossReference Cross reference object.\n   * @param {_PdfReference} reference Field reference.\n   * @returns {PdfTextBoxField} Text box field.\n   */\n  PdfTextBoxField._load = function (form, dictionary, crossReference, reference) {\n    var field = new PdfTextBoxField();\n    field._isLoaded = true;\n    field._form = form;\n    field._dictionary = dictionary;\n    field._crossReference = crossReference;\n    field._ref = reference;\n    if (field._dictionary.has('Kids')) {\n      field._kids = field._dictionary.get('Kids');\n    }\n    field._defaultIndex = 0;\n    field._parsedItems = new Map();\n    return field;\n  };\n  Object.defineProperty(PdfTextBoxField.prototype, \"text\", {\n    /**\n     * Gets the value of the text box field.\n     *\n     * @returns {string} Text.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Gets the text value from text box field\n     * let text: string = field.text;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (typeof this._text === 'undefined') {\n        if (this._isLoaded) {\n          var text = _getInheritableProperty(this._dictionary, 'V', false, true, 'Parent');\n          if (text) {\n            this._text = text;\n          } else {\n            var widget = this.itemAt(this._defaultIndex);\n            if (widget) {\n              text = widget._dictionary.get('V');\n              if (text) {\n                this._text = text;\n              }\n            }\n          }\n        } else {\n          this._text = '';\n        }\n      }\n      return this._text;\n    },\n    /**\n     * Sets the value of the text box field.\n     *\n     * @param {string} value Text.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Sets the text value to text box field\n     * field.text = ‘Syncfusion’;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (this._isLoaded) {\n        if (!this.readOnly) {\n          if (!(this._dictionary.has('V') && this._dictionary.get('V') === value)) {\n            this._dictionary.update('V', value);\n          }\n          var widget = this.itemAt(this._defaultIndex);\n          if (widget && !(widget._dictionary.has('V') && widget._dictionary.get('V') === value)) {\n            widget._dictionary.update('V', value);\n          }\n        }\n      } else if (this._text !== value) {\n        this._dictionary.update('V', value);\n        this._text = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTextBoxField.prototype, \"textAlignment\", {\n    /**\n     * Gets the text alignment in a text box.\n     *\n     * @returns {PdfTextAlignment} Text alignment.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Gets the text alignment from text box field\n     * let alignment: PdfTextAlignment = field.textAlignment;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._getTextAlignment();\n    },\n    /**\n     * Sets the text alignment in a text box.\n     *\n     * @param {PdfTextAlignment} value Text alignment.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Sets the text alignment of form field as center\n     * field.textAlignment = PdfTextAlignment.center;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (this._textAlignment !== value) {\n        this._setTextAlignment(value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTextBoxField.prototype, \"defaultValue\", {\n    /**\n     * Gets the default value of the field.\n     *\n     * @returns {string} Default value.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Gets the default value from the text box field\n     * let value: string = field.defaultValue;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (typeof this._defaultValue === 'undefined') {\n        var text = _getInheritableProperty(this._dictionary, 'DV', false, true, 'Parent');\n        if (text) {\n          this._defaultValue = text;\n        }\n      }\n      return this._defaultValue;\n    },\n    /**\n     * Sets the default value of the field.\n     *\n     * @param {string} value Default value.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Sets the default value of the text box field\n     * field.defaultValue = 'Syncfusion';\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (value !== this.defaultValue) {\n        this._dictionary.update('DV', value);\n        this._defaultValue = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTextBoxField.prototype, \"multiLine\", {\n    /**\n     * Gets a value indicating whether this `PdfTextBoxField` is multiline.\n     *\n     * @returns {boolean} multiline.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Gets a value indicating whether this `PdfTextBoxField` is multiline.\n     * let multiLine: boolean = field.multiLine;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return (this._fieldFlags & _FieldFlag.multiLine) !== 0;\n    },\n    /**\n     * Sets a value indicating whether this `PdfTextBoxField` is multiline.\n     *\n     * @param {boolean} value multiLine or not.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Sets a value indicating whether this `PdfTextBoxField` is multiline.\n     * field.multiLine = false;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (value) {\n        this._fieldFlags |= _FieldFlag.multiLine;\n      } else {\n        this._fieldFlags &= ~_FieldFlag.multiLine;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTextBoxField.prototype, \"password\", {\n    /**\n     * Gets a value indicating whether this `PdfTextBoxField` is password.\n     *\n     * @returns {boolean} password.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Gets a value indicating whether this `PdfTextBoxField` is password.\n     * let password: boolean = field.password;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return (this._fieldFlags & _FieldFlag.password) !== 0;\n    },\n    /**\n     * Sets a value indicating whether this `PdfTextBoxField` is password.\n     *\n     * @param {boolean} value password or not.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Sets a value indicating whether this `PdfTextBoxField` is password.\n     * field.password = false;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (value) {\n        this._fieldFlags |= _FieldFlag.password;\n      } else {\n        this._fieldFlags &= ~_FieldFlag.password;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTextBoxField.prototype, \"scrollable\", {\n    /**\n     * Gets a value indicating whether this `PdfTextBoxField` is scrollable.\n     *\n     * @returns {boolean} scrollable.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Gets a value indicating whether this `PdfTextBoxField` is scrollable.\n     * let scrollable: boolean = field.scrollable;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return !((this._fieldFlags & _FieldFlag.doNotScroll) !== 0);\n    },\n    /**\n     * Sets a value indicating whether this `PdfTextBoxField` is scrollable.\n     *\n     * @param {boolean} value scrollable or not.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Sets a value indicating whether this `PdfTextBoxField` is scrollable.\n     * field.scrollable = false;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (value) {\n        this._fieldFlags &= ~_FieldFlag.doNotScroll;\n      } else {\n        this._fieldFlags |= _FieldFlag.doNotScroll;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTextBoxField.prototype, \"spellCheck\", {\n    /**\n     * Gets a value indicating whether to check spelling.\n     *\n     * @returns {boolean} spellCheck.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Gets a value indicating whether to check spelling\n     * let spellCheck: boolean = field.spellCheck;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return !((this._fieldFlags & _FieldFlag.doNotSpellCheck) !== 0);\n    },\n    /**\n     * Sets a value indicating whether to check spelling.\n     *\n     * @param {boolean} value spellCheck or not.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Sets a value indicating whether to check spelling\n     * field.spellCheck = false;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (value) {\n        this._fieldFlags &= ~_FieldFlag.doNotSpellCheck;\n      } else {\n        this._fieldFlags |= _FieldFlag.doNotSpellCheck;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTextBoxField.prototype, \"insertSpaces\", {\n    /**\n     * Meaningful only if the MaxLength property is set and the Multiline, Password properties are false.\n     * If set, the field is automatically divided into as many equally spaced positions, or combs,\n     * as the value of MaxLength, and the text is laid out into those combs.\n     *\n     * @returns {boolean} insertSpaces.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Gets a value indicating whether this `PdfTextBoxField` is insertSpaces.\n     * let insertSpaces: boolean = field.insertSpaces;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      var flags = this._fieldFlags;\n      return (_FieldFlag.comb & flags) !== 0 && (flags & _FieldFlag.multiLine) === 0 && (flags & _FieldFlag.password) === 0 && (flags & _FieldFlag.fileSelect) === 0;\n    },\n    /**\n     * Meaningful only if the MaxLength property is set and the Multiline, Password properties are false.\n     * If set, the field is automatically divided into as many equally spaced positions, or combs,\n     * as the value of MaxLength, and the text is laid out into those combs.\n     *\n     * @param {boolean} value insertSpaces.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Sets a value indicating whether this `PdfTextBoxField` is insertSpaces.\n     * field.insertSpaces = false;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (value) {\n        this._fieldFlags |= _FieldFlag.comb;\n      } else {\n        this._fieldFlags &= ~_FieldFlag.comb;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTextBoxField.prototype, \"highlightMode\", {\n    /**\n     * Gets the highlight mode of the field.\n     *\n     * @returns {PdfHighlightMode} highlight mode.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Gets the highlight mode of text box field\n     * let mode: PdfHighlightMode = field.highlightMode;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      var widget = this.itemAt(this._defaultIndex);\n      var mode;\n      if (widget && typeof widget.highlightMode !== 'undefined') {\n        mode = widget.highlightMode;\n      } else if (this._dictionary.has('H')) {\n        var name_4 = this._dictionary.get('H');\n        mode = _mapHighlightMode(name_4.name);\n      }\n      return typeof mode !== 'undefined' ? mode : PdfHighlightMode.noHighlighting;\n    },\n    /**\n     * Sets the highlight mode of the field.\n     *\n     * @param {PdfHighlightMode} value highlight mode.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Sets the highlight mode of text box field as outline\n     * field.highlightMode = PdfHighlightMode.outline;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      var widget = this.itemAt(this._defaultIndex);\n      if (widget && (typeof widget.highlightMode === 'undefined' || widget.highlightMode !== value)) {\n        widget.highlightMode = value;\n      } else if (!this._dictionary.has('H') || _mapHighlightMode(this._dictionary.get('H')) !== value) {\n        this._dictionary.update('H', _reverseMapHighlightMode(value));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTextBoxField.prototype, \"maxLength\", {\n    /**\n     * Gets the maximum length of the field, in characters.\n     *\n     * @returns {number} maximum length.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Gets the maximum length of the field, in characters.\n     * let maxLength: number = field.maxLength;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (typeof this._maxLength === 'undefined') {\n        var length_1 = _getInheritableProperty(this._dictionary, 'MaxLen', false, true, 'Parent');\n        this._maxLength = typeof length_1 !== 'undefined' && Number.isInteger(length_1) ? length_1 : 0;\n      }\n      return this._maxLength;\n    },\n    /**\n     * Sets the maximum length of the field, in characters.\n     *\n     * @param {number} value maximum length.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Sets the maximum length of the field, in characters.\n     * field.maxLength = 20;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (this.maxLength !== value) {\n        this._dictionary.update('MaxLen', value);\n        this._maxLength = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTextBoxField.prototype, \"isAutoResizeText\", {\n    /**\n     * Gets the flag indicating whether the auto resize text enabled or not.\n     * Note: Applicable only for newly created PDF fields.\n     *\n     * @returns {boolean} Enable or disable auto resize text.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Gets the flag indicating whether the auto resize text enabled or not.\n     * let isAutoResize: boolean = field.isAutoResizeText;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._autoResizeText;\n    },\n    /**\n     * Sets the flag indicating whether the auto resize text enabled or not.\n     * Note: Applicable only for newly created PDF fields.\n     *\n     * @param {boolean} value Enable or disable auto resize text.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Sets the flag indicating whether the auto resize text enabled or not.\n     * field.isAutoResizeText = false;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      this._autoResizeText = value;\n      var widget = this.itemAt(this._defaultIndex);\n      if (widget) {\n        widget._isAutoResize = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTextBoxField.prototype, \"font\", {\n    /**\n     * Gets the font of the field.\n     *\n     * @returns {PdfFont} font.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Gets the font of the field.\n     * let font: PdfFont = field.font;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (this._font) {\n        return this._font;\n      } else {\n        var widget = this.itemAt(this._defaultIndex);\n        this._font = _obtainFontDetails(this._form, widget, this);\n      }\n      return this._font;\n    },\n    /**\n     * Sets the font of the field.\n     *\n     * @param {PdfFont} value font.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n     * // Sets the font of the field\n     * field.font = new PdfStandardFont(PdfFontFamily.helvetica, 12, PdfFontStyle.bold);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (value && value instanceof PdfFont) {\n        this._font = value;\n        this._initializeFont(value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTextBoxField.prototype, \"backColor\", {\n    /**\n     * Gets the background color of the field.\n     *\n     * @returns {number[]} R, G, B color values in between 0 to 255.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the background color of the field.\n     * let backColor: number[] = field.backColor;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._parseBackColor(true);\n    },\n    /**\n     * Sets the background color of the field.\n     *\n     * @param {number[]} value Array with R, G, B, A color values in between 0 to 255. For optional A (0-254), it signifies transparency.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the text box field at index 0\n     * let firstName: PdfField = document.form.fieldAt(0);\n     * // Sets the background color of the field.\n     * firstName.backColor = [255, 0, 0];\n     * // Access the text box field at index 1\n     * let secondName: PdfField = document.form.fieldAt(1);\n     * // Sets the background color of the field to transparent.\n     * secondName.backColor = [0, 0, 0, 0];\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      this._updateBackColor(value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfTextBoxField.prototype._initialize = function (page, name, bounds) {\n    this._crossReference = page._crossReference;\n    this._page = page;\n    this._name = name;\n    this._text = '';\n    this._defaultValue = '';\n    this._defaultIndex = 0;\n    this._spellCheck = false;\n    this._insertSpaces = false;\n    this._multiline = false;\n    this._password = false;\n    this._scrollable = false;\n    this._dictionary = new _PdfDictionary(this._crossReference);\n    this._ref = this._crossReference._getNextReference();\n    this._crossReference._cacheMap.set(this._ref, this._dictionary);\n    this._dictionary.objId = this._ref.toString();\n    this._dictionary.update('FT', _PdfName.get('Tx'));\n    this._dictionary.update('T', name);\n    this._fieldFlags |= _FieldFlag.doNotSpellCheck;\n    this._initializeFont(this._defaultFont);\n    this._createItem(bounds);\n  };\n  PdfTextBoxField.prototype._createItem = function (bounds) {\n    var widget = new PdfWidgetAnnotation();\n    widget._create(this._page, bounds, this);\n    widget.textAlignment = PdfTextAlignment.left;\n    this._stringFormat = new PdfStringFormat(widget.textAlignment, PdfVerticalAlignment.middle);\n    widget._dictionary.update('MK', new _PdfDictionary(this._crossReference));\n    widget._mkDictionary.update('BC', [0, 0, 0]);\n    widget._mkDictionary.update('BG', [1, 1, 1]);\n    widget._mkDictionary.update('CA', this.actualName);\n    this._addToKid(widget);\n  };\n  PdfTextBoxField.prototype._doPostProcess = function (isFlatten) {\n    if (isFlatten === void 0) {\n      isFlatten = false;\n    }\n    if (isFlatten || this._setAppearance || this._form._setAppearance) {\n      var count = this._kidsCount;\n      if (this._isLoaded) {\n        if (count > 0) {\n          for (var i = 0; i < count; i++) {\n            var item = this.itemAt(i);\n            if (item) {\n              this._postProcess(isFlatten, item);\n            }\n          }\n        } else if ((isFlatten || this._form._setAppearance || this._setAppearance) && !this._checkFieldFlag(this._dictionary)) {\n          this._postProcess(isFlatten);\n        }\n      } else if (isFlatten || this._form._setAppearance || this._setAppearance) {\n        for (var i = 0; i < count; i++) {\n          var item = this.itemAt(i);\n          if (item && !this._checkFieldFlag(item._dictionary)) {\n            var template = this._createAppearance(isFlatten, item);\n            if (isFlatten) {\n              this._drawTemplate(template, item._page, {\n                x: item.bounds.x,\n                y: item.bounds.y,\n                width: template._size[0],\n                height: template._size[1]\n              });\n            } else {\n              this._addAppearance(item._dictionary, template, 'N');\n            }\n            item._dictionary._updated = !isFlatten;\n          }\n        }\n      }\n      if (isFlatten) {\n        this._dictionary._updated = false;\n      }\n    }\n  };\n  PdfTextBoxField.prototype._postProcess = function (isFlatten, widget) {\n    var template;\n    var bounds;\n    var source = widget ? widget : this;\n    if (this._form._setAppearance || this._setAppearance || isFlatten && !source._dictionary.has('AP')) {\n      template = this._createAppearance(isFlatten, source);\n    } else if (source._dictionary.has('AP')) {\n      var appearanceStream = void 0;\n      var dictionary = source._dictionary.get('AP');\n      if (dictionary && dictionary.has('N')) {\n        appearanceStream = dictionary.get('N');\n        var reference = dictionary.getRaw('N');\n        if (reference) {\n          appearanceStream.reference = reference;\n        }\n        if (appearanceStream) {\n          template = new PdfTemplate(appearanceStream, this._crossReference);\n        }\n      }\n    }\n    if (template) {\n      if (isFlatten) {\n        var page = source instanceof PdfWidgetAnnotation ? source._getPage() : source.page;\n        if (page) {\n          var graphics = page.graphics;\n          graphics.save();\n          if (page.rotation === PdfRotationAngle.angle90) {\n            graphics.translateTransform(graphics._size[0], graphics._size[1]);\n            graphics.rotateTransform(90);\n          } else if (page.rotation === PdfRotationAngle.angle180) {\n            graphics.translateTransform(graphics._size[0], graphics._size[1]);\n            graphics.rotateTransform(-180);\n          } else if (page.rotation === PdfRotationAngle.angle270) {\n            graphics.translateTransform(graphics._size[0], graphics._size[1]);\n            graphics.rotateTransform(270);\n          }\n          bounds = {\n            x: source.bounds.x,\n            y: source.bounds.y,\n            width: template._size[0],\n            height: template._size[1]\n          };\n          graphics._drawTemplate(template, bounds);\n          graphics.restore();\n        }\n        source._dictionary._updated = false;\n      } else {\n        this._addAppearance(source._dictionary, template, 'N');\n      }\n    }\n  };\n  PdfTextBoxField.prototype._createAppearance = function (isFlatten, widget) {\n    var bounds = widget.bounds;\n    var template = new PdfTemplate([0, 0, bounds.width, bounds.height], this._crossReference);\n    _setMatrix(template, null);\n    template._writeTransformation = false;\n    var graphics = template.graphics;\n    var parameter = new _PaintParameter();\n    parameter.bounds = [0, 0, bounds.width, bounds.height];\n    var backcolor = widget.backColor;\n    if (isFlatten && backcolor) {\n      parameter.backBrush = new PdfBrush(backcolor);\n    }\n    parameter.foreBrush = new PdfBrush(widget.color);\n    var border = widget.border;\n    parameter.borderPen = new PdfPen(widget.borderColor, border.width);\n    parameter.borderStyle = border.style;\n    parameter.borderWidth = border.width;\n    if (backcolor) {\n      var shadowColor = [backcolor[0] - 64, backcolor[1] - 64, backcolor[2] - 64];\n      var color = [shadowColor[0] >= 0 ? shadowColor[0] : 0, shadowColor[1] >= 0 ? shadowColor[1] : 0, shadowColor[2] >= 0 ? shadowColor[2] : 0];\n      parameter.shadowBrush = new PdfBrush(color);\n    }\n    parameter.rotationAngle = widget.rotate;\n    parameter.insertSpaces = this.insertSpaces;\n    var text = this.text;\n    if (text === null || typeof text === 'undefined') {\n      text = '';\n    }\n    if (this.password) {\n      var password = '';\n      for (var i = 0; i < text.length; i++) {\n        password += '*';\n      }\n      text = password;\n    }\n    parameter.required = this.required;\n    if (!this.required) {\n      graphics._sw._beginMarkupSequence('Tx');\n      graphics._initializeCoordinates();\n    }\n    if (typeof this._font === 'undefined' || this._font === null) {\n      this._font = this._defaultFont;\n    }\n    if (typeof this._stringFormat === 'undefined' || this._stringFormat === null) {\n      if (typeof this.textAlignment === 'undefined' || this.textAlignment === null) {\n        this._stringFormat = new PdfStringFormat(this.textAlignment, PdfVerticalAlignment.middle);\n      } else {\n        this._stringFormat = new PdfStringFormat(PdfTextAlignment.left, PdfVerticalAlignment.middle);\n      }\n    }\n    this._drawTextBox(graphics, parameter, text, this._font, this._stringFormat, this.multiLine, this.scrollable, this.maxLength);\n    if (!this.required) {\n      graphics._sw._endMarkupSequence();\n    }\n    return template;\n  };\n  PdfTextBoxField.prototype._drawTextBox = function (g, parameter, text, font, format, multiline, scroll, maxLength) {\n    if (typeof maxLength !== 'undefined') {\n      if (parameter.insertSpaces) {\n        var width = 0;\n        if (typeof maxLength !== 'undefined' && maxLength > 0) {\n          width = parameter.bounds[2] / maxLength;\n          g.drawRectangle(parameter.bounds[0], parameter.bounds[1], parameter.bounds[2], parameter.bounds[3], parameter.borderPen, parameter.backBrush);\n          var current = text;\n          for (var i = 0; i < maxLength; i++) {\n            if (format.alignment === PdfTextAlignment.right) {\n              if (maxLength - current.length <= i) {\n                text = current[i - (maxLength - current.length)];\n              } else {\n                text = '';\n              }\n            } else {\n              if (format.alignment === PdfTextAlignment.center && current.length < maxLength) {\n                var startlocation = maxLength / 2 - Math.ceil(current.length / 2);\n                if (i >= startlocation && i < startlocation + current.length) {\n                  text = current[i - startlocation];\n                } else {\n                  text = '';\n                }\n              } else {\n                if (current.length > i) {\n                  text = current[Number.parseInt(i.toString(), 10)];\n                } else {\n                  text = '';\n                }\n              }\n            }\n            parameter.bounds[2] = width;\n            format.alignment = PdfTextAlignment.center;\n            this._drawTextBox(g, parameter, text, font, format, multiline, scroll);\n            parameter.bounds[0] = parameter.bounds[0] + width;\n            if (parameter.borderWidth) {\n              g.drawLine(parameter.borderPen, parameter.bounds[0], parameter.bounds[1], parameter.bounds[0], parameter.bounds[1] + parameter.bounds[3]);\n            }\n          }\n        } else {\n          this._drawTextBox(g, parameter, text, font, format, multiline, scroll);\n        }\n      } else {\n        this._drawTextBox(g, parameter, text, font, format, multiline, scroll);\n      }\n    } else {\n      if (g._isTemplateGraphics && parameter.required) {\n        g.save();\n        g._initializeCoordinates();\n      }\n      if (!parameter.insertSpaces) {\n        this._drawRectangularControl(g, parameter);\n      }\n      if (g._isTemplateGraphics && parameter.required) {\n        g.restore();\n        g.save();\n        g._sw._beginMarkupSequence('Tx');\n        g._initializeCoordinates();\n      }\n      var rectangle = parameter.bounds;\n      if (parameter.borderStyle === PdfBorderStyle.beveled || parameter.borderStyle === PdfBorderStyle.inset) {\n        rectangle[0] = rectangle[0] + 4 * parameter.borderWidth;\n        rectangle[2] = rectangle[2] - 8 * parameter.borderWidth;\n      } else {\n        rectangle[0] = rectangle[0] + 2 * parameter.borderWidth;\n        rectangle[2] = rectangle[2] - 4 * parameter.borderWidth;\n      }\n      if (multiline) {\n        var tempheight = typeof format === 'undefined' || format === null || format.lineSpacing === 0 ? font._metrics._getHeight() : format.lineSpacing;\n        var ascent = font._metrics._getAscent(format);\n        var shift = tempheight - ascent;\n        if (text.indexOf('\\n') !== -1) {\n          if (rectangle[0] === 0 && rectangle[1] === 1) {\n            rectangle[1] = -(rectangle[1] - shift);\n          }\n        } else if (rectangle[0] === 0 && rectangle[1] === 1) {\n          rectangle[1] = -(rectangle[1] - shift);\n        }\n        if (parameter.isAutoFontSize) {\n          if (parameter.borderWidth !== 0) {\n            rectangle[1] = rectangle[1] + 2.5 * parameter.borderWidth;\n          }\n        }\n      }\n      if (g._page && typeof g._page.rotation !== 'undefined' && g._page.rotation !== PdfRotationAngle.angle0 || parameter.rotationAngle > 0) {\n        var state = g.save();\n        if (typeof parameter.pageRotationAngle !== 'undefined' && parameter.pageRotationAngle !== PdfRotationAngle.angle0) {\n          if (parameter.pageRotationAngle === PdfRotationAngle.angle90) {\n            g.translateTransform(g._size[1], 0);\n            g.rotateTransform(90);\n            var y = g._size[1] - (rectangle[0] + rectangle[2]);\n            var x = rectangle[1];\n            rectangle = [x, y, rectangle[3], rectangle[2]];\n          } else if (parameter.pageRotationAngle === PdfRotationAngle.angle180) {\n            g.translateTransform(g._size[0], g._size[1]);\n            g.rotateTransform(-180);\n            var x = g._size[0] - (rectangle[0] + rectangle[2]);\n            var y = g._size[1] - (rectangle[1] + rectangle[3]);\n            rectangle = [x, y, rectangle[2], rectangle[3]];\n          } else if (parameter.pageRotationAngle === PdfRotationAngle.angle270) {\n            g.translateTransform(0, g._size[0]);\n            g.rotateTransform(270);\n            var x = g._size[0] - (rectangle[1] + rectangle[3]);\n            var y = rectangle[0];\n            rectangle = [x, y, rectangle[3], rectangle[2]];\n          }\n        }\n        if (parameter.rotationAngle) {\n          if (parameter.rotationAngle === 90) {\n            if (parameter.pageRotationAngle === PdfRotationAngle.angle90) {\n              g.translateTransform(0, g._size[1]);\n              g.rotateTransform(-90);\n              var x = g._size[1] - (rectangle[1] + rectangle[3]);\n              var y = rectangle[0];\n              rectangle = [x, y, rectangle[3], rectangle[2]];\n            } else {\n              if (rectangle[2] > rectangle[3]) {\n                g.translateTransform(0, g._size[1]);\n                g.rotateTransform(-90);\n                rectangle = [parameter.bounds[0], parameter.bounds[1], parameter.bounds[2], parameter.bounds[3]];\n              } else {\n                var z = rectangle[0];\n                rectangle[0] = -(rectangle[1] + rectangle[3]);\n                rectangle[1] = z;\n                var height = rectangle[3];\n                rectangle[3] = rectangle[2] > font._metrics._getHeight() ? rectangle[2] : font._metrics._getHeight();\n                rectangle[2] = height;\n                g.rotateTransform(-90);\n              }\n            }\n          } else if (parameter.rotationAngle === 270) {\n            g.translateTransform(g._size[0], 0);\n            g.rotateTransform(-270);\n            var x = rectangle[1];\n            var y = g._size[0] - (rectangle[0] + rectangle[2]);\n            rectangle = [x, y, rectangle[3], rectangle[2]];\n          } else if (parameter.rotationAngle === 180) {\n            g.translateTransform(g._size[0], g._size[1]);\n            g.rotateTransform(-180);\n            var x = g._size[0] - (rectangle[0] + rectangle[2]);\n            var y = g._size[1] - (rectangle[1] + rectangle[3]);\n            rectangle = [x, y, rectangle[2], rectangle[3]];\n          }\n        }\n        g.drawString(text, font, rectangle, null, parameter.foreBrush, format);\n        g.restore(state);\n      } else {\n        g.drawString(text, font, rectangle, null, parameter.foreBrush, format);\n      }\n      if (g._isTemplateGraphics && parameter.required) {\n        g._sw._endMarkupSequence();\n        g.restore();\n      }\n    }\n  };\n  return PdfTextBoxField;\n}(PdfField);\nexport { PdfTextBoxField };\n/**\n * `PdfButtonField` class represents the button field objects.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Gets the first page of the document\n * let page: PdfPage = document.getPage(0);\n * // Access the PDF form\n * let form: PdfForm = document.form;\n * // Create a new button field\n * let field: PdfButtonField = new PdfButtonField(page , 'Button1', {x: 100, y: 40, width: 100, height: 20});\n * // Add the field into PDF form\n * form.add(field);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfButtonField = /** @class */function (_super) {\n  __extends(PdfButtonField, _super);\n  function PdfButtonField(page, name, bounds) {\n    var _this = _super.call(this) || this;\n    if (page && name && bounds) {\n      _this._initialize(page, name, bounds);\n    }\n    return _this;\n  }\n  Object.defineProperty(PdfButtonField.prototype, \"text\", {\n    /**\n     * Gets value of the text box field.\n     *\n     * @returns {string} Text.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access text box field\n     * let field: PdfButtonField = document.form.fieldAt(0) as PdfButtonField;\n     * // Gets the text value from button field\n     * let text: string = field.text;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (this._isLoaded) {\n        if (typeof this._text === 'undefined') {\n          var widget = this.itemAt(this._defaultIndex);\n          if (widget && widget._mkDictionary && widget._mkDictionary.has('CA')) {\n            this._text = widget._mkDictionary.get('CA');\n          } else if (this._mkDictionary && this._mkDictionary.has('CA')) {\n            this._text = this._mkDictionary.get('CA');\n          }\n        }\n        if (typeof this._text === 'undefined') {\n          var value = _getInheritableProperty(this._dictionary, 'V', false, true, 'Parent');\n          if (value) {\n            this._text = value;\n          }\n        }\n      }\n      if (typeof this._text === 'undefined') {\n        this._text = '';\n      }\n      return this._text;\n    },\n    /**\n     * Sets value of the text box field.\n     *\n     * @param {string} value Text.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access button field\n     * let field: PdfButtonField = document.form.fieldAt(0) as PdfButtonField;\n     * // Sets the text value of form field\n     * field.text = ’Click to submit’;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (this._isLoaded && !this.readOnly) {\n        var widget = this.itemAt(this._defaultIndex);\n        if (widget && widget._dictionary) {\n          this._assignText(widget._dictionary, value);\n        } else {\n          this._assignText(this._dictionary, value);\n        }\n      }\n      if (!this._isLoaded && this._text !== value) {\n        var widget = this.itemAt(this._defaultIndex);\n        this._assignText(widget._dictionary, value);\n        this._text = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfButtonField.prototype, \"textAlignment\", {\n    /**\n     * Gets the text alignment in a button field.\n     *\n     * @returns {PdfTextAlignment} Text alignment.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access button field\n     * let field: PdfButtonField = document.form.fieldAt(0) as PdfButtonField;\n     * // Gets the text alignment from button field\n     * let alignment: PdfTextAlignment = field.textAlignment;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._getTextAlignment();\n    },\n    /**\n     * Sets the text alignment in a button field.\n     *\n     * @param {PdfTextAlignment} value Text alignment.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access button field\n     * let field: PdfButtonField = document.form.fieldAt(0) as PdfButtonField;\n     * // Sets the text alignment of form field as center\n     * field.textAlignment = PdfTextAlignment.center;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (this._textAlignment !== value) {\n        this._setTextAlignment(value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfButtonField.prototype, \"highlightMode\", {\n    /**\n     * Gets the highlight mode of the field.\n     *\n     * @returns {PdfHighlightMode} highlight mode.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access button field\n     * let field: PdfButtonField = document.form.fieldAt(0) as PdfButtonField;\n     * // Gets the highlight mode from button field\n     * let highlightMode: PdfHighlightMode = field. highlightMode;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      var widget = this.itemAt(this._defaultIndex);\n      var mode;\n      if (widget && typeof widget.highlightMode !== 'undefined') {\n        mode = widget.highlightMode;\n      } else if (this._dictionary.has('H')) {\n        var highlight = this._dictionary.get('H');\n        mode = _mapHighlightMode(highlight.name);\n      }\n      return typeof mode !== 'undefined' ? mode : PdfHighlightMode.invert;\n    },\n    /**\n     * Sets the highlight mode of the field.\n     *\n     * @param {PdfHighlightMode} value highlight mode.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access button field\n     * let field: PdfButtonField = document.form.fieldAt(0) as PdfButtonField;\n     * // Sets the highlight mode of button field as outline\n     * field.highlightMode = PdfHighlightMode.outline;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      var widget = this.itemAt(this._defaultIndex);\n      if (widget && (typeof widget.highlightMode === 'undefined' || widget.highlightMode !== value)) {\n        widget.highlightMode = value;\n      } else if (!this._dictionary.has('H') || _mapHighlightMode(this._dictionary.get('H')) !== value) {\n        this._dictionary.update('H', _reverseMapHighlightMode(value));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfButtonField.prototype, \"font\", {\n    /**\n     * Gets the font of the field.\n     *\n     * @returns {PdfFont} font.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfButtonField = document.form.fieldAt(0) as PdfButtonField;\n     * // Gets the font of the field.\n     * let font: PdfFont = field.font;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (this._font) {\n        return this._font;\n      } else {\n        var widget = this.itemAt(this._defaultIndex);\n        this._font = _obtainFontDetails(this._form, widget, this);\n      }\n      return this._font;\n    },\n    /**\n     * Sets the font of the field.\n     *\n     * @param {PdfFont} value font.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfButtonField = document.form.fieldAt(0) as PdfButtonField;\n     * // Sets the font of the field\n     * field.font = new PdfStandardFont(PdfFontFamily.helvetica, 12, PdfFontStyle.bold);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (value && value instanceof PdfFont) {\n        this._font = value;\n        this._initializeFont(value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfButtonField.prototype, \"backColor\", {\n    /**\n     * Gets the background color of the field.\n     *\n     * @returns {number[]} R, G, B color values in between 0 to 255.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the background color of the field.\n     * let backColor: number[] = field.backColor;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._parseBackColor(true);\n    },\n    /**\n     * Sets the background color of the field.\n     *\n     * @param {number[]} value Array with R, G, B, A color values in between 0 to 255. For optional A (0-254), it signifies transparency.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the button field at index 0\n     * let submitButton: PdfField = document.form.fieldAt(0);\n     * // Sets the background color of the field.\n     * submitButton.backColor = [255, 0, 0];\n     * // Access the button field at index 1\n     * let cancelButton: PdfField = document.form.fieldAt(1);\n     * // Sets the background color of the field to transparent.\n     * cancelButton.backColor = [0, 0, 0, 0];\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      this._updateBackColor(value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfButtonField.prototype._assignText = function (fieldDictionary, value) {\n    var dictionary;\n    if (fieldDictionary.has('MK')) {\n      dictionary = fieldDictionary.get('MK');\n    } else {\n      dictionary = new _PdfDictionary(this._crossReference);\n      fieldDictionary.set('MK', dictionary);\n    }\n    dictionary.update('CA', value);\n    fieldDictionary._updated = true;\n  };\n  /**\n   * Parse an existing button field.\n   *\n   * @private\n   * @param {PdfForm} form Form object.\n   * @param {_PdfDictionary} dictionary Field dictionary.\n   * @param {_PdfCrossReference} crossReference Cross reference object.\n   * @param {_PdfReference} reference Field reference.\n   * @returns {PdfButtonField} Button field.\n   */\n  PdfButtonField._load = function (form, dictionary, crossReference, reference) {\n    var field = new PdfButtonField();\n    field._isLoaded = true;\n    field._form = form;\n    field._dictionary = dictionary;\n    field._crossReference = crossReference;\n    field._ref = reference;\n    if (field._dictionary.has('Kids')) {\n      field._kids = field._dictionary.get('Kids');\n    }\n    field._defaultIndex = 0;\n    field._parsedItems = new Map();\n    return field;\n  };\n  PdfButtonField.prototype._initialize = function (page, name, bounds) {\n    this._crossReference = page._crossReference;\n    this._page = page;\n    this._name = name;\n    this._defaultIndex = 0;\n    this._dictionary = new _PdfDictionary(this._crossReference);\n    this._ref = this._crossReference._getNextReference();\n    this._crossReference._cacheMap.set(this._ref, this._dictionary);\n    this._dictionary.objId = this._ref.toString();\n    this._dictionary.update('FT', _PdfName.get('Btn'));\n    this._dictionary.update('T', name);\n    this._fieldFlags |= _FieldFlag.pushButton;\n    this._initializeFont(this._defaultFont);\n    this._createItem(bounds);\n  };\n  PdfButtonField.prototype._createItem = function (bounds) {\n    var widget = new PdfWidgetAnnotation();\n    widget._create(this._page, bounds, this);\n    widget.textAlignment = PdfTextAlignment.center;\n    this._stringFormat = new PdfStringFormat(widget.textAlignment, PdfVerticalAlignment.middle);\n    widget._dictionary.update('MK', new _PdfDictionary(this._crossReference));\n    widget._mkDictionary.update('BC', [0, 0, 0]);\n    widget._mkDictionary.update('BG', [.827451, .827451, .827451]);\n    widget._mkDictionary.update('CA', typeof this._name !== 'undefined' && this._name !== null ? this._name : this._actualName);\n    this._addToKid(widget);\n  };\n  PdfButtonField.prototype._doPostProcess = function (isFlatten) {\n    if (isFlatten === void 0) {\n      isFlatten = false;\n    }\n    if (isFlatten || this._setAppearance || this._form._setAppearance) {\n      var count = this._kidsCount;\n      if (this._isLoaded) {\n        if (count > 0) {\n          for (var i = 0; i < count; i++) {\n            var item = this.itemAt(i);\n            if (item) {\n              this._postProcess(isFlatten, item);\n            }\n          }\n        } else if ((isFlatten || this._form._setAppearance || this._setAppearance) && !this._checkFieldFlag(this._dictionary)) {\n          this._postProcess(isFlatten);\n        }\n      } else if (isFlatten || this._form._setAppearance || this._setAppearance) {\n        for (var i = 0; i < count; i++) {\n          var item = this.itemAt(i);\n          if (item && !this._checkFieldFlag(item._dictionary)) {\n            var template = this._createAppearance(item);\n            if (isFlatten) {\n              this._drawTemplate(template, item._getPage(), {\n                x: item.bounds.x,\n                y: item.bounds.y,\n                width: template._size[0],\n                height: template._size[1]\n              });\n            } else {\n              this._addAppearance(item._dictionary, template, 'N');\n              var pressed = this._createAppearance(item, true);\n              if (pressed) {\n                this._addAppearance(item._dictionary, pressed, 'D');\n              }\n            }\n            item._dictionary._updated = !isFlatten;\n          }\n        }\n      }\n      if (isFlatten) {\n        this._dictionary._updated = false;\n      }\n    }\n  };\n  PdfButtonField.prototype._postProcess = function (isFlatten, widget) {\n    var template;\n    var bounds;\n    var source = widget ? widget : this;\n    if (this._form._setAppearance || this._setAppearance || isFlatten && !source._dictionary.has('AP')) {\n      template = this._createAppearance(source);\n    } else if (source._dictionary.has('AP')) {\n      var appearanceStream = void 0;\n      var dictionary = source._dictionary.get('AP');\n      if (dictionary && dictionary.has('N')) {\n        appearanceStream = dictionary.get('N');\n        var reference = dictionary.getRaw('N');\n        if (reference) {\n          appearanceStream.reference = reference;\n        }\n        if (appearanceStream) {\n          template = new PdfTemplate(appearanceStream, this._crossReference);\n        }\n      }\n    }\n    if (template) {\n      if (isFlatten) {\n        var page = source instanceof PdfWidgetAnnotation ? source._getPage() : source.page;\n        if (page) {\n          var graphics = page.graphics;\n          graphics.save();\n          if (page.rotation === PdfRotationAngle.angle90) {\n            graphics.translateTransform(graphics._size[0], graphics._size[1]);\n            graphics.rotateTransform(90);\n          } else if (page.rotation === PdfRotationAngle.angle180) {\n            graphics.translateTransform(graphics._size[0], graphics._size[1]);\n            graphics.rotateTransform(-180);\n          } else if (page.rotation === PdfRotationAngle.angle270) {\n            graphics.translateTransform(graphics._size[0], graphics._size[1]);\n            graphics.rotateTransform(270);\n          }\n          bounds = {\n            x: source.bounds.x,\n            y: source.bounds.y,\n            width: template._size[0],\n            height: template._size[1]\n          };\n          graphics._drawTemplate(template, bounds);\n          graphics.restore();\n        }\n        source._dictionary._updated = false;\n      } else {\n        this._addAppearance(source._dictionary, template, 'N');\n      }\n    }\n  };\n  PdfButtonField.prototype._createAppearance = function (widget, isPressed) {\n    if (isPressed === void 0) {\n      isPressed = false;\n    }\n    var bounds = widget.bounds;\n    var template = new PdfTemplate([0, 0, bounds.width, bounds.height], this._crossReference);\n    var parameter = new _PaintParameter();\n    parameter.bounds = [0, 0, bounds.width, bounds.height];\n    var backcolor = widget.backColor;\n    if (backcolor) {\n      parameter.backBrush = new PdfBrush(backcolor);\n    }\n    parameter.foreBrush = new PdfBrush(widget.color);\n    var border = widget.border;\n    parameter.borderPen = new PdfPen(widget.borderColor, border.width);\n    parameter.borderStyle = border.style;\n    parameter.borderWidth = border.width;\n    if (backcolor) {\n      var shadowColor = [backcolor[0] - 64, backcolor[1] - 64, backcolor[2] - 64];\n      var color = [shadowColor[0] >= 0 ? shadowColor[0] : 0, shadowColor[1] >= 0 ? shadowColor[1] : 0, shadowColor[2] >= 0 ? shadowColor[2] : 0];\n      parameter.shadowBrush = new PdfBrush(color);\n    }\n    parameter.rotationAngle = widget.rotate;\n    if (typeof this._font === 'undefined' || this._font === null) {\n      this._font = this._defaultFont;\n    }\n    if (isPressed) {\n      this._drawPressedButton(template.graphics, parameter, this.text, this._font, this._stringFormat);\n    } else {\n      this._drawButton(template.graphics, parameter, this.text, this._font, this._stringFormat);\n    }\n    return template;\n  };\n  PdfButtonField.prototype._drawButton = function (g, parameter, text, font, format) {\n    this._drawRectangularControl(g, parameter);\n    var rectangle = parameter.bounds;\n    if (g._page && typeof g._page.rotation !== 'undefined' && g._page.rotation !== PdfRotationAngle.angle0 || parameter.rotationAngle > 0) {\n      var state = g.save();\n      if (typeof parameter.pageRotationAngle !== 'undefined' && parameter.pageRotationAngle !== PdfRotationAngle.angle0) {\n        if (parameter.pageRotationAngle === PdfRotationAngle.angle90) {\n          g.translateTransform(g._size[1], 0);\n          g.rotateTransform(90);\n          var y = g._size[1] - (rectangle[0] + rectangle[2]);\n          var x = rectangle[1];\n          rectangle = [x, y, rectangle[3], rectangle[2]];\n        } else if (parameter.pageRotationAngle === PdfRotationAngle.angle180) {\n          g.translateTransform(g._size[0], g._size[1]);\n          g.rotateTransform(-180);\n          var x = g._size[0] - (rectangle[0] + rectangle[2]);\n          var y = g._size[1] - (rectangle[1] + rectangle[3]);\n          rectangle = [x, y, rectangle[2], rectangle[3]];\n        } else if (parameter.pageRotationAngle === PdfRotationAngle.angle270) {\n          g.translateTransform(0, g._size[0]);\n          g.rotateTransform(270);\n          var x = g._size[0] - (rectangle[1] + rectangle[3]);\n          var y = rectangle[0];\n          rectangle = [x, y, rectangle[3], rectangle[2]];\n        }\n      }\n      if (parameter.rotationAngle) {\n        if (parameter.rotationAngle === 90) {\n          if (parameter.pageRotationAngle === PdfRotationAngle.angle90) {\n            g.translateTransform(0, g._size[1]);\n            g.rotateTransform(-90);\n            var x = g._size[1] - (rectangle[1] + rectangle[3]);\n            var y = rectangle[0];\n            rectangle = [x, y, rectangle[3], rectangle[2]];\n          } else {\n            if (rectangle[2] > rectangle[3]) {\n              g.translateTransform(0, g._size[1]);\n              g.rotateTransform(-90);\n              rectangle = [parameter.bounds[0], parameter.bounds[1], parameter.bounds[2], parameter.bounds[3]];\n            } else {\n              var z = rectangle[0];\n              rectangle[0] = -(rectangle[1] + rectangle[3]);\n              rectangle[1] = z;\n              var height = rectangle[3];\n              rectangle[3] = rectangle[2] > font._metrics._getHeight() ? rectangle[2] : font._metrics._getHeight();\n              rectangle[2] = height;\n              g.rotateTransform(-90);\n            }\n          }\n        } else if (parameter.rotationAngle === 270) {\n          g.translateTransform(g._size[0], 0);\n          g.rotateTransform(-270);\n          var x = rectangle[1];\n          var y = g._size[0] - (rectangle[0] + rectangle[2]);\n          rectangle = [x, y, rectangle[3], rectangle[2]];\n        } else if (parameter.rotationAngle === 180) {\n          g.translateTransform(g._size[0], g._size[1]);\n          g.rotateTransform(-180);\n          var x = g._size[0] - (rectangle[0] + rectangle[2]);\n          var y = g._size[1] - (rectangle[1] + rectangle[3]);\n          rectangle = [x, y, rectangle[2], rectangle[3]];\n        }\n      }\n      g.drawString(text, font, rectangle, null, parameter.foreBrush, format);\n      g.restore(state);\n    } else {\n      g.drawString(text, font, rectangle, null, parameter.foreBrush, format);\n    }\n  };\n  PdfButtonField.prototype._drawPressedButton = function (g, parameter, text, font, format) {\n    switch (parameter.borderStyle) {\n      case PdfBorderStyle.inset:\n        g.drawRectangle(parameter.bounds[0], parameter.bounds[1], parameter.bounds[2], parameter.bounds[3], parameter.shadowBrush);\n        break;\n      default:\n        g.drawRectangle(parameter.bounds[0], parameter.bounds[1], parameter.bounds[2], parameter.bounds[3], parameter.backBrush);\n        break;\n    }\n    this._drawBorder(g, parameter.bounds, parameter.borderPen, parameter.borderStyle, parameter.borderWidth);\n    var rectangle = [parameter.borderWidth, parameter.borderWidth, parameter.bounds[2] - parameter.borderWidth, parameter.bounds[3] - parameter.borderWidth];\n    g.drawString(text, font, rectangle, null, parameter.foreBrush, format);\n    switch (parameter.borderStyle) {\n      case PdfBorderStyle.inset:\n        this._drawLeftTopShadow(g, parameter.bounds, parameter.borderWidth, this._grayBrush);\n        this._drawRightBottomShadow(g, parameter.bounds, parameter.borderWidth, this._silverBrush);\n        break;\n      case PdfBorderStyle.beveled:\n        this._drawLeftTopShadow(g, parameter.bounds, parameter.borderWidth, parameter.shadowBrush);\n        this._drawRightBottomShadow(g, parameter.bounds, parameter.borderWidth, this._whiteBrush);\n        break;\n      default:\n        this._drawLeftTopShadow(g, parameter.bounds, parameter.borderWidth, parameter.shadowBrush);\n        break;\n    }\n  };\n  return PdfButtonField;\n}(PdfField);\nexport { PdfButtonField };\n/**\n * `PdfCheckBoxField` class represents the check box field objects.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Gets the first page of the document\n * let page: PdfPage = document.getPage(0);\n * // Access the PDF form\n * let form: PdfForm = document.form;\n * // Create a new check box field\n * let field: PdfCheckBoxField = new PdfCheckBoxField('CheckBox1', {x: 100, y: 40, width: 20, height: 20}, page);\n * // Sets the checked flag as true.\n * field.checked = true;\n * // Sets the tool tip value\n * field.toolTip = 'Checked';\n * // Add the field into PDF form\n * form.add(field);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfCheckBoxField = /** @class */function (_super) {\n  __extends(PdfCheckBoxField, _super);\n  function PdfCheckBoxField(name, bounds, page) {\n    var _this = _super.call(this) || this;\n    if (page && name && bounds) {\n      _this._initialize(page, name, bounds);\n    }\n    return _this;\n  }\n  /**\n   * Parse an existing check box field.\n   *\n   * @private\n   * @param {PdfForm} form Form object.\n   * @param {_PdfDictionary} dictionary Field dictionary.\n   * @param {_PdfCrossReference} crossReference Cross reference object.\n   * @param {_PdfReference} reference Field reference.\n   * @returns {PdfCheckBoxField} Check box field.\n   */\n  PdfCheckBoxField._load = function (form, dictionary, crossReference, reference) {\n    var field = new PdfCheckBoxField();\n    field._isLoaded = true;\n    field._form = form;\n    field._dictionary = dictionary;\n    field._crossReference = crossReference;\n    field._ref = reference;\n    field._defaultIndex = 0;\n    field._parsedItems = new Map();\n    if (field._dictionary.has('Kids')) {\n      field._kids = field._dictionary.get('Kids');\n    } else {\n      var item = PdfStateItem._load(dictionary, crossReference, field);\n      item._isLoaded = true;\n      item._ref = reference;\n      field._parsedItems.set(0, item);\n    }\n    return field;\n  };\n  /**\n   * Gets the item at the specified index.\n   *\n   * @param {number} index Index of the field item.\n   * @returns {PdfStateItem} Field item at the index.\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data);\n   * // Gets the first page of the document\n   * let page: PdfPage = document.getPage(0);\n   * // Access the PDF form\n   * let form: PdfForm = document.form;\n   * // Access the check box field\n   * let field: PdfCheckBoxField = form.fieldAt(0) as PdfCheckBoxField;\n   * // Gets the first list item.\n   * let item: PdfStateItem = field.itemAt(0);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfCheckBoxField.prototype.itemAt = function (index) {\n    if (index < 0 || index !== 0 && index >= this._kidsCount) {\n      throw Error('Index out of range.');\n    }\n    var item;\n    if (this._parsedItems.has(index)) {\n      item = this._parsedItems.get(index);\n    } else {\n      var dictionary = void 0;\n      if (index >= 0 && this._kids && this._kids.length > 0 && index < this._kids.length) {\n        var ref = this._kids[Number.parseInt(index.toString(), 10)];\n        if (ref && ref instanceof _PdfReference) {\n          dictionary = this._crossReference._fetch(ref);\n        }\n        if (dictionary) {\n          item = PdfStateItem._load(dictionary, this._crossReference, this);\n          item._isLoaded = true;\n          item._ref = ref;\n          this._parsedItems.set(index, item);\n        }\n      }\n    }\n    return item;\n  };\n  Object.defineProperty(PdfCheckBoxField.prototype, \"font\", {\n    /**\n     * Gets the font of the field.\n     *\n     * @returns {PdfFont} font.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfCheckBoxField = document.form.fieldAt(0) as PdfCheckBoxField;\n     * // Gets the font of the field.\n     * let font: PdfFont = field.font;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (this._font) {\n        return this._font;\n      } else {\n        var widget = this.itemAt(this._defaultIndex);\n        this._font = _obtainFontDetails(this._form, widget, this);\n      }\n      return this._font;\n    },\n    /**\n     * Sets the font of the field.\n     *\n     * @param {PdfFont} value font.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfCheckBoxField = document.form.fieldAt(0) as PdfCheckBoxField;\n     * // Sets the font of the field\n     * field.font = new PdfStandardFont(PdfFontFamily.helvetica, 12, PdfFontStyle.bold);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (value && value instanceof PdfFont) {\n        this._font = value;\n        this._initializeFont(value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfCheckBoxField.prototype, \"checked\", {\n    /**\n     * Gets the flag indicating whether the field is checked or not.\n     *\n     * @returns {boolean} Checked.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Access the check box field\n     * let field: PdfCheckBoxField = form.fieldAt(0) as PdfCheckBoxField;\n     * // Gets the flag indicating whether the field is checked or not.\n     * let checked: Boolean = field.checked;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._kidsCount > 0 ? this.itemAt(this._defaultIndex).checked : _checkField(this._dictionary);\n    },\n    /**\n     * Sets the flag indicating whether the field is checked or not.\n     *\n     * @param {boolean} value Checked.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Access the check box field\n     * let field: PdfCheckBoxField = form.fieldAt(0) as PdfCheckBoxField;\n     * // Sets the flag indicating whether the field is checked or not.\n     * field.checked = true;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (this.checked !== value) {\n        if (this._kidsCount > 0) {\n          this.itemAt(this._defaultIndex).checked = value;\n        }\n        if (value) {\n          if (this._isLoaded) {\n            var entry = _getItemValue(this._kidsCount > 0 ? this.itemAt(this._defaultIndex)._dictionary : this._dictionary);\n            this._dictionary.update('V', _PdfName.get(entry));\n            this._dictionary.update('AS', _PdfName.get(entry));\n          } else {\n            this._dictionary.update('V', _PdfName.get('Yes'));\n            this._dictionary.update('AS', _PdfName.get('Yes'));\n          }\n        } else {\n          if (this._dictionary.has('V')) {\n            delete this._dictionary._map.V;\n          }\n          if (this._dictionary.has('AS')) {\n            delete this._dictionary._map.AS;\n          }\n        }\n        this._dictionary._updated = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfCheckBoxField.prototype, \"textAlignment\", {\n    /**\n     * Gets the text alignment in a check box field.\n     *\n     * @returns {PdfTextAlignment} Text alignment.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access check box field\n     * let field: PdfCheckBoxField = document.form.fieldAt(0) as PdfCheckBoxField;\n     * // Gets the text alignment from check box field\n     * let alignment: PdfTextAlignment = field.textAlignment;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._getTextAlignment();\n    },\n    /**\n     * Sets the text alignment in a check box field.\n     *\n     * @param {PdfTextAlignment} value Text alignment.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access check box field\n     * let field: PdfCheckBoxField = document.form.fieldAt(0) as PdfCheckBoxField;\n     * // Sets the text alignment of form field as center\n     * field.textAlignment = PdfTextAlignment.center;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (this._textAlignment !== value) {\n        this._setTextAlignment(value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfCheckBoxField.prototype, \"backColor\", {\n    /**\n     * Gets the background color of the field.\n     *\n     * @returns {number[]} R, G, B color values in between 0 to 255.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the background color of the field.\n     * let backColor: number[] = field.backColor;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._parseBackColor(true);\n    },\n    /**\n     * Sets the background color of the field.\n     *\n     * @param {number[]} value Array with R, G, B, A color values in between 0 to 255. For optional A (0-254), it signifies transparency.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the check box field at index 0\n     * let checkBox1: PdfField = document.form.fieldAt(0);\n     * // Sets the background color of the field.\n     * checkBox1.backColor = [255, 0, 0];\n     * // Access the check box field at index 1\n     * let checkBox2: PdfField = document.form.fieldAt(1);\n     * // Sets the background color of the field to transparent.\n     * checkBox2.backColor = [0, 0, 0, 0];\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      this._updateBackColor(value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfCheckBoxField.prototype._initialize = function (page, name, bounds) {\n    this._crossReference = page._crossReference;\n    this._page = page;\n    this._name = name;\n    this._defaultIndex = 0;\n    this._dictionary = new _PdfDictionary(this._crossReference);\n    this._ref = this._crossReference._getNextReference();\n    this._crossReference._cacheMap.set(this._ref, this._dictionary);\n    this._dictionary.objId = this._ref.toString();\n    this._dictionary.update('FT', _PdfName.get('Btn'));\n    this._dictionary.update('T', name);\n    this._createItem(bounds);\n  };\n  PdfCheckBoxField.prototype._createItem = function (bounds) {\n    var widget = new PdfStateItem();\n    widget._create(this._page, bounds, this);\n    widget.textAlignment = PdfTextAlignment.center;\n    this._stringFormat = new PdfStringFormat(widget.textAlignment, PdfVerticalAlignment.middle);\n    widget._dictionary.update('MK', new _PdfDictionary(this._crossReference));\n    widget._mkDictionary.update('BC', [0, 0, 0]);\n    widget._mkDictionary.update('BG', [1, 1, 1]);\n    widget.style = PdfCheckBoxStyle.check;\n    widget._dictionary.update('DA', '/TiRo 0 Tf 0 0 0 rg');\n    this._addToKid(widget);\n  };\n  PdfCheckBoxField.prototype._doPostProcess = function (isFlatten) {\n    if (isFlatten === void 0) {\n      isFlatten = false;\n    }\n    var count = this._kidsCount;\n    if (this._isLoaded) {\n      if (count > 0) {\n        for (var i = 0; i < count; i++) {\n          var item = this.itemAt(i);\n          if (item) {\n            if (!this._checkFieldFlag(item._dictionary)) {\n              if (isFlatten) {\n                var template = void 0;\n                var state = item.checked ? _PdfCheckFieldState.checked : _PdfCheckFieldState.unchecked;\n                if (this._setAppearance || this._form._setAppearance || !item._dictionary.has('AP')) {\n                  template = this._createAppearance(item, state);\n                } else {\n                  template = _getStateTemplate(state, this);\n                }\n                this._drawTemplate(template, item._getPage(), item.bounds);\n              } else if (this._setAppearance || this._form._setAppearance || !item._isLoaded) {\n                item._postProcess(item.checked ? 'Yes' : 'Off');\n                this._drawAppearance(item);\n              }\n            }\n            item._dictionary._updated = !isFlatten;\n          }\n        }\n      } else {\n        var style = this.checked ? _PdfCheckFieldState.checked : _PdfCheckFieldState.unchecked;\n        this._drawTemplate(_getStateTemplate(style, this), this.page, this.bounds);\n      }\n    } else {\n      for (var i = 0; i < count; i++) {\n        var item = this.itemAt(i);\n        if (item) {\n          var state = item.checked ? _PdfCheckFieldState.checked : _PdfCheckFieldState.unchecked;\n          item._postProcess(item.checked ? 'Yes' : 'Off');\n          if (isFlatten) {\n            var template = this._createAppearance(item, state);\n            this._drawTemplate(template, item._getPage(), item.bounds);\n          } else {\n            this._drawAppearance(item);\n          }\n          item._dictionary._updated = !isFlatten;\n        }\n      }\n    }\n    this._dictionary._updated = !isFlatten;\n  };\n  PdfCheckBoxField.prototype._createAppearance = function (widget, state) {\n    var bounds = widget.bounds;\n    var parameter = new _PaintParameter();\n    parameter.bounds = [0, 0, bounds.width, bounds.height];\n    var backcolor = widget.backColor;\n    if (backcolor) {\n      parameter.backBrush = new PdfBrush(backcolor);\n    }\n    parameter.foreBrush = new PdfBrush(widget.color);\n    var border = widget.border;\n    parameter.borderPen = new PdfPen(widget.borderColor, border.width);\n    parameter.borderStyle = border.style;\n    parameter.borderWidth = border.width;\n    if (backcolor) {\n      var shadowColor = [backcolor[0] - 64, backcolor[1] - 64, backcolor[2] - 64];\n      var color = [shadowColor[0] >= 0 ? shadowColor[0] : 0, shadowColor[1] >= 0 ? shadowColor[1] : 0, shadowColor[2] >= 0 ? shadowColor[2] : 0];\n      parameter.shadowBrush = new PdfBrush(color);\n    }\n    parameter.rotationAngle = widget.rotate;\n    var template = new PdfTemplate(parameter.bounds, this._crossReference);\n    var graphics = template.graphics;\n    this._drawCheckBox(graphics, parameter, _styleToString(widget._style), state);\n    return template;\n  };\n  PdfCheckBoxField.prototype._drawAppearance = function (item) {\n    var appearance = new _PdfDictionary();\n    if (item._dictionary.has('AP')) {\n      appearance = item._dictionary.get('AP');\n      if (appearance) {\n        if (appearance.has('N')) {\n          _removeReferences(appearance.get('N'), this._crossReference, 'Yes', 'Off');\n        }\n        if (appearance.has('D')) {\n          _removeReferences(appearance.get('D'), this._crossReference, 'Yes', 'Off');\n        }\n      }\n      _removeDuplicateReference(appearance, this._crossReference, 'N');\n      _removeDuplicateReference(appearance, this._crossReference, 'D');\n    } else {\n      var reference = this._crossReference._getNextReference();\n      appearance = new _PdfDictionary(this._crossReference);\n      this._crossReference._cacheMap.set(reference, appearance);\n      item._dictionary.update('AP', reference);\n    }\n    var normalChecked = this._createAppearance(item, _PdfCheckFieldState.checked);\n    var normalCheckedReference = this._crossReference._getNextReference();\n    this._crossReference._cacheMap.set(normalCheckedReference, normalChecked._content);\n    var normalUnchecked = this._createAppearance(item, _PdfCheckFieldState.unchecked);\n    var normalUncheckedReference = this._crossReference._getNextReference();\n    this._crossReference._cacheMap.set(normalUncheckedReference, normalUnchecked._content);\n    var normalDictionary = new _PdfDictionary(this._crossReference);\n    normalDictionary.update('Yes', normalCheckedReference);\n    normalDictionary.update('Off', normalUncheckedReference);\n    var normalReference = this._crossReference._getNextReference();\n    this._crossReference._cacheMap.set(normalReference, normalDictionary);\n    appearance.update('N', normalReference);\n    var pressChecked = this._createAppearance(item, _PdfCheckFieldState.pressedChecked);\n    var pressCheckedReference = this._crossReference._getNextReference();\n    this._crossReference._cacheMap.set(pressCheckedReference, pressChecked._content);\n    var pressUnchecked = this._createAppearance(item, _PdfCheckFieldState.pressedUnchecked);\n    var pressUncheckedReference = this._crossReference._getNextReference();\n    this._crossReference._cacheMap.set(pressUncheckedReference, pressUnchecked._content);\n    var pressedDictionary = new _PdfDictionary(this._crossReference);\n    pressedDictionary.update('Yes', pressCheckedReference);\n    pressedDictionary.update('Off', pressUncheckedReference);\n    var pressedReference = this._crossReference._getNextReference();\n    this._crossReference._cacheMap.set(pressedReference, pressedDictionary);\n    appearance.update('D', pressedReference);\n    item._dictionary._updated = true;\n  };\n  return PdfCheckBoxField;\n}(PdfField);\nexport { PdfCheckBoxField };\n/**\n * `PdfRadioButtonListField` class represents the radio button field objects.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Gets the first page of the document\n * let page: PdfPage = document.getPage(0);\n * // Access the PDF form\n * let form: PdfForm = document.form;\n * // Create a new radio button list field\n * let field: PdfRadioButtonListField = new PdfRadioButtonListField(page, 'Age');\n * // Create and add first item\n * let first: PdfRadioButtonListItem = field.add('1-9', {x: 100, y: 140, width: 20, height: 20});\n * // Create and add second item\n * let second: PdfRadioButtonListItem = new PdfRadioButtonListItem('10-49', {x: 100, y: 170, width: 20, height: 20}, page);\n * field.add(second);\n * // Sets selected index of the radio button list field\n * field.selectedIndex = 0;\n * // Add the field into PDF form\n * form.add(field);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfRadioButtonListField = /** @class */function (_super) {\n  __extends(PdfRadioButtonListField, _super);\n  function PdfRadioButtonListField(page, name) {\n    var _this = _super.call(this) || this;\n    _this._selectedIndex = -1;\n    if (page && name) {\n      _this._initialize(page, name);\n    }\n    return _this;\n  }\n  /**\n   * Parse an existing radio button list field.\n   *\n   * @private\n   * @param {PdfForm} form Form object.\n   * @param {_PdfDictionary} dictionary Field dictionary.\n   * @param {_PdfCrossReference} crossReference Cross reference object.\n   * @param {_PdfReference} reference Field reference.\n   * @returns {PdfRadioButtonListField} Radio button list field.\n   */\n  PdfRadioButtonListField._load = function (form, dictionary, crossReference, reference) {\n    var field = new PdfRadioButtonListField();\n    field._isLoaded = true;\n    field._form = form;\n    field._dictionary = dictionary;\n    field._crossReference = crossReference;\n    field._ref = reference;\n    if (field._dictionary.has('Kids')) {\n      field._kids = field._dictionary.get('Kids');\n    }\n    field._defaultIndex = 0;\n    field._parsedItems = new Map();\n    if (field._kidsCount > 0) {\n      field._retrieveOptionValue();\n    }\n    return field;\n  };\n  Object.defineProperty(PdfRadioButtonListField.prototype, \"checked\", {\n    /**\n     * Gets the flag indicating whether the field is checked or not (Read only).\n     *\n     * @returns {boolean} Checked.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Access the radio button list field\n     * let field: PdfRadioButtonListField = form.fieldAt(0) as PdfRadioButtonListField;\n     * // Gets the flag indicating whether the field is checked or not.\n     * let checked: boolean = field.checked;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      var check = false;\n      if (this._kidsCount > 0) {\n        check = this.itemAt(this._defaultIndex).checked;\n      }\n      return check;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfRadioButtonListField.prototype, \"selectedIndex\", {\n    /**\n     * Gets the selected item index.\n     *\n     * @returns {number} Index.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Access the radio button list field\n     * let field: PdfRadioButtonListField = form.fieldAt(0) as PdfRadioButtonListField;\n     * // Gets the selected index.\n     * let index: number = field.selectedIndex;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (this._isLoaded && this._selectedIndex === -1) {\n        this._selectedIndex = this._obtainSelectedIndex();\n      }\n      return this._selectedIndex;\n    },\n    /**\n     * Sets the selected item index.\n     *\n     * @param {number} value Selected index.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Create a new radio button list field\n     * let field: PdfRadioButtonListField = new PdfRadioButtonListField(page, 'Age');\n     * // Create and add first item\n     * let first: PdfRadioButtonListItem = field.add('1-9', {x: 100, y: 140, width: 20, height: 20});\n     * // Create and add second item\n     * let second: PdfRadioButtonListItem = new PdfRadioButtonListItem('10-49', {x: 100, y: 170, width: 20, height: 20}, page);\n     * field.add(second);\n     * // Sets selected index of the radio button list field\n     * field.selectedIndex = 0;\n     * // Add the field into PDF form\n     * form.add(field);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (this.selectedIndex !== value) {\n        this._selectedIndex = value;\n        for (var i = 0; i < this._kidsCount; i++) {\n          var item = this.itemAt(i);\n          if (i === value) {\n            item._dictionary.update('AS', _PdfName.get(item.value));\n            var name_5 = _PdfName.get(item.value);\n            this._dictionary.update('V', name_5);\n            this._dictionary.update('DV', name_5);\n          } else {\n            item._dictionary.update('AS', _PdfName.get('Off'));\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Gets the item at the specified index.\n   *\n   * @param {number} index Index of the field item.\n   * @returns {PdfRadioButtonListItem} Field item at the index.\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data);\n   * // Gets the first page of the document\n   * let page: PdfPage = document.getPage(0);\n   * // Access the PDF form\n   * let form: PdfForm = document.form;\n   * // Access the radio button list field\n   * let field: PdfRadioButtonListField = form.fieldAt(0) as PdfRadioButtonListField;\n   * // Gets the first list item.\n   * let item: PdfRadioButtonListField = field.itemAt(0);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfRadioButtonListField.prototype.itemAt = function (index) {\n    if (index < 0 || index !== 0 && index >= this._kidsCount) {\n      throw Error('Index out of range.');\n    }\n    var item;\n    if (this._parsedItems.has(index)) {\n      item = this._parsedItems.get(index);\n    } else {\n      var dictionary = void 0;\n      if (index >= 0 && this._kids && this._kids.length > 0 && index < this._kids.length) {\n        var ref = this._kids[Number.parseInt(index.toString(), 10)];\n        if (ref && ref instanceof _PdfReference) {\n          dictionary = this._crossReference._fetch(ref);\n        }\n        if (dictionary) {\n          item = PdfRadioButtonListItem._load(dictionary, this._crossReference, this);\n          item._ref = ref;\n          item._index = index;\n          this._parsedItems.set(index, item);\n        }\n      }\n    }\n    return item;\n  };\n  PdfRadioButtonListField.prototype.add = function (value, bounds) {\n    if (value instanceof PdfRadioButtonListItem) {\n      value._field = this;\n      value._dictionary.update('Parent', this._ref);\n      value._setField(this);\n      return this._kidsCount;\n    } else {\n      return new PdfRadioButtonListItem(value, bounds, this);\n    }\n  };\n  /**\n   * Remove the radio button list item from the specified index.\n   *\n   * @param {number} index Item index to remove.\n   * @returns {void} Nothing.\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access the form field at index 0\n   * let field: PdfField = document.form.fieldAt(0);\n   * // Remove the first item of the form field\n   * field.removeItemAt(0);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfRadioButtonListField.prototype.removeItemAt = function (index) {\n    var item = this.itemAt(index);\n    if (item && item._ref) {\n      var page = item._getPage();\n      if (page) {\n        page._removeAnnotation(item._ref);\n      }\n      this._kids.splice(index, 1);\n      this._dictionary.set('Kids', this._kids);\n      this._dictionary._updated = true;\n      this._parsedItems.delete(index);\n      if (this._parsedItems.size > 0) {\n        var parsedItems_2 = new Map();\n        this._parsedItems.forEach(function (value, key) {\n          if (key > index) {\n            parsedItems_2.set(key - 1, value);\n          } else {\n            parsedItems_2.set(key, value);\n          }\n        });\n        this._parsedItems = parsedItems_2;\n      }\n      if (this._dictionary.has('Opt')) {\n        var options = this._dictionary.getArray('Opt');\n        if (options && options.length > 0) {\n          options.splice(index, 1);\n          this._dictionary.set('Opt', options);\n        }\n      }\n    }\n  };\n  /**\n   * Remove the specified radio button list field item.\n   *\n   * @param {PdfRadioButtonListItem} item Item to remove.\n   * @returns {void} Nothing.\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access the form field at index 0\n   * let field: PdfField = document.form.fieldAt(0);\n   * // Remove the first item of the form field\n   * field.removeItem(field.itemAt(0));\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfRadioButtonListField.prototype.removeItem = function (item) {\n    if (item && item._ref) {\n      var index = this._kids.indexOf(item._ref);\n      if (index !== -1) {\n        this.removeItemAt(index);\n      }\n    }\n  };\n  PdfRadioButtonListField.prototype._initialize = function (page, name) {\n    this._defaultIndex = 0;\n    this._crossReference = page._crossReference;\n    this._page = page;\n    this._name = name;\n    this._dictionary = new _PdfDictionary(this._crossReference);\n    this._ref = this._crossReference._getNextReference();\n    this._crossReference._cacheMap.set(this._ref, this._dictionary);\n    this._dictionary.objId = this._ref.toString();\n    this._dictionary.update('FT', _PdfName.get('Btn'));\n    this._dictionary.update('T', name);\n    this._parsedItems = new Map();\n    this._fieldFlags |= _FieldFlag.radio;\n  };\n  PdfRadioButtonListField.prototype._retrieveOptionValue = function () {\n    if (this._dictionary.has('Opt')) {\n      var options = this._dictionary.getArray('Opt');\n      if (options && options.length > 0) {\n        var itemsCount = this._kidsCount;\n        var count = options.length <= itemsCount ? options.length : itemsCount;\n        for (var i = 0; i < count; i++) {\n          if (options[Number.parseInt(i.toString(), 10)]) {\n            this.itemAt(i)._optionValue = options[Number.parseInt(i.toString(), 10)];\n          }\n        }\n      }\n    }\n  };\n  PdfRadioButtonListField.prototype._obtainSelectedIndex = function () {\n    var index = -1;\n    for (var i = 0; i < this._kidsCount; ++i) {\n      var item = this.itemAt(i);\n      if (item) {\n        var checkName = _getInheritableProperty(item._dictionary, 'V', false, true, 'Parent');\n        if (checkName && item._dictionary.has('AS')) {\n          var asName = item._dictionary.get('AS');\n          if (asName && asName.name.toLowerCase() !== 'off') {\n            if (checkName instanceof _PdfName && checkName.name.toLowerCase() !== 'off') {\n              if (asName.name === checkName.name || item._optionValue === checkName.name) {\n                index = i;\n                break;\n              }\n            } else if (typeof checkName === 'string' && checkName.toLowerCase() !== 'off') {\n              if (asName.name === checkName || item._optionValue === checkName) {\n                index = i;\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n    return index;\n  };\n  PdfRadioButtonListField.prototype._doPostProcess = function (isFlatten) {\n    if (isFlatten === void 0) {\n      isFlatten = false;\n    }\n    var count = this._kidsCount;\n    if (this._isLoaded) {\n      if (count > 0) {\n        for (var i = 0; i < count; i++) {\n          var item = this.itemAt(i);\n          if (item && !this._checkFieldFlag(item._dictionary)) {\n            if (isFlatten) {\n              var template = void 0;\n              var state = this.selectedIndex === i ? _PdfCheckFieldState.checked : _PdfCheckFieldState.unchecked;\n              if (this._setAppearance || this._form._setAppearance || !item._dictionary.has('AP')) {\n                template = this._createAppearance(item, state);\n              } else {\n                template = _getStateTemplate(state, this);\n              }\n              this._drawTemplate(template, item._getPage(), item.bounds);\n            } else if (this._setAppearance || this._form._setAppearance || !item._isLoaded) {\n              item._postProcess(this.selectedIndex === i ? item.value : 'Off');\n              this._drawAppearance(item);\n            }\n            item._dictionary._updated = !isFlatten;\n          }\n        }\n      } else {\n        var style = this.selectedIndex !== -1 ? _PdfCheckFieldState.checked : _PdfCheckFieldState.unchecked;\n        this._drawTemplate(_getStateTemplate(style, this), this.page, this.bounds);\n      }\n    } else {\n      for (var i = 0; i < count; i++) {\n        var item = this.itemAt(i);\n        var state = this.selectedIndex === i ? _PdfCheckFieldState.checked : _PdfCheckFieldState.unchecked;\n        item._dictionary.update('AS', _PdfName.get(this.selectedIndex === i ? item.value : 'Off'));\n        if (isFlatten) {\n          var template = this._createAppearance(item, state);\n          this._drawTemplate(template, item._getPage(), item.bounds);\n        } else {\n          item._postProcess(this.selectedIndex === i ? item.value : 'Off');\n          this._drawAppearance(item);\n        }\n        item._dictionary._updated = !isFlatten;\n      }\n    }\n    this._dictionary._updated = !isFlatten;\n  };\n  PdfRadioButtonListField.prototype._createAppearance = function (widget, state) {\n    var bounds = widget.bounds;\n    var parameter = new _PaintParameter();\n    parameter.bounds = [0, 0, bounds.width, bounds.height];\n    var backcolor = widget.backColor;\n    if (backcolor) {\n      parameter.backBrush = new PdfBrush(backcolor);\n    }\n    parameter.foreBrush = new PdfBrush(widget.color);\n    var border = widget.border;\n    parameter.borderPen = new PdfPen(widget.borderColor, border.width);\n    parameter.borderStyle = border.style;\n    parameter.borderWidth = border.width;\n    if (backcolor) {\n      var shadowColor = [backcolor[0] - 64, backcolor[1] - 64, backcolor[2] - 64];\n      var color = [shadowColor[0] >= 0 ? shadowColor[0] : 0, shadowColor[1] >= 0 ? shadowColor[1] : 0, shadowColor[2] >= 0 ? shadowColor[2] : 0];\n      parameter.shadowBrush = new PdfBrush(color);\n    }\n    parameter.rotationAngle = widget.rotate;\n    var template = new PdfTemplate(parameter.bounds, this._crossReference);\n    var graphics = template.graphics;\n    this._drawRadioButton(graphics, parameter, _styleToString(widget.style), state);\n    return template;\n  };\n  PdfRadioButtonListField.prototype._drawAppearance = function (item) {\n    var appearance = new _PdfDictionary();\n    if (item._dictionary.has('AP')) {\n      appearance = item._dictionary.get('AP');\n      if (appearance) {\n        if (appearance.has('N')) {\n          _removeReferences(appearance.get('N'), this._crossReference, item.value, 'Off');\n        }\n        if (appearance.has('D')) {\n          _removeReferences(appearance.get('D'), this._crossReference, item.value, 'Off');\n        }\n      }\n      _removeDuplicateReference(appearance, this._crossReference, 'N');\n      _removeDuplicateReference(appearance, this._crossReference, 'D');\n    } else {\n      var reference = this._crossReference._getNextReference();\n      appearance = new _PdfDictionary(this._crossReference);\n      this._crossReference._cacheMap.set(reference, appearance);\n      item._dictionary.update('AP', reference);\n    }\n    var normalChecked = this._createAppearance(item, _PdfCheckFieldState.checked);\n    var normalCheckedReference = this._crossReference._getNextReference();\n    this._crossReference._cacheMap.set(normalCheckedReference, normalChecked._content);\n    var normalUnchecked = this._createAppearance(item, _PdfCheckFieldState.unchecked);\n    var normalUncheckedReference = this._crossReference._getNextReference();\n    this._crossReference._cacheMap.set(normalUncheckedReference, normalUnchecked._content);\n    var normalDictionary = new _PdfDictionary(this._crossReference);\n    normalDictionary.update(item.value, normalCheckedReference);\n    normalDictionary.update('Off', normalUncheckedReference);\n    var normalReference = this._crossReference._getNextReference();\n    this._crossReference._cacheMap.set(normalReference, normalDictionary);\n    appearance.update('N', normalReference);\n    var pressChecked = this._createAppearance(item, _PdfCheckFieldState.pressedChecked);\n    var pressCheckedReference = this._crossReference._getNextReference();\n    this._crossReference._cacheMap.set(pressCheckedReference, pressChecked._content);\n    var pressUnchecked = this._createAppearance(item, _PdfCheckFieldState.pressedUnchecked);\n    var pressUncheckedReference = this._crossReference._getNextReference();\n    this._crossReference._cacheMap.set(pressUncheckedReference, pressUnchecked._content);\n    var pressedDictionary = new _PdfDictionary(this._crossReference);\n    pressedDictionary.update(item.value, pressCheckedReference);\n    pressedDictionary.update('Off', pressUncheckedReference);\n    var pressedReference = this._crossReference._getNextReference();\n    this._crossReference._cacheMap.set(pressedReference, pressedDictionary);\n    appearance.update('D', pressedReference);\n    item._dictionary._updated = true;\n  };\n  return PdfRadioButtonListField;\n}(PdfField);\nexport { PdfRadioButtonListField };\n/**\n * Represents the base class for list box and combo box fields.\n *\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Gets the first page of the document\n * let page: PdfPage = document.getPage(0);\n * // Access the PDF form\n * let form: PdfForm = document.form;\n * // Access the combo box field\n * let comboBoxField: PdfListField = form.fieldAt(0) as PdfListField;\n * // Gets the count of the loaded combo box field items.\n * let comboItemsCount: number = comboBoxField.itemsCount;\n * // Access the list box field\n * let listBoxField: PdfListField = form.fieldAt(1) as PdfListField;\n * // Gets the count of the loaded list box field items.\n * let ListItemsCount: number = listBoxField.itemsCount;\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfListField = /** @class */function (_super) {\n  __extends(PdfListField, _super);\n  function PdfListField() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Object.defineProperty(PdfListField.prototype, \"itemsCount\", {\n    /**\n     * Gets the count of the loaded field items (Read only).\n     *\n     * @returns {number} Items count.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Access the combo box field\n     * let comboBoxField: PdfComboBoxField = form.fieldAt(0) as PdfComboBoxField;\n     * // Gets the count of the loaded combo box field items.\n     * let comboItemsCount: number = comboBoxField.itemsCount;\n     * // Access the list box field\n     * let listBoxField: PdfListBoxField = form.fieldAt(1) as PdfListBoxField;\n     * // Gets the count of the loaded list box field items.\n     * let ListItemsCount: number = listBoxField.itemsCount;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._options.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfListField.prototype, \"bounds\", {\n    /**\n     * Gets the bounds.\n     *\n     * @returns {{ x: number, y: number, width: number, height: number }} Bounds.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Access the combo box field\n     * let comboBoxField: PdfComboBoxField = form.fieldAt(0) as PdfComboBoxField;\n     * // Gets the bounds of combo box field.\n     * let comboBoxBounds: {x: number, y: number, width: number, height: number} = comboBoxField.bounds;\n     * // Access the combo box field\n     * let listBoxField: PdfListBoxField = form.fieldAt(1) as PdfListBoxField;\n     * // Gets the bounds of list box field.\n     * let listBoxBounds: {x: number, y: number, width: number, height: number} = listBoxField.bounds;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      var value;\n      var widget = this.itemAt(this._defaultIndex);\n      if (widget) {\n        widget._page = this.page;\n      }\n      if (widget && widget.bounds) {\n        value = widget.bounds;\n      } else if (this._dictionary.has('Rect')) {\n        value = _calculateBounds(this._dictionary, this.page);\n      }\n      if (value) {\n        return value;\n      } else if (this._bounds) {\n        return this._bounds;\n      }\n      return value;\n    },\n    /**\n     * Sets the bounds.\n     *\n     * @param {{ x: number, y: number, width: number, height: number }} value bounds.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Access the combo box field\n     * let comboBoxField: PdfComboBoxField = form.fieldAt(0) as PdfComboBoxField;\n     * // Sets the bounds of combo box field.\n     * comboBoxField.bounds = {x: 10, y: 10, width: 100, height: 30};\n     * // Access the list box field\n     * let listBoxField: PdfListBoxField = form.fieldAt(1) as PdfListBoxField;\n     * // Sets the bounds of list box field.\n     * listBoxField.bounds = {x: 10, y: 50, width: 100, height: 30};\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (value.x === 0 && value.y === 0 && value.width === 0 && value.height === 0) {\n        throw new Error('Cannot set empty bounds');\n      }\n      var widget = this.itemAt(this._defaultIndex);\n      if (this._isLoaded) {\n        if (typeof widget === 'undefined' || this._dictionary.has('Rect')) {\n          this._dictionary.update('Rect', _getUpdatedBounds([value.x, value.y, value.width, value.height], this.page));\n        } else {\n          widget._page = this.page;\n          widget.bounds = value;\n        }\n      } else {\n        if (widget) {\n          widget._page = this.page;\n          widget.bounds = value;\n        } else {\n          this._bounds = value;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfListField.prototype, \"selectedIndex\", {\n    /**\n     * Gets the selected item index or indexes.\n     *\n     * @returns {number | number[]} Index.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Access the combo box field\n     * let comboBoxfield: PdfComboBoxField = form.fieldAt(0) as PdfComboBoxField;\n     * // Gets the selected item index or indexes from combo box field.\n     * let comboBoxIndex: number = comboBoxfield.selectedIndex;\n     * // Access the list box field\n     * let listBoxField: PdfListBoxField = form.fieldAt(1) as PdfListBoxField;\n     * // Gets the selected item index or indexes from list box field.\n     * let listBoxIndex: number = listBoxField.selectedIndex;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      var value = this._dictionary.get('I');\n      if (typeof value === 'undefined') {\n        return [];\n      } else {\n        if (value.length === 1) {\n          return value[0];\n        } else {\n          return value;\n        }\n      }\n    },\n    /**\n     * Sets the selected item index or indexes.\n     *\n     * @param {number | number[]} value Selected index.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Create a new list box field\n     * let listField: PdfListField = new PdfListBoxField(page, 'list1', {x: 100, y: 60, width: 100, height: 50});\n     * // Add list items to the field.\n     * listField.addItem(new PdfListFieldItem('English', 'English'));\n     * listField.addItem(new PdfListFieldItem('French', 'French'));\n     * listField.addItem(new PdfListFieldItem('German', 'German'));\n     * // Sets the selected index\n     * listField.selectedIndex = 2;\n     * // Sets the flag indicates whether the list box allows multiple selections.\n     * listField.multiSelect = true;\n     * // Add the field into PDF form\n     * form.add(listField);\n     * // Create a new combo box field\n     * let comboField: PdfComboBoxField = new PdfComboBoxField(page, 'list1', {x: 100, y: 160, width: 100, height: 50});\n     * // Add list items to the field.\n     * comboField.addItem(new PdfListFieldItem('English', 'English'));\n     * comboField.addItem(new PdfListFieldItem('French', 'French'));\n     * comboField.addItem(new PdfListFieldItem('German', 'German'));\n     * // Sets the selected index\n     * comboField.selectedIndex = 2;\n     * // Sets the flag indicates whether the combo box allows multiple selections.\n     * comboField.multiSelect = true;\n     * // Add the field into PDF form\n     * form.add(comboField);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      var _this = this;\n      var length = this._options.length;\n      if (typeof value === 'number') {\n        this._checkIndex(value, length);\n        this._dictionary.update('I', [value]);\n        this._dictionary.update('V', [this._options[Number.parseInt(value.toString(), 10)][0]]);\n      } else {\n        var values_1 = [];\n        value.forEach(function (entry) {\n          _this._checkIndex(entry, length);\n          values_1.push(_this._options[Number.parseInt(entry.toString(), 10)][0]);\n        });\n        this._dictionary.update('I', value);\n        this._dictionary.update('V', values_1);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfListField.prototype, \"selectedValue\", {\n    /**\n     * Gets the selected item value or values.\n     *\n     * @returns {string | string[]} Selected values.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Access the list box field\n     * let listBoxField: PdfListBoxField = form.fieldAt(0) as PdfListBoxField;\n     * // Gets the selected item value or values from list box field.\n     * if (listBoxField.multiSelect) {\n     *     let listBoxValues: string[]; = listBoxField.selectedValue;\n     * } else {\n     *    let listBoxValues: string = listBoxField.selectedValue;\n     * }\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      var _this = this;\n      var values = [];\n      if (this._dictionary.has('V')) {\n        var value = this._dictionary.getArray('V'); // eslint-disable-line\n        if (typeof value !== 'undefined') {\n          if (Array.isArray(value)) {\n            value.forEach(function (element) {\n              values.push(element);\n            });\n          } else if (typeof value === 'string') {\n            values.push(value);\n          }\n        }\n      }\n      if (values.length === 0 && this._dictionary.has('I')) {\n        var value = this._dictionary.get('I');\n        if (value && value.length > 0) {\n          value.forEach(function (index) {\n            values.push(_this._options[Number.parseInt(index.toString(), 10)][0]);\n          });\n        }\n      }\n      if (values.length === 1) {\n        return values[0];\n      } else {\n        return values;\n      }\n    },\n    /**\n     * Sets the selected item value or values.\n     *\n     * @param {string | string[]} value Selected values.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Create a new list box field\n     * let listField: PdfListField = new PdfListBoxField(page, 'list1', {x: 100, y: 60, width: 100, height: 50});\n     * // Add list items to the field.\n     * listField.addItem(new PdfListFieldItem('English', 'English'));\n     * listField.addItem(new PdfListFieldItem('French', 'French'));\n     * listField.addItem(new PdfListFieldItem('German', 'German'));\n     * // Sets the flag indicates whether the list box allows multiple selections.\n     * listField.multiSelect = true;\n     * // Sets the selected values\n     * listField.selectedValue = ['English', 'German'];\n     * // Add the field into PDF form\n     * form.add(listField);\n     * // Create a new combo box field\n     * let comboField: PdfComboBoxField = new PdfComboBoxField(page, 'list1', {x: 100, y: 160, width: 100, height: 50});\n     * // Add list items to the field.\n     * comboField.addItem(new PdfListFieldItem('English', 'English'));\n     * comboField.addItem(new PdfListFieldItem('French', 'French'));\n     * comboField.addItem(new PdfListFieldItem('German', 'German'));\n     * // Sets the selected value\n     * comboField.selectedValue = ['French'];\n     * // Add the field into PDF form\n     * form.add(comboField);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      var _this = this;\n      if (typeof value === 'string') {\n        var index = this._tryGetIndex(value);\n        if (index !== -1) {\n          this._dictionary.update('I', [index]);\n          this._dictionary.update('V', [value]);\n        }\n      } else {\n        var values_2 = [];\n        var indices_1 = [];\n        value.forEach(function (entry) {\n          var index = _this._tryGetIndex(entry);\n          if (index !== -1) {\n            indices_1.push(index);\n            values_2.push(entry);\n          }\n        });\n        if (values_2.length > 0) {\n          this._dictionary.update('I', indices_1);\n          this._dictionary.update('V', values_2);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfListField.prototype, \"multiSelect\", {\n    /**\n     * Gets the flag indicates whether the list field allows multiple selections.\n     *\n     * @returns {boolean} Value indicates whether the list field allows multiple selections.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Access the combo box field\n     * let comboBoxField: PdfComboBoxField = form.fieldAt(0) as PdfComboBoxField;\n     * // Gets the flag indicates whether the combo box allows multiple selections.\n     * let comboBoxFlag: Boolean = comboBoxField.multiSelect;\n     * // Access the list box field\n     * let listBoxField: PdfListBoxField = form.fieldAt(1) as PdfListBoxField;\n     * // Gets the flag indicates whether the list box allows multiple selections.\n     * let listBoxFlag: boolean = listBoxField.multiSelect;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (this._isLoaded) {\n        return (this._fieldFlags & _FieldFlag.multiSelect) !== 0;\n      } else {\n        return this._multiSelect;\n      }\n    },\n    /**\n     * Sets the flag indicates whether the list field allows multiple selections.\n     *\n     * @param {boolean} value Indicates whether the list field allows multiple selections.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Create a new list box field\n     * let listField: PdfListField = new PdfListBoxField(page, 'list1', {x: 100, y: 60, width: 100, height: 50});\n     * // Add list items to the field.\n     * listField.addItem(new PdfListFieldItem('English', 'English'));\n     * listField.addItem(new PdfListFieldItem('French', 'French'));\n     * listField.addItem(new PdfListFieldItem('German', 'German'));\n     * // Sets the selected index\n     * listField.selectedIndex = 2;\n     * // Sets the flag indicates whether the list box allows multiple selections.\n     * listField.multiSelect = true;\n     * // Add the field into PDF form\n     * form.add(listField);\n     * // Create a new combo box field\n     * let comboField: PdfComboBoxField = new PdfComboBoxField(page, 'list1', {x: 100, y: 160, width: 100, height: 50});\n     * // Add list items to the field.\n     * comboField.addItem(new PdfListFieldItem('English', 'English'));\n     * comboField.addItem(new PdfListFieldItem('French', 'French'));\n     * comboField.addItem(new PdfListFieldItem('German', 'German'));\n     * // Sets the selected index\n     * comboField.selectedIndex = 2;\n     * // Sets the flag indicates whether the combo box allows multiple selections.\n     * comboField.multiSelect = true;\n     * // Add the field into PDF form\n     * form.add(comboField);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (this.multiSelect !== value) {\n        this._multiSelect = value;\n        if (value) {\n          this._fieldFlags |= _FieldFlag.multiSelect;\n        } else {\n          this._fieldFlags &= ~_FieldFlag.multiSelect;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfListField.prototype, \"editable\", {\n    /**\n     * Gets the flag indicates whether the list field is editable.\n     *\n     * @returns {boolean} Value indicates whether the list field is editable.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Access the combo box field\n     * let comboBoxField: PdfComboBoxField = form.fieldAt(0) as PdfComboBoxField;\n     * // Gets the flag indicates whether the combo box is editable.\n     * let comboBoxFlag: Boolean = comboBoxField.editable;\n     * // Access the list box field\n     * let listBoxField: PdfListBoxField = form.fieldAt(1) as PdfListBoxField;\n     * // Gets the flag indicates whether the list box is editable.\n     * let listBoxFlag: boolean = listBoxField.editable;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (this._isLoaded) {\n        return (this._fieldFlags & _FieldFlag.edit) !== 0;\n      } else {\n        return this._editable;\n      }\n    },\n    /**\n     * Sets the flag indicates whether the list field is editable.\n     *\n     * @param {boolean} value Indicates whether the list field is editable.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Create a new list box field\n     * let listField: PdfListField = new PdfListBoxField(page, 'list1', {x: 100, y: 60, width: 100, height: 50});\n     * // Add list items to the field.\n     * listField.addItem(new PdfListFieldItem('English', 'English'));\n     * listField.addItem(new PdfListFieldItem('French', 'French'));\n     * listField.addItem(new PdfListFieldItem('German', 'German'));\n     * // Sets the selected index\n     * listField.selectedIndex = 2;\n     * // Sets the flag indicates whether the list box is editable.\n     * listField.editable = true;\n     * // Add the field into PDF form\n     * form.add(listField);\n     * // Create a new combo box field\n     * let comboField: PdfComboBoxField = new PdfComboBoxField(page, 'list1', {x: 100, y: 160, width: 100, height: 50});\n     * // Add list items to the field.\n     * comboField.addItem(new PdfListFieldItem('English', 'English'));\n     * comboField.addItem(new PdfListFieldItem('French', 'French'));\n     * comboField.addItem(new PdfListFieldItem('German', 'German'));\n     * // Sets the selected index\n     * comboField.selectedIndex = 2;\n     * // Sets the flag indicates whether the combo box is editable.\n     * comboField.editable = true;\n     * // Add the field into PDF form\n     * form.add(comboField);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (this._editable !== value) {\n        this._editable = value;\n        if (value) {\n          this._fieldFlags |= _FieldFlag.edit;\n        } else {\n          this._fieldFlags &= ~_FieldFlag.edit;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfListField.prototype, \"font\", {\n    /**\n     * Gets the font of the field.\n     *\n     * @returns {PdfFont} font.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfListBoxField = document.form.fieldAt(0) as PdfListBoxField;\n     * // Gets the font of the field.\n     * let font: PdfFont = field.font;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (this._font) {\n        return this._font;\n      } else {\n        var widget = this.itemAt(this._defaultIndex);\n        this._font = _obtainFontDetails(this._form, widget, this);\n      }\n      return this._font;\n    },\n    /**\n     * Sets the font of the field.\n     *\n     * @param {PdfFont} value font.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfListBoxField = document.form.fieldAt(0) as PdfListBoxField;\n     * // Sets the font of the field\n     * field.font = new PdfStandardFont(PdfFontFamily.helvetica, 12, PdfFontStyle.bold);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (value && value instanceof PdfFont) {\n        this._font = value;\n        this._initializeFont(value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfListField.prototype, \"textAlignment\", {\n    /**\n     * Gets the text alignment in a combo box field.\n     *\n     * @returns {PdfTextAlignment} Text alignment.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access combo box field\n     * let field: PdfComboBoxField = document.form.fieldAt(0) as PdfComboBoxField;\n     * // Gets the text alignment from combo box field\n     * let alignment: PdfTextAlignment = field.textAlignment;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._getTextAlignment();\n    },\n    /**\n     * Sets the text alignment in a combo box field.\n     *\n     * @param {PdfTextAlignment} value Text alignment.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access combo box field\n     * let field: PdfComboBoxField = document.form.fieldAt(0) as PdfComboBoxField;\n     * // Sets the text alignment of form field as center\n     * field.textAlignment = PdfTextAlignment.center;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (this._textAlignment !== value) {\n        this._setTextAlignment(value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfListField.prototype, \"backColor\", {\n    /**\n     * Gets the background color of the field.\n     *\n     * @returns {number[]} R, G, B color values in between 0 to 255.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the background color of the field.\n     * let backColor: number[] = field.backColor;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._parseBackColor(true);\n    },\n    /**\n     * Sets the background color of the field.\n     *\n     * @param {number[]} value Array with R, G, B, A color values in between 0 to 255. For optional A (0-254), it signifies transparency.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the list field at index 0\n     * let list1: PdfField = document.form.fieldAt(0);\n     * // Sets the background color of the field.\n     * list1.backColor = [255, 0, 0];\n     * // Access the list field at index 1\n     * let list2: PdfField = document.form.fieldAt(1);\n     * // Sets the background color of the field to transparent.\n     * list2.backColor = [0, 0, 0, 0];\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      this._updateBackColor(value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfListField.prototype, \"_options\", {\n    get: function () {\n      if (!this._optionArray) {\n        if (this._dictionary.has('Opt')) {\n          this._optionArray = this._dictionary.getArray('Opt');\n        } else {\n          this._optionArray = [];\n          this._dictionary.update('Opt', this._optionArray);\n        }\n      }\n      return this._optionArray;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Gets the item at the specified index.\n   *\n   * @param {number} index Index of the field item.\n   * @returns {PdfListFieldItem} Field item at the index.\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data);\n   * // Gets the first page of the document\n   * let page: PdfPage = document.getPage(0);\n   * // Access the PDF form\n   * let form: PdfForm = document.form;\n   * // Access the list box field\n   * let listBox: PdfListBoxField = form.fieldAt(0) as PdfListBoxField;\n   * // Gets the first list item.\n   * let listBoxItem: PdfListFieldItem = listBox.itemAt(0);\n   * // Access the combo box field\n   * let comboBox: PdfComboBoxField = form.fieldAt(1) as PdfComboBoxField;\n   * // Gets the first list item.\n   * let comboBoxItem: PdfListFieldItem = comboBox.itemAt(0);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfListField.prototype.itemAt = function (index) {\n    var item;\n    if (index < this._kidsCount) {\n      if (this._parsedItems.has(index)) {\n        item = this._parsedItems.get(index);\n      } else {\n        var dictionary = void 0;\n        var reference = this._kids[Number.parseInt(index.toString(), 10)];\n        if (reference && reference instanceof _PdfReference) {\n          dictionary = this._crossReference._fetch(reference);\n        }\n        if (dictionary) {\n          item = PdfListFieldItem._load(dictionary, this._crossReference, this);\n          item._index = index;\n          item._ref = reference;\n          if (this._options && this._options.length > 0 && index < this._options.length) {\n            item._text = this._options[Number.parseInt(index.toString(), 10)][1];\n          } else {\n            item._text = '';\n          }\n          this._parsedItems.set(index, item);\n        }\n      }\n    } else {\n      if (this._parsedItems.has(index)) {\n        item = this._parsedItems.get(index);\n      } else if (this._kidsCount > 0 && this._kids && this._kids.length > 0) {\n        var dictionary = void 0;\n        var reference = void 0;\n        if (this._kidsCount === 1) {\n          reference = this._kids[0];\n        } else {\n          reference = this._kids[Number.parseInt(index.toString(), 10)];\n        }\n        if (reference && reference instanceof _PdfReference) {\n          dictionary = this._crossReference._fetch(reference);\n        }\n        if (dictionary) {\n          item = PdfListFieldItem._load(dictionary, this._crossReference, this);\n          item._index = index;\n          item._ref = reference;\n          if (this._options && this._options.length > 0 && index < this._options.length) {\n            item._text = this._options[Number.parseInt(index.toString(), 10)][1];\n          } else {\n            item._text = '';\n          }\n          this._parsedItems.set(index, item);\n        }\n      }\n    }\n    return item;\n  };\n  /**\n   * Add list item.\n   *\n   * @param {PdfListFieldItem} item Item to add.\n   * @returns {number} Index of the field item.\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data);\n   * // Gets the first page of the document\n   * let page: PdfPage = document.getPage(0);\n   * // Access the PDF form\n   * let form: PdfForm = document.form;\n   * // Create a new list box field\n   * let listField: PdfListField = new PdfListBoxField(page, 'list1', {x: 100, y: 60, width: 100, height: 50});\n   * // Add list items to the field.\n   * listField.addItem(new PdfListFieldItem('English', 'English'));\n   * listField.addItem(new PdfListFieldItem('French', 'French'));\n   * listField.addItem(new PdfListFieldItem('German', 'German'));\n   * // Sets the selected index\n   * listField.selectedIndex = 2;\n   * // Sets the flag indicates whether the list box allows multiple selections.\n   * listField.multiSelect = true;\n   * // Add the field into PDF form\n   * form.add(listField);\n   * // Create a new combo box field\n   * let comboField: PdfComboBoxField = new PdfComboBoxField(page, 'list1', {x: 100, y: 160, width: 100, height: 50});\n   * // Add list items to the field.\n   * comboField.addItem(new PdfListFieldItem('English', 'English'));\n   * comboField.addItem(new PdfListFieldItem('French', 'French'));\n   * comboField.addItem(new PdfListFieldItem('German', 'German'));\n   * // Sets the selected index\n   * comboField.selectedIndex = 2;\n   * // Sets the flag indicates whether the combo box allows multiple selections.\n   * comboField.multiSelect = true;\n   * // Add the field into PDF form\n   * form.add(comboField);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfListField.prototype.addItem = function (item) {\n    this._addToOptions(item, this);\n    return this._listValues.length - 1;\n  };\n  /**\n   * Remove the list item from the specified index.\n   *\n   * @param {number} index Item index to remove.\n   * @returns {void} Nothing.\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data);\n   * // Gets the first page of the document\n   * let page: PdfPage = document.getPage(0);\n   * // Access the PDF form\n   * let form: PdfForm = document.form;\n   * // Access the list box field\n   * let listBoxField: PdfListBoxField = form.fieldAt(0) as PdfListBoxField;\n   * // Remove the list item from the list box field\n   * listBoxField.removeItemAt(1);\n   * // Access the combo box field\n   * let comboBoxField: PdfComboBoxField = form.fieldAt(1) as PdfComboBoxField;\n   * // Remove the list item from the combo box field\n   * comboBoxField.removeItemAt(0);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfListField.prototype.removeItemAt = function (index) {\n    var item = this.itemAt(index);\n    if (item && item._ref) {\n      this._parsedItems.delete(index);\n      if (this._parsedItems.size > 0) {\n        var parsedItems_3 = new Map();\n        this._parsedItems.forEach(function (value, key) {\n          if (key > index) {\n            parsedItems_3.set(key - 1, value);\n          } else {\n            parsedItems_3.set(key, value);\n          }\n        });\n        this._parsedItems = parsedItems_3;\n      }\n      if (this._dictionary.has('Opt')) {\n        var options = this._options;\n        if (options && options.length > 0) {\n          options.splice(index, 1);\n          this._dictionary.set('Opt', options);\n          this._optionArray = options;\n          this._dictionary._updated = true;\n        }\n      }\n    }\n  };\n  /**\n   * Remove the list item.\n   *\n   * @param {PdfListFieldItem} item Item to remove.\n   * @returns {void} Nothing.\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data);\n   * // Gets the first page of the document\n   * let page: PdfPage = document.getPage(0);\n   * // Access the PDF form\n   * let form: PdfForm = document.form;\n   * // Access the list box field\n   * let listBoxField: PdfListBoxField = form.fieldAt(0) as PdfListBoxField;\n   * // Remove the list item from the list box field\n   * listBoxField.removeItem(listBoxField.itemAt(1));\n   * // Access the combo box field\n   * let comboBoxField: PdfComboBoxField = form.fieldAt(1) as PdfComboBoxField;\n   * // Remove the list item from the combo box field\n   * comboBoxField.removeItem(comboBoxField.itemAt(0));\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfListField.prototype.removeItem = function (item) {\n    if (item && item.text) {\n      var index = void 0;\n      for (var i = 0; i < this.itemsCount; i++) {\n        var fieldItem = this.itemAt(i);\n        if (fieldItem && item === fieldItem && fieldItem.text === item.text) {\n          index = i;\n          break;\n        }\n      }\n      if (index !== -1) {\n        this.removeItemAt(index);\n      }\n    }\n  };\n  PdfListField.prototype._initialize = function (page, name, bounds) {\n    this._defaultIndex = 0;\n    this._crossReference = page._crossReference;\n    this._page = page;\n    this._name = name;\n    this._dictionary = new _PdfDictionary(this._crossReference);\n    this._ref = this._crossReference._getNextReference();\n    this._crossReference._cacheMap.set(this._ref, this._dictionary);\n    this._dictionary.objId = this._ref.toString();\n    this._dictionary.update('FT', _PdfName.get('Ch'));\n    this._dictionary.update('T', name);\n    this._parsedItems = new Map();\n    this._listValues = [];\n    this._kids = [];\n    this.bounds = bounds;\n    this._addEmptyWidget();\n  };\n  PdfListField.prototype._obtainFont = function (item) {\n    var fontFamily = '';\n    var fontSize = 1;\n    if (item && (item._dictionary.has('DS') || item._dictionary.has('DA'))) {\n      if (item._dictionary.has('DS')) {\n        var collection = item._dictionary.get('DS').split(';');\n        for (var i = 0; i < collection.length; i++) {\n          var entry = collection[Number.parseInt(i.toString(), 10)].split(':');\n          if (collection[Number.parseInt(i.toString(), 10)].indexOf('font-family') !== -1) {\n            fontFamily = entry[1];\n          } else if (collection[Number.parseInt(i.toString(), 10)].indexOf('font-size') !== -1) {\n            if (entry[1].endsWith('pt')) {\n              fontSize = Number.parseFloat(entry[1].replace('pt', ''));\n            }\n          } else if (collection[Number.parseInt(i.toString(), 10)].indexOf('font-style') === -1 && collection[Number.parseInt(i.toString(), 10)].indexOf('font') !== -1) {\n            var name_6 = entry[1];\n            var split = name_6.split(' ');\n            for (var j = 0; j < split.length; j++) {\n              if (split[Number.parseInt(j.toString(), 10)] !== '' && !split[Number.parseInt(j.toString(), 10)].endsWith('pt')) {\n                fontFamily += split[Number.parseInt(j.toString(), 10)] + ' ';\n              }\n              if (split[Number.parseInt(j.toString(), 10)].endsWith('pt')) {\n                fontSize = Number.parseFloat(split[Number.parseInt(j.toString(), 10)].replace('pt', ''));\n              }\n            }\n            while (fontFamily !== ' ' && fontFamily.endsWith(' ')) {\n              fontFamily = fontFamily.substring(0, fontFamily.length - 2);\n            }\n            if (fontFamily.indexOf(',') !== -1) {\n              fontFamily = fontFamily.split(',')[0];\n            }\n          }\n        }\n      } else {\n        var value = item._dictionary.get('DA');\n        if (value && value !== '' && value.indexOf('Tf') !== -1) {\n          var textCollection = value.split(' ');\n          for (var i = 0; i < textCollection.length; i++) {\n            if (textCollection[Number.parseInt(i.toString(), 10)].indexOf('Tf') !== -1) {\n              fontFamily = textCollection[i - 2];\n              while (fontFamily !== '' && fontFamily.length > 1 && fontFamily[0] === '/') {\n                fontFamily = fontFamily.substring(1);\n              }\n              fontSize = Number.parseFloat(textCollection[i - 1]);\n            }\n          }\n          var height = 0.0;\n          if (fontSize === 0) {\n            var font = new PdfStandardFont(PdfFontFamily.helvetica, height);\n            if (font !== null) {\n              height = this._getFontHeight(font._fontFamily);\n              if (Number.isNaN(height) || height === 0) {\n                height = 12;\n              }\n              font._size = height;\n              fontSize = height;\n            }\n          }\n        }\n      }\n      fontFamily = fontFamily.trim();\n      switch (fontFamily) {\n        case 'Helv':\n          this._font = new PdfStandardFont(PdfFontFamily.helvetica, fontSize, PdfFontStyle.regular);\n          break;\n        case 'Courier':\n        case 'Cour':\n          this._font = new PdfStandardFont(PdfFontFamily.courier, fontSize, PdfFontStyle.regular);\n          break;\n        case 'Symb':\n          this._font = new PdfStandardFont(PdfFontFamily.symbol, fontSize, PdfFontStyle.regular);\n          break;\n        case 'TiRo':\n          this._font = new PdfStandardFont(PdfFontFamily.timesRoman, fontSize, PdfFontStyle.regular);\n          break;\n        case 'ZaDb':\n          this._font = new PdfStandardFont(PdfFontFamily.zapfDingbats, fontSize, PdfFontStyle.regular);\n          break;\n        default:\n          this._font = new PdfStandardFont(PdfFontFamily.helvetica, fontSize, PdfFontStyle.regular);\n          break;\n      }\n    }\n    return this._font;\n  };\n  PdfListField.prototype._obtainSelectedValue = function () {\n    var _this = this;\n    var result = [];\n    if (this._dictionary.has('V')) {\n      var primitive = this._dictionary.get('V'); // eslint-disable-line\n      var array = this._dictionary.getArray('V'); // eslint-disable-line\n      if (primitive !== null && typeof primitive !== 'undefined') {\n        if (typeof primitive === 'string') {\n          result.push(primitive);\n        } else if (Array.isArray(primitive)) {\n          array.forEach(function (element) {\n            result.push(element);\n          });\n        }\n      }\n    } else {\n      var selectedIndexes = this._dictionary.get('I');\n      if (selectedIndexes !== null && typeof selectedIndexes !== 'undefined' && selectedIndexes.length > 0 && selectedIndexes[0] > -1 && this._options && this._options.length > 0) {\n        selectedIndexes.forEach(function (index) {\n          result.push(_this._options[Number.parseInt(index.toString(), 10)][0]);\n        });\n      }\n    }\n    return result;\n  };\n  PdfListField.prototype._doPostProcess = function (isFlatten) {\n    if (isFlatten === void 0) {\n      isFlatten = false;\n    }\n    if (isFlatten || this._setAppearance || this._form._setAppearance) {\n      var count = this._kidsCount;\n      if (this._kids && this._kids.length > 0) {\n        if (count > 1) {\n          for (var i = 0; i < count; i++) {\n            var item = this.itemAt(i);\n            if (item && !this._checkFieldFlag(item._dictionary)) {\n              var template = this._createAppearance(item);\n              if (isFlatten) {\n                var page = item._getPage();\n                if (page) {\n                  this._drawTemplate(template, page, item.bounds);\n                }\n              } else {\n                this._addAppearance(item._dictionary, template, 'N');\n              }\n              item._dictionary._updated = !isFlatten;\n            }\n          }\n        } else {\n          var item = this.itemAt(0);\n          var template = this._createAppearance();\n          if (isFlatten) {\n            var page = this.page;\n            if (page) {\n              this._drawTemplate(template, page, this.bounds);\n            }\n          } else {\n            this._addAppearance(item._dictionary, template, 'N');\n          }\n          item._dictionary._updated = !isFlatten;\n        }\n      } else if (this._dictionary) {\n        var template = this._createAppearance();\n        if (isFlatten) {\n          var page = this.page;\n          if (page) {\n            this._drawTemplate(template, page, this.bounds);\n          }\n        } else {\n          this._addAppearance(this._dictionary, template, 'N');\n        }\n      }\n      this._dictionary._updated = !isFlatten;\n    }\n  };\n  PdfListField.prototype._tryGetIndex = function (value) {\n    var index = -1;\n    if (this._options && this._options.length > 0) {\n      for (var i = 0; i < this._options.length; i++) {\n        if (value === this._options[Number.parseInt(i.toString(), 10)][0]) {\n          index = i;\n          break;\n        }\n      }\n    }\n    return index;\n  };\n  PdfListField.prototype._addEmptyWidget = function () {\n    var widget = new PdfWidgetAnnotation();\n    widget._create(this._page, this.bounds, this);\n    this._addToKid(widget);\n    widget._dictionary.update('MK', new _PdfDictionary(this._crossReference));\n    widget._mkDictionary.update('BC', [0, 0, 0]);\n    widget._mkDictionary.update('BG', [1, 1, 1]);\n    widget._dictionary.update('DA', '/TiRo 0 Tf 0 0 0 rg');\n  };\n  return PdfListField;\n}(PdfField);\nexport { PdfListField };\n/**\n * `PdfComboBoxField` class represents the combo box field objects.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Gets the first page of the document\n * let page: PdfPage = document.getPage(0);\n * // Access the PDF form\n * let form: PdfForm = document.form;\n * // Create a new combo box field\n * let field: PdfComboBoxField = new PdfComboBoxField(page, 'list1', {x: 100, y: 60, width: 100, height: 50});\n * // Add list items to the field.\n * field.addItem(new PdfListFieldItem('English', 'English'));\n * field.addItem(new PdfListFieldItem('French', 'French'));\n * field.addItem(new PdfListFieldItem('German', 'German'));\n * // Sets the selected index\n * field.selectedIndex = 2;\n * // Sets the flag indicates whether the combo box allows multiple selections.\n * field.multiSelect = true;\n * // Add the field into PDF form\n * form.add(field);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfComboBoxField = /** @class */function (_super) {\n  __extends(PdfComboBoxField, _super);\n  function PdfComboBoxField(page, name, bounds) {\n    var _this = _super.call(this) || this;\n    if (page && name && bounds) {\n      _this._initialize(page, name, bounds);\n      _this._fieldFlags |= _FieldFlag.combo;\n    }\n    return _this;\n  }\n  Object.defineProperty(PdfComboBoxField.prototype, \"_isAutoFontSize\", {\n    /**\n     * Gets the boolean flag indicates whether the combo box field is auto size.\n     *\n     * @private\n     * @returns {boolean} Returns the boolean value to check auto size.\n     */\n    get: function () {\n      var isAutoFontSize = false;\n      if (this._isLoaded && this._form) {\n        var acroForm = this._form._dictionary;\n        if (acroForm && acroForm.has('DA')) {\n          var fontString = acroForm.get('DA');\n          if (fontString) {\n            var defaultAppearance = new _PdfDefaultAppearance(fontString);\n            if (defaultAppearance.fontSize === 0) {\n              if (this._kids && this._kids.length > 0) {\n                var fontSize = false;\n                if (this._dictionary.has('DA')) {\n                  fontString = this._dictionary.get('DA');\n                  if (fontString) {\n                    defaultAppearance = new _PdfDefaultAppearance(fontString);\n                    if (defaultAppearance && defaultAppearance.fontSize > 0) {\n                      fontSize = true;\n                    }\n                  }\n                }\n                if (!fontSize) {\n                  for (var i = 0; i < this._kids.length; i++) {\n                    var dictionary = void 0;\n                    var reference = this._kids[Number.parseInt(i.toString(), 10)];\n                    if (reference && reference instanceof _PdfReference) {\n                      dictionary = this._crossReference._fetch(reference);\n                    }\n                    if (dictionary) {\n                      if (dictionary.has('DA')) {\n                        fontString = dictionary.get('DA');\n                        var height = 0;\n                        if (fontString) {\n                          defaultAppearance = new _PdfDefaultAppearance(fontString);\n                          if (defaultAppearance) {\n                            height = defaultAppearance.fontSize;\n                          }\n                        }\n                        if (height === 0) {\n                          isAutoFontSize = true;\n                        }\n                      } else {\n                        isAutoFontSize = true;\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (this._dictionary.has('DA')) {\n                  fontString = this._dictionary.get('DA');\n                  var height = 0;\n                  if (fontString) {\n                    defaultAppearance = new _PdfDefaultAppearance(fontString);\n                    if (defaultAppearance) {\n                      height = defaultAppearance.fontSize;\n                    }\n                  }\n                  if (height === 0) {\n                    isAutoFontSize = true;\n                  }\n                } else {\n                  isAutoFontSize = true;\n                }\n              }\n            }\n          }\n        }\n      }\n      return isAutoFontSize;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Parse an existing combo box field.\n   *\n   * @private\n   * @param {PdfForm} form Form object.\n   * @param {_PdfDictionary} dictionary Field dictionary.\n   * @param {_PdfCrossReference} crossReference Cross reference object.\n   * @param {_PdfReference} reference Field reference.\n   * @returns {PdfComboBoxField} Combo box field.\n   */\n  PdfComboBoxField._load = function (form, dictionary, crossReference, reference) {\n    var field = new PdfComboBoxField();\n    field._isLoaded = true;\n    field._form = form;\n    field._dictionary = dictionary;\n    field._crossReference = crossReference;\n    field._ref = reference;\n    if (field._dictionary.has('Kids')) {\n      field._kids = field._dictionary.get('Kids');\n    }\n    var options = field._dictionary.getArray('Opt');\n    if (options !== null && typeof options !== 'undefined') {\n      field._listValues = new Array(options.length);\n    }\n    field._defaultIndex = 0;\n    field._parsedItems = new Map();\n    if (field._kidsCount > 0) {\n      field._retrieveOptionValue();\n    }\n    return field;\n  };\n  PdfComboBoxField.prototype._retrieveOptionValue = function () {\n    if (this._dictionary.has('Opt')) {\n      var options = this._dictionary.getArray('Opt');\n      if (options && options.length > 0) {\n        var itemsCount = this._kidsCount;\n        var count = options.length <= itemsCount ? options.length : itemsCount;\n        for (var i = 0; i < count; i++) {\n          var text = options[Number.parseInt(i.toString(), 10)][1];\n          if (text) {\n            this.itemAt(i)._text = text ? text : '';\n          }\n        }\n      }\n    }\n  };\n  PdfComboBoxField.prototype._createAppearance = function (item) {\n    var parameter = new _PaintParameter();\n    if (item) {\n      var bounds = item.bounds;\n      var page = item._getPage();\n      if (item._isLoaded && page && typeof page.rotation !== 'undefined' && page.rotation !== PdfRotationAngle.angle0) {\n        parameter.bounds = this._rotateTextBox([bounds.x, bounds.y, bounds.width, bounds.height], page.size, page.rotation);\n      } else {\n        parameter.bounds = [0, 0, bounds.width, bounds.height];\n      }\n      var backcolor = item.backColor;\n      if (backcolor) {\n        parameter.backBrush = new PdfBrush(backcolor);\n      }\n      parameter.foreBrush = new PdfBrush(item.color);\n      var border = item.border;\n      parameter.borderPen = new PdfPen(item.borderColor, border.width);\n      parameter.borderStyle = border.style;\n      parameter.borderWidth = border.width;\n      if (backcolor) {\n        var shadowColor = [backcolor[0] - 64, backcolor[1] - 64, backcolor[2] - 64];\n        var color = [shadowColor[0] >= 0 ? shadowColor[0] : 0, shadowColor[1] >= 0 ? shadowColor[1] : 0, shadowColor[2] >= 0 ? shadowColor[2] : 0];\n        parameter.shadowBrush = new PdfBrush(color);\n      }\n      parameter.rotationAngle = item.rotate;\n      var alignment = typeof item.textAlignment !== 'undefined' ? item.textAlignment : PdfTextAlignment.left;\n      var verticalAlignment = this.multiSelect ? PdfVerticalAlignment.top : PdfVerticalAlignment.middle;\n      parameter.stringFormat = new PdfStringFormat(alignment, verticalAlignment);\n    } else {\n      var bounds = this.bounds;\n      if (bounds) {\n        if (this._isLoaded && this.page && typeof this.page.rotation !== 'undefined' && this.page.rotation !== PdfRotationAngle.angle0) {\n          parameter.bounds = this._rotateTextBox([bounds.x, bounds.y, bounds.width, bounds.height], this.page.size, this.page.rotation);\n        } else {\n          parameter.bounds = [0, 0, bounds.width, bounds.height];\n        }\n      }\n      var backcolor = this.backColor;\n      if (backcolor) {\n        parameter.backBrush = new PdfBrush(backcolor);\n      }\n      parameter.foreBrush = new PdfBrush(this.color);\n      var border = this.border;\n      parameter.borderPen = new PdfPen(this.borderColor, border.width);\n      parameter.borderStyle = border.style;\n      parameter.borderWidth = border.width;\n      if (backcolor) {\n        var shadowColor = [backcolor[0] - 64, backcolor[1] - 64, backcolor[2] - 64];\n        var color = [shadowColor[0] >= 0 ? shadowColor[0] : 0, shadowColor[1] >= 0 ? shadowColor[1] : 0, shadowColor[2] >= 0 ? shadowColor[2] : 0];\n        parameter.shadowBrush = new PdfBrush(color);\n      }\n      parameter.rotationAngle = this.rotationAngle;\n      var alignment = typeof this.textAlignment !== 'undefined' ? this.textAlignment : PdfTextAlignment.left;\n      var verticalAlignment = this.multiSelect ? PdfVerticalAlignment.top : PdfVerticalAlignment.middle;\n      parameter.stringFormat = new PdfStringFormat(alignment, verticalAlignment);\n    }\n    parameter.required = this.required;\n    if (parameter.bounds === null || typeof parameter.bounds === 'undefined') {\n      parameter.bounds = [0, 0, 0, 0];\n    }\n    var template = new PdfTemplate(parameter.bounds, this._crossReference);\n    var graphics = template.graphics;\n    graphics._sw._clear();\n    if (!this.required) {\n      graphics._sw._beginMarkupSequence('Tx');\n      graphics._initializeCoordinates();\n    }\n    if (this._isLoaded) {\n      var font = void 0;\n      if (item) {\n        font = this._obtainFont(item);\n      }\n      if (typeof font === 'undefined' || font === null) {\n        font = this._appearanceFont;\n      }\n      this._drawComboBox(graphics, parameter, font, parameter.stringFormat);\n    } else {\n      if (!this._font) {\n        this._font = new PdfStandardFont(PdfFontFamily.timesRoman, this._getFontHeight(PdfFontFamily.helvetica));\n      }\n      this._drawComboBox(graphics, parameter, this._font, parameter.stringFormat);\n    }\n    if (!this.required) {\n      graphics._sw._endMarkupSequence();\n    }\n    return template;\n  };\n  PdfComboBoxField.prototype._drawComboBox = function (graphics, parameter, font, stringFormat) {\n    if (graphics._isTemplateGraphics && parameter.required) {\n      graphics.save();\n      graphics._initializeCoordinates();\n    }\n    this._drawRectangularControl(graphics, parameter);\n    if (graphics._isTemplateGraphics && parameter.required) {\n      graphics.restore();\n      graphics.save();\n      graphics._sw._beginMarkupSequence('Tx');\n      graphics._initializeCoordinates();\n    }\n    var options = this._options;\n    var selectedIndexes = this._dictionary.get('I');\n    var i = -1;\n    if (selectedIndexes && selectedIndexes.length > 0) {\n      i = selectedIndexes[0];\n    }\n    if (i >= 0 && i < options.length) {\n      var item = options[Number.parseInt(i.toString(), 10)]; // eslint-disable-line \n      var location_1 = [0, 0];\n      var borderWidth = parameter.borderWidth;\n      var doubleBorderWidth = 2 * borderWidth;\n      var defaultPadding = 2;\n      var padding = parameter.borderStyle === PdfBorderStyle.inset || parameter.borderStyle === PdfBorderStyle.beveled;\n      if (padding) {\n        location_1[0] = 2 * doubleBorderWidth;\n        location_1[1] = 2 * borderWidth;\n      } else {\n        location_1[0] = doubleBorderWidth + defaultPadding;\n        location_1[1] = 1 * borderWidth + (defaultPadding - 1);\n      }\n      var brush = parameter.foreBrush;\n      var rect = parameter.bounds;\n      var width = rect[2] - doubleBorderWidth;\n      var rectangle = rect;\n      if (padding) {\n        rectangle[3] -= doubleBorderWidth;\n      } else {\n        rectangle[3] -= borderWidth;\n      }\n      graphics.setClip(rectangle, PdfFillMode.winding);\n      if (parameter.rotationAngle === 0) {\n        var x = rect[0] + borderWidth;\n        if (padding) {\n          x += borderWidth;\n          width -= doubleBorderWidth;\n        }\n        brush = new PdfBrush([153, 193, 218]);\n        graphics.drawRectangle(x, location_1[1], width, rect[3], brush);\n        brush = new PdfBrush([0, 0, 0]);\n      }\n      var value = void 0;\n      if (item && Array.isArray(item)) {\n        value = item[1] ? item[1] : item[0];\n      } else {\n        value = item;\n      }\n      if (value) {\n        var itemTextBound = [location_1[0], location_1[1], width - location_1[0], rect[3]];\n        if (parameter.rotationAngle > 0) {\n          var state = graphics.save();\n          if (parameter.rotationAngle === 90) {\n            graphics.translateTransform(0, graphics._size[1]);\n            graphics.rotateTransform(-90);\n            var x_1 = graphics._size[1] - (rectangle[1] + rectangle[3]);\n            var y = rectangle[0];\n            rectangle = [x_1, y, rectangle[3] + rectangle[2], rectangle[2]];\n          } else if (parameter.rotationAngle === 270) {\n            graphics.translateTransform(graphics._size[0], 0);\n            graphics.rotateTransform(-270);\n            var x_2 = rectangle[1];\n            var y = graphics._size[0] - (rectangle[0] + rectangle[2]);\n            rectangle = [x_2, y, rectangle[3] + rectangle[2], rectangle[2]];\n          } else if (parameter.rotationAngle === 180) {\n            graphics.translateTransform(graphics._size[0], graphics._size[1]);\n            graphics.rotateTransform(-180);\n            var x_3 = graphics._size[0] - (rectangle[0] + rectangle[2]);\n            var y = graphics._size[1] - (rectangle[1] + rectangle[3]);\n            rectangle = [x_3, y, rectangle[2], rectangle[3]];\n          }\n          var x = rect[0] + borderWidth;\n          if (padding) {\n            x += borderWidth;\n            width -= doubleBorderWidth;\n          }\n          brush = new PdfBrush([153, 193, 218]);\n          graphics.drawRectangle(x, location_1[1], width, rect[3], brush);\n          brush = new PdfBrush([0, 0, 0]);\n          graphics.drawString(value, font, itemTextBound, null, brush, stringFormat);\n          graphics.restore(state);\n        } else {\n          graphics.drawString(value, font, itemTextBound, null, brush, stringFormat);\n        }\n      }\n    }\n    if (graphics._isTemplateGraphics && parameter.required) {\n      graphics._sw._endMarkupSequence();\n      graphics.restore();\n    }\n  };\n  PdfComboBoxField.prototype._getFontHeight = function (fontFamily) {\n    var values = this._dictionary.get('I');\n    var s;\n    var itemFont;\n    var format;\n    var options;\n    var bounds;\n    var borderWidth = this.border.width;\n    if (this._isLoaded) {\n      itemFont = new PdfStandardFont(fontFamily, 12);\n      format = new PdfStringFormat(PdfTextAlignment.center, PdfVerticalAlignment.middle);\n      options = this._dictionary.getArray('Opt');\n      bounds = this.bounds;\n      var widths_1 = [];\n      if (values && values.length > 0) {\n        values.forEach(function (entry) {\n          widths_1.push(itemFont.measureString(options[Number.parseInt(entry.toString(), 10)][1], [0, 0], format, 0, 0)[0]);\n        });\n      } else if (options.length > 0) {\n        var max = itemFont.measureString(options[0][1], [0, 0], format, 0, 0)[0];\n        for (var i = 1; i < options.length; ++i) {\n          var width = itemFont.measureString(options[Number.parseInt(i.toString(), 10)][1], [0, 0], format, 0, 0)[0];\n          max = Math.max(max, width);\n          widths_1.push(max);\n        }\n      }\n      s = widths_1.length > 0 ? 12 * (bounds.width - 4 * borderWidth) / widths_1.sort()[widths_1.length - 1] : 12;\n    } else {\n      s = 0;\n      if (values && values.length > 0) {\n        itemFont = new PdfStandardFont(fontFamily, 12);\n        format = new PdfStringFormat(PdfTextAlignment.center, PdfVerticalAlignment.middle);\n        options = this._dictionary.getArray('Opt');\n        var width = itemFont.measureString(options[values[0]][1], [0, 0], format, 0, 0)[0];\n        bounds = this.bounds;\n        if (width) {\n          s = 12 * (bounds.width - 4 * borderWidth) / width;\n        } else {\n          s = 12;\n        }\n      } else {\n        return s;\n      }\n    }\n    var fontSize = 0;\n    if (values && values.length > 0) {\n      if (s !== 12) {\n        itemFont = new PdfStandardFont(fontFamily, s);\n        var text = options[values[0]][1];\n        var textSize = itemFont.measureString(text, [0, 0], format, 0, 0);\n        if (textSize[0] > bounds.width || textSize[1] > bounds.height) {\n          var width = bounds.width - 4 * borderWidth;\n          var h = bounds.height - 4 * borderWidth;\n          var min = 0.248;\n          for (var i = 1; i <= bounds.height; i++) {\n            itemFont._size = i;\n            var size = itemFont.measureString(text, [0, 0], format, 0, 0);\n            if (size[0] > bounds.width || size[1] > h) {\n              fontSize = i;\n              do {\n                fontSize = fontSize - 0.001;\n                itemFont._size = fontSize;\n                var textWidth = itemFont.getLineWidth(text, format);\n                if (fontSize < min) {\n                  itemFont._size = min;\n                  break;\n                }\n                size = itemFont.measureString(text, [0, 0], format, 0, 0);\n                if (textWidth < width && size[1] < h) {\n                  itemFont._size = fontSize;\n                  break;\n                }\n              } while (fontSize > min);\n              s = fontSize;\n              break;\n            }\n          }\n        }\n      }\n    } else if (s > 12) {\n      s = 12;\n    }\n    return s;\n  };\n  return PdfComboBoxField;\n}(PdfListField);\nexport { PdfComboBoxField };\n/**\n * `PdfListBoxField` class represents the list box field objects.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Gets the first page of the document\n * let page: PdfPage = document.getPage(0);\n * // Access the PDF form\n * let form: PdfForm = document.form;\n * // Create a new list box field\n * let field: PdfListBoxField = new PdfListBoxField(page, 'list1', {x: 100, y: 60, width: 100, height: 50});\n * // Add list items to the field.\n * field.addItem(new PdfListFieldItem('English', 'English'));\n * field.addItem(new PdfListFieldItem('French', 'French'));\n * field.addItem(new PdfListFieldItem('German', 'German'));\n * // Sets the selected index\n * field.selectedIndex = 2;\n * // Sets the flag indicates whether the list box allows multiple selections.\n * field.multiSelect = true;\n * // Add the field into PDF form\n * form.add(field);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfListBoxField = /** @class */function (_super) {\n  __extends(PdfListBoxField, _super);\n  function PdfListBoxField(page, name, bounds) {\n    var _this = _super.call(this) || this;\n    if (page && name && bounds) {\n      _this._initialize(page, name, bounds);\n    }\n    return _this;\n  }\n  /**\n   * Parse an existing list box field of the PDF document.\n   *\n   * @private\n   * @param {number} form maximum length.\n   * @param {_PdfDictionary} dictionary maximum length.\n   * @param {_PdfCrossReference} crossReference maximum length.\n   * @param {_PdfReference} reference maximum length.\n   * @returns {PdfListBoxField} List box field.\n   */\n  PdfListBoxField._load = function (form, dictionary, crossReference, reference) {\n    var field = new PdfListBoxField();\n    field._isLoaded = true;\n    field._form = form;\n    field._dictionary = dictionary;\n    field._crossReference = crossReference;\n    field._ref = reference;\n    if (field._dictionary.has('Kids')) {\n      field._kids = field._dictionary.get('Kids');\n    }\n    var options = field._dictionary.getArray('Opt');\n    if (options !== null && typeof options !== 'undefined') {\n      field._listValues = new Array(options.length);\n    }\n    field._defaultIndex = 0;\n    field._parsedItems = new Map();\n    if (field._kidsCount > 0) {\n      field._retrieveOptionValue();\n    }\n    return field;\n  };\n  PdfListBoxField.prototype._retrieveOptionValue = function () {\n    if (this._dictionary.has('Opt')) {\n      var options = this._dictionary.getArray('Opt');\n      if (options && options.length > 0) {\n        var index = this._dictionary.get('I');\n        for (var i = 0; i < options.length; i++) {\n          if (typeof index !== 'undefined' && index !== null) {\n            this._listValues[Number.parseInt(i.toString(), 10)] = options[Number.parseInt(i.toString(), 10)][1];\n            if (i === index) {\n              this.itemAt(i)._text = this._listValues[Number.parseInt(i.toString(), 10)];\n              this._selectedIndex = i;\n            } else {\n              this.itemAt(i)._text = this._listValues[Number.parseInt(i.toString(), 10)];\n            }\n          } else {\n            this.itemAt(i)._text = '';\n          }\n        }\n      }\n    }\n  };\n  PdfListBoxField.prototype._createAppearance = function (item) {\n    var parameter = new _PaintParameter();\n    if (item) {\n      var bounds = item.bounds;\n      var page = item._getPage();\n      if (item._isLoaded && page && typeof page.rotation !== 'undefined' && page.rotation !== PdfRotationAngle.angle0) {\n        parameter.bounds = this._rotateTextBox([bounds.x, bounds.y, bounds.width, bounds.height], page.size, page.rotation);\n      } else {\n        parameter.bounds = [0, 0, bounds.width, bounds.height];\n      }\n      var backcolor = item.backColor;\n      if (backcolor) {\n        parameter.backBrush = new PdfBrush(backcolor);\n      }\n      parameter.foreBrush = new PdfBrush(item.color);\n      var border = item.border;\n      parameter.borderPen = new PdfPen(item.borderColor, border.width);\n      parameter.borderStyle = border.style;\n      parameter.borderWidth = border.width;\n      if (backcolor) {\n        var shadowColor = [backcolor[0] - 64, backcolor[1] - 64, backcolor[2] - 64];\n        var color = [shadowColor[0] >= 0 ? shadowColor[0] : 0, shadowColor[1] >= 0 ? shadowColor[1] : 0, shadowColor[2] >= 0 ? shadowColor[2] : 0];\n        parameter.shadowBrush = new PdfBrush(color);\n      }\n      parameter.rotationAngle = item.rotate;\n      var alignment = typeof item.textAlignment !== 'undefined' ? item.textAlignment : PdfTextAlignment.left;\n      var verticalAlignment = this.multiSelect ? PdfVerticalAlignment.top : PdfVerticalAlignment.middle;\n      parameter.stringFormat = new PdfStringFormat(alignment, verticalAlignment);\n    } else {\n      var bounds = this.bounds;\n      if (this._isLoaded && this.page && typeof this.page.rotation !== 'undefined' && this.page.rotation !== PdfRotationAngle.angle0) {\n        parameter.bounds = this._rotateTextBox([bounds.x, bounds.y, bounds.width, bounds.height], this.page.size, this.page.rotation);\n      } else {\n        parameter.bounds = [0, 0, bounds.width, bounds.height];\n      }\n      var backcolor = this.backColor;\n      if (backcolor) {\n        parameter.backBrush = new PdfBrush(backcolor);\n      }\n      parameter.foreBrush = new PdfBrush(this.color);\n      var border = this.border;\n      parameter.borderPen = new PdfPen(this.borderColor, border.width);\n      parameter.borderStyle = border.style;\n      parameter.borderWidth = border.width;\n      if (backcolor) {\n        var shadowColor = [backcolor[0] - 64, backcolor[1] - 64, backcolor[2] - 64];\n        var color = [shadowColor[0] >= 0 ? shadowColor[0] : 0, shadowColor[1] >= 0 ? shadowColor[1] : 0, shadowColor[2] >= 0 ? shadowColor[2] : 0];\n        parameter.shadowBrush = new PdfBrush(color);\n      }\n      parameter.rotationAngle = this.rotationAngle;\n      var alignment = typeof this.textAlignment !== 'undefined' ? this.textAlignment : PdfTextAlignment.left;\n      var verticalAlignment = this.multiSelect ? PdfVerticalAlignment.top : PdfVerticalAlignment.middle;\n      parameter.stringFormat = new PdfStringFormat(alignment, verticalAlignment);\n    }\n    parameter.required = this.required;\n    var template = new PdfTemplate(parameter.bounds, this._crossReference);\n    var graphics = template.graphics;\n    graphics._sw._clear();\n    if (!this.required) {\n      graphics._sw._beginMarkupSequence('Tx');\n      graphics._initializeCoordinates();\n    }\n    if (this._isLoaded) {\n      var font = this._obtainFont(item);\n      if (typeof font === 'undefined' || font === null || !this._isLoaded && font.size === 1) {\n        font = this._appearanceFont;\n      }\n      this._drawListBox(graphics, parameter, font, parameter.stringFormat);\n    } else {\n      if (!this._font) {\n        this._font = this._defaultItemFont;\n      }\n      this._drawListBox(graphics, parameter, this._font, parameter.stringFormat);\n    }\n    if (!this.required) {\n      graphics._sw._endMarkupSequence();\n    }\n    return template;\n  };\n  PdfListBoxField.prototype._drawListBox = function (graphics, parameter, font, stringFormat) {\n    if (graphics._isTemplateGraphics && parameter.required) {\n      graphics.save();\n      graphics._initializeCoordinates();\n    }\n    this._drawRectangularControl(graphics, parameter);\n    if (graphics._isTemplateGraphics && parameter.required) {\n      graphics.restore();\n      graphics.save();\n      graphics._sw._beginMarkupSequence('Tx');\n      graphics._initializeCoordinates();\n    }\n    var options = this._options;\n    var _loop_1 = function (index) {\n      var item = options[Number.parseInt(index.toString(), 10)];\n      var location_2 = [];\n      var borderWidth = parameter.borderWidth;\n      var doubleBorderWidth = 2 * borderWidth;\n      var defaultPadding = 2;\n      var padding = parameter.borderStyle === PdfBorderStyle.inset || parameter.borderStyle === PdfBorderStyle.beveled;\n      if (padding) {\n        location_2.push(2 * doubleBorderWidth);\n        location_2.push((index + 2) * borderWidth + font._metrics._getHeight() * index);\n      } else {\n        location_2.push(doubleBorderWidth + defaultPadding);\n        location_2.push((index + 1) * borderWidth + font._metrics._getHeight() * index + (defaultPadding - 1));\n      }\n      var brush = parameter.foreBrush;\n      var rect = parameter.bounds;\n      var width = rect[2] - doubleBorderWidth;\n      var rectangle = rect;\n      if (padding) {\n        rectangle[3] -= doubleBorderWidth;\n      } else {\n        rectangle[3] -= borderWidth;\n      }\n      graphics.setClip(rectangle, PdfFillMode.winding);\n      var selected = false;\n      var selectedIndexes = this_1._dictionary.get('I');\n      if (selectedIndexes !== null && typeof selectedIndexes !== 'undefined' && selectedIndexes.length > 0) {\n        selectedIndexes.forEach(function (selectedIndex) {\n          selected = selected || selectedIndex === index;\n        });\n      }\n      if (parameter.rotationAngle === 0) {\n        if (selected) {\n          var x = rect[0] + borderWidth;\n          if (padding) {\n            x += borderWidth;\n            width -= doubleBorderWidth;\n          }\n          brush = new PdfBrush([153, 193, 218]);\n          graphics.drawRectangle(x, location_2[1], width, font._metrics._getHeight(), brush);\n          brush = new PdfBrush([0, 0, 0]);\n        }\n      }\n      var value = item[1] ? item[1] : item[0];\n      var itemTextBound = [location_2[0], location_2[1], width - location_2[0], font._metrics._getHeight()];\n      if (parameter.rotationAngle > 0) {\n        var state = graphics.save();\n        if (parameter.rotationAngle === 90) {\n          graphics.translateTransform(0, graphics._size[1]);\n          graphics.rotateTransform(-90);\n          var x = graphics._size[1] - (rectangle[1] + rectangle[3]);\n          var y = rectangle[0];\n          rectangle = [x, y, rectangle[3] + rectangle[2], rectangle[2]];\n        } else if (parameter.rotationAngle === 270) {\n          graphics.translateTransform(graphics._size[0], 0);\n          graphics.rotateTransform(-270);\n          var x = rectangle[1];\n          var y = graphics._size[0] - (rectangle[0] + rectangle[2]);\n          rectangle = [x, y, rectangle[3] + rectangle[2], rectangle[2]];\n        } else if (parameter.rotationAngle === 180) {\n          graphics.translateTransform(graphics._size[0], graphics._size[1]);\n          graphics.rotateTransform(-180);\n          var x = graphics._size[0] - (rectangle[0] + rectangle[2]);\n          var y = graphics._size[1] - (rectangle[1] + rectangle[3]);\n          rectangle = [x, y, rectangle[2], rectangle[3]];\n        }\n        if (selected) {\n          var x = rect[0] + borderWidth;\n          if (padding) {\n            x += borderWidth;\n            width -= doubleBorderWidth;\n          }\n          brush = new PdfBrush([153, 193, 218]);\n          graphics.drawRectangle(x, location_2[1], width, font._metrics._getHeight(), brush);\n          brush = new PdfBrush([0, 0, 0]);\n        }\n        graphics.drawString(value, font, itemTextBound, null, brush, stringFormat);\n        graphics.restore(state);\n      } else {\n        graphics.drawString(value, font, itemTextBound, null, brush, stringFormat);\n      }\n    };\n    var this_1 = this;\n    for (var index = 0; index < options.length; ++index) {\n      _loop_1(index);\n    }\n    if (graphics._isTemplateGraphics && parameter.required) {\n      graphics._sw._endMarkupSequence();\n      graphics.restore();\n    }\n  };\n  PdfListBoxField.prototype._getFontHeight = function (fontFamily) {\n    var itemFont = new PdfStandardFont(fontFamily, 12, PdfFontStyle.regular);\n    var format = new PdfStringFormat(PdfTextAlignment.left, PdfVerticalAlignment.middle);\n    var s = 0;\n    if (this._listValues.length > 0) {\n      var max = itemFont.measureString(this._listValues[0], [0, 0], format, 0, 0)[0];\n      for (var i = 1; i < this._listValues.length; ++i) {\n        var value = itemFont.measureString(this._listValues[Number.parseInt(i.toString(), 10)], [0, 0], format, 0, 0)[0];\n        max = max > value ? max : value;\n      }\n      s = 12 * (this.bounds.width - 4 * this.border.width) / max;\n      s = s > 12 ? 12 : s;\n    }\n    return s;\n  };\n  return PdfListBoxField;\n}(PdfListField);\nexport { PdfListBoxField };\n/**\n * `PdfSignatureField` class represents the signature field objects.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Gets the first page of the document\n * let page: PdfPage = document.getPage(0);\n * // Access the PDF form\n * let form: PdfForm = document.form;\n * // Create a new signature field\n * let field: PdfSignatureField = new PdfSignatureField(page, 'Signature', {x: 10, y: 10, width: 100, height: 50});\n * // Add the field into PDF form\n * form.add(field);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfSignatureField = /** @class */function (_super) {\n  __extends(PdfSignatureField, _super);\n  function PdfSignatureField(page, name, bounds) {\n    var _this = _super.call(this) || this;\n    _this._isSigned = false;\n    if (page && name && bounds) {\n      _this._initialize(page, name, bounds);\n    }\n    return _this;\n  }\n  Object.defineProperty(PdfSignatureField.prototype, \"isSigned\", {\n    /**\n     * Gets the flag to indicate whether the field is signed or not.\n     *\n     * @returns {boolean} Returns true if the field is signed; otherwise, false.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the loaded signature field\n     * let field: PdfSignatureField = document.form.fieldAt(0) as PdfSignatureField;\n     * // Get the signed status of the field\n     * let isSigned: boolean = field.isSigned;\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (!this._isSigned) {\n        this._checkSigned();\n      }\n      return this._isSigned;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfSignatureField.prototype, \"backColor\", {\n    /**\n     * Gets the background color of the field.\n     *\n     * @returns {number[]} R, G, B color values in between 0 to 255.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Gets the background color of the field.\n     * let backColor: number[] = field.backColor;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._parseBackColor(true);\n    },\n    /**\n     * Sets the background color of the field.\n     *\n     * @param {number[]} value Array with R, G, B, A color values in between 0 to 255. For optional A (0-254), it signifies transparency.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the signature field at index 0\n     * let field1: PdfField = document.form.fieldAt(0);\n     * // Sets the background color of the field.\n     * field1.backColor = [255, 0, 0];\n     * // Access the signature field at index 1\n     * let field2: PdfField = document.form.fieldAt(1);\n     * // Sets the background color of the field to transparent.\n     * field2.backColor = [0, 0, 0, 0];\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      this._updateBackColor(value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfSignatureField._load = function (form, dictionary, crossReference, reference) {\n    var field = new PdfSignatureField();\n    field._isLoaded = true;\n    field._form = form;\n    field._dictionary = dictionary;\n    field._crossReference = crossReference;\n    field._ref = reference;\n    if (field._dictionary.has('Kids')) {\n      field._kids = field._dictionary.get('Kids');\n    }\n    field._defaultIndex = 0;\n    field._parsedItems = new Map();\n    return field;\n  };\n  PdfSignatureField.prototype._initialize = function (page, name, bounds) {\n    this._crossReference = page._crossReference;\n    this._page = page;\n    this._name = name;\n    this._dictionary = new _PdfDictionary(this._crossReference);\n    this._ref = this._crossReference._getNextReference();\n    this._crossReference._cacheMap.set(this._ref, this._dictionary);\n    this._dictionary.objId = this._ref.toString();\n    this._dictionary.update('FT', _PdfName.get('Sig'));\n    this._dictionary.update('T', name);\n    this._defaultIndex = 0;\n    this._initializeFont(this._defaultFont);\n    this._createItem(bounds);\n  };\n  PdfSignatureField.prototype._createItem = function (bounds) {\n    var widget = new PdfWidgetAnnotation();\n    widget._create(this._page, bounds, this);\n    widget._dictionary.update('MK', new _PdfDictionary(this._crossReference));\n    widget._mkDictionary.update('BC', [0, 0, 0]);\n    widget._mkDictionary.update('BG', [1, 1, 1]);\n    widget._dictionary.update('DA', this._fontName + \" 8 Tf 0 0 0 rg\");\n    this._addToKid(widget);\n  };\n  PdfSignatureField.prototype._doPostProcess = function (isFlatten) {\n    if (isFlatten === void 0) {\n      isFlatten = false;\n    }\n    var needAppearance = this._setAppearance || this._form._setAppearance;\n    if (!this._isLoaded && (isFlatten || needAppearance)) {\n      var count = this._kidsCount;\n      if (count > 0) {\n        for (var i = 0; i < count; i++) {\n          var item = this.itemAt(i);\n          if (item && item._dictionary && (needAppearance || isFlatten && !item._dictionary.has('AP'))) {\n            var template = this._createAppearance(item, isFlatten);\n            this._addAppearance(item._dictionary, template, 'N');\n          }\n        }\n      }\n    }\n    if (isFlatten) {\n      var count = this._kidsCount;\n      if (count > 0) {\n        var firstItemTemplate = void 0;\n        for (var i = 0; i < count; i++) {\n          var item = this.itemAt(i);\n          if (item && item._dictionary) {\n            var page = item._getPage();\n            if (page) {\n              if (!firstItemTemplate && i === 0) {\n                firstItemTemplate = this._getItemTemplate(item._dictionary);\n              }\n              this._flattenSignature(item._dictionary, page, item.bounds, firstItemTemplate);\n            }\n          }\n        }\n      } else {\n        this._flattenSignature(this._dictionary, this.page, this.bounds);\n      }\n    }\n  };\n  PdfSignatureField.prototype._createAppearance = function (widget, isFlatten) {\n    var bounds = widget.bounds;\n    var template = new PdfTemplate([0, 0, bounds.width, bounds.height], this._crossReference);\n    _setMatrix(template, null);\n    template._writeTransformation = false;\n    var graphics = template.graphics;\n    var parameter = new _PaintParameter();\n    parameter.bounds = [0, 0, bounds.width, bounds.height];\n    var backcolor = widget.backColor;\n    if (isFlatten && backcolor) {\n      parameter.backBrush = new PdfBrush(backcolor);\n    }\n    parameter.foreBrush = new PdfBrush(widget.color);\n    var border = widget.border;\n    parameter.borderPen = new PdfPen(widget.borderColor, border.width);\n    parameter.borderStyle = border.style;\n    parameter.borderWidth = border.width;\n    if (backcolor) {\n      var shadowColor = [backcolor[0] - 64, backcolor[1] - 64, backcolor[2] - 64];\n      var color = [shadowColor[0] >= 0 ? shadowColor[0] : 0, shadowColor[1] >= 0 ? shadowColor[1] : 0, shadowColor[2] >= 0 ? shadowColor[2] : 0];\n      parameter.shadowBrush = new PdfBrush(color);\n    }\n    parameter.rotationAngle = widget.rotate;\n    graphics.save();\n    graphics._initializeCoordinates();\n    this._drawRectangularControl(graphics, parameter);\n    graphics.restore();\n    return template;\n  };\n  PdfSignatureField.prototype._flattenSignature = function (dictionary, page, bounds, signatureTemplate) {\n    var template;\n    if (dictionary.has('AP')) {\n      var appearanceDictionary = dictionary.get('AP');\n      if (appearanceDictionary && appearanceDictionary.has('N')) {\n        var appearanceStream = appearanceDictionary.get('N');\n        var reference = appearanceDictionary.getRaw('N');\n        if (reference && appearanceStream) {\n          appearanceStream.reference = reference;\n        }\n        if (appearanceStream) {\n          if (signatureTemplate) {\n            template = signatureTemplate;\n          } else {\n            template = new PdfTemplate(appearanceStream, this._crossReference);\n          }\n          if (template && page) {\n            var graphics = page.graphics;\n            var state = graphics.save();\n            if (page.rotation !== PdfRotationAngle.angle0) {\n              graphics._drawTemplate(template, this._calculateTemplateBounds(bounds, page, template, graphics));\n            } else {\n              graphics._drawTemplate(template, bounds);\n            }\n            graphics.restore(state);\n          }\n        }\n      }\n    } else if (signatureTemplate && page) {\n      var graphics = page.graphics;\n      var state = graphics.save();\n      if (page.rotation !== PdfRotationAngle.angle0) {\n        graphics._drawTemplate(template, this._calculateTemplateBounds(bounds, page, template, graphics));\n      } else {\n        graphics._drawTemplate(template, bounds);\n      }\n      graphics.restore(state);\n    }\n  };\n  PdfSignatureField.prototype._calculateTemplateBounds = function (bounds, page, template, graphics) {\n    var x = bounds.x;\n    var y = bounds.y;\n    if (page) {\n      var graphicsRotation = this._obtainGraphicsRotation(graphics._matrix);\n      if (graphicsRotation === 90) {\n        graphics.translateTransform(template._size[1], 0);\n        graphics.rotateTransform(90);\n        x = bounds.x;\n        y = -(page._size[1] - bounds.y - bounds.height);\n      } else if (graphicsRotation === 180) {\n        graphics.translateTransform(template._size[0], template._size[1]);\n        graphics.rotateTransform(180);\n        x = -(page._size[0] - (bounds.x + template._size[0]));\n        y = -(page._size[1] - bounds.y - template._size[1]);\n      } else if (graphicsRotation === 270) {\n        graphics.translateTransform(0, template._size[0]);\n        graphics.rotateTransform(270);\n        x = -(page._size[0] - bounds.x - bounds.width);\n        y = bounds.y;\n      }\n    }\n    return {\n      x: x,\n      y: y,\n      width: bounds.width,\n      height: bounds.height\n    };\n  };\n  PdfSignatureField.prototype._obtainGraphicsRotation = function (matrix) {\n    var angle = Math.round(Math.atan2(matrix._matrix._elements[2], matrix._matrix._elements[0]) * 180 / Math.PI);\n    switch (angle) {\n      case -90:\n        angle = 90;\n        break;\n      case -180:\n        angle = 180;\n        break;\n      case 90:\n        angle = 270;\n        break;\n    }\n    return angle;\n  };\n  PdfSignatureField.prototype._getItemTemplate = function (dictionary) {\n    var template;\n    if (dictionary.has('AP')) {\n      var appearanceDictionary = dictionary.get('AP');\n      if (appearanceDictionary && appearanceDictionary.has('N')) {\n        var appearanceStream = appearanceDictionary.get('N');\n        var reference = appearanceDictionary.getRaw('N');\n        if (reference) {\n          appearanceStream.reference = reference;\n        }\n        if (appearanceStream) {\n          template = new PdfTemplate(appearanceStream, this._crossReference);\n        }\n      }\n    }\n    return template;\n  };\n  PdfSignatureField.prototype._checkSigned = function () {\n    if (this._dictionary && this._dictionary.has('V')) {\n      var dictionary = this._dictionary.get('V');\n      if (dictionary !== null && typeof dictionary !== 'undefined' && dictionary.size > 0) {\n        this._isSigned = true;\n      }\n    }\n  };\n  return PdfSignatureField;\n}(PdfField);\nexport { PdfSignatureField };\nvar _PdfDefaultAppearance = /** @class */function () {\n  function _PdfDefaultAppearance(da) {\n    var color;\n    var fontName = '';\n    var fontSize = 0;\n    if (da && typeof da === 'string' && da !== '') {\n      var sliced = da.split(' ');\n      for (var i = 0; i < sliced.length; i++) {\n        switch (sliced[Number.parseInt(i.toString(), 10)]) {\n          case 'g':\n            color = [Number.parseFloat(sliced[i - 1])];\n            break;\n          case 'rg':\n            color = [Number.parseFloat(sliced[i - 3]), Number.parseFloat(sliced[i - 2]), Number.parseFloat(sliced[i - 1])];\n            break;\n          case 'k':\n            color = [Number.parseFloat(sliced[i - 4]), Number.parseFloat(sliced[i - 3]), Number.parseFloat(sliced[i - 2]), Number.parseFloat(sliced[i - 1])];\n            break;\n          case 'Tf':\n            fontSize = Number.parseFloat(sliced[i - 1]);\n            fontName = sliced[i - 2].substring(1);\n            if (fontName.includes('#2C')) {\n              fontName.replace('#2C', ',');\n            }\n            break;\n        }\n      }\n    }\n    this.fontName = fontName;\n    this.fontSize = fontSize;\n    this.color = typeof color !== 'undefined' ? _parseColor(color) : [0, 0, 0];\n  }\n  _PdfDefaultAppearance.prototype.toString = function () {\n    var color = [Number.parseFloat((this.color[0] / 255).toFixed(3)), Number.parseFloat((this.color[1] / 255).toFixed(3)), Number.parseFloat((this.color[2] / 255).toFixed(3))];\n    return '/' + this.fontName + ' ' + this.fontSize + ' Tf ' + color[0].toString() + ' ' + color[1].toString() + ' ' + color[2].toString() + ' rg';\n  };\n  return _PdfDefaultAppearance;\n}();\nexport { _PdfDefaultAppearance };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","_PdfDictionary","_PdfReference","_PdfName","PdfRadioButtonListItem","PdfStateItem","PdfWidgetAnnotation","PdfListFieldItem","_PaintParameter","PdfInteractiveBorder","_getItemValue","_checkField","_removeReferences","_removeDuplicateReference","_updateVisibility","_styleToString","_getStateTemplate","_findPage","_getInheritableProperty","_getNewGuidString","_calculateBounds","_parseColor","_mapHighlightMode","_reverseMapHighlightMode","_mapBorderStyle","_getUpdatedBounds","_setMatrix","_obtainFontDetails","_PdfCheckFieldState","PdfFormFieldVisibility","_FieldFlag","PdfAnnotationFlag","PdfTextAlignment","PdfHighlightMode","PdfBorderStyle","PdfRotationAngle","PdfCheckBoxStyle","PdfFormFieldsTabOrder","PdfFillMode","PdfTemplate","PdfStringFormat","PdfVerticalAlignment","_TextRenderingMode","PdfBrush","PdfPen","PdfFontFamily","PdfStandardFont","PdfFont","PdfFontStyle","PdfTrueTypeFont","_PdfPath","PdfAnnotationCollection","PdfField","_visible","_isTransparentBackColor","_defaultFont","helvetica","_appearanceFont","regular","_defaultItemFont","timesRoman","_flatten","_hasData","_circleCaptionFont","defineProperty","get","_kids","length","enumerable","configurable","_form","_name","names","_dictionary","join","_actualName","has","name_1","_mappingName","name_2","set","value","mappingName","update","_alternateName","name_3","toolTip","_isLoaded","visible","widget","itemAt","_defaultIndex","flag","default","_hasFlags","flags","visibleNotPrintable","flagValue","hidden","noView","print","hiddenPrintable","_visibility","visibility","_updated","_page","page","bounds","x","y","width","height","Error","angle","rotate","i","_kidsCount","color","_defaultAppearance","_da","isNew","_PdfDefaultAppearance","toString","_parseBackColor","_updateBackColor","borderColor","_mkDictionary","dictionary","colorArray","getArray","mkDict","_crossReference","Number","parseFloat","toFixed","_fieldFlags","readOnly","required","border","PdfButtonField","_width","borderStyle","name","_style","dashed","beveled","inset","underline","solid","_dash","_updateBorder","angle0","rotationAngle","noExport","annots","_pageDictionary","reference","parseInt","index1","indexOf","_ref","_tabIndex","form","_tabOrder","manual","tabOrder","annotationCollection","_annotations","index","_annotationIndex","annotations","_reArrange","document_1","_document","ref","getRaw","pageCount","entry","getPage","widgetRef","_gray","_silver","_white","_black","mkDictionary","item","hasTransparency","_hasBackColor","backColor","bgArray","_map","BG","_parsedItems","_fetch","_load","setAppearance","_setAppearance","getValue","element","setValue","removeItemAt","itemsCount","_getPage","_removeAnnotation","splice","delete","size","parsedItems_1","Map","forEach","key","removeItem","_flags","da","bs","style","dash","_checkFieldFlag","_initializeFont","font","_font","document","resource","fontDict","isReference","obj","keyName","_getNextReference","_pdfFontInternals","_cacheMap","_fontName","defaultAppearance","fontName","fontSize","_size","widgetDictionary","_drawRectangularControl","g","parameter","drawRectangle","backBrush","_drawBorder","borderPen","borderWidth","_drawLeftTopShadow","_grayBrush","_drawRightBottomShadow","_silverBrush","_whiteBrush","shadowBrush","drawLine","brush","path","points","push","_addPolygon","_drawPath","_drawRadioButton","graphics","checkSymbol","state","checked","unchecked","drawEllipse","pressedChecked","pressedUnchecked","_drawRoundBorder","_drawRoundShadow","outward","foreBrush","_drawCheckBox","inflateValue","shadowColor","_color","leftTop","rightBottom","drawArc","rectangle","_blackBrush","yOffset","extraBorder","xPosition","Math","max","xOffset","min","zapfDingbats","_metrics","_getHeight","pageRotationAngle","state_1","save","size_1","angle90","translateTransform","rotateTransform","angle180","angle270","z","drawString","center","middle","restore","_addToKid","currentIndex","_index","_drawTemplate","template","rotation","_sw","_setTextRenderingMode","fill","_addToOptions","field","PdfListBoxField","_listValues","_text","_options","_value","_isFont","_pdfFont","_addAppearance","appearance","_content","_rotateTextBox","rect","_checkIndex","_getAppearanceStateValue","_getTextAlignment","_textAlignment","left","_setTextAlignment","_stringFormat","PdfTextBoxField","_super","_this","call","_autoResizeText","_initialize","crossReference","text","_defaultValue","defaultValue","multiLine","password","doNotScroll","doNotSpellCheck","comb","fileSelect","mode","highlightMode","name_4","noHighlighting","_maxLength","length_1","isInteger","maxLength","_isAutoResize","_spellCheck","_insertSpaces","_multiline","_password","_scrollable","objId","_createItem","_create","textAlignment","actualName","_doPostProcess","isFlatten","count","_postProcess","_createAppearance","source","appearanceStream","_writeTransformation","backcolor","insertSpaces","_beginMarkupSequence","_initializeCoordinates","_drawTextBox","scrollable","_endMarkupSequence","format","multiline","scroll","current","alignment","right","startlocation","ceil","_isTemplateGraphics","tempheight","lineSpacing","ascent","_getAscent","shift","isAutoFontSize","_assignText","highlight","invert","fieldDictionary","pushButton","pressed","isPressed","_drawPressedButton","_drawButton","PdfCheckBoxField","V","AS","check","_drawAppearance","normalChecked","normalCheckedReference","normalUnchecked","normalUncheckedReference","normalDictionary","normalReference","pressChecked","pressCheckedReference","pressUnchecked","pressUncheckedReference","pressedDictionary","pressedReference","PdfRadioButtonListField","_selectedIndex","_retrieveOptionValue","_obtainSelectedIndex","selectedIndex","name_5","add","_field","_setField","parsedItems_2","options","radio","_optionValue","checkName","asName","toLowerCase","PdfListField","apply","arguments","_bounds","values_1","values","isArray","_tryGetIndex","values_2","indices_1","multiSelect","_multiSelect","edit","_editable","_optionArray","addItem","parsedItems_3","fieldItem","_addEmptyWidget","_obtainFont","fontFamily","collection","split","endsWith","replace","name_6","j","substring","textCollection","_getFontHeight","_fontFamily","isNaN","trim","courier","symbol","_obtainSelectedValue","result","primitive","array","selectedIndexes","PdfComboBoxField","combo","acroForm","fontString","verticalAlignment","top","stringFormat","_clear","_drawComboBox","location_1","doubleBorderWidth","defaultPadding","padding","setClip","winding","itemTextBound","x_1","x_2","x_3","s","itemFont","widths_1","measureString","sort","textSize","h","textWidth","getLineWidth","_drawListBox","_loop_1","location_2","selected","this_1","PdfSignatureField","_isSigned","_checkSigned","needAppearance","firstItemTemplate","_getItemTemplate","_flattenSignature","signatureTemplate","appearanceDictionary","_calculateTemplateBounds","graphicsRotation","_obtainGraphicsRotation","_matrix","matrix","round","atan2","_elements","PI","sliced","includes"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-pdf/src/pdf/core/form/field.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { _PdfDictionary, _PdfReference, _PdfName } from './../pdf-primitives';\nimport { PdfRadioButtonListItem, PdfStateItem, PdfWidgetAnnotation, PdfListFieldItem, _PaintParameter, PdfInteractiveBorder } from './../annotations/annotation';\nimport { _getItemValue, _checkField, _removeReferences, _removeDuplicateReference, _updateVisibility, _styleToString, _getStateTemplate, _findPage, _getInheritableProperty, _getNewGuidString, _calculateBounds, _parseColor, _mapHighlightMode, _reverseMapHighlightMode, _mapBorderStyle, _getUpdatedBounds, _setMatrix, _obtainFontDetails } from './../utils';\nimport { _PdfCheckFieldState, PdfFormFieldVisibility, _FieldFlag, PdfAnnotationFlag, PdfTextAlignment, PdfHighlightMode, PdfBorderStyle, PdfRotationAngle, PdfCheckBoxStyle, PdfFormFieldsTabOrder, PdfFillMode } from './../enumerator';\nimport { PdfTemplate } from './../graphics/pdf-template';\nimport { PdfStringFormat, PdfVerticalAlignment } from './../fonts/pdf-string-format';\nimport { _TextRenderingMode, PdfBrush, PdfPen } from './../graphics/pdf-graphics';\nimport { PdfFontFamily, PdfStandardFont, PdfFont, PdfFontStyle, PdfTrueTypeFont } from './../fonts/pdf-standard-font';\nimport { _PdfPath } from './../graphics/pdf-path';\nimport { PdfAnnotationCollection } from '../annotations/annotation-collection';\n/**\n * `PdfField` class represents the base class for form field objects.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Access the form field at index 0\n * let field: PdfField = document.form.fieldAt(0);\n * // Gets the count of the loaded field items\n * let count: number = field.itemsCount;\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfField = /** @class */ (function () {\n    function PdfField() {\n        this._visible = true;\n        this._isTransparentBackColor = false;\n        this._defaultFont = new PdfStandardFont(PdfFontFamily.helvetica, 8);\n        this._appearanceFont = new PdfStandardFont(PdfFontFamily.helvetica, 10, PdfFontStyle.regular);\n        this._defaultItemFont = new PdfStandardFont(PdfFontFamily.timesRoman, 12);\n        this._flatten = false;\n        this._hasData = false;\n        this._circleCaptionFont = new PdfStandardFont(PdfFontFamily.helvetica, 8, PdfFontStyle.regular);\n    }\n    Object.defineProperty(PdfField.prototype, \"itemsCount\", {\n        /**\n         * Gets the count of the loaded field items (Read only).\n         *\n         * @returns {number} Items count.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the count of the loaded field items\n         * let count: number = field.itemsCount;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._kids ? this._kids.length : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"form\", {\n        /**\n         * Gets the form object of the field (Read only).\n         *\n         * @returns {PdfForm} Form.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the form object of the field\n         * let form: PdfForm = field.form;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._form;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"name\", {\n        /**\n         * Gets the name of the field (Read only).\n         *\n         * @returns {string} Field name.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the name of the field\n         * let name: string = field.name;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this._name === 'undefined') {\n                var names = _getInheritableProperty(this._dictionary, 'T', false, false, 'Parent');\n                if (names && names.length > 0) {\n                    if (names.length === 1) {\n                        this._name = names[0];\n                    }\n                    else {\n                        this._name = names.join('.');\n                    }\n                }\n            }\n            return this._name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"actualName\", {\n        /**\n         * Gets the actual name of the field (Read only).\n         *\n         * @private\n         * @returns {string} Actual name.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the actual name of the field\n         * let name: string = field.actualName;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this._actualName === 'undefined' && this._dictionary.has('T')) {\n                var name_1 = this._dictionary.get('T');\n                if (name_1 && typeof name_1 === 'string') {\n                    this._actualName = name_1;\n                }\n            }\n            return this._actualName;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"mappingName\", {\n        /**\n         * Gets the mapping name to be used when exporting interactive form field data from the document.\n         *\n         * @returns {string} Mapping name.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the mapping name of the field\n         * let name: string = field.mappingName;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this._mappingName === 'undefined' && this._dictionary.has('TM')) {\n                var name_2 = this._dictionary.get('TM');\n                if (name_2 && typeof name_2 === 'string') {\n                    this._mappingName = name_2;\n                }\n            }\n            return this._mappingName;\n        },\n        /**\n         * Sets the mapping name to be used when exporting interactive form field data from the document.\n         *\n         * @param {string} value Mapping name.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Sets the mapping name of the field\n         * field.mappingName = ‘Author’;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (typeof this.mappingName === 'undefined' || this._mappingName !== value) {\n                this._mappingName = value;\n                this._dictionary.update('TM', value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"toolTip\", {\n        /**\n         * Gets the tool tip of the form field.\n         *\n         * @returns {string} Tooltip.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the tool tip value of the field\n         * let toolTip: string = field.toolTip;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this._alternateName === 'undefined' && this._dictionary.has('TU')) {\n                var name_3 = this._dictionary.get('TU');\n                if (name_3 && typeof name_3 === 'string') {\n                    this._alternateName = name_3;\n                }\n            }\n            return this._alternateName;\n        },\n        /**\n         * Sets the tool tip of the form field.\n         *\n         * @param {string} value Tooltip.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Sets the tool tip value of the field\n         * field.toolTip = ‘Author of the document’;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (typeof this.toolTip === 'undefined' || this._alternateName !== value) {\n                this._alternateName = value;\n                this._dictionary.update('TU', value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"visibility\", {\n        /**\n         * Gets the form field visibility.\n         *\n         * @returns {PdfFormFieldVisibility} Field visibility option.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the form field visibility.\n         * let visibility: PdfFormFieldVisibility = field.visibility;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            var value;\n            if (this._isLoaded) {\n                value = PdfFormFieldVisibility.visible;\n                var widget = this.itemAt(this._defaultIndex);\n                var flag = PdfAnnotationFlag.default;\n                if (widget && widget._hasFlags) {\n                    flag = widget.flags;\n                }\n                else if (this._dictionary.has('F')) {\n                    flag = this._dictionary.get('F');\n                }\n                else {\n                    return PdfFormFieldVisibility.visibleNotPrintable;\n                }\n                var flagValue = 3;\n                if ((flag & PdfAnnotationFlag.hidden) === PdfAnnotationFlag.hidden) {\n                    flagValue = 0;\n                }\n                if ((flag & PdfAnnotationFlag.noView) === PdfAnnotationFlag.noView) {\n                    flagValue = 1;\n                }\n                if ((flag & PdfAnnotationFlag.print) !== PdfAnnotationFlag.print) {\n                    flagValue &= 2;\n                }\n                switch (flagValue) {\n                    case 0:\n                        value = PdfFormFieldVisibility.hidden;\n                        break;\n                    case 1:\n                        value = PdfFormFieldVisibility.hiddenPrintable;\n                        break;\n                    case 2:\n                        value = PdfFormFieldVisibility.visibleNotPrintable;\n                        break;\n                    case 3:\n                        value = PdfFormFieldVisibility.visible;\n                        break;\n                }\n            }\n            else {\n                if (typeof this._visibility === 'undefined') {\n                    this._visibility = PdfFormFieldVisibility.visible;\n                }\n                value = this._visibility;\n            }\n            return value;\n        },\n        /**\n         * Sets the form field visibility.\n         *\n         * @param {PdfFormFieldVisibility} value visibility.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Sets the form field visibility.\n         * field.visibility = PdfFormFieldVisibility.visible;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            var widget = this.itemAt(this._defaultIndex);\n            if (this._isLoaded) {\n                if (widget && (!widget._hasFlags || this.visibility !== value)) {\n                    _updateVisibility(widget._dictionary, value);\n                    this._dictionary._updated = true;\n                }\n                else if (!this._dictionary.has('F') || this.visibility !== value) {\n                    _updateVisibility(this._dictionary, value);\n                    this._dictionary._updated = true;\n                }\n            }\n            else {\n                if (this.visibility !== value) {\n                    this._visibility = value;\n                    switch (value) {\n                        case PdfFormFieldVisibility.hidden:\n                            widget.flags = PdfAnnotationFlag.hidden;\n                            break;\n                        case PdfFormFieldVisibility.hiddenPrintable:\n                            widget.flags = (PdfAnnotationFlag.noView | PdfAnnotationFlag.print);\n                            break;\n                        case PdfFormFieldVisibility.visible:\n                            widget.flags = PdfAnnotationFlag.print;\n                            break;\n                        case PdfFormFieldVisibility.visibleNotPrintable:\n                            widget.flags = PdfAnnotationFlag.default;\n                            break;\n                    }\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"bounds\", {\n        /**\n         * Gets the bounds.\n         *\n         * @returns {{ x: number, y: number, width: number, height: number }} Bounds.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the bounds of list box field.\n         * let bounds: {x: number, y: number, width: number, height: number} = field.bounds;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            var value;\n            var widget = this.itemAt(this._defaultIndex);\n            if (widget) {\n                widget._page = this.page;\n            }\n            if (widget && widget.bounds) {\n                value = widget.bounds;\n            }\n            else if (this._dictionary.has('Rect')) {\n                value = _calculateBounds(this._dictionary, this.page);\n            }\n            if (typeof value === 'undefined' || value === null) {\n                value = { x: 0, y: 0, width: 0, height: 0 };\n            }\n            return value;\n        },\n        /**\n         * Sets the bounds.\n         *\n         * @param {{ x: number, y: number, width: number, height: number }} value bounds.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Sets the bounds.\n         * field.bounds = {x: 10, y: 10, width: 100, height: 20};\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (value.x === 0 && value.y === 0 && value.width === 0 && value.height === 0) {\n                throw new Error('Cannot set empty bounds');\n            }\n            var widget = this.itemAt(this._defaultIndex);\n            if (this._isLoaded) {\n                if (typeof widget === 'undefined' || this._dictionary.has('Rect')) {\n                    this._dictionary.update('Rect', _getUpdatedBounds([value.x, value.y, value.width, value.height], this.page));\n                }\n                else {\n                    widget._page = this.page;\n                    widget.bounds = value;\n                }\n            }\n            else {\n                widget._page = this.page;\n                widget.bounds = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"rotate\", {\n        /**\n         * Gets the rotation angle of the field.\n         *\n         * @returns {number} angle.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the rotation angle of the form field.\n         * let rotate: number = field.rotate;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            var widget = this.itemAt(this._defaultIndex);\n            var angle;\n            if (widget && typeof widget.rotate !== 'undefined') {\n                angle = widget.rotate;\n            }\n            else if (this._dictionary.has('R')) {\n                angle = this._dictionary.get('R');\n            }\n            else {\n                for (var i = 0; i < this._kidsCount && typeof angle === 'undefined'; i++) {\n                    if (i !== this._defaultIndex) {\n                        widget = this.itemAt(i);\n                        if (widget && typeof widget.rotate !== 'undefined') {\n                            angle = widget.rotate;\n                        }\n                    }\n                }\n            }\n            if (typeof angle === 'undefined') {\n                angle = 0;\n            }\n            return angle;\n        },\n        /**\n         * Sets the rotation angle of the field.\n         *\n         * @param {number} value rotation angle.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Sets the rotation angle.\n         * field.rotate = 90;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            var widget = this.itemAt(this._defaultIndex);\n            if (widget) {\n                widget.rotate = value;\n            }\n            else if (!this._dictionary.has('R') || this._dictionary.get('R') !== value) {\n                this._dictionary.update('R', value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"color\", {\n        /**\n         * Gets the fore color of the field.\n         *\n         * @returns {number[]} R, G, B color values in between 0 to 255.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the fore color of the field.\n         * let color: number[] = field.color;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            var value;\n            var widget = this.itemAt(this._defaultIndex);\n            if (widget && widget.color) {\n                value = widget.color;\n            }\n            else if (this._defaultAppearance) {\n                value = this._da.color;\n            }\n            return value;\n        },\n        /**\n         * Sets the fore color of the field.\n         *\n         * @param {number[]} value R, G, B color values in between 0 to 255.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Sets the fore color of the field.\n         * field.color = [255, 0, 0];\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            var widget = this.itemAt(this._defaultIndex);\n            if (widget && widget.color) {\n                widget.color = value;\n            }\n            else {\n                var isNew = false;\n                if (!this._defaultAppearance) {\n                    this._da = new _PdfDefaultAppearance('');\n                    isNew = true;\n                }\n                if (isNew || this._da.color !== value) {\n                    this._da.color = value;\n                    this._dictionary.update('DA', this._da.toString());\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"backColor\", {\n        /**\n         * Gets the background color of the field.\n         *\n         * @returns {number[]} R, G, B color values in between 0 to 255.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the background color of the field.\n         * let backColor: number[] = field.backColor;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._parseBackColor(false);\n        },\n        /**\n         * Sets the background color of the field.\n         *\n         * @param {number[]} value R, G, B color values in between 0 to 255.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Sets the background color of the field.\n         * field.backColor = [255, 0, 0];\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._updateBackColor(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"borderColor\", {\n        /**\n         * Gets the border color of the field.\n         *\n         * @returns {number[]} R, G, B color values in between 0 to 255.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the border color of the field.\n         * let borderColor: number[] = field.borderColor;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            var value;\n            var widget = this.itemAt(this._defaultIndex);\n            if (widget && widget.borderColor) {\n                value = widget.borderColor;\n            }\n            else if (this._mkDictionary) {\n                var dictionary = this._mkDictionary;\n                if (dictionary && dictionary.has('BC')) {\n                    var colorArray = dictionary.getArray('BC');\n                    if (colorArray) {\n                        value = _parseColor(colorArray);\n                    }\n                }\n            }\n            if (typeof value === 'undefined' || value === null) {\n                value = [0, 0, 0];\n            }\n            return value;\n        },\n        /**\n         * Sets the border color of the field.\n         *\n         * @param {number[]} value R, G, B color values in between 0 to 255.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Sets the border color of the field.\n         * field.borderColor = [255, 0, 0];\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            var widget = this.itemAt(this._defaultIndex);\n            if (widget && widget.borderColor !== value) {\n                widget.borderColor = value;\n            }\n            else {\n                var mkDict = this._mkDictionary;\n                if (typeof mkDict === 'undefined') {\n                    var dictionary = new _PdfDictionary(this._crossReference);\n                    dictionary.update('BC', [Number.parseFloat((value[0] / 255).toFixed(3)),\n                        Number.parseFloat((value[1] / 255).toFixed(3)),\n                        Number.parseFloat((value[2] / 255).toFixed(3))]);\n                    this._dictionary.update('MK', dictionary);\n                }\n                else if (!mkDict.has('BC') || _parseColor(mkDict.getArray('BC')) !== value) {\n                    mkDict.update('BC', [Number.parseFloat((value[0] / 255).toFixed(3)),\n                        Number.parseFloat((value[1] / 255).toFixed(3)),\n                        Number.parseFloat((value[2] / 255).toFixed(3))]);\n                    this._dictionary._updated = true;\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"readOnly\", {\n        /**\n         * Gets a value indicating whether read only.\n         *\n         * @returns {boolean} read only or not.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets a value indicating whether read only.\n         * let readOnly: boolean = field.readOnly;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return (this._fieldFlags & _FieldFlag.readOnly) !== 0;\n        },\n        /**\n         * Sets a value indicating whether read only.\n         *\n         * @param {boolean} value read only or not.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Sets a value indicating whether read only.\n         * field.readOnly = true;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (value) {\n                this._fieldFlags |= _FieldFlag.readOnly;\n            }\n            else {\n                if (this._fieldFlags === _FieldFlag.readOnly) {\n                    this._fieldFlags |= _FieldFlag.default;\n                }\n                this._fieldFlags &= ~_FieldFlag.readOnly;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"required\", {\n        /**\n         * Gets a value indicating whether the field is required.\n         *\n         * @returns {boolean} required or not.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets a value indicating whether the field is required.\n         * let required: boolean = field.required;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return (this._fieldFlags & _FieldFlag.required) !== 0;\n        },\n        /**\n         * Sets a value indicating whether the field is required.\n         *\n         * @param {boolean} value required or not.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Sets a value indicating whether the field is required.\n         * field.required = true;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (value) {\n                this._fieldFlags |= _FieldFlag.required;\n            }\n            else {\n                this._fieldFlags &= ~_FieldFlag.required;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"visible\", {\n        /**\n         * Gets a value indicating the visibility of the field (Read only).\n         *\n         * @returns {boolean} visible or not.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets a value indicating the visibility of the field.\n         * let visible: boolean = field.visible;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (this._isLoaded) {\n                var widget = this.itemAt(this._defaultIndex);\n                var flag = PdfAnnotationFlag.default;\n                if (widget && widget._hasFlags) {\n                    flag = widget.flags;\n                }\n                else if (this._dictionary.has('F')) {\n                    flag = this._dictionary.get('F');\n                }\n                return flag !== PdfAnnotationFlag.hidden;\n            }\n            else {\n                return this._visible;\n            }\n        },\n        /**\n         * Sets a value indicating the visibility of the field.\n         * Only applicable for newly created PDF form fields.\n         *\n         * @param {boolean} value or not.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Sets a value indicating the visibility of the field\n         * field.visible = true;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (!this._isLoaded && this._visible !== value && !value) {\n                this._visible = value;\n                this.itemAt(this._defaultIndex).flags = PdfAnnotationFlag.hidden;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"border\", {\n        /**\n         * Gets the width, style and dash of the border of the field.\n         *\n         * @returns {PdfInteractiveBorder} Border properties.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the width, style and dash of the border of the field.\n         * let border: PdfInteractiveBorder = field.border;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            var widget = this.itemAt(this._defaultIndex);\n            var value;\n            if (widget && widget._dictionary.has('BS')) {\n                value = widget.border;\n            }\n            else {\n                value = new PdfInteractiveBorder();\n                if (!(this instanceof PdfButtonField)) {\n                    value._width = 0;\n                }\n                value._dictionary = this._dictionary;\n                if (this._dictionary.has('BS')) {\n                    var border = this._dictionary.get('BS');\n                    if (border) {\n                        if (border.has('W')) {\n                            value._width = border.get('W');\n                        }\n                        if (border.has('S')) {\n                            var borderStyle = border.get('S');\n                            if (borderStyle) {\n                                switch (borderStyle.name) {\n                                    case 'D':\n                                        value._style = PdfBorderStyle.dashed;\n                                        break;\n                                    case 'B':\n                                        value._style = PdfBorderStyle.beveled;\n                                        break;\n                                    case 'I':\n                                        value._style = PdfBorderStyle.inset;\n                                        break;\n                                    case 'U':\n                                        value._style = PdfBorderStyle.underline;\n                                        break;\n                                    default:\n                                        value._style = PdfBorderStyle.solid;\n                                        break;\n                                }\n                            }\n                        }\n                        if (border.has('D')) {\n                            value._dash = border.getArray('D');\n                        }\n                    }\n                }\n            }\n            return value;\n        },\n        /**\n         * Sets the width, style and dash of the border of the field.\n         *\n         * @param {PdfInteractiveBorder} value Border properties.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Sets the width, style and dash of the border of the field.\n         * field.border = new PdfInteractiveBorder(2, PdfBorderStyle.solid);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            var widget = this.itemAt(this._defaultIndex);\n            if (widget) {\n                this._updateBorder(widget._dictionary, value);\n            }\n            else {\n                this._updateBorder(this._dictionary, value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"rotationAngle\", {\n        /**\n         * Gets the rotation of the field (Read only).\n         *\n         * @returns {PdfRotationAngle} Rotation angle.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the rotation of the field.\n         * let rotate: PdfRotationAngle = field.rotationAngle;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            var value = PdfRotationAngle.angle0;\n            var widget = this.itemAt(this._defaultIndex);\n            if (widget) {\n                value = widget.rotationAngle;\n            }\n            return value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"export\", {\n        /**\n         * Gets a value indicating whether the field is allow to export data or not.\n         *\n         * @returns {boolean} Allow to export data or not.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets a value indicating whether the field is allow to export data or not.\n         * let export: boolean = field.export;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return !((this._fieldFlags & _FieldFlag.noExport) !== 0);\n        },\n        /**\n         * Sets a value indicating whether the field is allow to export data or not.\n         *\n         * @param {boolean} value Allow to export data or not.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Sets a value indicating whether the field is allow to export data or not.\n         * field.export = true;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (value) {\n                this._fieldFlags &= ~_FieldFlag.noExport;\n            }\n            else {\n                this._fieldFlags |= _FieldFlag.noExport;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"tabIndex\", {\n        /**\n         * Gets the tab index of annotation in current page.\n         *\n         * @returns {number} tab index.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the tab index of annotation in current page.\n         * let tabIndex: number = field.tabIndex;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            var annots;\n            if (this.page._pageDictionary.has('Annots')) {\n                annots = this.page._pageDictionary.get('Annots');\n            }\n            if (this._kids && this._kids.length > 0) {\n                for (var i = 0; i < this._kids.length; i++) {\n                    var reference = this._kids[Number.parseInt(i.toString(), 10)];\n                    if (reference) {\n                        if (this.page._pageDictionary.has('Annots')) {\n                            if (annots) {\n                                var index1 = annots.indexOf(reference);\n                                if (index1 !== -1) {\n                                    return index1;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else if (this._dictionary.has('Subtype') && this._dictionary.get('Subtype').name === 'Widget') {\n                if (this._ref) {\n                    if (annots) {\n                        var index1 = annots.indexOf(this._ref);\n                        if (index1 !== -1) {\n                            return index1;\n                        }\n                    }\n                }\n            }\n            return -1;\n        },\n        /**\n         * Sets the tab index of a annotation in the current page.\n         *\n         * @param {number} value index.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Sets the tab index of annotation in current page.\n         * field.tabIndex = 5;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._tabIndex = value;\n            var page = this.page;\n            if (page && (this.form._tabOrder === PdfFormFieldsTabOrder.manual || page.tabOrder === PdfFormFieldsTabOrder.manual)) {\n                if (page._pageDictionary.has('Annots')) {\n                    var annots = page._pageDictionary.get('Annots');\n                    var annotationCollection = new PdfAnnotationCollection(annots, this._crossReference, page);\n                    page._annotations = annotationCollection;\n                    var index = annots.indexOf(this._ref);\n                    if (index < 0) {\n                        index = this._annotationIndex;\n                    }\n                    var annotations = page.annotations._reArrange(this._ref, this._tabIndex, index);\n                    page._pageDictionary.update('Annots', annotations);\n                    page._pageDictionary._updated = true;\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"page\", {\n        /**\n         * Gets the page object of the form field (Read only).\n         *\n         * @returns {PdfPage} Page object.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the page object of the form field.\n         * let page: PdfPage = field.page;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (!this._page) {\n                var widget = this.itemAt(this._defaultIndex);\n                var dictionary = (typeof widget !== 'undefined') ? widget._dictionary : this._dictionary;\n                var document_1;\n                if (this._crossReference) {\n                    document_1 = this._crossReference._document;\n                }\n                var page = void 0;\n                if (dictionary.has('P')) {\n                    var ref = dictionary.getRaw('P');\n                    if (ref && document_1) {\n                        for (var i = 0; i < document_1.pageCount; i++) {\n                            var entry = document_1.getPage(i);\n                            if (entry && entry._ref === ref) {\n                                page = entry;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (!page && document_1) {\n                    var widgetRef = (typeof widget !== 'undefined') ? widget._ref : this._ref;\n                    if (!page && widgetRef) {\n                        page = _findPage(document_1, widgetRef);\n                    }\n                    if (!page && this._kids && this._kids.length > 0) {\n                        for (var i = 0; i < this._kids.length; i++) {\n                            page = _findPage(document_1, this._kids[Number.parseInt(i.toString(), 10)]);\n                            if (page) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                this._page = page;\n            }\n            return this._page;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"flatten\", {\n        /**\n         * Gets the boolean flag indicating whether the form field have been flattened or not.\n         *\n         * @returns {boolean} Flatten.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the first field\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the boolean flag indicating whether the form field have been flattened or not.\n         * let flatten: boolean = field.flatten;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._flatten;\n        },\n        /**\n         * Sets the boolean flag indicating whether the form field have been flattened or not.\n         *\n         * @param {boolean} value Flatten.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the first field\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Sets the boolean flag indicating whether the form field have been flattened or not.\n         * field.flatten = true;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._flatten = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"_grayBrush\", {\n        get: function () {\n            if (!this._gray) {\n                this._gray = new PdfBrush([128, 128, 128]);\n            }\n            return this._gray;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"_silverBrush\", {\n        get: function () {\n            if (!this._silver) {\n                this._silver = new PdfBrush([198, 198, 198]);\n            }\n            return this._silver;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"_whiteBrush\", {\n        get: function () {\n            if (!this._white) {\n                this._white = new PdfBrush([255, 255, 255]);\n            }\n            return this._white;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"_blackBrush\", {\n        get: function () {\n            if (!this._black) {\n                this._black = new PdfBrush([0, 0, 0]);\n            }\n            return this._black;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"_kidsCount\", {\n        get: function () {\n            return this._kids ? this._kids.length : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"_hasBackColor\", {\n        get: function () {\n            if (this._isLoaded) {\n                var mkDictionary = this._mkDictionary;\n                if (!mkDictionary) {\n                    var item = this.itemAt(this._defaultIndex);\n                    if (item && item._dictionary.has('MK')) {\n                        mkDictionary = item._dictionary.get('MK');\n                    }\n                }\n                return (mkDictionary && mkDictionary.has('BG'));\n            }\n            else {\n                return !this._isTransparentBackColor;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfField.prototype._parseBackColor = function (hasTransparency) {\n        var value;\n        if ((!hasTransparency) || ((this._isLoaded && this._hasBackColor) || (!this._isLoaded && !this._isTransparentBackColor))) {\n            var widget = this.itemAt(this._defaultIndex);\n            if (widget && widget.backColor) {\n                value = widget.backColor;\n            }\n            else if (this._mkDictionary) {\n                var mkDict = this._mkDictionary;\n                if (mkDict && mkDict.has('BG')) {\n                    var bgArray = mkDict.getArray('BG');\n                    if (bgArray) {\n                        value = _parseColor(bgArray);\n                    }\n                }\n            }\n            if (typeof value === 'undefined' || value === null) {\n                value = [255, 255, 255];\n            }\n        }\n        return value;\n    };\n    PdfField.prototype._updateBackColor = function (value, hasTransparency) {\n        if (hasTransparency === void 0) { hasTransparency = false; }\n        if (hasTransparency && value.length === 4 && value[3] !== 255) {\n            this._isTransparentBackColor = true;\n            if (this._dictionary.has('BG')) {\n                delete this._dictionary._map.BG;\n            }\n            var mkDictionary = this._mkDictionary;\n            if (mkDictionary && mkDictionary.has('BG')) {\n                delete mkDictionary._map.BG;\n                this._dictionary._updated = true;\n            }\n            var item = this.itemAt(this._defaultIndex);\n            if (item) {\n                item.backColor = value;\n            }\n        }\n        else {\n            this._isTransparentBackColor = false;\n            var widget = this.itemAt(this._defaultIndex);\n            if (widget && widget.backColor !== value) {\n                widget.backColor = value;\n            }\n            else {\n                var mkDictionary = this._mkDictionary;\n                if (typeof mkDictionary === 'undefined') {\n                    var dictionary = new _PdfDictionary(this._crossReference);\n                    dictionary.update('BG', [Number.parseFloat((value[0] / 255).toFixed(3)),\n                        Number.parseFloat((value[1] / 255).toFixed(3)),\n                        Number.parseFloat((value[2] / 255).toFixed(3))]);\n                    this._dictionary.update('MK', dictionary);\n                }\n                else if (!mkDictionary.has('BG') || _parseColor(mkDictionary.getArray('BG')) !== value) {\n                    mkDictionary.update('BG', [Number.parseFloat((value[0] / 255).toFixed(3)),\n                        Number.parseFloat((value[1] / 255).toFixed(3)),\n                        Number.parseFloat((value[2] / 255).toFixed(3))]);\n                    this._dictionary._updated = true;\n                }\n            }\n        }\n    };\n    /**\n     * Gets the field item as `PdfWidgetAnnotation` at the specified index.\n     *\n     * @param {number} index Item index.\n     * @returns {PdfWidgetAnnotation} Loaded PDF form field item at the specified index.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the loaded form field\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Access the count of the field items.\n     * let count: number = field.count;\n     * // Access the first item\n     * let item: PdfWidgetAnnotation = field.itemAt(0);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfField.prototype.itemAt = function (index) {\n        var item;\n        if (index >= 0 && index < this._kidsCount) {\n            if (this._parsedItems.has(index)) {\n                item = this._parsedItems.get(index);\n            }\n            else {\n                var dictionary = void 0;\n                var reference = this._kids[Number.parseInt(index.toString(), 10)];\n                if (reference && reference instanceof _PdfReference) {\n                    dictionary = this._crossReference._fetch(reference);\n                }\n                if (dictionary) {\n                    item = PdfWidgetAnnotation._load(dictionary, this._crossReference);\n                    item._ref = reference;\n                    this._parsedItems.set(index, item);\n                }\n            }\n        }\n        return item;\n    };\n    /**\n     * Sets the flag to indicate the new appearance creation.\n     *\n     * @param {boolean} value Set appearance.\n     * @returns {void} Nothing.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Set boolean flag to create a new appearance stream for form fields.\n     * document.form.fieldAt(0).setAppearance(true);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfField.prototype.setAppearance = function (value) {\n        this._setAppearance = value;\n    };\n    /**\n     * Gets the value associated with the specified key.\n     *\n     * @param {string} name Key.\n     * @returns {string} Value associated with the key.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Gets the value associated with the key 'Author'.\n     * let value: string = document.form.fieldAt(0).getValue('Author');\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfField.prototype.getValue = function (name) {\n        var value;\n        if (this._dictionary.has(name)) {\n            var element = this._dictionary.get(name); // eslint-disable-line\n            if (element instanceof _PdfName) {\n                value = element.name;\n            }\n            else if (typeof element === 'string') {\n                value = element;\n            }\n            else {\n                throw new Error('PdfException: ' + name + ' is not found');\n            }\n        }\n        else {\n            throw new Error('PdfException: ' + name + ' is not found');\n        }\n        return value;\n    };\n    /**\n     * Sets the value associated with the specified key.\n     *\n     * @param {string} name Key.\n     * @param {string} value Value associated with the key..\n     * @returns {void} Nothing.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Set custom value\n     * field.setValue('Author', 'John');\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfField.prototype.setValue = function (name, value) {\n        if (name && name !== '' && value && value !== '') {\n            this._dictionary.update(name, value);\n        }\n    };\n    /**\n     * Remove the form field item from the specified index.\n     *\n     * @param {number} index Item index to remove.\n     * @returns {void} Nothing.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Remove the first item of the form field\n     * field.removeItemAt(0);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfField.prototype.removeItemAt = function (index) {\n        if (this._dictionary.has('Kids') && this.itemsCount > 0) {\n            var item = this.itemAt(index);\n            if (item && item._ref) {\n                var page = item._getPage();\n                if (page) {\n                    page._removeAnnotation(item._ref);\n                }\n                this._kids.splice(index, 1);\n                this._dictionary.set('Kids', this._kids);\n                this._dictionary._updated = true;\n                this._parsedItems.delete(index);\n                if (this._parsedItems.size > 0) {\n                    var parsedItems_1 = new Map();\n                    this._parsedItems.forEach(function (value, key) {\n                        if (key > index) {\n                            parsedItems_1.set(key - 1, value);\n                        }\n                        else {\n                            parsedItems_1.set(key, value);\n                        }\n                    });\n                    this._parsedItems = parsedItems_1;\n                }\n            }\n        }\n    };\n    /**\n     * Remove the specified form field item.\n     *\n     * @param {PdfWidgetAnnotation} item Item to remove.\n     * @returns {void} Nothing.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Remove the first item of the form field\n     * field.removeItem(field.itemAt(0));\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfField.prototype.removeItem = function (item) {\n        if (item && item._ref) {\n            var index = this._kids.indexOf(item._ref);\n            if (index !== -1) {\n                this.removeItemAt(index);\n            }\n        }\n    };\n    Object.defineProperty(PdfField.prototype, \"_fieldFlags\", {\n        get: function () {\n            if (typeof this._flags === 'undefined') {\n                this._flags = _getInheritableProperty(this._dictionary, 'Ff', false, true, 'Parent');\n                if (typeof this._flags === 'undefined') {\n                    this._flags = _FieldFlag.default;\n                }\n            }\n            return this._flags;\n        },\n        set: function (value) {\n            if (this._fieldFlags !== value) {\n                this._flags = value;\n                this._dictionary.update('Ff', value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"_defaultAppearance\", {\n        get: function () {\n            if (typeof this._da === 'undefined') {\n                var da = _getInheritableProperty(this._dictionary, 'DA', false, true, 'Parent');\n                if (da && da !== '') {\n                    this._da = new _PdfDefaultAppearance(da);\n                }\n            }\n            return this._da;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfField.prototype, \"_mkDictionary\", {\n        get: function () {\n            var value;\n            if (this._dictionary.has('MK')) {\n                value = this._dictionary.get('MK');\n            }\n            return value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfField.prototype._updateBorder = function (dictionary, value) {\n        var bs;\n        var isNew = false;\n        if (dictionary.has('BS')) {\n            bs = dictionary.get('BS');\n        }\n        else {\n            bs = new _PdfDictionary(this._crossReference);\n            dictionary.update('BS', bs);\n            isNew = true;\n        }\n        if (typeof value.width !== 'undefined') {\n            bs.update('W', value.width);\n            dictionary._updated = true;\n        }\n        else if (isNew) {\n            bs.update('W', 0);\n        }\n        if (typeof value.style !== 'undefined') {\n            bs.update('S', _mapBorderStyle(value.style));\n            dictionary._updated = true;\n        }\n        else if (isNew) {\n            bs.update('S', _mapBorderStyle(PdfBorderStyle.solid));\n        }\n        if (typeof value.dash !== 'undefined') {\n            bs.update('D', value.dash);\n            dictionary._updated = true;\n        }\n    };\n    PdfField.prototype._checkFieldFlag = function (dictionary) {\n        var flag = dictionary.get('F');\n        return (typeof flag !== 'undefined' && flag === 6);\n    };\n    PdfField.prototype._initializeFont = function (font) {\n        this._font = font;\n        var document = this._crossReference._document;\n        var resource;\n        if (document) {\n            if (document.form._dictionary.has('DR')) {\n                resource = document.form._dictionary.get('DR');\n            }\n            else {\n                resource = new _PdfDictionary(this._crossReference);\n            }\n        }\n        var fontDict;\n        var isReference = false;\n        if (resource.has('Font')) {\n            var obj = resource.getRaw('Font'); // eslint-disable-line\n            if (obj && obj instanceof _PdfReference) {\n                isReference = true;\n                fontDict = this._crossReference._fetch(obj);\n            }\n            else if (obj instanceof _PdfDictionary) {\n                fontDict = obj;\n            }\n        }\n        if (!fontDict) {\n            fontDict = new _PdfDictionary(this._crossReference);\n            resource.update('Font', fontDict);\n        }\n        var keyName = _PdfName.get(_getNewGuidString());\n        var reference = this._crossReference._getNextReference();\n        if (font instanceof PdfTrueTypeFont) {\n            if (this._font._pdfFontInternals) {\n                this._crossReference._cacheMap.set(reference, this._font._pdfFontInternals);\n            }\n        }\n        else if (this._font._dictionary) {\n            this._crossReference._cacheMap.set(reference, this._font._dictionary);\n        }\n        fontDict.update(keyName.name, reference);\n        resource._updated = true;\n        document.form._dictionary.update('DR', resource);\n        document.form._dictionary._updated = true;\n        this._fontName = keyName.name;\n        var defaultAppearance = new _PdfDefaultAppearance();\n        defaultAppearance.fontName = this._fontName;\n        defaultAppearance.fontSize = this._font._size;\n        defaultAppearance.color = this.color ? this.color : [0, 0, 0];\n        if (this._dictionary.has('Kids')) {\n            var widgetDictionary = this._dictionary.getArray('Kids');\n            for (var i = 0; i < widgetDictionary.length; i++) {\n                var dictionary = widgetDictionary[Number.parseInt(i.toString(), 10)];\n                dictionary.update('DA', defaultAppearance.toString());\n            }\n        }\n        else if (this._dictionary.has('Subtype') && this._dictionary.get('Subtype').name === 'Widget') {\n            this._dictionary.update('DA', defaultAppearance.toString());\n        }\n        if (isReference) {\n            resource._updated = true;\n        }\n    };\n    PdfField.prototype._drawRectangularControl = function (g, parameter) {\n        g.drawRectangle(parameter.bounds[0], parameter.bounds[1], parameter.bounds[2], parameter.bounds[3], parameter.backBrush);\n        this._drawBorder(g, parameter.bounds, parameter.borderPen, parameter.borderStyle, parameter.borderWidth);\n        switch (parameter.borderStyle) {\n            case PdfBorderStyle.inset:\n                this._drawLeftTopShadow(g, parameter.bounds, parameter.borderWidth, this._grayBrush);\n                this._drawRightBottomShadow(g, parameter.bounds, parameter.borderWidth, this._silverBrush);\n                break;\n            case PdfBorderStyle.beveled:\n                this._drawLeftTopShadow(g, parameter.bounds, parameter.borderWidth, this._whiteBrush);\n                this._drawRightBottomShadow(g, parameter.bounds, parameter.borderWidth, parameter.shadowBrush);\n                break;\n        }\n    };\n    PdfField.prototype._drawBorder = function (g, bounds, borderPen, style, borderWidth) {\n        if (borderPen && borderWidth > 0) {\n            if (style === PdfBorderStyle.underline) {\n                g.drawLine(borderPen, bounds[0], bounds[0] + bounds[3] - borderWidth / 2, bounds[0] + bounds[2], bounds[1] + bounds[3] - borderWidth / 2);\n            }\n            else {\n                g.drawRectangle(bounds[0] + borderWidth / 2, bounds[1] + borderWidth / 2, bounds[2] - borderWidth, bounds[3] - borderWidth, borderPen);\n            }\n        }\n    };\n    PdfField.prototype._drawLeftTopShadow = function (g, bounds, width, brush) {\n        var path = new _PdfPath();\n        var points = [];\n        points.push([bounds[0] + width, bounds[1] + width]);\n        points.push([bounds[0] + width, (bounds[1] + bounds[3]) - width]);\n        points.push([bounds[0] + 2 * width, (bounds[1] + bounds[3]) - 2 * width]);\n        points.push([bounds[0] + 2 * width, bounds[1] + 2 * width]);\n        points.push([(bounds[0] + bounds[2]) - 2 * width, bounds[1] + 2 * width]);\n        points.push([(bounds[0] + bounds[2]) - width, bounds[1] + width]);\n        path._addPolygon(points);\n        g._drawPath(path, null, brush);\n    };\n    PdfField.prototype._drawRightBottomShadow = function (g, bounds, width, brush) {\n        var path = new _PdfPath();\n        var points = [];\n        points.push([bounds[0] + width, (bounds[1] + bounds[3]) - width]);\n        points.push([bounds[0] + 2 * width, (bounds[1] + bounds[3]) - 2 * width]);\n        points.push([(bounds[0] + bounds[2]) - 2 * width, (bounds[1] + bounds[3]) - 2 * width]);\n        points.push([(bounds[0] + bounds[2]) - 2 * width, bounds[1] + 2 * width]);\n        points.push([bounds[0] + bounds[2] - width, bounds[1] + width]);\n        points.push([(bounds[0] + bounds[2]) - width, (bounds[1] + bounds[3]) - width]);\n        path._addPolygon(points);\n        g._drawPath(path, null, brush);\n    };\n    PdfField.prototype._drawRadioButton = function (graphics, parameter, checkSymbol, state) {\n        if (checkSymbol === 'l') {\n            var bounds = parameter.bounds;\n            switch (state) {\n                case _PdfCheckFieldState.checked:\n                case _PdfCheckFieldState.unchecked:\n                    graphics.drawEllipse(bounds[0], bounds[1], bounds[2], bounds[3], parameter.backBrush);\n                    break;\n                case _PdfCheckFieldState.pressedChecked:\n                case _PdfCheckFieldState.pressedUnchecked:\n                    if ((parameter.borderStyle === PdfBorderStyle.beveled) || (parameter.borderStyle === PdfBorderStyle.underline)) {\n                        graphics.drawEllipse(bounds[0], bounds[1], bounds[2], bounds[3], parameter.backBrush);\n                    }\n                    else {\n                        graphics.drawEllipse(bounds[0], bounds[1], bounds[2], bounds[3], parameter.shadowBrush);\n                    }\n                    break;\n            }\n            this._drawRoundBorder(graphics, bounds, parameter.borderPen, parameter.borderWidth);\n            this._drawRoundShadow(graphics, parameter, state);\n            if (state === _PdfCheckFieldState.checked || state === _PdfCheckFieldState.pressedChecked) {\n                var outward = [bounds[0] + parameter.borderWidth / 2,\n                    bounds[1] + parameter.borderWidth / 2,\n                    bounds[2] - parameter.borderWidth,\n                    bounds[3] - parameter.borderWidth];\n                graphics.drawEllipse(outward[0] + (outward[2] / 4), outward[1] + (outward[2] / 4), outward[2] - (outward[2] / 2), outward[3] - (outward[2] / 2), parameter.foreBrush);\n            }\n        }\n        else {\n            this._drawCheckBox(graphics, parameter, checkSymbol, state);\n        }\n    };\n    PdfField.prototype._drawRoundBorder = function (graphics, bounds, borderPen, borderWidth) {\n        if (bounds[0] !== 0 || bounds[1] !== 0 || bounds[2] !== 0 || bounds[3] !== 0) {\n            graphics.drawEllipse(bounds[0] + borderWidth / 2, bounds[1] + borderWidth / 2, bounds[2] - borderWidth, bounds[3] - borderWidth, borderPen);\n        }\n    };\n    PdfField.prototype._drawRoundShadow = function (graphics, parameter, state) {\n        var borderWidth = parameter.borderWidth;\n        var inflateValue = -1.5 * borderWidth;\n        var x = parameter.bounds[0] + inflateValue;\n        var y = parameter.bounds[1] + inflateValue;\n        var width = parameter.bounds[2] + (2 * inflateValue);\n        var height = parameter.bounds[3] + (2 * inflateValue);\n        var shadowBrush = parameter.shadowBrush;\n        if (shadowBrush) {\n            var shadowColor = shadowBrush._color;\n            var leftTop = void 0;\n            var rightBottom = void 0;\n            switch (parameter.borderStyle) {\n                case PdfBorderStyle.beveled:\n                    switch (state) {\n                        case _PdfCheckFieldState.pressedChecked:\n                        case _PdfCheckFieldState.pressedUnchecked:\n                            leftTop = new PdfPen(shadowColor, borderWidth);\n                            rightBottom = new PdfPen([255, 255, 255], borderWidth);\n                            break;\n                        case _PdfCheckFieldState.checked:\n                        case _PdfCheckFieldState.unchecked:\n                            leftTop = new PdfPen([255, 255, 255], borderWidth);\n                            rightBottom = new PdfPen(shadowColor, borderWidth);\n                            break;\n                    }\n                    break;\n                case PdfBorderStyle.inset:\n                    switch (state) {\n                        case _PdfCheckFieldState.pressedChecked:\n                        case _PdfCheckFieldState.pressedUnchecked:\n                            leftTop = new PdfPen([0, 0, 0], borderWidth);\n                            rightBottom = new PdfPen([0, 0, 0], borderWidth);\n                            break;\n                        case _PdfCheckFieldState.checked:\n                        case _PdfCheckFieldState.unchecked:\n                            leftTop = new PdfPen([128, 128, 128], borderWidth);\n                            rightBottom = new PdfPen([192, 192, 192], borderWidth);\n                            break;\n                    }\n                    break;\n            }\n            if (leftTop && rightBottom) {\n                graphics.drawArc(x, y, width, height, 135, 180, leftTop);\n                graphics.drawArc(x, y, width, height, -45, 180, rightBottom);\n            }\n        }\n    };\n    PdfField.prototype._drawCheckBox = function (graphics, parameter, checkSymbol, state, font) {\n        switch (state) {\n            case _PdfCheckFieldState.unchecked:\n            case _PdfCheckFieldState.checked:\n                if (parameter.borderPen) {\n                    graphics.drawRectangle(parameter.bounds[0], parameter.bounds[1], parameter.bounds[2], parameter.bounds[3], parameter.backBrush);\n                }\n                break;\n            case _PdfCheckFieldState.pressedChecked:\n            case _PdfCheckFieldState.pressedUnchecked:\n                if ((parameter.borderStyle === PdfBorderStyle.beveled) ||\n                    (parameter.borderStyle === PdfBorderStyle.underline)) {\n                    if (parameter.borderPen) {\n                        graphics.drawRectangle(parameter.bounds[0], parameter.bounds[1], parameter.bounds[2], parameter.bounds[3], parameter.backBrush);\n                    }\n                }\n                else if (parameter.borderPen) {\n                    graphics.drawRectangle(parameter.bounds[0], parameter.bounds[1], parameter.bounds[2], parameter.bounds[3], parameter.shadowBrush);\n                }\n                break;\n        }\n        var rectangle = parameter.bounds;\n        this._drawBorder(graphics, parameter.bounds, parameter.borderPen, parameter.borderStyle, parameter.borderWidth);\n        if ((state === _PdfCheckFieldState.pressedChecked) || (state === _PdfCheckFieldState.pressedUnchecked)) {\n            switch (parameter.borderStyle) {\n                case PdfBorderStyle.inset:\n                    this._drawLeftTopShadow(graphics, parameter.bounds, parameter.borderWidth, this._blackBrush);\n                    this._drawRightBottomShadow(graphics, parameter.bounds, parameter.borderWidth, this._whiteBrush);\n                    break;\n                case PdfBorderStyle.beveled:\n                    this._drawLeftTopShadow(graphics, parameter.bounds, parameter.borderWidth, parameter.shadowBrush);\n                    this._drawRightBottomShadow(graphics, parameter.bounds, parameter.borderWidth, this._whiteBrush);\n                    break;\n            }\n        }\n        else {\n            switch (parameter.borderStyle) {\n                case PdfBorderStyle.inset:\n                    this._drawLeftTopShadow(graphics, parameter.bounds, parameter.borderWidth, this._grayBrush);\n                    this._drawRightBottomShadow(graphics, parameter.bounds, parameter.borderWidth, this._silverBrush);\n                    break;\n                case PdfBorderStyle.beveled:\n                    this._drawLeftTopShadow(graphics, parameter.bounds, parameter.borderWidth, this._whiteBrush);\n                    this._drawRightBottomShadow(graphics, parameter.bounds, parameter.borderWidth, parameter.shadowBrush);\n                    break;\n            }\n        }\n        var yOffset = 0;\n        var size = 0;\n        switch (state) {\n            case _PdfCheckFieldState.pressedChecked:\n            case _PdfCheckFieldState.checked:\n                if (!font) {\n                    var extraBorder = parameter.borderStyle === PdfBorderStyle.beveled ||\n                        parameter.borderStyle === PdfBorderStyle.inset;\n                    var borderWidth = parameter.borderWidth;\n                    if (extraBorder) {\n                        borderWidth *= 2;\n                    }\n                    var xPosition = Math.max((extraBorder ? 2 * parameter.borderWidth : parameter.borderWidth), 1);\n                    var xOffset = Math.min(borderWidth, xPosition);\n                    size = (parameter.bounds[2] > parameter.bounds[3]) ? parameter.bounds[3] : parameter.bounds[2];\n                    var fontSize = size - 2 * xOffset;\n                    font = new PdfStandardFont(PdfFontFamily.zapfDingbats, fontSize);\n                    if (parameter.bounds[2] > parameter.bounds[3]) {\n                        yOffset = ((parameter.bounds[3] - font._metrics._getHeight()) / 2);\n                    }\n                }\n                else {\n                    font = new PdfStandardFont(PdfFontFamily.zapfDingbats, font._size);\n                }\n                if (size === 0) {\n                    size = parameter.bounds[3];\n                }\n                if (parameter.pageRotationAngle !== PdfRotationAngle.angle0 || parameter.rotationAngle > 0) {\n                    var state_1 = graphics.save();\n                    var size_1 = graphics._size;\n                    if (parameter.pageRotationAngle !== PdfRotationAngle.angle0) {\n                        if (parameter.pageRotationAngle === PdfRotationAngle.angle90) {\n                            graphics.translateTransform(size_1[1], 0);\n                            graphics.rotateTransform(90);\n                            var y = size_1[1] - (rectangle[0] + rectangle[2]);\n                            var x = rectangle[1];\n                            rectangle = [x, y, rectangle[3], rectangle[2]];\n                        }\n                        else if (parameter.pageRotationAngle === PdfRotationAngle.angle180) {\n                            graphics.translateTransform(size_1[0], size_1[1]);\n                            graphics.rotateTransform(-180);\n                            var x = size_1[0] - (rectangle[0] + rectangle[2]);\n                            var y = size_1[1] - (rectangle[1] + rectangle[3]);\n                            rectangle = [x, y, rectangle[2], rectangle[3]];\n                        }\n                        else if (parameter.pageRotationAngle === PdfRotationAngle.angle270) {\n                            graphics.translateTransform(0, size_1[0]);\n                            graphics.rotateTransform(270);\n                            var x = size_1[0] - (rectangle[1] + rectangle[3]);\n                            var y = rectangle[0];\n                            rectangle = [x, y, rectangle[3], rectangle[2]];\n                        }\n                    }\n                    if (parameter.rotationAngle > 0) {\n                        if (parameter.rotationAngle === 90) {\n                            if (parameter.pageRotationAngle === PdfRotationAngle.angle90) {\n                                graphics.translateTransform(0, size_1[1]);\n                                graphics.rotateTransform(-90);\n                                var x = size_1[1] - (rectangle[1] + rectangle[3]);\n                                var y = rectangle[0];\n                                rectangle = [x, y, rectangle[3], rectangle[2]];\n                            }\n                            else {\n                                if (rectangle[2] > rectangle[3]) {\n                                    graphics.translateTransform(0, size_1[1]);\n                                    graphics.rotateTransform(-90);\n                                    rectangle = [parameter.bounds[0], parameter.bounds[1], parameter.bounds[2], parameter.bounds[3]];\n                                }\n                                else {\n                                    var z = rectangle[0];\n                                    rectangle[0] = -(rectangle[1] + rectangle[3]);\n                                    rectangle[1] = z;\n                                    var height = rectangle[3];\n                                    rectangle[3] = rectangle[2] > font._metrics._getHeight() ? rectangle[2] : font._metrics._getHeight();\n                                    rectangle[2] = height;\n                                    graphics.rotateTransform(-90);\n                                    rectangle = [rectangle[0], rectangle[1], rectangle[2], rectangle[3]];\n                                }\n                            }\n                        }\n                        else if (parameter.rotationAngle === 270) {\n                            graphics.translateTransform(size_1[0], 0);\n                            graphics.rotateTransform(-270);\n                            var x = rectangle[1];\n                            var y = size_1[0] - (rectangle[0] + rectangle[2]);\n                            rectangle = [x, y, rectangle[3], rectangle[2]];\n                        }\n                        else if (parameter.rotationAngle === 180) {\n                            graphics.translateTransform(size_1[0], size_1[1]);\n                            graphics.rotateTransform(-180);\n                            var x = size_1[0] - (rectangle[0] + rectangle[2]);\n                            var y = size_1[1] - (rectangle[1] + rectangle[3]);\n                            rectangle = [x, y, rectangle[2], rectangle[3]];\n                        }\n                        graphics.drawString(checkSymbol, font, [rectangle[0], rectangle[1] - yOffset, rectangle[2], rectangle[3]], null, parameter.foreBrush, new PdfStringFormat(PdfTextAlignment.center, PdfVerticalAlignment.middle));\n                        graphics.restore(state_1);\n                    }\n                    else {\n                        graphics.drawString(checkSymbol, font, [rectangle[0], rectangle[1] - yOffset, rectangle[2], rectangle[3]], null, parameter.foreBrush, new PdfStringFormat(PdfTextAlignment.center, PdfVerticalAlignment.middle));\n                    }\n                    break;\n                }\n        }\n    };\n    PdfField.prototype._addToKid = function (item) {\n        if (this._dictionary.has('Kids')) {\n            this._kids = this._dictionary.get('Kids');\n        }\n        else {\n            this._kids = [];\n            this._dictionary.update('Kids', this._kids);\n            this._parsedItems = new Map();\n        }\n        var currentIndex = this._kidsCount;\n        item._index = currentIndex;\n        this._kids.push(item._ref);\n        this._parsedItems.set(currentIndex, item);\n    };\n    PdfField.prototype._drawTemplate = function (template, page, bounds) {\n        if (template && page) {\n            var graphics = page.graphics;\n            graphics.save();\n            if (page.rotation === PdfRotationAngle.angle90) {\n                graphics.translateTransform(graphics._size[0], graphics._size[1]);\n                graphics.rotateTransform(90);\n            }\n            else if (page.rotation === PdfRotationAngle.angle180) {\n                graphics.translateTransform(graphics._size[0], graphics._size[1]);\n                graphics.rotateTransform(-180);\n            }\n            else if (page.rotation === PdfRotationAngle.angle270) {\n                graphics.translateTransform(graphics._size[0], graphics._size[1]);\n                graphics.rotateTransform(270);\n            }\n            graphics._sw._setTextRenderingMode(_TextRenderingMode.fill);\n            graphics._drawTemplate(template, bounds);\n            graphics.restore();\n        }\n    };\n    PdfField.prototype._addToOptions = function (item, field) {\n        if (field instanceof PdfListBoxField) {\n            field._listValues.push(item._text);\n        }\n        field._options.push([item._value, item._text]);\n        field._dictionary.set('Opt', field._options);\n        field._dictionary._updated = true;\n        if (!item._isFont && item._pdfFont) {\n            this._initializeFont(item._pdfFont);\n        }\n    };\n    PdfField.prototype._addAppearance = function (dictionary, template, key) {\n        var appearance = new _PdfDictionary();\n        if (dictionary.has('AP')) {\n            appearance = dictionary.get('AP');\n            _removeDuplicateReference(dictionary.get('AP'), this._crossReference, key);\n        }\n        else {\n            appearance = new _PdfDictionary(this._crossReference);\n            dictionary.update('AP', appearance);\n        }\n        var reference = this._crossReference._getNextReference();\n        this._crossReference._cacheMap.set(reference, template._content);\n        appearance.update(key, reference);\n    };\n    PdfField.prototype._rotateTextBox = function (rect, size, angle) {\n        var rectangle = [0, 0, 0, 0];\n        if (angle === PdfRotationAngle.angle180) {\n            rectangle = [size[0] - (rect[0] + rect[2]), size[1] - (rect[1] + rect[3]), rect[2], rect[3]];\n        }\n        else if (angle === PdfRotationAngle.angle270) {\n            rectangle = [rect[1], size[0] - (rect[0] + rect[2]), rect[3], rect[2]];\n        }\n        else if (angle === PdfRotationAngle.angle90) {\n            rectangle = [size[1] - (rect[1] + rect[3]), rect[0], rect[3], rect[2]];\n        }\n        return rectangle;\n    };\n    PdfField.prototype._checkIndex = function (value, length) {\n        if (value < 0 || (value !== 0 && value >= length)) {\n            throw Error('Index out of range.');\n        }\n    };\n    PdfField.prototype._getAppearanceStateValue = function () {\n        var value;\n        if (this._dictionary.has('Kids')) {\n            for (var i = 0; i < this._kidsCount; i++) {\n                var item = this.itemAt(i);\n                if (item && item._dictionary && item._dictionary.has('AS')) {\n                    var state = item._dictionary.get('AS');\n                    if (state && state.name !== 'Off') {\n                        value = state.name;\n                        break;\n                    }\n                }\n            }\n        }\n        else if (this._dictionary.has('AS')) {\n            var state = this._dictionary.get('AS');\n            if (state && state.name !== 'Off') {\n                value = state.name;\n            }\n        }\n        return value;\n    };\n    PdfField.prototype._getTextAlignment = function () {\n        if (this._textAlignment === null || typeof this._textAlignment === 'undefined') {\n            if (this._isLoaded) {\n                var widget = this.itemAt(this._defaultIndex);\n                if (widget && widget._dictionary && widget._dictionary.has('Q')) {\n                    this._textAlignment = widget._dictionary.get('Q');\n                }\n                else if (this._dictionary.has('Q')) {\n                    this._textAlignment = this._dictionary.get('Q');\n                }\n                else {\n                    this._textAlignment = PdfTextAlignment.left;\n                }\n            }\n            else {\n                this._textAlignment = PdfTextAlignment.left;\n            }\n        }\n        return this._textAlignment;\n    };\n    PdfField.prototype._setTextAlignment = function (value) {\n        var widget = this.itemAt(this._defaultIndex);\n        if (this._isLoaded && !this.readOnly) {\n            if (widget && widget._dictionary) {\n                widget._dictionary.update('Q', value);\n            }\n            else {\n                this._dictionary.update('Q', value);\n            }\n        }\n        if (!this._isLoaded && this._textAlignment !== value) {\n            if (widget && widget._dictionary) {\n                widget._dictionary.update('Q', value);\n            }\n            else if (this._dictionary) {\n                this._dictionary.update('Q', value);\n            }\n        }\n        this._textAlignment = value;\n        this._stringFormat = new PdfStringFormat(value, PdfVerticalAlignment.middle);\n    };\n    return PdfField;\n}());\nexport { PdfField };\n/**\n * `PdfTextBoxField` class represents the text box field objects.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Access text box field\n * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfTextBoxField = /** @class */ (function (_super) {\n    __extends(PdfTextBoxField, _super);\n    function PdfTextBoxField(page, name, bounds) {\n        var _this = _super.call(this) || this;\n        _this._autoResizeText = false;\n        if (page && name && bounds) {\n            _this._initialize(page, name, bounds);\n        }\n        return _this;\n    }\n    /**\n     * Parse an existing text box field.\n     *\n     * @private\n     * @param {PdfForm} form Form object.\n     * @param {_PdfDictionary} dictionary Field dictionary.\n     * @param {_PdfCrossReference} crossReference Cross reference object.\n     * @param {_PdfReference} reference Field reference.\n     * @returns {PdfTextBoxField} Text box field.\n     */\n    PdfTextBoxField._load = function (form, dictionary, crossReference, reference) {\n        var field = new PdfTextBoxField();\n        field._isLoaded = true;\n        field._form = form;\n        field._dictionary = dictionary;\n        field._crossReference = crossReference;\n        field._ref = reference;\n        if (field._dictionary.has('Kids')) {\n            field._kids = field._dictionary.get('Kids');\n        }\n        field._defaultIndex = 0;\n        field._parsedItems = new Map();\n        return field;\n    };\n    Object.defineProperty(PdfTextBoxField.prototype, \"text\", {\n        /**\n         * Gets the value of the text box field.\n         *\n         * @returns {string} Text.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Gets the text value from text box field\n         * let text: string = field.text;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this._text === 'undefined') {\n                if (this._isLoaded) {\n                    var text = _getInheritableProperty(this._dictionary, 'V', false, true, 'Parent');\n                    if (text) {\n                        this._text = text;\n                    }\n                    else {\n                        var widget = this.itemAt(this._defaultIndex);\n                        if (widget) {\n                            text = widget._dictionary.get('V');\n                            if (text) {\n                                this._text = text;\n                            }\n                        }\n                    }\n                }\n                else {\n                    this._text = '';\n                }\n            }\n            return this._text;\n        },\n        /**\n         * Sets the value of the text box field.\n         *\n         * @param {string} value Text.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Sets the text value to text box field\n         * field.text = ‘Syncfusion’;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (this._isLoaded) {\n                if (!this.readOnly) {\n                    if (!(this._dictionary.has('V') && this._dictionary.get('V') === value)) {\n                        this._dictionary.update('V', value);\n                    }\n                    var widget = this.itemAt(this._defaultIndex);\n                    if (widget && !(widget._dictionary.has('V') && widget._dictionary.get('V') === value)) {\n                        widget._dictionary.update('V', value);\n                    }\n                }\n            }\n            else if (this._text !== value) {\n                this._dictionary.update('V', value);\n                this._text = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTextBoxField.prototype, \"textAlignment\", {\n        /**\n         * Gets the text alignment in a text box.\n         *\n         * @returns {PdfTextAlignment} Text alignment.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Gets the text alignment from text box field\n         * let alignment: PdfTextAlignment = field.textAlignment;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._getTextAlignment();\n        },\n        /**\n         * Sets the text alignment in a text box.\n         *\n         * @param {PdfTextAlignment} value Text alignment.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Sets the text alignment of form field as center\n         * field.textAlignment = PdfTextAlignment.center;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (this._textAlignment !== value) {\n                this._setTextAlignment(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTextBoxField.prototype, \"defaultValue\", {\n        /**\n         * Gets the default value of the field.\n         *\n         * @returns {string} Default value.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Gets the default value from the text box field\n         * let value: string = field.defaultValue;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this._defaultValue === 'undefined') {\n                var text = _getInheritableProperty(this._dictionary, 'DV', false, true, 'Parent');\n                if (text) {\n                    this._defaultValue = text;\n                }\n            }\n            return this._defaultValue;\n        },\n        /**\n         * Sets the default value of the field.\n         *\n         * @param {string} value Default value.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Sets the default value of the text box field\n         * field.defaultValue = 'Syncfusion';\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (value !== this.defaultValue) {\n                this._dictionary.update('DV', value);\n                this._defaultValue = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTextBoxField.prototype, \"multiLine\", {\n        /**\n         * Gets a value indicating whether this `PdfTextBoxField` is multiline.\n         *\n         * @returns {boolean} multiline.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Gets a value indicating whether this `PdfTextBoxField` is multiline.\n         * let multiLine: boolean = field.multiLine;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return (this._fieldFlags & _FieldFlag.multiLine) !== 0;\n        },\n        /**\n         * Sets a value indicating whether this `PdfTextBoxField` is multiline.\n         *\n         * @param {boolean} value multiLine or not.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Sets a value indicating whether this `PdfTextBoxField` is multiline.\n         * field.multiLine = false;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (value) {\n                this._fieldFlags |= _FieldFlag.multiLine;\n            }\n            else {\n                this._fieldFlags &= ~_FieldFlag.multiLine;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTextBoxField.prototype, \"password\", {\n        /**\n         * Gets a value indicating whether this `PdfTextBoxField` is password.\n         *\n         * @returns {boolean} password.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Gets a value indicating whether this `PdfTextBoxField` is password.\n         * let password: boolean = field.password;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return (this._fieldFlags & _FieldFlag.password) !== 0;\n        },\n        /**\n         * Sets a value indicating whether this `PdfTextBoxField` is password.\n         *\n         * @param {boolean} value password or not.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Sets a value indicating whether this `PdfTextBoxField` is password.\n         * field.password = false;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (value) {\n                this._fieldFlags |= _FieldFlag.password;\n            }\n            else {\n                this._fieldFlags &= ~_FieldFlag.password;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTextBoxField.prototype, \"scrollable\", {\n        /**\n         * Gets a value indicating whether this `PdfTextBoxField` is scrollable.\n         *\n         * @returns {boolean} scrollable.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Gets a value indicating whether this `PdfTextBoxField` is scrollable.\n         * let scrollable: boolean = field.scrollable;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return !((this._fieldFlags & _FieldFlag.doNotScroll) !== 0);\n        },\n        /**\n         * Sets a value indicating whether this `PdfTextBoxField` is scrollable.\n         *\n         * @param {boolean} value scrollable or not.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Sets a value indicating whether this `PdfTextBoxField` is scrollable.\n         * field.scrollable = false;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (value) {\n                this._fieldFlags &= ~_FieldFlag.doNotScroll;\n            }\n            else {\n                this._fieldFlags |= _FieldFlag.doNotScroll;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTextBoxField.prototype, \"spellCheck\", {\n        /**\n         * Gets a value indicating whether to check spelling.\n         *\n         * @returns {boolean} spellCheck.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Gets a value indicating whether to check spelling\n         * let spellCheck: boolean = field.spellCheck;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return !((this._fieldFlags & _FieldFlag.doNotSpellCheck) !== 0);\n        },\n        /**\n         * Sets a value indicating whether to check spelling.\n         *\n         * @param {boolean} value spellCheck or not.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Sets a value indicating whether to check spelling\n         * field.spellCheck = false;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (value) {\n                this._fieldFlags &= ~_FieldFlag.doNotSpellCheck;\n            }\n            else {\n                this._fieldFlags |= _FieldFlag.doNotSpellCheck;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTextBoxField.prototype, \"insertSpaces\", {\n        /**\n         * Meaningful only if the MaxLength property is set and the Multiline, Password properties are false.\n         * If set, the field is automatically divided into as many equally spaced positions, or combs,\n         * as the value of MaxLength, and the text is laid out into those combs.\n         *\n         * @returns {boolean} insertSpaces.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Gets a value indicating whether this `PdfTextBoxField` is insertSpaces.\n         * let insertSpaces: boolean = field.insertSpaces;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            var flags = this._fieldFlags;\n            return ((_FieldFlag.comb & flags) !== 0) &&\n                ((flags & _FieldFlag.multiLine) === 0) &&\n                ((flags & _FieldFlag.password) === 0) &&\n                ((flags & _FieldFlag.fileSelect) === 0);\n        },\n        /**\n         * Meaningful only if the MaxLength property is set and the Multiline, Password properties are false.\n         * If set, the field is automatically divided into as many equally spaced positions, or combs,\n         * as the value of MaxLength, and the text is laid out into those combs.\n         *\n         * @param {boolean} value insertSpaces.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Sets a value indicating whether this `PdfTextBoxField` is insertSpaces.\n         * field.insertSpaces = false;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (value) {\n                this._fieldFlags |= _FieldFlag.comb;\n            }\n            else {\n                this._fieldFlags &= ~_FieldFlag.comb;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTextBoxField.prototype, \"highlightMode\", {\n        /**\n         * Gets the highlight mode of the field.\n         *\n         * @returns {PdfHighlightMode} highlight mode.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Gets the highlight mode of text box field\n         * let mode: PdfHighlightMode = field.highlightMode;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            var widget = this.itemAt(this._defaultIndex);\n            var mode;\n            if (widget && typeof widget.highlightMode !== 'undefined') {\n                mode = widget.highlightMode;\n            }\n            else if (this._dictionary.has('H')) {\n                var name_4 = this._dictionary.get('H');\n                mode = _mapHighlightMode(name_4.name);\n            }\n            return (typeof mode !== 'undefined') ? mode : PdfHighlightMode.noHighlighting;\n        },\n        /**\n         * Sets the highlight mode of the field.\n         *\n         * @param {PdfHighlightMode} value highlight mode.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Sets the highlight mode of text box field as outline\n         * field.highlightMode = PdfHighlightMode.outline;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            var widget = this.itemAt(this._defaultIndex);\n            if (widget && (typeof widget.highlightMode === 'undefined' || widget.highlightMode !== value)) {\n                widget.highlightMode = value;\n            }\n            else if (!this._dictionary.has('H') || _mapHighlightMode(this._dictionary.get('H')) !== value) {\n                this._dictionary.update('H', _reverseMapHighlightMode(value));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTextBoxField.prototype, \"maxLength\", {\n        /**\n         * Gets the maximum length of the field, in characters.\n         *\n         * @returns {number} maximum length.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Gets the maximum length of the field, in characters.\n         * let maxLength: number = field.maxLength;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this._maxLength === 'undefined') {\n                var length_1 = _getInheritableProperty(this._dictionary, 'MaxLen', false, true, 'Parent');\n                this._maxLength = (typeof length_1 !== 'undefined' && Number.isInteger(length_1)) ? length_1 : 0;\n            }\n            return this._maxLength;\n        },\n        /**\n         * Sets the maximum length of the field, in characters.\n         *\n         * @param {number} value maximum length.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Sets the maximum length of the field, in characters.\n         * field.maxLength = 20;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (this.maxLength !== value) {\n                this._dictionary.update('MaxLen', value);\n                this._maxLength = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTextBoxField.prototype, \"isAutoResizeText\", {\n        /**\n         * Gets the flag indicating whether the auto resize text enabled or not.\n         * Note: Applicable only for newly created PDF fields.\n         *\n         * @returns {boolean} Enable or disable auto resize text.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Gets the flag indicating whether the auto resize text enabled or not.\n         * let isAutoResize: boolean = field.isAutoResizeText;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._autoResizeText;\n        },\n        /**\n         * Sets the flag indicating whether the auto resize text enabled or not.\n         * Note: Applicable only for newly created PDF fields.\n         *\n         * @param {boolean} value Enable or disable auto resize text.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Sets the flag indicating whether the auto resize text enabled or not.\n         * field.isAutoResizeText = false;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._autoResizeText = value;\n            var widget = this.itemAt(this._defaultIndex);\n            if (widget) {\n                widget._isAutoResize = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTextBoxField.prototype, \"font\", {\n        /**\n         * Gets the font of the field.\n         *\n         * @returns {PdfFont} font.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Gets the font of the field.\n         * let font: PdfFont = field.font;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (this._font) {\n                return this._font;\n            }\n            else {\n                var widget = this.itemAt(this._defaultIndex);\n                this._font = _obtainFontDetails(this._form, widget, this);\n            }\n            return this._font;\n        },\n        /**\n         * Sets the font of the field.\n         *\n         * @param {PdfFont} value font.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfTextBoxField = document.form.fieldAt(0) as PdfTextBoxField;\n         * // Sets the font of the field\n         * field.font = new PdfStandardFont(PdfFontFamily.helvetica, 12, PdfFontStyle.bold);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (value && value instanceof PdfFont) {\n                this._font = value;\n                this._initializeFont(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTextBoxField.prototype, \"backColor\", {\n        /**\n         * Gets the background color of the field.\n         *\n         * @returns {number[]} R, G, B color values in between 0 to 255.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the background color of the field.\n         * let backColor: number[] = field.backColor;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._parseBackColor(true);\n        },\n        /**\n         * Sets the background color of the field.\n         *\n         * @param {number[]} value Array with R, G, B, A color values in between 0 to 255. For optional A (0-254), it signifies transparency.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the text box field at index 0\n         * let firstName: PdfField = document.form.fieldAt(0);\n         * // Sets the background color of the field.\n         * firstName.backColor = [255, 0, 0];\n         * // Access the text box field at index 1\n         * let secondName: PdfField = document.form.fieldAt(1);\n         * // Sets the background color of the field to transparent.\n         * secondName.backColor = [0, 0, 0, 0];\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._updateBackColor(value, true);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfTextBoxField.prototype._initialize = function (page, name, bounds) {\n        this._crossReference = page._crossReference;\n        this._page = page;\n        this._name = name;\n        this._text = '';\n        this._defaultValue = '';\n        this._defaultIndex = 0;\n        this._spellCheck = false;\n        this._insertSpaces = false;\n        this._multiline = false;\n        this._password = false;\n        this._scrollable = false;\n        this._dictionary = new _PdfDictionary(this._crossReference);\n        this._ref = this._crossReference._getNextReference();\n        this._crossReference._cacheMap.set(this._ref, this._dictionary);\n        this._dictionary.objId = this._ref.toString();\n        this._dictionary.update('FT', _PdfName.get('Tx'));\n        this._dictionary.update('T', name);\n        this._fieldFlags |= _FieldFlag.doNotSpellCheck;\n        this._initializeFont(this._defaultFont);\n        this._createItem(bounds);\n    };\n    PdfTextBoxField.prototype._createItem = function (bounds) {\n        var widget = new PdfWidgetAnnotation();\n        widget._create(this._page, bounds, this);\n        widget.textAlignment = PdfTextAlignment.left;\n        this._stringFormat = new PdfStringFormat(widget.textAlignment, PdfVerticalAlignment.middle);\n        widget._dictionary.update('MK', new _PdfDictionary(this._crossReference));\n        widget._mkDictionary.update('BC', [0, 0, 0]);\n        widget._mkDictionary.update('BG', [1, 1, 1]);\n        widget._mkDictionary.update('CA', this.actualName);\n        this._addToKid(widget);\n    };\n    PdfTextBoxField.prototype._doPostProcess = function (isFlatten) {\n        if (isFlatten === void 0) { isFlatten = false; }\n        if (isFlatten || this._setAppearance || this._form._setAppearance) {\n            var count = this._kidsCount;\n            if (this._isLoaded) {\n                if (count > 0) {\n                    for (var i = 0; i < count; i++) {\n                        var item = this.itemAt(i);\n                        if (item) {\n                            this._postProcess(isFlatten, item);\n                        }\n                    }\n                }\n                else if ((isFlatten || this._form._setAppearance || this._setAppearance) && !this._checkFieldFlag(this._dictionary)) {\n                    this._postProcess(isFlatten);\n                }\n            }\n            else if (isFlatten || this._form._setAppearance || this._setAppearance) {\n                for (var i = 0; i < count; i++) {\n                    var item = this.itemAt(i);\n                    if (item && !this._checkFieldFlag(item._dictionary)) {\n                        var template = this._createAppearance(isFlatten, item);\n                        if (isFlatten) {\n                            this._drawTemplate(template, item._page, { x: item.bounds.x, y: item.bounds.y, width: template._size[0], height: template._size[1] });\n                        }\n                        else {\n                            this._addAppearance(item._dictionary, template, 'N');\n                        }\n                        item._dictionary._updated = !isFlatten;\n                    }\n                }\n            }\n            if (isFlatten) {\n                this._dictionary._updated = false;\n            }\n        }\n    };\n    PdfTextBoxField.prototype._postProcess = function (isFlatten, widget) {\n        var template;\n        var bounds;\n        var source = widget ? widget : this;\n        if (this._form._setAppearance || this._setAppearance || (isFlatten && !source._dictionary.has('AP'))) {\n            template = this._createAppearance(isFlatten, source);\n        }\n        else if (source._dictionary.has('AP')) {\n            var appearanceStream = void 0;\n            var dictionary = source._dictionary.get('AP');\n            if (dictionary && dictionary.has('N')) {\n                appearanceStream = dictionary.get('N');\n                var reference = dictionary.getRaw('N');\n                if (reference) {\n                    appearanceStream.reference = reference;\n                }\n                if (appearanceStream) {\n                    template = new PdfTemplate(appearanceStream, this._crossReference);\n                }\n            }\n        }\n        if (template) {\n            if (isFlatten) {\n                var page = source instanceof PdfWidgetAnnotation ? source._getPage() : source.page;\n                if (page) {\n                    var graphics = page.graphics;\n                    graphics.save();\n                    if (page.rotation === PdfRotationAngle.angle90) {\n                        graphics.translateTransform(graphics._size[0], graphics._size[1]);\n                        graphics.rotateTransform(90);\n                    }\n                    else if (page.rotation === PdfRotationAngle.angle180) {\n                        graphics.translateTransform(graphics._size[0], graphics._size[1]);\n                        graphics.rotateTransform(-180);\n                    }\n                    else if (page.rotation === PdfRotationAngle.angle270) {\n                        graphics.translateTransform(graphics._size[0], graphics._size[1]);\n                        graphics.rotateTransform(270);\n                    }\n                    bounds = { x: source.bounds.x, y: source.bounds.y, width: template._size[0], height: template._size[1] };\n                    graphics._drawTemplate(template, bounds);\n                    graphics.restore();\n                }\n                source._dictionary._updated = false;\n            }\n            else {\n                this._addAppearance(source._dictionary, template, 'N');\n            }\n        }\n    };\n    PdfTextBoxField.prototype._createAppearance = function (isFlatten, widget) {\n        var bounds = widget.bounds;\n        var template = new PdfTemplate([0, 0, bounds.width, bounds.height], this._crossReference);\n        _setMatrix(template, null);\n        template._writeTransformation = false;\n        var graphics = template.graphics;\n        var parameter = new _PaintParameter();\n        parameter.bounds = [0, 0, bounds.width, bounds.height];\n        var backcolor = widget.backColor;\n        if (isFlatten && backcolor) {\n            parameter.backBrush = new PdfBrush(backcolor);\n        }\n        parameter.foreBrush = new PdfBrush(widget.color);\n        var border = widget.border;\n        parameter.borderPen = new PdfPen(widget.borderColor, border.width);\n        parameter.borderStyle = border.style;\n        parameter.borderWidth = border.width;\n        if (backcolor) {\n            var shadowColor = [backcolor[0] - 64, backcolor[1] - 64, backcolor[2] - 64];\n            var color = [shadowColor[0] >= 0 ? shadowColor[0] : 0,\n                shadowColor[1] >= 0 ? shadowColor[1] : 0,\n                shadowColor[2] >= 0 ? shadowColor[2] : 0];\n            parameter.shadowBrush = new PdfBrush(color);\n        }\n        parameter.rotationAngle = widget.rotate;\n        parameter.insertSpaces = this.insertSpaces;\n        var text = this.text;\n        if (text === null || typeof text === 'undefined') {\n            text = '';\n        }\n        if (this.password) {\n            var password = '';\n            for (var i = 0; i < text.length; i++) {\n                password += '*';\n            }\n            text = password;\n        }\n        parameter.required = this.required;\n        if (!this.required) {\n            graphics._sw._beginMarkupSequence('Tx');\n            graphics._initializeCoordinates();\n        }\n        if (typeof this._font === 'undefined' || this._font === null) {\n            this._font = this._defaultFont;\n        }\n        if (typeof this._stringFormat === 'undefined' || this._stringFormat === null) {\n            if (typeof this.textAlignment === 'undefined' || this.textAlignment === null) {\n                this._stringFormat = new PdfStringFormat(this.textAlignment, PdfVerticalAlignment.middle);\n            }\n            else {\n                this._stringFormat = new PdfStringFormat(PdfTextAlignment.left, PdfVerticalAlignment.middle);\n            }\n        }\n        this._drawTextBox(graphics, parameter, text, this._font, this._stringFormat, this.multiLine, this.scrollable, this.maxLength);\n        if (!this.required) {\n            graphics._sw._endMarkupSequence();\n        }\n        return template;\n    };\n    PdfTextBoxField.prototype._drawTextBox = function (g, parameter, text, font, format, multiline, scroll, maxLength) {\n        if (typeof maxLength !== 'undefined') {\n            if (parameter.insertSpaces) {\n                var width = 0;\n                if (typeof maxLength !== 'undefined' && maxLength > 0) {\n                    width = parameter.bounds[2] / maxLength;\n                    g.drawRectangle(parameter.bounds[0], parameter.bounds[1], parameter.bounds[2], parameter.bounds[3], parameter.borderPen, parameter.backBrush);\n                    var current = text;\n                    for (var i = 0; i < maxLength; i++) {\n                        if (format.alignment === PdfTextAlignment.right) {\n                            if (maxLength - current.length <= i) {\n                                text = current[i - (maxLength - current.length)];\n                            }\n                            else {\n                                text = '';\n                            }\n                        }\n                        else {\n                            if (format.alignment === PdfTextAlignment.center && current.length < maxLength) {\n                                var startlocation = maxLength / 2 - (Math.ceil(current.length / 2));\n                                if (i >= startlocation && i < startlocation + current.length) {\n                                    text = current[i - startlocation];\n                                }\n                                else {\n                                    text = '';\n                                }\n                            }\n                            else {\n                                if (current.length > i) {\n                                    text = current[Number.parseInt(i.toString(), 10)];\n                                }\n                                else {\n                                    text = '';\n                                }\n                            }\n                        }\n                        parameter.bounds[2] = width;\n                        format.alignment = PdfTextAlignment.center;\n                        this._drawTextBox(g, parameter, text, font, format, multiline, scroll);\n                        parameter.bounds[0] = parameter.bounds[0] + width;\n                        if (parameter.borderWidth) {\n                            g.drawLine(parameter.borderPen, parameter.bounds[0], parameter.bounds[1], parameter.bounds[0], parameter.bounds[1] + parameter.bounds[3]);\n                        }\n                    }\n                }\n                else {\n                    this._drawTextBox(g, parameter, text, font, format, multiline, scroll);\n                }\n            }\n            else {\n                this._drawTextBox(g, parameter, text, font, format, multiline, scroll);\n            }\n        }\n        else {\n            if (g._isTemplateGraphics && parameter.required) {\n                g.save();\n                g._initializeCoordinates();\n            }\n            if (!parameter.insertSpaces) {\n                this._drawRectangularControl(g, parameter);\n            }\n            if (g._isTemplateGraphics && parameter.required) {\n                g.restore();\n                g.save();\n                g._sw._beginMarkupSequence('Tx');\n                g._initializeCoordinates();\n            }\n            var rectangle = parameter.bounds;\n            if (parameter.borderStyle === PdfBorderStyle.beveled || parameter.borderStyle === PdfBorderStyle.inset) {\n                rectangle[0] = rectangle[0] + 4 * parameter.borderWidth;\n                rectangle[2] = rectangle[2] - 8 * parameter.borderWidth;\n            }\n            else {\n                rectangle[0] = rectangle[0] + 2 * parameter.borderWidth;\n                rectangle[2] = rectangle[2] - 4 * parameter.borderWidth;\n            }\n            if (multiline) {\n                var tempheight = (typeof format === 'undefined' || format === null || format.lineSpacing === 0) ?\n                    font._metrics._getHeight() :\n                    format.lineSpacing;\n                var ascent = font._metrics._getAscent(format);\n                var shift = tempheight - ascent;\n                if (text.indexOf('\\n') !== -1) {\n                    if (rectangle[0] === 0 && rectangle[1] === 1) {\n                        rectangle[1] = -(rectangle[1] - shift);\n                    }\n                }\n                else if (rectangle[0] === 0 && rectangle[1] === 1) {\n                    rectangle[1] = -(rectangle[1] - shift);\n                }\n                if (parameter.isAutoFontSize) {\n                    if (parameter.borderWidth !== 0) {\n                        rectangle[1] = rectangle[1] + 2.5 * parameter.borderWidth;\n                    }\n                }\n            }\n            if ((g._page &&\n                typeof g._page.rotation !== 'undefined' &&\n                g._page.rotation !== PdfRotationAngle.angle0) ||\n                parameter.rotationAngle > 0) {\n                var state = g.save();\n                if (typeof parameter.pageRotationAngle !== 'undefined' && parameter.pageRotationAngle !== PdfRotationAngle.angle0) {\n                    if (parameter.pageRotationAngle === PdfRotationAngle.angle90) {\n                        g.translateTransform(g._size[1], 0);\n                        g.rotateTransform(90);\n                        var y = g._size[1] - (rectangle[0] + rectangle[2]);\n                        var x = rectangle[1];\n                        rectangle = [x, y, rectangle[3], rectangle[2]];\n                    }\n                    else if (parameter.pageRotationAngle === PdfRotationAngle.angle180) {\n                        g.translateTransform(g._size[0], g._size[1]);\n                        g.rotateTransform(-180);\n                        var x = g._size[0] - (rectangle[0] + rectangle[2]);\n                        var y = g._size[1] - (rectangle[1] + rectangle[3]);\n                        rectangle = [x, y, rectangle[2], rectangle[3]];\n                    }\n                    else if (parameter.pageRotationAngle === PdfRotationAngle.angle270) {\n                        g.translateTransform(0, g._size[0]);\n                        g.rotateTransform(270);\n                        var x = g._size[0] - (rectangle[1] + rectangle[3]);\n                        var y = rectangle[0];\n                        rectangle = [x, y, rectangle[3], rectangle[2]];\n                    }\n                }\n                if (parameter.rotationAngle) {\n                    if (parameter.rotationAngle === 90) {\n                        if (parameter.pageRotationAngle === PdfRotationAngle.angle90) {\n                            g.translateTransform(0, g._size[1]);\n                            g.rotateTransform(-90);\n                            var x = g._size[1] - (rectangle[1] + rectangle[3]);\n                            var y = rectangle[0];\n                            rectangle = [x, y, rectangle[3], rectangle[2]];\n                        }\n                        else {\n                            if (rectangle[2] > rectangle[3]) {\n                                g.translateTransform(0, g._size[1]);\n                                g.rotateTransform(-90);\n                                rectangle = [parameter.bounds[0], parameter.bounds[1], parameter.bounds[2], parameter.bounds[3]];\n                            }\n                            else {\n                                var z = rectangle[0];\n                                rectangle[0] = -(rectangle[1] + rectangle[3]);\n                                rectangle[1] = z;\n                                var height = rectangle[3];\n                                rectangle[3] = rectangle[2] > font._metrics._getHeight() ? rectangle[2] : font._metrics._getHeight();\n                                rectangle[2] = height;\n                                g.rotateTransform(-90);\n                            }\n                        }\n                    }\n                    else if (parameter.rotationAngle === 270) {\n                        g.translateTransform(g._size[0], 0);\n                        g.rotateTransform(-270);\n                        var x = rectangle[1];\n                        var y = g._size[0] - (rectangle[0] + rectangle[2]);\n                        rectangle = [x, y, rectangle[3], rectangle[2]];\n                    }\n                    else if (parameter.rotationAngle === 180) {\n                        g.translateTransform(g._size[0], g._size[1]);\n                        g.rotateTransform(-180);\n                        var x = g._size[0] - (rectangle[0] + rectangle[2]);\n                        var y = g._size[1] - (rectangle[1] + rectangle[3]);\n                        rectangle = [x, y, rectangle[2], rectangle[3]];\n                    }\n                }\n                g.drawString(text, font, rectangle, null, parameter.foreBrush, format);\n                g.restore(state);\n            }\n            else {\n                g.drawString(text, font, rectangle, null, parameter.foreBrush, format);\n            }\n            if (g._isTemplateGraphics && parameter.required) {\n                g._sw._endMarkupSequence();\n                g.restore();\n            }\n        }\n    };\n    return PdfTextBoxField;\n}(PdfField));\nexport { PdfTextBoxField };\n/**\n * `PdfButtonField` class represents the button field objects.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Gets the first page of the document\n * let page: PdfPage = document.getPage(0);\n * // Access the PDF form\n * let form: PdfForm = document.form;\n * // Create a new button field\n * let field: PdfButtonField = new PdfButtonField(page , 'Button1', {x: 100, y: 40, width: 100, height: 20});\n * // Add the field into PDF form\n * form.add(field);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfButtonField = /** @class */ (function (_super) {\n    __extends(PdfButtonField, _super);\n    function PdfButtonField(page, name, bounds) {\n        var _this = _super.call(this) || this;\n        if (page && name && bounds) {\n            _this._initialize(page, name, bounds);\n        }\n        return _this;\n    }\n    Object.defineProperty(PdfButtonField.prototype, \"text\", {\n        /**\n         * Gets value of the text box field.\n         *\n         * @returns {string} Text.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access text box field\n         * let field: PdfButtonField = document.form.fieldAt(0) as PdfButtonField;\n         * // Gets the text value from button field\n         * let text: string = field.text;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (this._isLoaded) {\n                if (typeof this._text === 'undefined') {\n                    var widget = this.itemAt(this._defaultIndex);\n                    if (widget && widget._mkDictionary && widget._mkDictionary.has('CA')) {\n                        this._text = widget._mkDictionary.get('CA');\n                    }\n                    else if (this._mkDictionary && this._mkDictionary.has('CA')) {\n                        this._text = this._mkDictionary.get('CA');\n                    }\n                }\n                if (typeof this._text === 'undefined') {\n                    var value = _getInheritableProperty(this._dictionary, 'V', false, true, 'Parent');\n                    if (value) {\n                        this._text = value;\n                    }\n                }\n            }\n            if (typeof this._text === 'undefined') {\n                this._text = '';\n            }\n            return this._text;\n        },\n        /**\n         * Sets value of the text box field.\n         *\n         * @param {string} value Text.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access button field\n         * let field: PdfButtonField = document.form.fieldAt(0) as PdfButtonField;\n         * // Sets the text value of form field\n         * field.text = ’Click to submit’;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (this._isLoaded && !this.readOnly) {\n                var widget = this.itemAt(this._defaultIndex);\n                if (widget && widget._dictionary) {\n                    this._assignText(widget._dictionary, value);\n                }\n                else {\n                    this._assignText(this._dictionary, value);\n                }\n            }\n            if (!this._isLoaded && this._text !== value) {\n                var widget = this.itemAt(this._defaultIndex);\n                this._assignText(widget._dictionary, value);\n                this._text = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfButtonField.prototype, \"textAlignment\", {\n        /**\n         * Gets the text alignment in a button field.\n         *\n         * @returns {PdfTextAlignment} Text alignment.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access button field\n         * let field: PdfButtonField = document.form.fieldAt(0) as PdfButtonField;\n         * // Gets the text alignment from button field\n         * let alignment: PdfTextAlignment = field.textAlignment;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._getTextAlignment();\n        },\n        /**\n         * Sets the text alignment in a button field.\n         *\n         * @param {PdfTextAlignment} value Text alignment.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access button field\n         * let field: PdfButtonField = document.form.fieldAt(0) as PdfButtonField;\n         * // Sets the text alignment of form field as center\n         * field.textAlignment = PdfTextAlignment.center;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (this._textAlignment !== value) {\n                this._setTextAlignment(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfButtonField.prototype, \"highlightMode\", {\n        /**\n         * Gets the highlight mode of the field.\n         *\n         * @returns {PdfHighlightMode} highlight mode.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access button field\n         * let field: PdfButtonField = document.form.fieldAt(0) as PdfButtonField;\n         * // Gets the highlight mode from button field\n         * let highlightMode: PdfHighlightMode = field. highlightMode;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            var widget = this.itemAt(this._defaultIndex);\n            var mode;\n            if (widget && typeof widget.highlightMode !== 'undefined') {\n                mode = widget.highlightMode;\n            }\n            else if (this._dictionary.has('H')) {\n                var highlight = this._dictionary.get('H');\n                mode = _mapHighlightMode(highlight.name);\n            }\n            return (typeof mode !== 'undefined') ? mode : PdfHighlightMode.invert;\n        },\n        /**\n         * Sets the highlight mode of the field.\n         *\n         * @param {PdfHighlightMode} value highlight mode.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access button field\n         * let field: PdfButtonField = document.form.fieldAt(0) as PdfButtonField;\n         * // Sets the highlight mode of button field as outline\n         * field.highlightMode = PdfHighlightMode.outline;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            var widget = this.itemAt(this._defaultIndex);\n            if (widget && (typeof widget.highlightMode === 'undefined' || widget.highlightMode !== value)) {\n                widget.highlightMode = value;\n            }\n            else if (!this._dictionary.has('H') || _mapHighlightMode(this._dictionary.get('H')) !== value) {\n                this._dictionary.update('H', _reverseMapHighlightMode(value));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfButtonField.prototype, \"font\", {\n        /**\n         * Gets the font of the field.\n         *\n         * @returns {PdfFont} font.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfButtonField = document.form.fieldAt(0) as PdfButtonField;\n         * // Gets the font of the field.\n         * let font: PdfFont = field.font;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (this._font) {\n                return this._font;\n            }\n            else {\n                var widget = this.itemAt(this._defaultIndex);\n                this._font = _obtainFontDetails(this._form, widget, this);\n            }\n            return this._font;\n        },\n        /**\n         * Sets the font of the field.\n         *\n         * @param {PdfFont} value font.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfButtonField = document.form.fieldAt(0) as PdfButtonField;\n         * // Sets the font of the field\n         * field.font = new PdfStandardFont(PdfFontFamily.helvetica, 12, PdfFontStyle.bold);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (value && value instanceof PdfFont) {\n                this._font = value;\n                this._initializeFont(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfButtonField.prototype, \"backColor\", {\n        /**\n         * Gets the background color of the field.\n         *\n         * @returns {number[]} R, G, B color values in between 0 to 255.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the background color of the field.\n         * let backColor: number[] = field.backColor;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._parseBackColor(true);\n        },\n        /**\n         * Sets the background color of the field.\n         *\n         * @param {number[]} value Array with R, G, B, A color values in between 0 to 255. For optional A (0-254), it signifies transparency.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the button field at index 0\n         * let submitButton: PdfField = document.form.fieldAt(0);\n         * // Sets the background color of the field.\n         * submitButton.backColor = [255, 0, 0];\n         * // Access the button field at index 1\n         * let cancelButton: PdfField = document.form.fieldAt(1);\n         * // Sets the background color of the field to transparent.\n         * cancelButton.backColor = [0, 0, 0, 0];\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._updateBackColor(value, true);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfButtonField.prototype._assignText = function (fieldDictionary, value) {\n        var dictionary;\n        if (fieldDictionary.has('MK')) {\n            dictionary = fieldDictionary.get('MK');\n        }\n        else {\n            dictionary = new _PdfDictionary(this._crossReference);\n            fieldDictionary.set('MK', dictionary);\n        }\n        dictionary.update('CA', value);\n        fieldDictionary._updated = true;\n    };\n    /**\n     * Parse an existing button field.\n     *\n     * @private\n     * @param {PdfForm} form Form object.\n     * @param {_PdfDictionary} dictionary Field dictionary.\n     * @param {_PdfCrossReference} crossReference Cross reference object.\n     * @param {_PdfReference} reference Field reference.\n     * @returns {PdfButtonField} Button field.\n     */\n    PdfButtonField._load = function (form, dictionary, crossReference, reference) {\n        var field = new PdfButtonField();\n        field._isLoaded = true;\n        field._form = form;\n        field._dictionary = dictionary;\n        field._crossReference = crossReference;\n        field._ref = reference;\n        if (field._dictionary.has('Kids')) {\n            field._kids = field._dictionary.get('Kids');\n        }\n        field._defaultIndex = 0;\n        field._parsedItems = new Map();\n        return field;\n    };\n    PdfButtonField.prototype._initialize = function (page, name, bounds) {\n        this._crossReference = page._crossReference;\n        this._page = page;\n        this._name = name;\n        this._defaultIndex = 0;\n        this._dictionary = new _PdfDictionary(this._crossReference);\n        this._ref = this._crossReference._getNextReference();\n        this._crossReference._cacheMap.set(this._ref, this._dictionary);\n        this._dictionary.objId = this._ref.toString();\n        this._dictionary.update('FT', _PdfName.get('Btn'));\n        this._dictionary.update('T', name);\n        this._fieldFlags |= _FieldFlag.pushButton;\n        this._initializeFont(this._defaultFont);\n        this._createItem(bounds);\n    };\n    PdfButtonField.prototype._createItem = function (bounds) {\n        var widget = new PdfWidgetAnnotation();\n        widget._create(this._page, bounds, this);\n        widget.textAlignment = PdfTextAlignment.center;\n        this._stringFormat = new PdfStringFormat(widget.textAlignment, PdfVerticalAlignment.middle);\n        widget._dictionary.update('MK', new _PdfDictionary(this._crossReference));\n        widget._mkDictionary.update('BC', [0, 0, 0]);\n        widget._mkDictionary.update('BG', [.827451, .827451, .827451]);\n        widget._mkDictionary.update('CA', (typeof this._name !== 'undefined' && this._name !== null) ? this._name : this._actualName);\n        this._addToKid(widget);\n    };\n    PdfButtonField.prototype._doPostProcess = function (isFlatten) {\n        if (isFlatten === void 0) { isFlatten = false; }\n        if (isFlatten || this._setAppearance || this._form._setAppearance) {\n            var count = this._kidsCount;\n            if (this._isLoaded) {\n                if (count > 0) {\n                    for (var i = 0; i < count; i++) {\n                        var item = this.itemAt(i);\n                        if (item) {\n                            this._postProcess(isFlatten, item);\n                        }\n                    }\n                }\n                else if ((isFlatten || this._form._setAppearance || this._setAppearance) && !this._checkFieldFlag(this._dictionary)) {\n                    this._postProcess(isFlatten);\n                }\n            }\n            else if (isFlatten || this._form._setAppearance || this._setAppearance) {\n                for (var i = 0; i < count; i++) {\n                    var item = this.itemAt(i);\n                    if (item && !this._checkFieldFlag(item._dictionary)) {\n                        var template = this._createAppearance(item);\n                        if (isFlatten) {\n                            this._drawTemplate(template, item._getPage(), { x: item.bounds.x, y: item.bounds.y, width: template._size[0], height: template._size[1] });\n                        }\n                        else {\n                            this._addAppearance(item._dictionary, template, 'N');\n                            var pressed = this._createAppearance(item, true);\n                            if (pressed) {\n                                this._addAppearance(item._dictionary, pressed, 'D');\n                            }\n                        }\n                        item._dictionary._updated = !isFlatten;\n                    }\n                }\n            }\n            if (isFlatten) {\n                this._dictionary._updated = false;\n            }\n        }\n    };\n    PdfButtonField.prototype._postProcess = function (isFlatten, widget) {\n        var template;\n        var bounds;\n        var source = widget ? widget : this;\n        if (this._form._setAppearance || this._setAppearance || (isFlatten && !source._dictionary.has('AP'))) {\n            template = this._createAppearance(source);\n        }\n        else if (source._dictionary.has('AP')) {\n            var appearanceStream = void 0;\n            var dictionary = source._dictionary.get('AP');\n            if (dictionary && dictionary.has('N')) {\n                appearanceStream = dictionary.get('N');\n                var reference = dictionary.getRaw('N');\n                if (reference) {\n                    appearanceStream.reference = reference;\n                }\n                if (appearanceStream) {\n                    template = new PdfTemplate(appearanceStream, this._crossReference);\n                }\n            }\n        }\n        if (template) {\n            if (isFlatten) {\n                var page = source instanceof PdfWidgetAnnotation ? source._getPage() : source.page;\n                if (page) {\n                    var graphics = page.graphics;\n                    graphics.save();\n                    if (page.rotation === PdfRotationAngle.angle90) {\n                        graphics.translateTransform(graphics._size[0], graphics._size[1]);\n                        graphics.rotateTransform(90);\n                    }\n                    else if (page.rotation === PdfRotationAngle.angle180) {\n                        graphics.translateTransform(graphics._size[0], graphics._size[1]);\n                        graphics.rotateTransform(-180);\n                    }\n                    else if (page.rotation === PdfRotationAngle.angle270) {\n                        graphics.translateTransform(graphics._size[0], graphics._size[1]);\n                        graphics.rotateTransform(270);\n                    }\n                    bounds = { x: source.bounds.x, y: source.bounds.y, width: template._size[0], height: template._size[1] };\n                    graphics._drawTemplate(template, bounds);\n                    graphics.restore();\n                }\n                source._dictionary._updated = false;\n            }\n            else {\n                this._addAppearance(source._dictionary, template, 'N');\n            }\n        }\n    };\n    PdfButtonField.prototype._createAppearance = function (widget, isPressed) {\n        if (isPressed === void 0) { isPressed = false; }\n        var bounds = widget.bounds;\n        var template = new PdfTemplate([0, 0, bounds.width, bounds.height], this._crossReference);\n        var parameter = new _PaintParameter();\n        parameter.bounds = [0, 0, bounds.width, bounds.height];\n        var backcolor = widget.backColor;\n        if (backcolor) {\n            parameter.backBrush = new PdfBrush(backcolor);\n        }\n        parameter.foreBrush = new PdfBrush(widget.color);\n        var border = widget.border;\n        parameter.borderPen = new PdfPen(widget.borderColor, border.width);\n        parameter.borderStyle = border.style;\n        parameter.borderWidth = border.width;\n        if (backcolor) {\n            var shadowColor = [backcolor[0] - 64, backcolor[1] - 64, backcolor[2] - 64];\n            var color = [shadowColor[0] >= 0 ? shadowColor[0] : 0,\n                shadowColor[1] >= 0 ? shadowColor[1] : 0,\n                shadowColor[2] >= 0 ? shadowColor[2] : 0];\n            parameter.shadowBrush = new PdfBrush(color);\n        }\n        parameter.rotationAngle = widget.rotate;\n        if (typeof this._font === 'undefined' || this._font === null) {\n            this._font = this._defaultFont;\n        }\n        if (isPressed) {\n            this._drawPressedButton(template.graphics, parameter, this.text, this._font, this._stringFormat);\n        }\n        else {\n            this._drawButton(template.graphics, parameter, this.text, this._font, this._stringFormat);\n        }\n        return template;\n    };\n    PdfButtonField.prototype._drawButton = function (g, parameter, text, font, format) {\n        this._drawRectangularControl(g, parameter);\n        var rectangle = parameter.bounds;\n        if ((g._page &&\n            typeof g._page.rotation !== 'undefined' &&\n            g._page.rotation !== PdfRotationAngle.angle0) ||\n            parameter.rotationAngle > 0) {\n            var state = g.save();\n            if (typeof parameter.pageRotationAngle !== 'undefined' && parameter.pageRotationAngle !== PdfRotationAngle.angle0) {\n                if (parameter.pageRotationAngle === PdfRotationAngle.angle90) {\n                    g.translateTransform(g._size[1], 0);\n                    g.rotateTransform(90);\n                    var y = g._size[1] - (rectangle[0] + rectangle[2]);\n                    var x = rectangle[1];\n                    rectangle = [x, y, rectangle[3], rectangle[2]];\n                }\n                else if (parameter.pageRotationAngle === PdfRotationAngle.angle180) {\n                    g.translateTransform(g._size[0], g._size[1]);\n                    g.rotateTransform(-180);\n                    var x = g._size[0] - (rectangle[0] + rectangle[2]);\n                    var y = g._size[1] - (rectangle[1] + rectangle[3]);\n                    rectangle = [x, y, rectangle[2], rectangle[3]];\n                }\n                else if (parameter.pageRotationAngle === PdfRotationAngle.angle270) {\n                    g.translateTransform(0, g._size[0]);\n                    g.rotateTransform(270);\n                    var x = g._size[0] - (rectangle[1] + rectangle[3]);\n                    var y = rectangle[0];\n                    rectangle = [x, y, rectangle[3], rectangle[2]];\n                }\n            }\n            if (parameter.rotationAngle) {\n                if (parameter.rotationAngle === 90) {\n                    if (parameter.pageRotationAngle === PdfRotationAngle.angle90) {\n                        g.translateTransform(0, g._size[1]);\n                        g.rotateTransform(-90);\n                        var x = g._size[1] - (rectangle[1] + rectangle[3]);\n                        var y = rectangle[0];\n                        rectangle = [x, y, rectangle[3], rectangle[2]];\n                    }\n                    else {\n                        if (rectangle[2] > rectangle[3]) {\n                            g.translateTransform(0, g._size[1]);\n                            g.rotateTransform(-90);\n                            rectangle = [parameter.bounds[0], parameter.bounds[1], parameter.bounds[2], parameter.bounds[3]];\n                        }\n                        else {\n                            var z = rectangle[0];\n                            rectangle[0] = -(rectangle[1] + rectangle[3]);\n                            rectangle[1] = z;\n                            var height = rectangle[3];\n                            rectangle[3] = rectangle[2] > font._metrics._getHeight() ? rectangle[2] : font._metrics._getHeight();\n                            rectangle[2] = height;\n                            g.rotateTransform(-90);\n                        }\n                    }\n                }\n                else if (parameter.rotationAngle === 270) {\n                    g.translateTransform(g._size[0], 0);\n                    g.rotateTransform(-270);\n                    var x = rectangle[1];\n                    var y = g._size[0] - (rectangle[0] + rectangle[2]);\n                    rectangle = [x, y, rectangle[3], rectangle[2]];\n                }\n                else if (parameter.rotationAngle === 180) {\n                    g.translateTransform(g._size[0], g._size[1]);\n                    g.rotateTransform(-180);\n                    var x = g._size[0] - (rectangle[0] + rectangle[2]);\n                    var y = g._size[1] - (rectangle[1] + rectangle[3]);\n                    rectangle = [x, y, rectangle[2], rectangle[3]];\n                }\n            }\n            g.drawString(text, font, rectangle, null, parameter.foreBrush, format);\n            g.restore(state);\n        }\n        else {\n            g.drawString(text, font, rectangle, null, parameter.foreBrush, format);\n        }\n    };\n    PdfButtonField.prototype._drawPressedButton = function (g, parameter, text, font, format) {\n        switch (parameter.borderStyle) {\n            case PdfBorderStyle.inset:\n                g.drawRectangle(parameter.bounds[0], parameter.bounds[1], parameter.bounds[2], parameter.bounds[3], parameter.shadowBrush);\n                break;\n            default:\n                g.drawRectangle(parameter.bounds[0], parameter.bounds[1], parameter.bounds[2], parameter.bounds[3], parameter.backBrush);\n                break;\n        }\n        this._drawBorder(g, parameter.bounds, parameter.borderPen, parameter.borderStyle, parameter.borderWidth);\n        var rectangle = [parameter.borderWidth,\n            parameter.borderWidth,\n            parameter.bounds[2] - parameter.borderWidth,\n            parameter.bounds[3] - parameter.borderWidth];\n        g.drawString(text, font, rectangle, null, parameter.foreBrush, format);\n        switch (parameter.borderStyle) {\n            case PdfBorderStyle.inset:\n                this._drawLeftTopShadow(g, parameter.bounds, parameter.borderWidth, this._grayBrush);\n                this._drawRightBottomShadow(g, parameter.bounds, parameter.borderWidth, this._silverBrush);\n                break;\n            case PdfBorderStyle.beveled:\n                this._drawLeftTopShadow(g, parameter.bounds, parameter.borderWidth, parameter.shadowBrush);\n                this._drawRightBottomShadow(g, parameter.bounds, parameter.borderWidth, this._whiteBrush);\n                break;\n            default:\n                this._drawLeftTopShadow(g, parameter.bounds, parameter.borderWidth, parameter.shadowBrush);\n                break;\n        }\n    };\n    return PdfButtonField;\n}(PdfField));\nexport { PdfButtonField };\n/**\n * `PdfCheckBoxField` class represents the check box field objects.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Gets the first page of the document\n * let page: PdfPage = document.getPage(0);\n * // Access the PDF form\n * let form: PdfForm = document.form;\n * // Create a new check box field\n * let field: PdfCheckBoxField = new PdfCheckBoxField('CheckBox1', {x: 100, y: 40, width: 20, height: 20}, page);\n * // Sets the checked flag as true.\n * field.checked = true;\n * // Sets the tool tip value\n * field.toolTip = 'Checked';\n * // Add the field into PDF form\n * form.add(field);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfCheckBoxField = /** @class */ (function (_super) {\n    __extends(PdfCheckBoxField, _super);\n    function PdfCheckBoxField(name, bounds, page) {\n        var _this = _super.call(this) || this;\n        if (page && name && bounds) {\n            _this._initialize(page, name, bounds);\n        }\n        return _this;\n    }\n    /**\n     * Parse an existing check box field.\n     *\n     * @private\n     * @param {PdfForm} form Form object.\n     * @param {_PdfDictionary} dictionary Field dictionary.\n     * @param {_PdfCrossReference} crossReference Cross reference object.\n     * @param {_PdfReference} reference Field reference.\n     * @returns {PdfCheckBoxField} Check box field.\n     */\n    PdfCheckBoxField._load = function (form, dictionary, crossReference, reference) {\n        var field = new PdfCheckBoxField();\n        field._isLoaded = true;\n        field._form = form;\n        field._dictionary = dictionary;\n        field._crossReference = crossReference;\n        field._ref = reference;\n        field._defaultIndex = 0;\n        field._parsedItems = new Map();\n        if (field._dictionary.has('Kids')) {\n            field._kids = field._dictionary.get('Kids');\n        }\n        else {\n            var item = PdfStateItem._load(dictionary, crossReference, field);\n            item._isLoaded = true;\n            item._ref = reference;\n            field._parsedItems.set(0, item);\n        }\n        return field;\n    };\n    /**\n     * Gets the item at the specified index.\n     *\n     * @param {number} index Index of the field item.\n     * @returns {PdfStateItem} Field item at the index.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Access the check box field\n     * let field: PdfCheckBoxField = form.fieldAt(0) as PdfCheckBoxField;\n     * // Gets the first list item.\n     * let item: PdfStateItem = field.itemAt(0);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfCheckBoxField.prototype.itemAt = function (index) {\n        if (index < 0 || (index !== 0 && index >= this._kidsCount)) {\n            throw Error('Index out of range.');\n        }\n        var item;\n        if (this._parsedItems.has(index)) {\n            item = this._parsedItems.get(index);\n        }\n        else {\n            var dictionary = void 0;\n            if (index >= 0 && this._kids && this._kids.length > 0 && index < this._kids.length) {\n                var ref = this._kids[Number.parseInt(index.toString(), 10)];\n                if (ref && ref instanceof _PdfReference) {\n                    dictionary = this._crossReference._fetch(ref);\n                }\n                if (dictionary) {\n                    item = PdfStateItem._load(dictionary, this._crossReference, this);\n                    item._isLoaded = true;\n                    item._ref = ref;\n                    this._parsedItems.set(index, item);\n                }\n            }\n        }\n        return item;\n    };\n    Object.defineProperty(PdfCheckBoxField.prototype, \"font\", {\n        /**\n         * Gets the font of the field.\n         *\n         * @returns {PdfFont} font.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfCheckBoxField = document.form.fieldAt(0) as PdfCheckBoxField;\n         * // Gets the font of the field.\n         * let font: PdfFont = field.font;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (this._font) {\n                return this._font;\n            }\n            else {\n                var widget = this.itemAt(this._defaultIndex);\n                this._font = _obtainFontDetails(this._form, widget, this);\n            }\n            return this._font;\n        },\n        /**\n         * Sets the font of the field.\n         *\n         * @param {PdfFont} value font.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfCheckBoxField = document.form.fieldAt(0) as PdfCheckBoxField;\n         * // Sets the font of the field\n         * field.font = new PdfStandardFont(PdfFontFamily.helvetica, 12, PdfFontStyle.bold);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (value && value instanceof PdfFont) {\n                this._font = value;\n                this._initializeFont(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfCheckBoxField.prototype, \"checked\", {\n        /**\n         * Gets the flag indicating whether the field is checked or not.\n         *\n         * @returns {boolean} Checked.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Gets the first page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Access the PDF form\n         * let form: PdfForm = document.form;\n         * // Access the check box field\n         * let field: PdfCheckBoxField = form.fieldAt(0) as PdfCheckBoxField;\n         * // Gets the flag indicating whether the field is checked or not.\n         * let checked: Boolean = field.checked;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return (this._kidsCount > 0) ? this.itemAt(this._defaultIndex).checked : _checkField(this._dictionary);\n        },\n        /**\n         * Sets the flag indicating whether the field is checked or not.\n         *\n         * @param {boolean} value Checked.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Gets the first page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Access the PDF form\n         * let form: PdfForm = document.form;\n         * // Access the check box field\n         * let field: PdfCheckBoxField = form.fieldAt(0) as PdfCheckBoxField;\n         * // Sets the flag indicating whether the field is checked or not.\n         * field.checked = true;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (this.checked !== value) {\n                if (this._kidsCount > 0) {\n                    this.itemAt(this._defaultIndex).checked = value;\n                }\n                if (value) {\n                    if (this._isLoaded) {\n                        var entry = _getItemValue((this._kidsCount > 0) ?\n                            this.itemAt(this._defaultIndex)._dictionary : this._dictionary);\n                        this._dictionary.update('V', _PdfName.get(entry));\n                        this._dictionary.update('AS', _PdfName.get(entry));\n                    }\n                    else {\n                        this._dictionary.update('V', _PdfName.get('Yes'));\n                        this._dictionary.update('AS', _PdfName.get('Yes'));\n                    }\n                }\n                else {\n                    if (this._dictionary.has('V')) {\n                        delete this._dictionary._map.V;\n                    }\n                    if (this._dictionary.has('AS')) {\n                        delete this._dictionary._map.AS;\n                    }\n                }\n                this._dictionary._updated = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfCheckBoxField.prototype, \"textAlignment\", {\n        /**\n         * Gets the text alignment in a check box field.\n         *\n         * @returns {PdfTextAlignment} Text alignment.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access check box field\n         * let field: PdfCheckBoxField = document.form.fieldAt(0) as PdfCheckBoxField;\n         * // Gets the text alignment from check box field\n         * let alignment: PdfTextAlignment = field.textAlignment;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._getTextAlignment();\n        },\n        /**\n         * Sets the text alignment in a check box field.\n         *\n         * @param {PdfTextAlignment} value Text alignment.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access check box field\n         * let field: PdfCheckBoxField = document.form.fieldAt(0) as PdfCheckBoxField;\n         * // Sets the text alignment of form field as center\n         * field.textAlignment = PdfTextAlignment.center;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (this._textAlignment !== value) {\n                this._setTextAlignment(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfCheckBoxField.prototype, \"backColor\", {\n        /**\n         * Gets the background color of the field.\n         *\n         * @returns {number[]} R, G, B color values in between 0 to 255.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the background color of the field.\n         * let backColor: number[] = field.backColor;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._parseBackColor(true);\n        },\n        /**\n         * Sets the background color of the field.\n         *\n         * @param {number[]} value Array with R, G, B, A color values in between 0 to 255. For optional A (0-254), it signifies transparency.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the check box field at index 0\n         * let checkBox1: PdfField = document.form.fieldAt(0);\n         * // Sets the background color of the field.\n         * checkBox1.backColor = [255, 0, 0];\n         * // Access the check box field at index 1\n         * let checkBox2: PdfField = document.form.fieldAt(1);\n         * // Sets the background color of the field to transparent.\n         * checkBox2.backColor = [0, 0, 0, 0];\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._updateBackColor(value, true);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfCheckBoxField.prototype._initialize = function (page, name, bounds) {\n        this._crossReference = page._crossReference;\n        this._page = page;\n        this._name = name;\n        this._defaultIndex = 0;\n        this._dictionary = new _PdfDictionary(this._crossReference);\n        this._ref = this._crossReference._getNextReference();\n        this._crossReference._cacheMap.set(this._ref, this._dictionary);\n        this._dictionary.objId = this._ref.toString();\n        this._dictionary.update('FT', _PdfName.get('Btn'));\n        this._dictionary.update('T', name);\n        this._createItem(bounds);\n    };\n    PdfCheckBoxField.prototype._createItem = function (bounds) {\n        var widget = new PdfStateItem();\n        widget._create(this._page, bounds, this);\n        widget.textAlignment = PdfTextAlignment.center;\n        this._stringFormat = new PdfStringFormat(widget.textAlignment, PdfVerticalAlignment.middle);\n        widget._dictionary.update('MK', new _PdfDictionary(this._crossReference));\n        widget._mkDictionary.update('BC', [0, 0, 0]);\n        widget._mkDictionary.update('BG', [1, 1, 1]);\n        widget.style = PdfCheckBoxStyle.check;\n        widget._dictionary.update('DA', '/TiRo 0 Tf 0 0 0 rg');\n        this._addToKid(widget);\n    };\n    PdfCheckBoxField.prototype._doPostProcess = function (isFlatten) {\n        if (isFlatten === void 0) { isFlatten = false; }\n        var count = this._kidsCount;\n        if (this._isLoaded) {\n            if (count > 0) {\n                for (var i = 0; i < count; i++) {\n                    var item = this.itemAt(i);\n                    if (item) {\n                        if (!this._checkFieldFlag(item._dictionary)) {\n                            if (isFlatten) {\n                                var template = void 0;\n                                var state = item.checked ?\n                                    _PdfCheckFieldState.checked :\n                                    _PdfCheckFieldState.unchecked;\n                                if (this._setAppearance || this._form._setAppearance || !item._dictionary.has('AP')) {\n                                    template = this._createAppearance(item, state);\n                                }\n                                else {\n                                    template = _getStateTemplate(state, this);\n                                }\n                                this._drawTemplate(template, item._getPage(), item.bounds);\n                            }\n                            else if (this._setAppearance || this._form._setAppearance || !item._isLoaded) {\n                                item._postProcess(item.checked ? 'Yes' : 'Off');\n                                this._drawAppearance(item);\n                            }\n                        }\n                        item._dictionary._updated = !isFlatten;\n                    }\n                }\n            }\n            else {\n                var style = this.checked ?\n                    _PdfCheckFieldState.checked :\n                    _PdfCheckFieldState.unchecked;\n                this._drawTemplate(_getStateTemplate(style, this), this.page, this.bounds);\n            }\n        }\n        else {\n            for (var i = 0; i < count; i++) {\n                var item = this.itemAt(i);\n                if (item) {\n                    var state = item.checked ? _PdfCheckFieldState.checked : _PdfCheckFieldState.unchecked;\n                    item._postProcess(item.checked ? 'Yes' : 'Off');\n                    if (isFlatten) {\n                        var template = this._createAppearance(item, state);\n                        this._drawTemplate(template, item._getPage(), item.bounds);\n                    }\n                    else {\n                        this._drawAppearance(item);\n                    }\n                    item._dictionary._updated = !isFlatten;\n                }\n            }\n        }\n        this._dictionary._updated = !isFlatten;\n    };\n    PdfCheckBoxField.prototype._createAppearance = function (widget, state) {\n        var bounds = widget.bounds;\n        var parameter = new _PaintParameter();\n        parameter.bounds = [0, 0, bounds.width, bounds.height];\n        var backcolor = widget.backColor;\n        if (backcolor) {\n            parameter.backBrush = new PdfBrush(backcolor);\n        }\n        parameter.foreBrush = new PdfBrush(widget.color);\n        var border = widget.border;\n        parameter.borderPen = new PdfPen(widget.borderColor, border.width);\n        parameter.borderStyle = border.style;\n        parameter.borderWidth = border.width;\n        if (backcolor) {\n            var shadowColor = [backcolor[0] - 64, backcolor[1] - 64, backcolor[2] - 64];\n            var color = [shadowColor[0] >= 0 ? shadowColor[0] : 0,\n                shadowColor[1] >= 0 ? shadowColor[1] : 0,\n                shadowColor[2] >= 0 ? shadowColor[2] : 0];\n            parameter.shadowBrush = new PdfBrush(color);\n        }\n        parameter.rotationAngle = widget.rotate;\n        var template = new PdfTemplate(parameter.bounds, this._crossReference);\n        var graphics = template.graphics;\n        this._drawCheckBox(graphics, parameter, _styleToString(widget._style), state);\n        return template;\n    };\n    PdfCheckBoxField.prototype._drawAppearance = function (item) {\n        var appearance = new _PdfDictionary();\n        if (item._dictionary.has('AP')) {\n            appearance = item._dictionary.get('AP');\n            if (appearance) {\n                if (appearance.has('N')) {\n                    _removeReferences(appearance.get('N'), this._crossReference, 'Yes', 'Off');\n                }\n                if (appearance.has('D')) {\n                    _removeReferences(appearance.get('D'), this._crossReference, 'Yes', 'Off');\n                }\n            }\n            _removeDuplicateReference(appearance, this._crossReference, 'N');\n            _removeDuplicateReference(appearance, this._crossReference, 'D');\n        }\n        else {\n            var reference = this._crossReference._getNextReference();\n            appearance = new _PdfDictionary(this._crossReference);\n            this._crossReference._cacheMap.set(reference, appearance);\n            item._dictionary.update('AP', reference);\n        }\n        var normalChecked = this._createAppearance(item, _PdfCheckFieldState.checked);\n        var normalCheckedReference = this._crossReference._getNextReference();\n        this._crossReference._cacheMap.set(normalCheckedReference, normalChecked._content);\n        var normalUnchecked = this._createAppearance(item, _PdfCheckFieldState.unchecked);\n        var normalUncheckedReference = this._crossReference._getNextReference();\n        this._crossReference._cacheMap.set(normalUncheckedReference, normalUnchecked._content);\n        var normalDictionary = new _PdfDictionary(this._crossReference);\n        normalDictionary.update('Yes', normalCheckedReference);\n        normalDictionary.update('Off', normalUncheckedReference);\n        var normalReference = this._crossReference._getNextReference();\n        this._crossReference._cacheMap.set(normalReference, normalDictionary);\n        appearance.update('N', normalReference);\n        var pressChecked = this._createAppearance(item, _PdfCheckFieldState.pressedChecked);\n        var pressCheckedReference = this._crossReference._getNextReference();\n        this._crossReference._cacheMap.set(pressCheckedReference, pressChecked._content);\n        var pressUnchecked = this._createAppearance(item, _PdfCheckFieldState.pressedUnchecked);\n        var pressUncheckedReference = this._crossReference._getNextReference();\n        this._crossReference._cacheMap.set(pressUncheckedReference, pressUnchecked._content);\n        var pressedDictionary = new _PdfDictionary(this._crossReference);\n        pressedDictionary.update('Yes', pressCheckedReference);\n        pressedDictionary.update('Off', pressUncheckedReference);\n        var pressedReference = this._crossReference._getNextReference();\n        this._crossReference._cacheMap.set(pressedReference, pressedDictionary);\n        appearance.update('D', pressedReference);\n        item._dictionary._updated = true;\n    };\n    return PdfCheckBoxField;\n}(PdfField));\nexport { PdfCheckBoxField };\n/**\n * `PdfRadioButtonListField` class represents the radio button field objects.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Gets the first page of the document\n * let page: PdfPage = document.getPage(0);\n * // Access the PDF form\n * let form: PdfForm = document.form;\n * // Create a new radio button list field\n * let field: PdfRadioButtonListField = new PdfRadioButtonListField(page, 'Age');\n * // Create and add first item\n * let first: PdfRadioButtonListItem = field.add('1-9', {x: 100, y: 140, width: 20, height: 20});\n * // Create and add second item\n * let second: PdfRadioButtonListItem = new PdfRadioButtonListItem('10-49', {x: 100, y: 170, width: 20, height: 20}, page);\n * field.add(second);\n * // Sets selected index of the radio button list field\n * field.selectedIndex = 0;\n * // Add the field into PDF form\n * form.add(field);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfRadioButtonListField = /** @class */ (function (_super) {\n    __extends(PdfRadioButtonListField, _super);\n    function PdfRadioButtonListField(page, name) {\n        var _this = _super.call(this) || this;\n        _this._selectedIndex = -1;\n        if (page && name) {\n            _this._initialize(page, name);\n        }\n        return _this;\n    }\n    /**\n     * Parse an existing radio button list field.\n     *\n     * @private\n     * @param {PdfForm} form Form object.\n     * @param {_PdfDictionary} dictionary Field dictionary.\n     * @param {_PdfCrossReference} crossReference Cross reference object.\n     * @param {_PdfReference} reference Field reference.\n     * @returns {PdfRadioButtonListField} Radio button list field.\n     */\n    PdfRadioButtonListField._load = function (form, dictionary, crossReference, reference) {\n        var field = new PdfRadioButtonListField();\n        field._isLoaded = true;\n        field._form = form;\n        field._dictionary = dictionary;\n        field._crossReference = crossReference;\n        field._ref = reference;\n        if (field._dictionary.has('Kids')) {\n            field._kids = field._dictionary.get('Kids');\n        }\n        field._defaultIndex = 0;\n        field._parsedItems = new Map();\n        if (field._kidsCount > 0) {\n            field._retrieveOptionValue();\n        }\n        return field;\n    };\n    Object.defineProperty(PdfRadioButtonListField.prototype, \"checked\", {\n        /**\n         * Gets the flag indicating whether the field is checked or not (Read only).\n         *\n         * @returns {boolean} Checked.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Gets the first page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Access the PDF form\n         * let form: PdfForm = document.form;\n         * // Access the radio button list field\n         * let field: PdfRadioButtonListField = form.fieldAt(0) as PdfRadioButtonListField;\n         * // Gets the flag indicating whether the field is checked or not.\n         * let checked: boolean = field.checked;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            var check = false;\n            if (this._kidsCount > 0) {\n                check = this.itemAt(this._defaultIndex).checked;\n            }\n            return check;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfRadioButtonListField.prototype, \"selectedIndex\", {\n        /**\n         * Gets the selected item index.\n         *\n         * @returns {number} Index.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Gets the first page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Access the PDF form\n         * let form: PdfForm = document.form;\n         * // Access the radio button list field\n         * let field: PdfRadioButtonListField = form.fieldAt(0) as PdfRadioButtonListField;\n         * // Gets the selected index.\n         * let index: number = field.selectedIndex;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (this._isLoaded && this._selectedIndex === -1) {\n                this._selectedIndex = this._obtainSelectedIndex();\n            }\n            return this._selectedIndex;\n        },\n        /**\n         * Sets the selected item index.\n         *\n         * @param {number} value Selected index.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Gets the first page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Access the PDF form\n         * let form: PdfForm = document.form;\n         * // Create a new radio button list field\n         * let field: PdfRadioButtonListField = new PdfRadioButtonListField(page, 'Age');\n         * // Create and add first item\n         * let first: PdfRadioButtonListItem = field.add('1-9', {x: 100, y: 140, width: 20, height: 20});\n         * // Create and add second item\n         * let second: PdfRadioButtonListItem = new PdfRadioButtonListItem('10-49', {x: 100, y: 170, width: 20, height: 20}, page);\n         * field.add(second);\n         * // Sets selected index of the radio button list field\n         * field.selectedIndex = 0;\n         * // Add the field into PDF form\n         * form.add(field);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (this.selectedIndex !== value) {\n                this._selectedIndex = value;\n                for (var i = 0; i < this._kidsCount; i++) {\n                    var item = this.itemAt(i);\n                    if (i === value) {\n                        item._dictionary.update('AS', _PdfName.get(item.value));\n                        var name_5 = _PdfName.get(item.value);\n                        this._dictionary.update('V', name_5);\n                        this._dictionary.update('DV', name_5);\n                    }\n                    else {\n                        item._dictionary.update('AS', _PdfName.get('Off'));\n                    }\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the item at the specified index.\n     *\n     * @param {number} index Index of the field item.\n     * @returns {PdfRadioButtonListItem} Field item at the index.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Access the radio button list field\n     * let field: PdfRadioButtonListField = form.fieldAt(0) as PdfRadioButtonListField;\n     * // Gets the first list item.\n     * let item: PdfRadioButtonListField = field.itemAt(0);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfRadioButtonListField.prototype.itemAt = function (index) {\n        if (index < 0 || (index !== 0 && index >= this._kidsCount)) {\n            throw Error('Index out of range.');\n        }\n        var item;\n        if (this._parsedItems.has(index)) {\n            item = this._parsedItems.get(index);\n        }\n        else {\n            var dictionary = void 0;\n            if (index >= 0 && this._kids && this._kids.length > 0 && index < this._kids.length) {\n                var ref = this._kids[Number.parseInt(index.toString(), 10)];\n                if (ref && ref instanceof _PdfReference) {\n                    dictionary = this._crossReference._fetch(ref);\n                }\n                if (dictionary) {\n                    item = PdfRadioButtonListItem._load(dictionary, this._crossReference, this);\n                    item._ref = ref;\n                    item._index = index;\n                    this._parsedItems.set(index, item);\n                }\n            }\n        }\n        return item;\n    };\n    PdfRadioButtonListField.prototype.add = function (value, bounds) {\n        if (value instanceof PdfRadioButtonListItem) {\n            value._field = this;\n            value._dictionary.update('Parent', this._ref);\n            value._setField(this);\n            return this._kidsCount;\n        }\n        else {\n            return new PdfRadioButtonListItem(value, bounds, this);\n        }\n    };\n    /**\n     * Remove the radio button list item from the specified index.\n     *\n     * @param {number} index Item index to remove.\n     * @returns {void} Nothing.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Remove the first item of the form field\n     * field.removeItemAt(0);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfRadioButtonListField.prototype.removeItemAt = function (index) {\n        var item = this.itemAt(index);\n        if (item && item._ref) {\n            var page = item._getPage();\n            if (page) {\n                page._removeAnnotation(item._ref);\n            }\n            this._kids.splice(index, 1);\n            this._dictionary.set('Kids', this._kids);\n            this._dictionary._updated = true;\n            this._parsedItems.delete(index);\n            if (this._parsedItems.size > 0) {\n                var parsedItems_2 = new Map();\n                this._parsedItems.forEach(function (value, key) {\n                    if (key > index) {\n                        parsedItems_2.set(key - 1, value);\n                    }\n                    else {\n                        parsedItems_2.set(key, value);\n                    }\n                });\n                this._parsedItems = parsedItems_2;\n            }\n            if (this._dictionary.has('Opt')) {\n                var options = this._dictionary.getArray('Opt');\n                if (options && options.length > 0) {\n                    options.splice(index, 1);\n                    this._dictionary.set('Opt', options);\n                }\n            }\n        }\n    };\n    /**\n     * Remove the specified radio button list field item.\n     *\n     * @param {PdfRadioButtonListItem} item Item to remove.\n     * @returns {void} Nothing.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the form field at index 0\n     * let field: PdfField = document.form.fieldAt(0);\n     * // Remove the first item of the form field\n     * field.removeItem(field.itemAt(0));\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfRadioButtonListField.prototype.removeItem = function (item) {\n        if (item && item._ref) {\n            var index = this._kids.indexOf(item._ref);\n            if (index !== -1) {\n                this.removeItemAt(index);\n            }\n        }\n    };\n    PdfRadioButtonListField.prototype._initialize = function (page, name) {\n        this._defaultIndex = 0;\n        this._crossReference = page._crossReference;\n        this._page = page;\n        this._name = name;\n        this._dictionary = new _PdfDictionary(this._crossReference);\n        this._ref = this._crossReference._getNextReference();\n        this._crossReference._cacheMap.set(this._ref, this._dictionary);\n        this._dictionary.objId = this._ref.toString();\n        this._dictionary.update('FT', _PdfName.get('Btn'));\n        this._dictionary.update('T', name);\n        this._parsedItems = new Map();\n        this._fieldFlags |= _FieldFlag.radio;\n    };\n    PdfRadioButtonListField.prototype._retrieveOptionValue = function () {\n        if (this._dictionary.has('Opt')) {\n            var options = this._dictionary.getArray('Opt');\n            if (options && options.length > 0) {\n                var itemsCount = this._kidsCount;\n                var count = options.length <= itemsCount ? options.length : itemsCount;\n                for (var i = 0; i < count; i++) {\n                    if (options[Number.parseInt(i.toString(), 10)]) {\n                        this.itemAt(i)._optionValue = options[Number.parseInt(i.toString(), 10)];\n                    }\n                }\n            }\n        }\n    };\n    PdfRadioButtonListField.prototype._obtainSelectedIndex = function () {\n        var index = -1;\n        for (var i = 0; i < this._kidsCount; ++i) {\n            var item = this.itemAt(i);\n            if (item) {\n                var checkName = _getInheritableProperty(item._dictionary, 'V', false, true, 'Parent');\n                if (checkName && item._dictionary.has('AS')) {\n                    var asName = item._dictionary.get('AS');\n                    if (asName && asName.name.toLowerCase() !== 'off') {\n                        if (checkName instanceof _PdfName && checkName.name.toLowerCase() !== 'off') {\n                            if (asName.name === checkName.name || item._optionValue === checkName.name) {\n                                index = i;\n                                break;\n                            }\n                        }\n                        else if (typeof checkName === 'string' && checkName.toLowerCase() !== 'off') {\n                            if (asName.name === checkName || item._optionValue === checkName) {\n                                index = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return index;\n    };\n    PdfRadioButtonListField.prototype._doPostProcess = function (isFlatten) {\n        if (isFlatten === void 0) { isFlatten = false; }\n        var count = this._kidsCount;\n        if (this._isLoaded) {\n            if (count > 0) {\n                for (var i = 0; i < count; i++) {\n                    var item = this.itemAt(i);\n                    if (item && !this._checkFieldFlag(item._dictionary)) {\n                        if (isFlatten) {\n                            var template = void 0;\n                            var state = this.selectedIndex === i ?\n                                _PdfCheckFieldState.checked :\n                                _PdfCheckFieldState.unchecked;\n                            if (this._setAppearance || this._form._setAppearance || !item._dictionary.has('AP')) {\n                                template = this._createAppearance(item, state);\n                            }\n                            else {\n                                template = _getStateTemplate(state, this);\n                            }\n                            this._drawTemplate(template, item._getPage(), item.bounds);\n                        }\n                        else if (this._setAppearance || this._form._setAppearance || !item._isLoaded) {\n                            item._postProcess(this.selectedIndex === i ? item.value : 'Off');\n                            this._drawAppearance(item);\n                        }\n                        item._dictionary._updated = !isFlatten;\n                    }\n                }\n            }\n            else {\n                var style = this.selectedIndex !== -1 ?\n                    _PdfCheckFieldState.checked :\n                    _PdfCheckFieldState.unchecked;\n                this._drawTemplate(_getStateTemplate(style, this), this.page, this.bounds);\n            }\n        }\n        else {\n            for (var i = 0; i < count; i++) {\n                var item = this.itemAt(i);\n                var state = this.selectedIndex === i ? _PdfCheckFieldState.checked : _PdfCheckFieldState.unchecked;\n                item._dictionary.update('AS', _PdfName.get(this.selectedIndex === i ? item.value : 'Off'));\n                if (isFlatten) {\n                    var template = this._createAppearance(item, state);\n                    this._drawTemplate(template, item._getPage(), item.bounds);\n                }\n                else {\n                    item._postProcess(this.selectedIndex === i ? item.value : 'Off');\n                    this._drawAppearance(item);\n                }\n                item._dictionary._updated = !isFlatten;\n            }\n        }\n        this._dictionary._updated = !isFlatten;\n    };\n    PdfRadioButtonListField.prototype._createAppearance = function (widget, state) {\n        var bounds = widget.bounds;\n        var parameter = new _PaintParameter();\n        parameter.bounds = [0, 0, bounds.width, bounds.height];\n        var backcolor = widget.backColor;\n        if (backcolor) {\n            parameter.backBrush = new PdfBrush(backcolor);\n        }\n        parameter.foreBrush = new PdfBrush(widget.color);\n        var border = widget.border;\n        parameter.borderPen = new PdfPen(widget.borderColor, border.width);\n        parameter.borderStyle = border.style;\n        parameter.borderWidth = border.width;\n        if (backcolor) {\n            var shadowColor = [backcolor[0] - 64, backcolor[1] - 64, backcolor[2] - 64];\n            var color = [shadowColor[0] >= 0 ? shadowColor[0] : 0,\n                shadowColor[1] >= 0 ? shadowColor[1] : 0,\n                shadowColor[2] >= 0 ? shadowColor[2] : 0];\n            parameter.shadowBrush = new PdfBrush(color);\n        }\n        parameter.rotationAngle = widget.rotate;\n        var template = new PdfTemplate(parameter.bounds, this._crossReference);\n        var graphics = template.graphics;\n        this._drawRadioButton(graphics, parameter, _styleToString(widget.style), state);\n        return template;\n    };\n    PdfRadioButtonListField.prototype._drawAppearance = function (item) {\n        var appearance = new _PdfDictionary();\n        if (item._dictionary.has('AP')) {\n            appearance = item._dictionary.get('AP');\n            if (appearance) {\n                if (appearance.has('N')) {\n                    _removeReferences(appearance.get('N'), this._crossReference, item.value, 'Off');\n                }\n                if (appearance.has('D')) {\n                    _removeReferences(appearance.get('D'), this._crossReference, item.value, 'Off');\n                }\n            }\n            _removeDuplicateReference(appearance, this._crossReference, 'N');\n            _removeDuplicateReference(appearance, this._crossReference, 'D');\n        }\n        else {\n            var reference = this._crossReference._getNextReference();\n            appearance = new _PdfDictionary(this._crossReference);\n            this._crossReference._cacheMap.set(reference, appearance);\n            item._dictionary.update('AP', reference);\n        }\n        var normalChecked = this._createAppearance(item, _PdfCheckFieldState.checked);\n        var normalCheckedReference = this._crossReference._getNextReference();\n        this._crossReference._cacheMap.set(normalCheckedReference, normalChecked._content);\n        var normalUnchecked = this._createAppearance(item, _PdfCheckFieldState.unchecked);\n        var normalUncheckedReference = this._crossReference._getNextReference();\n        this._crossReference._cacheMap.set(normalUncheckedReference, normalUnchecked._content);\n        var normalDictionary = new _PdfDictionary(this._crossReference);\n        normalDictionary.update(item.value, normalCheckedReference);\n        normalDictionary.update('Off', normalUncheckedReference);\n        var normalReference = this._crossReference._getNextReference();\n        this._crossReference._cacheMap.set(normalReference, normalDictionary);\n        appearance.update('N', normalReference);\n        var pressChecked = this._createAppearance(item, _PdfCheckFieldState.pressedChecked);\n        var pressCheckedReference = this._crossReference._getNextReference();\n        this._crossReference._cacheMap.set(pressCheckedReference, pressChecked._content);\n        var pressUnchecked = this._createAppearance(item, _PdfCheckFieldState.pressedUnchecked);\n        var pressUncheckedReference = this._crossReference._getNextReference();\n        this._crossReference._cacheMap.set(pressUncheckedReference, pressUnchecked._content);\n        var pressedDictionary = new _PdfDictionary(this._crossReference);\n        pressedDictionary.update(item.value, pressCheckedReference);\n        pressedDictionary.update('Off', pressUncheckedReference);\n        var pressedReference = this._crossReference._getNextReference();\n        this._crossReference._cacheMap.set(pressedReference, pressedDictionary);\n        appearance.update('D', pressedReference);\n        item._dictionary._updated = true;\n    };\n    return PdfRadioButtonListField;\n}(PdfField));\nexport { PdfRadioButtonListField };\n/**\n * Represents the base class for list box and combo box fields.\n *\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Gets the first page of the document\n * let page: PdfPage = document.getPage(0);\n * // Access the PDF form\n * let form: PdfForm = document.form;\n * // Access the combo box field\n * let comboBoxField: PdfListField = form.fieldAt(0) as PdfListField;\n * // Gets the count of the loaded combo box field items.\n * let comboItemsCount: number = comboBoxField.itemsCount;\n * // Access the list box field\n * let listBoxField: PdfListField = form.fieldAt(1) as PdfListField;\n * // Gets the count of the loaded list box field items.\n * let ListItemsCount: number = listBoxField.itemsCount;\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfListField = /** @class */ (function (_super) {\n    __extends(PdfListField, _super);\n    function PdfListField() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(PdfListField.prototype, \"itemsCount\", {\n        /**\n         * Gets the count of the loaded field items (Read only).\n         *\n         * @returns {number} Items count.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Gets the first page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Access the PDF form\n         * let form: PdfForm = document.form;\n         * // Access the combo box field\n         * let comboBoxField: PdfComboBoxField = form.fieldAt(0) as PdfComboBoxField;\n         * // Gets the count of the loaded combo box field items.\n         * let comboItemsCount: number = comboBoxField.itemsCount;\n         * // Access the list box field\n         * let listBoxField: PdfListBoxField = form.fieldAt(1) as PdfListBoxField;\n         * // Gets the count of the loaded list box field items.\n         * let ListItemsCount: number = listBoxField.itemsCount;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._options.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfListField.prototype, \"bounds\", {\n        /**\n         * Gets the bounds.\n         *\n         * @returns {{ x: number, y: number, width: number, height: number }} Bounds.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Gets the first page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Access the PDF form\n         * let form: PdfForm = document.form;\n         * // Access the combo box field\n         * let comboBoxField: PdfComboBoxField = form.fieldAt(0) as PdfComboBoxField;\n         * // Gets the bounds of combo box field.\n         * let comboBoxBounds: {x: number, y: number, width: number, height: number} = comboBoxField.bounds;\n         * // Access the combo box field\n         * let listBoxField: PdfListBoxField = form.fieldAt(1) as PdfListBoxField;\n         * // Gets the bounds of list box field.\n         * let listBoxBounds: {x: number, y: number, width: number, height: number} = listBoxField.bounds;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            var value;\n            var widget = this.itemAt(this._defaultIndex);\n            if (widget) {\n                widget._page = this.page;\n            }\n            if (widget && widget.bounds) {\n                value = widget.bounds;\n            }\n            else if (this._dictionary.has('Rect')) {\n                value = _calculateBounds(this._dictionary, this.page);\n            }\n            if (value) {\n                return value;\n            }\n            else if (this._bounds) {\n                return this._bounds;\n            }\n            return value;\n        },\n        /**\n         * Sets the bounds.\n         *\n         * @param {{ x: number, y: number, width: number, height: number }} value bounds.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Gets the first page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Access the PDF form\n         * let form: PdfForm = document.form;\n         * // Access the combo box field\n         * let comboBoxField: PdfComboBoxField = form.fieldAt(0) as PdfComboBoxField;\n         * // Sets the bounds of combo box field.\n         * comboBoxField.bounds = {x: 10, y: 10, width: 100, height: 30};\n         * // Access the list box field\n         * let listBoxField: PdfListBoxField = form.fieldAt(1) as PdfListBoxField;\n         * // Sets the bounds of list box field.\n         * listBoxField.bounds = {x: 10, y: 50, width: 100, height: 30};\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (value.x === 0 && value.y === 0 && value.width === 0 && value.height === 0) {\n                throw new Error('Cannot set empty bounds');\n            }\n            var widget = this.itemAt(this._defaultIndex);\n            if (this._isLoaded) {\n                if (typeof widget === 'undefined' || this._dictionary.has('Rect')) {\n                    this._dictionary.update('Rect', _getUpdatedBounds([value.x, value.y, value.width, value.height], this.page));\n                }\n                else {\n                    widget._page = this.page;\n                    widget.bounds = value;\n                }\n            }\n            else {\n                if (widget) {\n                    widget._page = this.page;\n                    widget.bounds = value;\n                }\n                else {\n                    this._bounds = value;\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfListField.prototype, \"selectedIndex\", {\n        /**\n         * Gets the selected item index or indexes.\n         *\n         * @returns {number | number[]} Index.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Gets the first page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Access the PDF form\n         * let form: PdfForm = document.form;\n         * // Access the combo box field\n         * let comboBoxfield: PdfComboBoxField = form.fieldAt(0) as PdfComboBoxField;\n         * // Gets the selected item index or indexes from combo box field.\n         * let comboBoxIndex: number = comboBoxfield.selectedIndex;\n         * // Access the list box field\n         * let listBoxField: PdfListBoxField = form.fieldAt(1) as PdfListBoxField;\n         * // Gets the selected item index or indexes from list box field.\n         * let listBoxIndex: number = listBoxField.selectedIndex;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            var value = this._dictionary.get('I');\n            if (typeof value === 'undefined') {\n                return [];\n            }\n            else {\n                if (value.length === 1) {\n                    return value[0];\n                }\n                else {\n                    return value;\n                }\n            }\n        },\n        /**\n         * Sets the selected item index or indexes.\n         *\n         * @param {number | number[]} value Selected index.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Gets the first page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Access the PDF form\n         * let form: PdfForm = document.form;\n         * // Create a new list box field\n         * let listField: PdfListField = new PdfListBoxField(page, 'list1', {x: 100, y: 60, width: 100, height: 50});\n         * // Add list items to the field.\n         * listField.addItem(new PdfListFieldItem('English', 'English'));\n         * listField.addItem(new PdfListFieldItem('French', 'French'));\n         * listField.addItem(new PdfListFieldItem('German', 'German'));\n         * // Sets the selected index\n         * listField.selectedIndex = 2;\n         * // Sets the flag indicates whether the list box allows multiple selections.\n         * listField.multiSelect = true;\n         * // Add the field into PDF form\n         * form.add(listField);\n         * // Create a new combo box field\n         * let comboField: PdfComboBoxField = new PdfComboBoxField(page, 'list1', {x: 100, y: 160, width: 100, height: 50});\n         * // Add list items to the field.\n         * comboField.addItem(new PdfListFieldItem('English', 'English'));\n         * comboField.addItem(new PdfListFieldItem('French', 'French'));\n         * comboField.addItem(new PdfListFieldItem('German', 'German'));\n         * // Sets the selected index\n         * comboField.selectedIndex = 2;\n         * // Sets the flag indicates whether the combo box allows multiple selections.\n         * comboField.multiSelect = true;\n         * // Add the field into PDF form\n         * form.add(comboField);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            var _this = this;\n            var length = this._options.length;\n            if (typeof value === 'number') {\n                this._checkIndex(value, length);\n                this._dictionary.update('I', [value]);\n                this._dictionary.update('V', [this._options[Number.parseInt(value.toString(), 10)][0]]);\n            }\n            else {\n                var values_1 = [];\n                value.forEach(function (entry) {\n                    _this._checkIndex(entry, length);\n                    values_1.push(_this._options[Number.parseInt(entry.toString(), 10)][0]);\n                });\n                this._dictionary.update('I', value);\n                this._dictionary.update('V', values_1);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfListField.prototype, \"selectedValue\", {\n        /**\n         * Gets the selected item value or values.\n         *\n         * @returns {string | string[]} Selected values.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Gets the first page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Access the PDF form\n         * let form: PdfForm = document.form;\n         * // Access the list box field\n         * let listBoxField: PdfListBoxField = form.fieldAt(0) as PdfListBoxField;\n         * // Gets the selected item value or values from list box field.\n         * if (listBoxField.multiSelect) {\n         *     let listBoxValues: string[]; = listBoxField.selectedValue;\n         * } else {\n         *    let listBoxValues: string = listBoxField.selectedValue;\n         * }\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            var _this = this;\n            var values = [];\n            if (this._dictionary.has('V')) {\n                var value = this._dictionary.getArray('V'); // eslint-disable-line\n                if (typeof value !== 'undefined') {\n                    if (Array.isArray(value)) {\n                        value.forEach(function (element) {\n                            values.push(element);\n                        });\n                    }\n                    else if (typeof value === 'string') {\n                        values.push(value);\n                    }\n                }\n            }\n            if (values.length === 0 && this._dictionary.has('I')) {\n                var value = this._dictionary.get('I');\n                if (value && value.length > 0) {\n                    value.forEach(function (index) {\n                        values.push(_this._options[Number.parseInt(index.toString(), 10)][0]);\n                    });\n                }\n            }\n            if (values.length === 1) {\n                return values[0];\n            }\n            else {\n                return values;\n            }\n        },\n        /**\n         * Sets the selected item value or values.\n         *\n         * @param {string | string[]} value Selected values.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Gets the first page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Access the PDF form\n         * let form: PdfForm = document.form;\n         * // Create a new list box field\n         * let listField: PdfListField = new PdfListBoxField(page, 'list1', {x: 100, y: 60, width: 100, height: 50});\n         * // Add list items to the field.\n         * listField.addItem(new PdfListFieldItem('English', 'English'));\n         * listField.addItem(new PdfListFieldItem('French', 'French'));\n         * listField.addItem(new PdfListFieldItem('German', 'German'));\n         * // Sets the flag indicates whether the list box allows multiple selections.\n         * listField.multiSelect = true;\n         * // Sets the selected values\n         * listField.selectedValue = ['English', 'German'];\n         * // Add the field into PDF form\n         * form.add(listField);\n         * // Create a new combo box field\n         * let comboField: PdfComboBoxField = new PdfComboBoxField(page, 'list1', {x: 100, y: 160, width: 100, height: 50});\n         * // Add list items to the field.\n         * comboField.addItem(new PdfListFieldItem('English', 'English'));\n         * comboField.addItem(new PdfListFieldItem('French', 'French'));\n         * comboField.addItem(new PdfListFieldItem('German', 'German'));\n         * // Sets the selected value\n         * comboField.selectedValue = ['French'];\n         * // Add the field into PDF form\n         * form.add(comboField);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            var _this = this;\n            if (typeof value === 'string') {\n                var index = this._tryGetIndex(value);\n                if (index !== -1) {\n                    this._dictionary.update('I', [index]);\n                    this._dictionary.update('V', [value]);\n                }\n            }\n            else {\n                var values_2 = [];\n                var indices_1 = [];\n                value.forEach(function (entry) {\n                    var index = _this._tryGetIndex(entry);\n                    if (index !== -1) {\n                        indices_1.push(index);\n                        values_2.push(entry);\n                    }\n                });\n                if (values_2.length > 0) {\n                    this._dictionary.update('I', indices_1);\n                    this._dictionary.update('V', values_2);\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfListField.prototype, \"multiSelect\", {\n        /**\n         * Gets the flag indicates whether the list field allows multiple selections.\n         *\n         * @returns {boolean} Value indicates whether the list field allows multiple selections.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Gets the first page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Access the PDF form\n         * let form: PdfForm = document.form;\n         * // Access the combo box field\n         * let comboBoxField: PdfComboBoxField = form.fieldAt(0) as PdfComboBoxField;\n         * // Gets the flag indicates whether the combo box allows multiple selections.\n         * let comboBoxFlag: Boolean = comboBoxField.multiSelect;\n         * // Access the list box field\n         * let listBoxField: PdfListBoxField = form.fieldAt(1) as PdfListBoxField;\n         * // Gets the flag indicates whether the list box allows multiple selections.\n         * let listBoxFlag: boolean = listBoxField.multiSelect;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (this._isLoaded) {\n                return (this._fieldFlags & _FieldFlag.multiSelect) !== 0;\n            }\n            else {\n                return this._multiSelect;\n            }\n        },\n        /**\n         * Sets the flag indicates whether the list field allows multiple selections.\n         *\n         * @param {boolean} value Indicates whether the list field allows multiple selections.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Gets the first page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Access the PDF form\n         * let form: PdfForm = document.form;\n         * // Create a new list box field\n         * let listField: PdfListField = new PdfListBoxField(page, 'list1', {x: 100, y: 60, width: 100, height: 50});\n         * // Add list items to the field.\n         * listField.addItem(new PdfListFieldItem('English', 'English'));\n         * listField.addItem(new PdfListFieldItem('French', 'French'));\n         * listField.addItem(new PdfListFieldItem('German', 'German'));\n         * // Sets the selected index\n         * listField.selectedIndex = 2;\n         * // Sets the flag indicates whether the list box allows multiple selections.\n         * listField.multiSelect = true;\n         * // Add the field into PDF form\n         * form.add(listField);\n         * // Create a new combo box field\n         * let comboField: PdfComboBoxField = new PdfComboBoxField(page, 'list1', {x: 100, y: 160, width: 100, height: 50});\n         * // Add list items to the field.\n         * comboField.addItem(new PdfListFieldItem('English', 'English'));\n         * comboField.addItem(new PdfListFieldItem('French', 'French'));\n         * comboField.addItem(new PdfListFieldItem('German', 'German'));\n         * // Sets the selected index\n         * comboField.selectedIndex = 2;\n         * // Sets the flag indicates whether the combo box allows multiple selections.\n         * comboField.multiSelect = true;\n         * // Add the field into PDF form\n         * form.add(comboField);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (this.multiSelect !== value) {\n                this._multiSelect = value;\n                if (value) {\n                    this._fieldFlags |= _FieldFlag.multiSelect;\n                }\n                else {\n                    this._fieldFlags &= ~_FieldFlag.multiSelect;\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfListField.prototype, \"editable\", {\n        /**\n         * Gets the flag indicates whether the list field is editable.\n         *\n         * @returns {boolean} Value indicates whether the list field is editable.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Gets the first page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Access the PDF form\n         * let form: PdfForm = document.form;\n         * // Access the combo box field\n         * let comboBoxField: PdfComboBoxField = form.fieldAt(0) as PdfComboBoxField;\n         * // Gets the flag indicates whether the combo box is editable.\n         * let comboBoxFlag: Boolean = comboBoxField.editable;\n         * // Access the list box field\n         * let listBoxField: PdfListBoxField = form.fieldAt(1) as PdfListBoxField;\n         * // Gets the flag indicates whether the list box is editable.\n         * let listBoxFlag: boolean = listBoxField.editable;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (this._isLoaded) {\n                return (this._fieldFlags & _FieldFlag.edit) !== 0;\n            }\n            else {\n                return this._editable;\n            }\n        },\n        /**\n         * Sets the flag indicates whether the list field is editable.\n         *\n         * @param {boolean} value Indicates whether the list field is editable.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Gets the first page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Access the PDF form\n         * let form: PdfForm = document.form;\n         * // Create a new list box field\n         * let listField: PdfListField = new PdfListBoxField(page, 'list1', {x: 100, y: 60, width: 100, height: 50});\n         * // Add list items to the field.\n         * listField.addItem(new PdfListFieldItem('English', 'English'));\n         * listField.addItem(new PdfListFieldItem('French', 'French'));\n         * listField.addItem(new PdfListFieldItem('German', 'German'));\n         * // Sets the selected index\n         * listField.selectedIndex = 2;\n         * // Sets the flag indicates whether the list box is editable.\n         * listField.editable = true;\n         * // Add the field into PDF form\n         * form.add(listField);\n         * // Create a new combo box field\n         * let comboField: PdfComboBoxField = new PdfComboBoxField(page, 'list1', {x: 100, y: 160, width: 100, height: 50});\n         * // Add list items to the field.\n         * comboField.addItem(new PdfListFieldItem('English', 'English'));\n         * comboField.addItem(new PdfListFieldItem('French', 'French'));\n         * comboField.addItem(new PdfListFieldItem('German', 'German'));\n         * // Sets the selected index\n         * comboField.selectedIndex = 2;\n         * // Sets the flag indicates whether the combo box is editable.\n         * comboField.editable = true;\n         * // Add the field into PDF form\n         * form.add(comboField);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (this._editable !== value) {\n                this._editable = value;\n                if (value) {\n                    this._fieldFlags |= _FieldFlag.edit;\n                }\n                else {\n                    this._fieldFlags &= ~_FieldFlag.edit;\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfListField.prototype, \"font\", {\n        /**\n         * Gets the font of the field.\n         *\n         * @returns {PdfFont} font.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfListBoxField = document.form.fieldAt(0) as PdfListBoxField;\n         * // Gets the font of the field.\n         * let font: PdfFont = field.font;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (this._font) {\n                return this._font;\n            }\n            else {\n                var widget = this.itemAt(this._defaultIndex);\n                this._font = _obtainFontDetails(this._form, widget, this);\n            }\n            return this._font;\n        },\n        /**\n         * Sets the font of the field.\n         *\n         * @param {PdfFont} value font.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfListBoxField = document.form.fieldAt(0) as PdfListBoxField;\n         * // Sets the font of the field\n         * field.font = new PdfStandardFont(PdfFontFamily.helvetica, 12, PdfFontStyle.bold);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (value && value instanceof PdfFont) {\n                this._font = value;\n                this._initializeFont(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfListField.prototype, \"textAlignment\", {\n        /**\n         * Gets the text alignment in a combo box field.\n         *\n         * @returns {PdfTextAlignment} Text alignment.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access combo box field\n         * let field: PdfComboBoxField = document.form.fieldAt(0) as PdfComboBoxField;\n         * // Gets the text alignment from combo box field\n         * let alignment: PdfTextAlignment = field.textAlignment;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._getTextAlignment();\n        },\n        /**\n         * Sets the text alignment in a combo box field.\n         *\n         * @param {PdfTextAlignment} value Text alignment.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access combo box field\n         * let field: PdfComboBoxField = document.form.fieldAt(0) as PdfComboBoxField;\n         * // Sets the text alignment of form field as center\n         * field.textAlignment = PdfTextAlignment.center;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (this._textAlignment !== value) {\n                this._setTextAlignment(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfListField.prototype, \"backColor\", {\n        /**\n         * Gets the background color of the field.\n         *\n         * @returns {number[]} R, G, B color values in between 0 to 255.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the background color of the field.\n         * let backColor: number[] = field.backColor;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._parseBackColor(true);\n        },\n        /**\n         * Sets the background color of the field.\n         *\n         * @param {number[]} value Array with R, G, B, A color values in between 0 to 255. For optional A (0-254), it signifies transparency.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the list field at index 0\n         * let list1: PdfField = document.form.fieldAt(0);\n         * // Sets the background color of the field.\n         * list1.backColor = [255, 0, 0];\n         * // Access the list field at index 1\n         * let list2: PdfField = document.form.fieldAt(1);\n         * // Sets the background color of the field to transparent.\n         * list2.backColor = [0, 0, 0, 0];\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._updateBackColor(value, true);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfListField.prototype, \"_options\", {\n        get: function () {\n            if (!this._optionArray) {\n                if (this._dictionary.has('Opt')) {\n                    this._optionArray = this._dictionary.getArray('Opt');\n                }\n                else {\n                    this._optionArray = [];\n                    this._dictionary.update('Opt', this._optionArray);\n                }\n            }\n            return this._optionArray;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the item at the specified index.\n     *\n     * @param {number} index Index of the field item.\n     * @returns {PdfListFieldItem} Field item at the index.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Access the list box field\n     * let listBox: PdfListBoxField = form.fieldAt(0) as PdfListBoxField;\n     * // Gets the first list item.\n     * let listBoxItem: PdfListFieldItem = listBox.itemAt(0);\n     * // Access the combo box field\n     * let comboBox: PdfComboBoxField = form.fieldAt(1) as PdfComboBoxField;\n     * // Gets the first list item.\n     * let comboBoxItem: PdfListFieldItem = comboBox.itemAt(0);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfListField.prototype.itemAt = function (index) {\n        var item;\n        if (index < this._kidsCount) {\n            if (this._parsedItems.has(index)) {\n                item = this._parsedItems.get(index);\n            }\n            else {\n                var dictionary = void 0;\n                var reference = this._kids[Number.parseInt(index.toString(), 10)];\n                if (reference && reference instanceof _PdfReference) {\n                    dictionary = this._crossReference._fetch(reference);\n                }\n                if (dictionary) {\n                    item = PdfListFieldItem._load(dictionary, this._crossReference, this);\n                    item._index = index;\n                    item._ref = reference;\n                    if (this._options && this._options.length > 0 && index < this._options.length) {\n                        item._text = this._options[Number.parseInt(index.toString(), 10)][1];\n                    }\n                    else {\n                        item._text = '';\n                    }\n                    this._parsedItems.set(index, item);\n                }\n            }\n        }\n        else {\n            if (this._parsedItems.has(index)) {\n                item = this._parsedItems.get(index);\n            }\n            else if (this._kidsCount > 0 && this._kids && this._kids.length > 0) {\n                var dictionary = void 0;\n                var reference = void 0;\n                if (this._kidsCount === 1) {\n                    reference = this._kids[0];\n                }\n                else {\n                    reference = this._kids[Number.parseInt(index.toString(), 10)];\n                }\n                if (reference && reference instanceof _PdfReference) {\n                    dictionary = this._crossReference._fetch(reference);\n                }\n                if (dictionary) {\n                    item = PdfListFieldItem._load(dictionary, this._crossReference, this);\n                    item._index = index;\n                    item._ref = reference;\n                    if (this._options && this._options.length > 0 && index < this._options.length) {\n                        item._text = this._options[Number.parseInt(index.toString(), 10)][1];\n                    }\n                    else {\n                        item._text = '';\n                    }\n                    this._parsedItems.set(index, item);\n                }\n            }\n        }\n        return item;\n    };\n    /**\n     * Add list item.\n     *\n     * @param {PdfListFieldItem} item Item to add.\n     * @returns {number} Index of the field item.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Create a new list box field\n     * let listField: PdfListField = new PdfListBoxField(page, 'list1', {x: 100, y: 60, width: 100, height: 50});\n     * // Add list items to the field.\n     * listField.addItem(new PdfListFieldItem('English', 'English'));\n     * listField.addItem(new PdfListFieldItem('French', 'French'));\n     * listField.addItem(new PdfListFieldItem('German', 'German'));\n     * // Sets the selected index\n     * listField.selectedIndex = 2;\n     * // Sets the flag indicates whether the list box allows multiple selections.\n     * listField.multiSelect = true;\n     * // Add the field into PDF form\n     * form.add(listField);\n     * // Create a new combo box field\n     * let comboField: PdfComboBoxField = new PdfComboBoxField(page, 'list1', {x: 100, y: 160, width: 100, height: 50});\n     * // Add list items to the field.\n     * comboField.addItem(new PdfListFieldItem('English', 'English'));\n     * comboField.addItem(new PdfListFieldItem('French', 'French'));\n     * comboField.addItem(new PdfListFieldItem('German', 'German'));\n     * // Sets the selected index\n     * comboField.selectedIndex = 2;\n     * // Sets the flag indicates whether the combo box allows multiple selections.\n     * comboField.multiSelect = true;\n     * // Add the field into PDF form\n     * form.add(comboField);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfListField.prototype.addItem = function (item) {\n        this._addToOptions(item, this);\n        return this._listValues.length - 1;\n    };\n    /**\n     * Remove the list item from the specified index.\n     *\n     * @param {number} index Item index to remove.\n     * @returns {void} Nothing.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Access the list box field\n     * let listBoxField: PdfListBoxField = form.fieldAt(0) as PdfListBoxField;\n     * // Remove the list item from the list box field\n     * listBoxField.removeItemAt(1);\n     * // Access the combo box field\n     * let comboBoxField: PdfComboBoxField = form.fieldAt(1) as PdfComboBoxField;\n     * // Remove the list item from the combo box field\n     * comboBoxField.removeItemAt(0);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfListField.prototype.removeItemAt = function (index) {\n        var item = this.itemAt(index);\n        if (item && item._ref) {\n            this._parsedItems.delete(index);\n            if (this._parsedItems.size > 0) {\n                var parsedItems_3 = new Map();\n                this._parsedItems.forEach(function (value, key) {\n                    if (key > index) {\n                        parsedItems_3.set(key - 1, value);\n                    }\n                    else {\n                        parsedItems_3.set(key, value);\n                    }\n                });\n                this._parsedItems = parsedItems_3;\n            }\n            if (this._dictionary.has('Opt')) {\n                var options = this._options;\n                if (options && options.length > 0) {\n                    options.splice(index, 1);\n                    this._dictionary.set('Opt', options);\n                    this._optionArray = options;\n                    this._dictionary._updated = true;\n                }\n            }\n        }\n    };\n    /**\n     * Remove the list item.\n     *\n     * @param {PdfListFieldItem} item Item to remove.\n     * @returns {void} Nothing.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Gets the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Access the PDF form\n     * let form: PdfForm = document.form;\n     * // Access the list box field\n     * let listBoxField: PdfListBoxField = form.fieldAt(0) as PdfListBoxField;\n     * // Remove the list item from the list box field\n     * listBoxField.removeItem(listBoxField.itemAt(1));\n     * // Access the combo box field\n     * let comboBoxField: PdfComboBoxField = form.fieldAt(1) as PdfComboBoxField;\n     * // Remove the list item from the combo box field\n     * comboBoxField.removeItem(comboBoxField.itemAt(0));\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfListField.prototype.removeItem = function (item) {\n        if (item && item.text) {\n            var index = void 0;\n            for (var i = 0; i < this.itemsCount; i++) {\n                var fieldItem = this.itemAt(i);\n                if (fieldItem && item === fieldItem && fieldItem.text === item.text) {\n                    index = i;\n                    break;\n                }\n            }\n            if (index !== -1) {\n                this.removeItemAt(index);\n            }\n        }\n    };\n    PdfListField.prototype._initialize = function (page, name, bounds) {\n        this._defaultIndex = 0;\n        this._crossReference = page._crossReference;\n        this._page = page;\n        this._name = name;\n        this._dictionary = new _PdfDictionary(this._crossReference);\n        this._ref = this._crossReference._getNextReference();\n        this._crossReference._cacheMap.set(this._ref, this._dictionary);\n        this._dictionary.objId = this._ref.toString();\n        this._dictionary.update('FT', _PdfName.get('Ch'));\n        this._dictionary.update('T', name);\n        this._parsedItems = new Map();\n        this._listValues = [];\n        this._kids = [];\n        this.bounds = bounds;\n        this._addEmptyWidget();\n    };\n    PdfListField.prototype._obtainFont = function (item) {\n        var fontFamily = '';\n        var fontSize = 1;\n        if (item && (item._dictionary.has('DS') || item._dictionary.has('DA'))) {\n            if (item._dictionary.has('DS')) {\n                var collection = item._dictionary.get('DS').split(';');\n                for (var i = 0; i < collection.length; i++) {\n                    var entry = collection[Number.parseInt(i.toString(), 10)].split(':');\n                    if (collection[Number.parseInt(i.toString(), 10)].indexOf('font-family') !== -1) {\n                        fontFamily = entry[1];\n                    }\n                    else if (collection[Number.parseInt(i.toString(), 10)].indexOf('font-size') !== -1) {\n                        if (entry[1].endsWith('pt')) {\n                            fontSize = Number.parseFloat(entry[1].replace('pt', ''));\n                        }\n                    }\n                    else if (collection[Number.parseInt(i.toString(), 10)].indexOf('font-style') === -1 && collection[Number.parseInt(i.toString(), 10)].indexOf('font') !== -1) {\n                        var name_6 = entry[1];\n                        var split = name_6.split(' ');\n                        for (var j = 0; j < split.length; j++) {\n                            if (split[Number.parseInt(j.toString(), 10)] !== '' && !split[Number.parseInt(j.toString(), 10)].endsWith('pt')) {\n                                fontFamily += split[Number.parseInt(j.toString(), 10)] + ' ';\n                            }\n                            if (split[Number.parseInt(j.toString(), 10)].endsWith('pt')) {\n                                fontSize = Number.parseFloat(split[Number.parseInt(j.toString(), 10)].replace('pt', ''));\n                            }\n                        }\n                        while (fontFamily !== ' ' && fontFamily.endsWith(' ')) {\n                            fontFamily = fontFamily.substring(0, fontFamily.length - 2);\n                        }\n                        if (fontFamily.indexOf(',') !== -1) {\n                            fontFamily = fontFamily.split(',')[0];\n                        }\n                    }\n                }\n            }\n            else {\n                var value = item._dictionary.get('DA');\n                if (value && value !== '' && value.indexOf('Tf') !== -1) {\n                    var textCollection = value.split(' ');\n                    for (var i = 0; i < textCollection.length; i++) {\n                        if (textCollection[Number.parseInt(i.toString(), 10)].indexOf('Tf') !== -1) {\n                            fontFamily = textCollection[i - 2];\n                            while (fontFamily !== '' && fontFamily.length > 1 && fontFamily[0] === '/') {\n                                fontFamily = fontFamily.substring(1);\n                            }\n                            fontSize = Number.parseFloat(textCollection[i - 1]);\n                        }\n                    }\n                    var height = 0.0;\n                    if (fontSize === 0) {\n                        var font = new PdfStandardFont(PdfFontFamily.helvetica, height);\n                        if (font !== null) {\n                            height = this._getFontHeight(font._fontFamily);\n                            if (Number.isNaN(height) || height === 0) {\n                                height = 12;\n                            }\n                            font._size = height;\n                            fontSize = height;\n                        }\n                    }\n                }\n            }\n            fontFamily = fontFamily.trim();\n            switch (fontFamily) {\n                case 'Helv':\n                    this._font = new PdfStandardFont(PdfFontFamily.helvetica, fontSize, PdfFontStyle.regular);\n                    break;\n                case 'Courier':\n                case 'Cour':\n                    this._font = new PdfStandardFont(PdfFontFamily.courier, fontSize, PdfFontStyle.regular);\n                    break;\n                case 'Symb':\n                    this._font = new PdfStandardFont(PdfFontFamily.symbol, fontSize, PdfFontStyle.regular);\n                    break;\n                case 'TiRo':\n                    this._font = new PdfStandardFont(PdfFontFamily.timesRoman, fontSize, PdfFontStyle.regular);\n                    break;\n                case 'ZaDb':\n                    this._font = new PdfStandardFont(PdfFontFamily.zapfDingbats, fontSize, PdfFontStyle.regular);\n                    break;\n                default:\n                    this._font = new PdfStandardFont(PdfFontFamily.helvetica, fontSize, PdfFontStyle.regular);\n                    break;\n            }\n        }\n        return this._font;\n    };\n    PdfListField.prototype._obtainSelectedValue = function () {\n        var _this = this;\n        var result = [];\n        if (this._dictionary.has('V')) {\n            var primitive = this._dictionary.get('V'); // eslint-disable-line\n            var array = this._dictionary.getArray('V'); // eslint-disable-line\n            if (primitive !== null && typeof primitive !== 'undefined') {\n                if (typeof primitive === 'string') {\n                    result.push(primitive);\n                }\n                else if (Array.isArray(primitive)) {\n                    array.forEach(function (element) {\n                        result.push(element);\n                    });\n                }\n            }\n        }\n        else {\n            var selectedIndexes = this._dictionary.get('I');\n            if (selectedIndexes !== null &&\n                typeof selectedIndexes !== 'undefined' &&\n                selectedIndexes.length > 0 &&\n                selectedIndexes[0] > -1 &&\n                this._options &&\n                this._options.length > 0) {\n                selectedIndexes.forEach(function (index) {\n                    result.push(_this._options[Number.parseInt(index.toString(), 10)][0]);\n                });\n            }\n        }\n        return result;\n    };\n    PdfListField.prototype._doPostProcess = function (isFlatten) {\n        if (isFlatten === void 0) { isFlatten = false; }\n        if (isFlatten || this._setAppearance || this._form._setAppearance) {\n            var count = this._kidsCount;\n            if (this._kids && this._kids.length > 0) {\n                if (count > 1) {\n                    for (var i = 0; i < count; i++) {\n                        var item = this.itemAt(i);\n                        if (item && !this._checkFieldFlag(item._dictionary)) {\n                            var template = this._createAppearance(item);\n                            if (isFlatten) {\n                                var page = item._getPage();\n                                if (page) {\n                                    this._drawTemplate(template, page, item.bounds);\n                                }\n                            }\n                            else {\n                                this._addAppearance(item._dictionary, template, 'N');\n                            }\n                            item._dictionary._updated = !isFlatten;\n                        }\n                    }\n                }\n                else {\n                    var item = this.itemAt(0);\n                    var template = this._createAppearance();\n                    if (isFlatten) {\n                        var page = this.page;\n                        if (page) {\n                            this._drawTemplate(template, page, this.bounds);\n                        }\n                    }\n                    else {\n                        this._addAppearance(item._dictionary, template, 'N');\n                    }\n                    item._dictionary._updated = !isFlatten;\n                }\n            }\n            else if (this._dictionary) {\n                var template = this._createAppearance();\n                if (isFlatten) {\n                    var page = this.page;\n                    if (page) {\n                        this._drawTemplate(template, page, this.bounds);\n                    }\n                }\n                else {\n                    this._addAppearance(this._dictionary, template, 'N');\n                }\n            }\n            this._dictionary._updated = !isFlatten;\n        }\n    };\n    PdfListField.prototype._tryGetIndex = function (value) {\n        var index = -1;\n        if (this._options && this._options.length > 0) {\n            for (var i = 0; i < this._options.length; i++) {\n                if (value === this._options[Number.parseInt(i.toString(), 10)][0]) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n        return index;\n    };\n    PdfListField.prototype._addEmptyWidget = function () {\n        var widget = new PdfWidgetAnnotation();\n        widget._create(this._page, this.bounds, this);\n        this._addToKid(widget);\n        widget._dictionary.update('MK', new _PdfDictionary(this._crossReference));\n        widget._mkDictionary.update('BC', [0, 0, 0]);\n        widget._mkDictionary.update('BG', [1, 1, 1]);\n        widget._dictionary.update('DA', '/TiRo 0 Tf 0 0 0 rg');\n    };\n    return PdfListField;\n}(PdfField));\nexport { PdfListField };\n/**\n * `PdfComboBoxField` class represents the combo box field objects.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Gets the first page of the document\n * let page: PdfPage = document.getPage(0);\n * // Access the PDF form\n * let form: PdfForm = document.form;\n * // Create a new combo box field\n * let field: PdfComboBoxField = new PdfComboBoxField(page, 'list1', {x: 100, y: 60, width: 100, height: 50});\n * // Add list items to the field.\n * field.addItem(new PdfListFieldItem('English', 'English'));\n * field.addItem(new PdfListFieldItem('French', 'French'));\n * field.addItem(new PdfListFieldItem('German', 'German'));\n * // Sets the selected index\n * field.selectedIndex = 2;\n * // Sets the flag indicates whether the combo box allows multiple selections.\n * field.multiSelect = true;\n * // Add the field into PDF form\n * form.add(field);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfComboBoxField = /** @class */ (function (_super) {\n    __extends(PdfComboBoxField, _super);\n    function PdfComboBoxField(page, name, bounds) {\n        var _this = _super.call(this) || this;\n        if (page && name && bounds) {\n            _this._initialize(page, name, bounds);\n            _this._fieldFlags |= _FieldFlag.combo;\n        }\n        return _this;\n    }\n    Object.defineProperty(PdfComboBoxField.prototype, \"_isAutoFontSize\", {\n        /**\n         * Gets the boolean flag indicates whether the combo box field is auto size.\n         *\n         * @private\n         * @returns {boolean} Returns the boolean value to check auto size.\n         */\n        get: function () {\n            var isAutoFontSize = false;\n            if (this._isLoaded && this._form) {\n                var acroForm = this._form._dictionary;\n                if (acroForm && acroForm.has('DA')) {\n                    var fontString = acroForm.get('DA');\n                    if (fontString) {\n                        var defaultAppearance = new _PdfDefaultAppearance(fontString);\n                        if (defaultAppearance.fontSize === 0) {\n                            if (this._kids && this._kids.length > 0) {\n                                var fontSize = false;\n                                if (this._dictionary.has('DA')) {\n                                    fontString = this._dictionary.get('DA');\n                                    if (fontString) {\n                                        defaultAppearance = new _PdfDefaultAppearance(fontString);\n                                        if (defaultAppearance && defaultAppearance.fontSize > 0) {\n                                            fontSize = true;\n                                        }\n                                    }\n                                }\n                                if (!fontSize) {\n                                    for (var i = 0; i < this._kids.length; i++) {\n                                        var dictionary = void 0;\n                                        var reference = this._kids[Number.parseInt(i.toString(), 10)];\n                                        if (reference && reference instanceof _PdfReference) {\n                                            dictionary = this._crossReference._fetch(reference);\n                                        }\n                                        if (dictionary) {\n                                            if (dictionary.has('DA')) {\n                                                fontString = dictionary.get('DA');\n                                                var height = 0;\n                                                if (fontString) {\n                                                    defaultAppearance = new _PdfDefaultAppearance(fontString);\n                                                    if (defaultAppearance) {\n                                                        height = defaultAppearance.fontSize;\n                                                    }\n                                                }\n                                                if (height === 0) {\n                                                    isAutoFontSize = true;\n                                                }\n                                            }\n                                            else {\n                                                isAutoFontSize = true;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (this._dictionary.has('DA')) {\n                                    fontString = this._dictionary.get('DA');\n                                    var height = 0;\n                                    if (fontString) {\n                                        defaultAppearance = new _PdfDefaultAppearance(fontString);\n                                        if (defaultAppearance) {\n                                            height = defaultAppearance.fontSize;\n                                        }\n                                    }\n                                    if (height === 0) {\n                                        isAutoFontSize = true;\n                                    }\n                                }\n                                else {\n                                    isAutoFontSize = true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return isAutoFontSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Parse an existing combo box field.\n     *\n     * @private\n     * @param {PdfForm} form Form object.\n     * @param {_PdfDictionary} dictionary Field dictionary.\n     * @param {_PdfCrossReference} crossReference Cross reference object.\n     * @param {_PdfReference} reference Field reference.\n     * @returns {PdfComboBoxField} Combo box field.\n     */\n    PdfComboBoxField._load = function (form, dictionary, crossReference, reference) {\n        var field = new PdfComboBoxField();\n        field._isLoaded = true;\n        field._form = form;\n        field._dictionary = dictionary;\n        field._crossReference = crossReference;\n        field._ref = reference;\n        if (field._dictionary.has('Kids')) {\n            field._kids = field._dictionary.get('Kids');\n        }\n        var options = field._dictionary.getArray('Opt');\n        if (options !== null && typeof options !== 'undefined') {\n            field._listValues = new Array(options.length);\n        }\n        field._defaultIndex = 0;\n        field._parsedItems = new Map();\n        if (field._kidsCount > 0) {\n            field._retrieveOptionValue();\n        }\n        return field;\n    };\n    PdfComboBoxField.prototype._retrieveOptionValue = function () {\n        if (this._dictionary.has('Opt')) {\n            var options = this._dictionary.getArray('Opt');\n            if (options && options.length > 0) {\n                var itemsCount = this._kidsCount;\n                var count = options.length <= itemsCount ? options.length : itemsCount;\n                for (var i = 0; i < count; i++) {\n                    var text = options[Number.parseInt(i.toString(), 10)][1];\n                    if (text) {\n                        this.itemAt(i)._text = text ? text : '';\n                    }\n                }\n            }\n        }\n    };\n    PdfComboBoxField.prototype._createAppearance = function (item) {\n        var parameter = new _PaintParameter();\n        if (item) {\n            var bounds = item.bounds;\n            var page = item._getPage();\n            if (item._isLoaded && page && typeof page.rotation !== 'undefined' && page.rotation !== PdfRotationAngle.angle0) {\n                parameter.bounds = this._rotateTextBox([bounds.x, bounds.y, bounds.width, bounds.height], page.size, page.rotation);\n            }\n            else {\n                parameter.bounds = [0, 0, bounds.width, bounds.height];\n            }\n            var backcolor = item.backColor;\n            if (backcolor) {\n                parameter.backBrush = new PdfBrush(backcolor);\n            }\n            parameter.foreBrush = new PdfBrush(item.color);\n            var border = item.border;\n            parameter.borderPen = new PdfPen(item.borderColor, border.width);\n            parameter.borderStyle = border.style;\n            parameter.borderWidth = border.width;\n            if (backcolor) {\n                var shadowColor = [backcolor[0] - 64, backcolor[1] - 64, backcolor[2] - 64];\n                var color = [shadowColor[0] >= 0 ? shadowColor[0] : 0,\n                    shadowColor[1] >= 0 ? shadowColor[1] : 0,\n                    shadowColor[2] >= 0 ? shadowColor[2] : 0];\n                parameter.shadowBrush = new PdfBrush(color);\n            }\n            parameter.rotationAngle = item.rotate;\n            var alignment = typeof item.textAlignment !== 'undefined' ? item.textAlignment : PdfTextAlignment.left;\n            var verticalAlignment = this.multiSelect ? PdfVerticalAlignment.top : PdfVerticalAlignment.middle;\n            parameter.stringFormat = new PdfStringFormat(alignment, verticalAlignment);\n        }\n        else {\n            var bounds = this.bounds;\n            if (bounds) {\n                if (this._isLoaded &&\n                    this.page &&\n                    typeof this.page.rotation !== 'undefined' &&\n                    this.page.rotation !== PdfRotationAngle.angle0) {\n                    parameter.bounds = this._rotateTextBox([bounds.x, bounds.y, bounds.width, bounds.height], this.page.size, this.page.rotation);\n                }\n                else {\n                    parameter.bounds = [0, 0, bounds.width, bounds.height];\n                }\n            }\n            var backcolor = this.backColor;\n            if (backcolor) {\n                parameter.backBrush = new PdfBrush(backcolor);\n            }\n            parameter.foreBrush = new PdfBrush(this.color);\n            var border = this.border;\n            parameter.borderPen = new PdfPen(this.borderColor, border.width);\n            parameter.borderStyle = border.style;\n            parameter.borderWidth = border.width;\n            if (backcolor) {\n                var shadowColor = [backcolor[0] - 64, backcolor[1] - 64, backcolor[2] - 64];\n                var color = [shadowColor[0] >= 0 ? shadowColor[0] : 0,\n                    shadowColor[1] >= 0 ? shadowColor[1] : 0,\n                    shadowColor[2] >= 0 ? shadowColor[2] : 0];\n                parameter.shadowBrush = new PdfBrush(color);\n            }\n            parameter.rotationAngle = this.rotationAngle;\n            var alignment = typeof this.textAlignment !== 'undefined' ? this.textAlignment : PdfTextAlignment.left;\n            var verticalAlignment = this.multiSelect ? PdfVerticalAlignment.top : PdfVerticalAlignment.middle;\n            parameter.stringFormat = new PdfStringFormat(alignment, verticalAlignment);\n        }\n        parameter.required = this.required;\n        if (parameter.bounds === null || typeof parameter.bounds === 'undefined') {\n            parameter.bounds = [0, 0, 0, 0];\n        }\n        var template = new PdfTemplate(parameter.bounds, this._crossReference);\n        var graphics = template.graphics;\n        graphics._sw._clear();\n        if (!this.required) {\n            graphics._sw._beginMarkupSequence('Tx');\n            graphics._initializeCoordinates();\n        }\n        if (this._isLoaded) {\n            var font = void 0;\n            if (item) {\n                font = this._obtainFont(item);\n            }\n            if (typeof font === 'undefined' || font === null) {\n                font = this._appearanceFont;\n            }\n            this._drawComboBox(graphics, parameter, font, parameter.stringFormat);\n        }\n        else {\n            if (!this._font) {\n                this._font = new PdfStandardFont(PdfFontFamily.timesRoman, this._getFontHeight(PdfFontFamily.helvetica));\n            }\n            this._drawComboBox(graphics, parameter, this._font, parameter.stringFormat);\n        }\n        if (!this.required) {\n            graphics._sw._endMarkupSequence();\n        }\n        return template;\n    };\n    PdfComboBoxField.prototype._drawComboBox = function (graphics, parameter, font, stringFormat) {\n        if (graphics._isTemplateGraphics && parameter.required) {\n            graphics.save();\n            graphics._initializeCoordinates();\n        }\n        this._drawRectangularControl(graphics, parameter);\n        if (graphics._isTemplateGraphics && parameter.required) {\n            graphics.restore();\n            graphics.save();\n            graphics._sw._beginMarkupSequence('Tx');\n            graphics._initializeCoordinates();\n        }\n        var options = this._options;\n        var selectedIndexes = this._dictionary.get('I');\n        var i = -1;\n        if (selectedIndexes && selectedIndexes.length > 0) {\n            i = selectedIndexes[0];\n        }\n        if (i >= 0 && i < options.length) {\n            var item = options[Number.parseInt(i.toString(), 10)]; // eslint-disable-line \n            var location_1 = [0, 0];\n            var borderWidth = parameter.borderWidth;\n            var doubleBorderWidth = 2 * borderWidth;\n            var defaultPadding = 2;\n            var padding = (parameter.borderStyle === PdfBorderStyle.inset || parameter.borderStyle === PdfBorderStyle.beveled);\n            if (padding) {\n                location_1[0] = 2 * doubleBorderWidth;\n                location_1[1] = 2 * borderWidth;\n            }\n            else {\n                location_1[0] = doubleBorderWidth + defaultPadding;\n                location_1[1] = 1 * borderWidth + (defaultPadding - 1);\n            }\n            var brush = parameter.foreBrush;\n            var rect = parameter.bounds;\n            var width = rect[2] - doubleBorderWidth;\n            var rectangle = rect;\n            if (padding) {\n                rectangle[3] -= doubleBorderWidth;\n            }\n            else {\n                rectangle[3] -= borderWidth;\n            }\n            graphics.setClip(rectangle, PdfFillMode.winding);\n            if (parameter.rotationAngle === 0) {\n                var x = rect[0] + borderWidth;\n                if (padding) {\n                    x += borderWidth;\n                    width -= doubleBorderWidth;\n                }\n                brush = new PdfBrush([153, 193, 218]);\n                graphics.drawRectangle(x, location_1[1], width, rect[3], brush);\n                brush = new PdfBrush([0, 0, 0]);\n            }\n            var value = void 0;\n            if (item && Array.isArray(item)) {\n                value = item[1] ? item[1] : item[0];\n            }\n            else {\n                value = item;\n            }\n            if (value) {\n                var itemTextBound = [location_1[0], location_1[1], width - location_1[0], rect[3]];\n                if (parameter.rotationAngle > 0) {\n                    var state = graphics.save();\n                    if (parameter.rotationAngle === 90) {\n                        graphics.translateTransform(0, graphics._size[1]);\n                        graphics.rotateTransform(-90);\n                        var x_1 = graphics._size[1] - (rectangle[1] + rectangle[3]);\n                        var y = rectangle[0];\n                        rectangle = [x_1, y, rectangle[3] + rectangle[2], rectangle[2]];\n                    }\n                    else if (parameter.rotationAngle === 270) {\n                        graphics.translateTransform(graphics._size[0], 0);\n                        graphics.rotateTransform(-270);\n                        var x_2 = rectangle[1];\n                        var y = graphics._size[0] - (rectangle[0] + rectangle[2]);\n                        rectangle = [x_2, y, rectangle[3] + rectangle[2], rectangle[2]];\n                    }\n                    else if (parameter.rotationAngle === 180) {\n                        graphics.translateTransform(graphics._size[0], graphics._size[1]);\n                        graphics.rotateTransform(-180);\n                        var x_3 = graphics._size[0] - (rectangle[0] + rectangle[2]);\n                        var y = graphics._size[1] - (rectangle[1] + rectangle[3]);\n                        rectangle = [x_3, y, rectangle[2], rectangle[3]];\n                    }\n                    var x = rect[0] + borderWidth;\n                    if (padding) {\n                        x += borderWidth;\n                        width -= doubleBorderWidth;\n                    }\n                    brush = new PdfBrush([153, 193, 218]);\n                    graphics.drawRectangle(x, location_1[1], width, rect[3], brush);\n                    brush = new PdfBrush([0, 0, 0]);\n                    graphics.drawString(value, font, itemTextBound, null, brush, stringFormat);\n                    graphics.restore(state);\n                }\n                else {\n                    graphics.drawString(value, font, itemTextBound, null, brush, stringFormat);\n                }\n            }\n        }\n        if (graphics._isTemplateGraphics && parameter.required) {\n            graphics._sw._endMarkupSequence();\n            graphics.restore();\n        }\n    };\n    PdfComboBoxField.prototype._getFontHeight = function (fontFamily) {\n        var values = this._dictionary.get('I');\n        var s;\n        var itemFont;\n        var format;\n        var options;\n        var bounds;\n        var borderWidth = this.border.width;\n        if (this._isLoaded) {\n            itemFont = new PdfStandardFont(fontFamily, 12);\n            format = new PdfStringFormat(PdfTextAlignment.center, PdfVerticalAlignment.middle);\n            options = this._dictionary.getArray('Opt');\n            bounds = this.bounds;\n            var widths_1 = [];\n            if (values && values.length > 0) {\n                values.forEach(function (entry) {\n                    widths_1.push(itemFont.measureString(options[Number.parseInt(entry.toString(), 10)][1], [0, 0], format, 0, 0)[0]);\n                });\n            }\n            else if (options.length > 0) {\n                var max = itemFont.measureString(options[0][1], [0, 0], format, 0, 0)[0];\n                for (var i = 1; i < options.length; ++i) {\n                    var width = itemFont.measureString(options[Number.parseInt(i.toString(), 10)][1], [0, 0], format, 0, 0)[0];\n                    max = Math.max(max, width);\n                    widths_1.push(max);\n                }\n            }\n            s = (widths_1.length > 0) ? ((12 * (bounds.width - 4 * borderWidth)) / ((widths_1.sort())[widths_1.length - 1])) : 12;\n        }\n        else {\n            s = 0;\n            if (values && values.length > 0) {\n                itemFont = new PdfStandardFont(fontFamily, 12);\n                format = new PdfStringFormat(PdfTextAlignment.center, PdfVerticalAlignment.middle);\n                options = this._dictionary.getArray('Opt');\n                var width = itemFont.measureString(options[values[0]][1], [0, 0], format, 0, 0)[0];\n                bounds = this.bounds;\n                if (width) {\n                    s = (12 * (bounds.width - 4 * borderWidth)) / width;\n                }\n                else {\n                    s = 12;\n                }\n            }\n            else {\n                return s;\n            }\n        }\n        var fontSize = 0;\n        if (values && values.length > 0) {\n            if (s !== 12) {\n                itemFont = new PdfStandardFont(fontFamily, s);\n                var text = options[values[0]][1];\n                var textSize = itemFont.measureString(text, [0, 0], format, 0, 0);\n                if (textSize[0] > bounds.width || textSize[1] > bounds.height) {\n                    var width = bounds.width - 4 * borderWidth;\n                    var h = bounds.height - 4 * borderWidth;\n                    var min = 0.248;\n                    for (var i = 1; i <= bounds.height; i++) {\n                        itemFont._size = i;\n                        var size = itemFont.measureString(text, [0, 0], format, 0, 0);\n                        if (size[0] > bounds.width || size[1] > h) {\n                            fontSize = i;\n                            do {\n                                fontSize = fontSize - 0.001;\n                                itemFont._size = fontSize;\n                                var textWidth = itemFont.getLineWidth(text, format);\n                                if (fontSize < min) {\n                                    itemFont._size = min;\n                                    break;\n                                }\n                                size = itemFont.measureString(text, [0, 0], format, 0, 0);\n                                if (textWidth < width && size[1] < h) {\n                                    itemFont._size = fontSize;\n                                    break;\n                                }\n                            } while (fontSize > min);\n                            s = fontSize;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        else if (s > 12) {\n            s = 12;\n        }\n        return s;\n    };\n    return PdfComboBoxField;\n}(PdfListField));\nexport { PdfComboBoxField };\n/**\n * `PdfListBoxField` class represents the list box field objects.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Gets the first page of the document\n * let page: PdfPage = document.getPage(0);\n * // Access the PDF form\n * let form: PdfForm = document.form;\n * // Create a new list box field\n * let field: PdfListBoxField = new PdfListBoxField(page, 'list1', {x: 100, y: 60, width: 100, height: 50});\n * // Add list items to the field.\n * field.addItem(new PdfListFieldItem('English', 'English'));\n * field.addItem(new PdfListFieldItem('French', 'French'));\n * field.addItem(new PdfListFieldItem('German', 'German'));\n * // Sets the selected index\n * field.selectedIndex = 2;\n * // Sets the flag indicates whether the list box allows multiple selections.\n * field.multiSelect = true;\n * // Add the field into PDF form\n * form.add(field);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfListBoxField = /** @class */ (function (_super) {\n    __extends(PdfListBoxField, _super);\n    function PdfListBoxField(page, name, bounds) {\n        var _this = _super.call(this) || this;\n        if (page && name && bounds) {\n            _this._initialize(page, name, bounds);\n        }\n        return _this;\n    }\n    /**\n     * Parse an existing list box field of the PDF document.\n     *\n     * @private\n     * @param {number} form maximum length.\n     * @param {_PdfDictionary} dictionary maximum length.\n     * @param {_PdfCrossReference} crossReference maximum length.\n     * @param {_PdfReference} reference maximum length.\n     * @returns {PdfListBoxField} List box field.\n     */\n    PdfListBoxField._load = function (form, dictionary, crossReference, reference) {\n        var field = new PdfListBoxField();\n        field._isLoaded = true;\n        field._form = form;\n        field._dictionary = dictionary;\n        field._crossReference = crossReference;\n        field._ref = reference;\n        if (field._dictionary.has('Kids')) {\n            field._kids = field._dictionary.get('Kids');\n        }\n        var options = field._dictionary.getArray('Opt');\n        if (options !== null && typeof options !== 'undefined') {\n            field._listValues = new Array(options.length);\n        }\n        field._defaultIndex = 0;\n        field._parsedItems = new Map();\n        if (field._kidsCount > 0) {\n            field._retrieveOptionValue();\n        }\n        return field;\n    };\n    PdfListBoxField.prototype._retrieveOptionValue = function () {\n        if (this._dictionary.has('Opt')) {\n            var options = this._dictionary.getArray('Opt');\n            if (options && options.length > 0) {\n                var index = this._dictionary.get('I');\n                for (var i = 0; i < options.length; i++) {\n                    if (typeof index !== 'undefined' && index !== null) {\n                        this._listValues[Number.parseInt(i.toString(), 10)] = options[Number.parseInt(i.toString(), 10)][1];\n                        if (i === index) {\n                            this.itemAt(i)._text = this._listValues[Number.parseInt(i.toString(), 10)];\n                            this._selectedIndex = i;\n                        }\n                        else {\n                            this.itemAt(i)._text = this._listValues[Number.parseInt(i.toString(), 10)];\n                        }\n                    }\n                    else {\n                        this.itemAt(i)._text = '';\n                    }\n                }\n            }\n        }\n    };\n    PdfListBoxField.prototype._createAppearance = function (item) {\n        var parameter = new _PaintParameter();\n        if (item) {\n            var bounds = item.bounds;\n            var page = item._getPage();\n            if (item._isLoaded && page && typeof page.rotation !== 'undefined' && page.rotation !== PdfRotationAngle.angle0) {\n                parameter.bounds = this._rotateTextBox([bounds.x, bounds.y, bounds.width, bounds.height], page.size, page.rotation);\n            }\n            else {\n                parameter.bounds = [0, 0, bounds.width, bounds.height];\n            }\n            var backcolor = item.backColor;\n            if (backcolor) {\n                parameter.backBrush = new PdfBrush(backcolor);\n            }\n            parameter.foreBrush = new PdfBrush(item.color);\n            var border = item.border;\n            parameter.borderPen = new PdfPen(item.borderColor, border.width);\n            parameter.borderStyle = border.style;\n            parameter.borderWidth = border.width;\n            if (backcolor) {\n                var shadowColor = [backcolor[0] - 64, backcolor[1] - 64, backcolor[2] - 64];\n                var color = [shadowColor[0] >= 0 ? shadowColor[0] : 0,\n                    shadowColor[1] >= 0 ? shadowColor[1] : 0,\n                    shadowColor[2] >= 0 ? shadowColor[2] : 0];\n                parameter.shadowBrush = new PdfBrush(color);\n            }\n            parameter.rotationAngle = item.rotate;\n            var alignment = typeof item.textAlignment !== 'undefined' ? item.textAlignment : PdfTextAlignment.left;\n            var verticalAlignment = this.multiSelect ? PdfVerticalAlignment.top : PdfVerticalAlignment.middle;\n            parameter.stringFormat = new PdfStringFormat(alignment, verticalAlignment);\n        }\n        else {\n            var bounds = this.bounds;\n            if (this._isLoaded &&\n                this.page &&\n                typeof this.page.rotation !== 'undefined' &&\n                this.page.rotation !== PdfRotationAngle.angle0) {\n                parameter.bounds = this._rotateTextBox([bounds.x, bounds.y, bounds.width, bounds.height], this.page.size, this.page.rotation);\n            }\n            else {\n                parameter.bounds = [0, 0, bounds.width, bounds.height];\n            }\n            var backcolor = this.backColor;\n            if (backcolor) {\n                parameter.backBrush = new PdfBrush(backcolor);\n            }\n            parameter.foreBrush = new PdfBrush(this.color);\n            var border = this.border;\n            parameter.borderPen = new PdfPen(this.borderColor, border.width);\n            parameter.borderStyle = border.style;\n            parameter.borderWidth = border.width;\n            if (backcolor) {\n                var shadowColor = [backcolor[0] - 64, backcolor[1] - 64, backcolor[2] - 64];\n                var color = [shadowColor[0] >= 0 ? shadowColor[0] : 0,\n                    shadowColor[1] >= 0 ? shadowColor[1] : 0,\n                    shadowColor[2] >= 0 ? shadowColor[2] : 0];\n                parameter.shadowBrush = new PdfBrush(color);\n            }\n            parameter.rotationAngle = this.rotationAngle;\n            var alignment = typeof this.textAlignment !== 'undefined' ? this.textAlignment : PdfTextAlignment.left;\n            var verticalAlignment = this.multiSelect ? PdfVerticalAlignment.top : PdfVerticalAlignment.middle;\n            parameter.stringFormat = new PdfStringFormat(alignment, verticalAlignment);\n        }\n        parameter.required = this.required;\n        var template = new PdfTemplate(parameter.bounds, this._crossReference);\n        var graphics = template.graphics;\n        graphics._sw._clear();\n        if (!this.required) {\n            graphics._sw._beginMarkupSequence('Tx');\n            graphics._initializeCoordinates();\n        }\n        if (this._isLoaded) {\n            var font = this._obtainFont(item);\n            if ((typeof font === 'undefined' || font === null) || (!this._isLoaded && font.size === 1)) {\n                font = this._appearanceFont;\n            }\n            this._drawListBox(graphics, parameter, font, parameter.stringFormat);\n        }\n        else {\n            if (!this._font) {\n                this._font = this._defaultItemFont;\n            }\n            this._drawListBox(graphics, parameter, this._font, parameter.stringFormat);\n        }\n        if (!this.required) {\n            graphics._sw._endMarkupSequence();\n        }\n        return template;\n    };\n    PdfListBoxField.prototype._drawListBox = function (graphics, parameter, font, stringFormat) {\n        if (graphics._isTemplateGraphics && parameter.required) {\n            graphics.save();\n            graphics._initializeCoordinates();\n        }\n        this._drawRectangularControl(graphics, parameter);\n        if (graphics._isTemplateGraphics && parameter.required) {\n            graphics.restore();\n            graphics.save();\n            graphics._sw._beginMarkupSequence('Tx');\n            graphics._initializeCoordinates();\n        }\n        var options = this._options;\n        var _loop_1 = function (index) {\n            var item = options[Number.parseInt(index.toString(), 10)];\n            var location_2 = [];\n            var borderWidth = parameter.borderWidth;\n            var doubleBorderWidth = 2 * borderWidth;\n            var defaultPadding = 2;\n            var padding = (parameter.borderStyle === PdfBorderStyle.inset || parameter.borderStyle === PdfBorderStyle.beveled);\n            if (padding) {\n                location_2.push(2 * doubleBorderWidth);\n                location_2.push((index + 2) * borderWidth + font._metrics._getHeight() * index);\n            }\n            else {\n                location_2.push(doubleBorderWidth + defaultPadding);\n                location_2.push((index + 1) * borderWidth + font._metrics._getHeight() * index + (defaultPadding - 1));\n            }\n            var brush = parameter.foreBrush;\n            var rect = parameter.bounds;\n            var width = rect[2] - doubleBorderWidth;\n            var rectangle = rect;\n            if (padding) {\n                rectangle[3] -= doubleBorderWidth;\n            }\n            else {\n                rectangle[3] -= borderWidth;\n            }\n            graphics.setClip(rectangle, PdfFillMode.winding);\n            var selected = false;\n            var selectedIndexes = this_1._dictionary.get('I');\n            if (selectedIndexes !== null && typeof selectedIndexes !== 'undefined' && selectedIndexes.length > 0) {\n                selectedIndexes.forEach(function (selectedIndex) {\n                    selected = selected || (selectedIndex === index);\n                });\n            }\n            if (parameter.rotationAngle === 0) {\n                if (selected) {\n                    var x = rect[0] + borderWidth;\n                    if (padding) {\n                        x += borderWidth;\n                        width -= doubleBorderWidth;\n                    }\n                    brush = new PdfBrush([153, 193, 218]);\n                    graphics.drawRectangle(x, location_2[1], width, font._metrics._getHeight(), brush);\n                    brush = new PdfBrush([0, 0, 0]);\n                }\n            }\n            var value = item[1] ? item[1] : item[0];\n            var itemTextBound = [location_2[0], location_2[1], width - location_2[0], font._metrics._getHeight()];\n            if (parameter.rotationAngle > 0) {\n                var state = graphics.save();\n                if (parameter.rotationAngle === 90) {\n                    graphics.translateTransform(0, graphics._size[1]);\n                    graphics.rotateTransform(-90);\n                    var x = graphics._size[1] - (rectangle[1] + rectangle[3]);\n                    var y = rectangle[0];\n                    rectangle = [x, y, rectangle[3] + rectangle[2], rectangle[2]];\n                }\n                else if (parameter.rotationAngle === 270) {\n                    graphics.translateTransform(graphics._size[0], 0);\n                    graphics.rotateTransform(-270);\n                    var x = rectangle[1];\n                    var y = graphics._size[0] - (rectangle[0] + rectangle[2]);\n                    rectangle = [x, y, rectangle[3] + rectangle[2], rectangle[2]];\n                }\n                else if (parameter.rotationAngle === 180) {\n                    graphics.translateTransform(graphics._size[0], graphics._size[1]);\n                    graphics.rotateTransform(-180);\n                    var x = graphics._size[0] - (rectangle[0] + rectangle[2]);\n                    var y = graphics._size[1] - (rectangle[1] + rectangle[3]);\n                    rectangle = [x, y, rectangle[2], rectangle[3]];\n                }\n                if (selected) {\n                    var x = rect[0] + borderWidth;\n                    if (padding) {\n                        x += borderWidth;\n                        width -= doubleBorderWidth;\n                    }\n                    brush = new PdfBrush([153, 193, 218]);\n                    graphics.drawRectangle(x, location_2[1], width, font._metrics._getHeight(), brush);\n                    brush = new PdfBrush([0, 0, 0]);\n                }\n                graphics.drawString(value, font, itemTextBound, null, brush, stringFormat);\n                graphics.restore(state);\n            }\n            else {\n                graphics.drawString(value, font, itemTextBound, null, brush, stringFormat);\n            }\n        };\n        var this_1 = this;\n        for (var index = 0; index < options.length; ++index) {\n            _loop_1(index);\n        }\n        if (graphics._isTemplateGraphics && parameter.required) {\n            graphics._sw._endMarkupSequence();\n            graphics.restore();\n        }\n    };\n    PdfListBoxField.prototype._getFontHeight = function (fontFamily) {\n        var itemFont = new PdfStandardFont(fontFamily, 12, PdfFontStyle.regular);\n        var format = new PdfStringFormat(PdfTextAlignment.left, PdfVerticalAlignment.middle);\n        var s = 0;\n        if (this._listValues.length > 0) {\n            var max = itemFont.measureString(this._listValues[0], [0, 0], format, 0, 0)[0];\n            for (var i = 1; i < this._listValues.length; ++i) {\n                var value = itemFont.measureString(this._listValues[Number.parseInt(i.toString(), 10)], [0, 0], format, 0, 0)[0];\n                max = (max > value) ? max : value;\n            }\n            s = ((12 * (this.bounds.width - 4 * this.border.width)) / max);\n            s = (s > 12) ? 12 : s;\n        }\n        return s;\n    };\n    return PdfListBoxField;\n}(PdfListField));\nexport { PdfListBoxField };\n/**\n * `PdfSignatureField` class represents the signature field objects.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Gets the first page of the document\n * let page: PdfPage = document.getPage(0);\n * // Access the PDF form\n * let form: PdfForm = document.form;\n * // Create a new signature field\n * let field: PdfSignatureField = new PdfSignatureField(page, 'Signature', {x: 10, y: 10, width: 100, height: 50});\n * // Add the field into PDF form\n * form.add(field);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfSignatureField = /** @class */ (function (_super) {\n    __extends(PdfSignatureField, _super);\n    function PdfSignatureField(page, name, bounds) {\n        var _this = _super.call(this) || this;\n        _this._isSigned = false;\n        if (page && name && bounds) {\n            _this._initialize(page, name, bounds);\n        }\n        return _this;\n    }\n    Object.defineProperty(PdfSignatureField.prototype, \"isSigned\", {\n        /**\n         * Gets the flag to indicate whether the field is signed or not.\n         *\n         * @returns {boolean} Returns true if the field is signed; otherwise, false.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the loaded signature field\n         * let field: PdfSignatureField = document.form.fieldAt(0) as PdfSignatureField;\n         * // Get the signed status of the field\n         * let isSigned: boolean = field.isSigned;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (!this._isSigned) {\n                this._checkSigned();\n            }\n            return this._isSigned;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfSignatureField.prototype, \"backColor\", {\n        /**\n         * Gets the background color of the field.\n         *\n         * @returns {number[]} R, G, B color values in between 0 to 255.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the form field at index 0\n         * let field: PdfField = document.form.fieldAt(0);\n         * // Gets the background color of the field.\n         * let backColor: number[] = field.backColor;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._parseBackColor(true);\n        },\n        /**\n         * Sets the background color of the field.\n         *\n         * @param {number[]} value Array with R, G, B, A color values in between 0 to 255. For optional A (0-254), it signifies transparency.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the signature field at index 0\n         * let field1: PdfField = document.form.fieldAt(0);\n         * // Sets the background color of the field.\n         * field1.backColor = [255, 0, 0];\n         * // Access the signature field at index 1\n         * let field2: PdfField = document.form.fieldAt(1);\n         * // Sets the background color of the field to transparent.\n         * field2.backColor = [0, 0, 0, 0];\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._updateBackColor(value, true);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfSignatureField._load = function (form, dictionary, crossReference, reference) {\n        var field = new PdfSignatureField();\n        field._isLoaded = true;\n        field._form = form;\n        field._dictionary = dictionary;\n        field._crossReference = crossReference;\n        field._ref = reference;\n        if (field._dictionary.has('Kids')) {\n            field._kids = field._dictionary.get('Kids');\n        }\n        field._defaultIndex = 0;\n        field._parsedItems = new Map();\n        return field;\n    };\n    PdfSignatureField.prototype._initialize = function (page, name, bounds) {\n        this._crossReference = page._crossReference;\n        this._page = page;\n        this._name = name;\n        this._dictionary = new _PdfDictionary(this._crossReference);\n        this._ref = this._crossReference._getNextReference();\n        this._crossReference._cacheMap.set(this._ref, this._dictionary);\n        this._dictionary.objId = this._ref.toString();\n        this._dictionary.update('FT', _PdfName.get('Sig'));\n        this._dictionary.update('T', name);\n        this._defaultIndex = 0;\n        this._initializeFont(this._defaultFont);\n        this._createItem(bounds);\n    };\n    PdfSignatureField.prototype._createItem = function (bounds) {\n        var widget = new PdfWidgetAnnotation();\n        widget._create(this._page, bounds, this);\n        widget._dictionary.update('MK', new _PdfDictionary(this._crossReference));\n        widget._mkDictionary.update('BC', [0, 0, 0]);\n        widget._mkDictionary.update('BG', [1, 1, 1]);\n        widget._dictionary.update('DA', this._fontName + \" 8 Tf 0 0 0 rg\");\n        this._addToKid(widget);\n    };\n    PdfSignatureField.prototype._doPostProcess = function (isFlatten) {\n        if (isFlatten === void 0) { isFlatten = false; }\n        var needAppearance = this._setAppearance || this._form._setAppearance;\n        if (!this._isLoaded && (isFlatten || needAppearance)) {\n            var count = this._kidsCount;\n            if (count > 0) {\n                for (var i = 0; i < count; i++) {\n                    var item = this.itemAt(i);\n                    if (item && item._dictionary && (needAppearance || (isFlatten && !item._dictionary.has('AP')))) {\n                        var template = this._createAppearance(item, isFlatten);\n                        this._addAppearance(item._dictionary, template, 'N');\n                    }\n                }\n            }\n        }\n        if (isFlatten) {\n            var count = this._kidsCount;\n            if (count > 0) {\n                var firstItemTemplate = void 0;\n                for (var i = 0; i < count; i++) {\n                    var item = this.itemAt(i);\n                    if (item && item._dictionary) {\n                        var page = item._getPage();\n                        if (page) {\n                            if (!firstItemTemplate && i === 0) {\n                                firstItemTemplate = this._getItemTemplate(item._dictionary);\n                            }\n                            this._flattenSignature(item._dictionary, page, item.bounds, firstItemTemplate);\n                        }\n                    }\n                }\n            }\n            else {\n                this._flattenSignature(this._dictionary, this.page, this.bounds);\n            }\n        }\n    };\n    PdfSignatureField.prototype._createAppearance = function (widget, isFlatten) {\n        var bounds = widget.bounds;\n        var template = new PdfTemplate([0, 0, bounds.width, bounds.height], this._crossReference);\n        _setMatrix(template, null);\n        template._writeTransformation = false;\n        var graphics = template.graphics;\n        var parameter = new _PaintParameter();\n        parameter.bounds = [0, 0, bounds.width, bounds.height];\n        var backcolor = widget.backColor;\n        if (isFlatten && backcolor) {\n            parameter.backBrush = new PdfBrush(backcolor);\n        }\n        parameter.foreBrush = new PdfBrush(widget.color);\n        var border = widget.border;\n        parameter.borderPen = new PdfPen(widget.borderColor, border.width);\n        parameter.borderStyle = border.style;\n        parameter.borderWidth = border.width;\n        if (backcolor) {\n            var shadowColor = [backcolor[0] - 64, backcolor[1] - 64, backcolor[2] - 64];\n            var color = [shadowColor[0] >= 0 ? shadowColor[0] : 0,\n                shadowColor[1] >= 0 ? shadowColor[1] : 0,\n                shadowColor[2] >= 0 ? shadowColor[2] : 0];\n            parameter.shadowBrush = new PdfBrush(color);\n        }\n        parameter.rotationAngle = widget.rotate;\n        graphics.save();\n        graphics._initializeCoordinates();\n        this._drawRectangularControl(graphics, parameter);\n        graphics.restore();\n        return template;\n    };\n    PdfSignatureField.prototype._flattenSignature = function (dictionary, page, bounds, signatureTemplate) {\n        var template;\n        if (dictionary.has('AP')) {\n            var appearanceDictionary = dictionary.get('AP');\n            if (appearanceDictionary && appearanceDictionary.has('N')) {\n                var appearanceStream = appearanceDictionary.get('N');\n                var reference = appearanceDictionary.getRaw('N');\n                if (reference && appearanceStream) {\n                    appearanceStream.reference = reference;\n                }\n                if (appearanceStream) {\n                    if (signatureTemplate) {\n                        template = signatureTemplate;\n                    }\n                    else {\n                        template = new PdfTemplate(appearanceStream, this._crossReference);\n                    }\n                    if (template && page) {\n                        var graphics = page.graphics;\n                        var state = graphics.save();\n                        if (page.rotation !== PdfRotationAngle.angle0) {\n                            graphics._drawTemplate(template, this._calculateTemplateBounds(bounds, page, template, graphics));\n                        }\n                        else {\n                            graphics._drawTemplate(template, bounds);\n                        }\n                        graphics.restore(state);\n                    }\n                }\n            }\n        }\n        else if (signatureTemplate && page) {\n            var graphics = page.graphics;\n            var state = graphics.save();\n            if (page.rotation !== PdfRotationAngle.angle0) {\n                graphics._drawTemplate(template, this._calculateTemplateBounds(bounds, page, template, graphics));\n            }\n            else {\n                graphics._drawTemplate(template, bounds);\n            }\n            graphics.restore(state);\n        }\n    };\n    PdfSignatureField.prototype._calculateTemplateBounds = function (bounds, page, template, graphics) {\n        var x = bounds.x;\n        var y = bounds.y;\n        if (page) {\n            var graphicsRotation = this._obtainGraphicsRotation(graphics._matrix);\n            if (graphicsRotation === 90) {\n                graphics.translateTransform(template._size[1], 0);\n                graphics.rotateTransform(90);\n                x = bounds.x;\n                y = -(page._size[1] - bounds.y - bounds.height);\n            }\n            else if (graphicsRotation === 180) {\n                graphics.translateTransform(template._size[0], template._size[1]);\n                graphics.rotateTransform(180);\n                x = -(page._size[0] - (bounds.x + template._size[0]));\n                y = -(page._size[1] - bounds.y - template._size[1]);\n            }\n            else if (graphicsRotation === 270) {\n                graphics.translateTransform(0, template._size[0]);\n                graphics.rotateTransform(270);\n                x = -(page._size[0] - bounds.x - bounds.width);\n                y = bounds.y;\n            }\n        }\n        return { x: x, y: y, width: bounds.width, height: bounds.height };\n    };\n    PdfSignatureField.prototype._obtainGraphicsRotation = function (matrix) {\n        var angle = Math.round(Math.atan2(matrix._matrix._elements[2], matrix._matrix._elements[0]) * 180 / Math.PI);\n        switch (angle) {\n            case -90:\n                angle = 90;\n                break;\n            case -180:\n                angle = 180;\n                break;\n            case 90:\n                angle = 270;\n                break;\n        }\n        return angle;\n    };\n    PdfSignatureField.prototype._getItemTemplate = function (dictionary) {\n        var template;\n        if (dictionary.has('AP')) {\n            var appearanceDictionary = dictionary.get('AP');\n            if (appearanceDictionary && appearanceDictionary.has('N')) {\n                var appearanceStream = appearanceDictionary.get('N');\n                var reference = appearanceDictionary.getRaw('N');\n                if (reference) {\n                    appearanceStream.reference = reference;\n                }\n                if (appearanceStream) {\n                    template = new PdfTemplate(appearanceStream, this._crossReference);\n                }\n            }\n        }\n        return template;\n    };\n    PdfSignatureField.prototype._checkSigned = function () {\n        if (this._dictionary && this._dictionary.has('V')) {\n            var dictionary = this._dictionary.get('V');\n            if (dictionary !== null && typeof dictionary !== 'undefined' && dictionary.size > 0) {\n                this._isSigned = true;\n            }\n        }\n    };\n    return PdfSignatureField;\n}(PdfField));\nexport { PdfSignatureField };\nvar _PdfDefaultAppearance = /** @class */ (function () {\n    function _PdfDefaultAppearance(da) {\n        var color;\n        var fontName = '';\n        var fontSize = 0;\n        if (da && typeof da === 'string' && da !== '') {\n            var sliced = da.split(' ');\n            for (var i = 0; i < sliced.length; i++) {\n                switch (sliced[Number.parseInt(i.toString(), 10)]) {\n                    case 'g':\n                        color = [Number.parseFloat(sliced[i - 1])];\n                        break;\n                    case 'rg':\n                        color = [Number.parseFloat(sliced[i - 3]), Number.parseFloat(sliced[i - 2]), Number.parseFloat(sliced[i - 1])];\n                        break;\n                    case 'k':\n                        color = [Number.parseFloat(sliced[i - 4]), Number.parseFloat(sliced[i - 3]), Number.parseFloat(sliced[i - 2]),\n                            Number.parseFloat(sliced[i - 1])];\n                        break;\n                    case 'Tf':\n                        fontSize = Number.parseFloat(sliced[i - 1]);\n                        fontName = sliced[i - 2].substring(1);\n                        if (fontName.includes('#2C')) {\n                            fontName.replace('#2C', ',');\n                        }\n                        break;\n                }\n            }\n        }\n        this.fontName = fontName;\n        this.fontSize = fontSize;\n        this.color = (typeof color !== 'undefined') ? _parseColor(color) : [0, 0, 0];\n    }\n    _PdfDefaultAppearance.prototype.toString = function () {\n        var color = [Number.parseFloat((this.color[0] / 255).toFixed(3)),\n            Number.parseFloat((this.color[1] / 255).toFixed(3)),\n            Number.parseFloat((this.color[2] / 255).toFixed(3))];\n        return '/' +\n            this.fontName +\n            ' ' +\n            this.fontSize +\n            ' Tf ' +\n            color[0].toString() +\n            ' ' +\n            color[1].toString() +\n            ' ' +\n            color[2].toString() +\n            ' rg';\n    };\n    return _PdfDefaultAppearance;\n}());\nexport { _PdfDefaultAppearance };\n"],"mappings":"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CJ,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQnX,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,IAAI,CAACiX,WAAW,KAAKjX,KAAK,EAAE;QAC5B,IAAI,CAACkX,YAAY,GAAGlX,KAAK;QACzB,IAAIA,KAAK,EAAE;UACP,IAAI,CAACsD,WAAW,IAAIzG,UAAU,CAACoa,WAAW;QAC9C,CAAC,MACI;UACD,IAAI,CAAC3T,WAAW,IAAI,CAACzG,UAAU,CAACoa,WAAW;QAC/C;MACJ;IACJ,CAAC;IACD9X,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF9E,MAAM,CAACyE,cAAc,CAACwX,YAAY,CAACzb,SAAS,EAAE,UAAU,EAAE;IACtD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQkE,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI,IAAI,CAACsB,SAAS,EAAE;QAChB,OAAO,CAAC,IAAI,CAACgD,WAAW,GAAGzG,UAAU,CAACsa,IAAI,MAAM,CAAC;MACrD,CAAC,MACI;QACD,OAAO,IAAI,CAACC,SAAS;MACzB;IACJ,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQrX,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,IAAI,CAACoX,SAAS,KAAKpX,KAAK,EAAE;QAC1B,IAAI,CAACoX,SAAS,GAAGpX,KAAK;QACtB,IAAIA,KAAK,EAAE;UACP,IAAI,CAACsD,WAAW,IAAIzG,UAAU,CAACsa,IAAI;QACvC,CAAC,MACI;UACD,IAAI,CAAC7T,WAAW,IAAI,CAACzG,UAAU,CAACsa,IAAI;QACxC;MACJ;IACJ,CAAC;IACDhY,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF9E,MAAM,CAACyE,cAAc,CAACwX,YAAY,CAACzb,SAAS,EAAE,MAAM,EAAE;IAClD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQkE,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI,IAAI,CAAC2J,KAAK,EAAE;QACZ,OAAO,IAAI,CAACA,KAAK;MACrB,CAAC,MACI;QACD,IAAInI,MAAM,GAAG,IAAI,CAACC,MAAM,CAAC,IAAI,CAACC,aAAa,CAAC;QAC5C,IAAI,CAACiI,KAAK,GAAGjM,kBAAkB,CAAC,IAAI,CAAC2C,KAAK,EAAEmB,MAAM,EAAE,IAAI,CAAC;MAC7D;MACA,OAAO,IAAI,CAACmI,KAAK;IACrB,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ5I,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAIA,KAAK,IAAIA,KAAK,YAAYlC,OAAO,EAAE;QACnC,IAAI,CAAC6K,KAAK,GAAG3I,KAAK;QAClB,IAAI,CAACyI,eAAe,CAACzI,KAAK,CAAC;MAC/B;IACJ,CAAC;IACDb,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF9E,MAAM,CAACyE,cAAc,CAACwX,YAAY,CAACzb,SAAS,EAAE,eAAe,EAAE;IAC3D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQkE,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACuQ,iBAAiB,CAAC,CAAC;IACnC,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQxP,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,IAAI,CAACwP,cAAc,KAAKxP,KAAK,EAAE;QAC/B,IAAI,CAAC0P,iBAAiB,CAAC1P,KAAK,CAAC;MACjC;IACJ,CAAC;IACDb,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF9E,MAAM,CAACyE,cAAc,CAACwX,YAAY,CAACzb,SAAS,EAAE,WAAW,EAAE;IACvD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQkE,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAAC0D,eAAe,CAAC,IAAI,CAAC;IACrC,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ3C,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAAC2C,gBAAgB,CAAC3C,KAAK,EAAE,IAAI,CAAC;IACtC,CAAC;IACDb,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF9E,MAAM,CAACyE,cAAc,CAACwX,YAAY,CAACzb,SAAS,EAAE,UAAU,EAAE;IACtDkE,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI,CAAC,IAAI,CAACqY,YAAY,EAAE;QACpB,IAAI,IAAI,CAAC7X,WAAW,CAACG,GAAG,CAAC,KAAK,CAAC,EAAE;UAC7B,IAAI,CAAC0X,YAAY,GAAG,IAAI,CAAC7X,WAAW,CAACwD,QAAQ,CAAC,KAAK,CAAC;QACxD,CAAC,MACI;UACD,IAAI,CAACqU,YAAY,GAAG,EAAE;UACtB,IAAI,CAAC7X,WAAW,CAACU,MAAM,CAAC,KAAK,EAAE,IAAI,CAACmX,YAAY,CAAC;QACrD;MACJ;MACA,OAAO,IAAI,CAACA,YAAY;IAC5B,CAAC;IACDlY,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACImX,YAAY,CAACzb,SAAS,CAAC2F,MAAM,GAAG,UAAU8E,KAAK,EAAE;IAC7C,IAAIiB,IAAI;IACR,IAAIjB,KAAK,GAAG,IAAI,CAACpD,UAAU,EAAE;MACzB,IAAI,IAAI,CAAC4E,YAAY,CAACpH,GAAG,CAAC4F,KAAK,CAAC,EAAE;QAC9BiB,IAAI,GAAG,IAAI,CAACO,YAAY,CAAC/H,GAAG,CAACuG,KAAK,CAAC;MACvC,CAAC,MACI;QACD,IAAIzC,UAAU,GAAG,KAAK,CAAC;QACvB,IAAI6B,SAAS,GAAG,IAAI,CAAC1F,KAAK,CAACkE,MAAM,CAACyB,QAAQ,CAACW,KAAK,CAAC9C,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACjE,IAAIkC,SAAS,IAAIA,SAAS,YAAY1J,aAAa,EAAE;UACjD6H,UAAU,GAAG,IAAI,CAACI,eAAe,CAAC8D,MAAM,CAACrC,SAAS,CAAC;QACvD;QACA,IAAI7B,UAAU,EAAE;UACZ0D,IAAI,GAAGlL,gBAAgB,CAAC2L,KAAK,CAACnE,UAAU,EAAE,IAAI,CAACI,eAAe,EAAE,IAAI,CAAC;UACrEsD,IAAI,CAACwH,MAAM,GAAGzI,KAAK;UACnBiB,IAAI,CAACzB,IAAI,GAAGJ,SAAS;UACrB,IAAI,IAAI,CAACiK,QAAQ,IAAI,IAAI,CAACA,QAAQ,CAAC1P,MAAM,GAAG,CAAC,IAAIqG,KAAK,GAAG,IAAI,CAACqJ,QAAQ,CAAC1P,MAAM,EAAE;YAC3EsH,IAAI,CAACmI,KAAK,GAAG,IAAI,CAACC,QAAQ,CAACzL,MAAM,CAACyB,QAAQ,CAACW,KAAK,CAAC9C,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;UACxE,CAAC,MACI;YACD+D,IAAI,CAACmI,KAAK,GAAG,EAAE;UACnB;UACA,IAAI,CAAC5H,YAAY,CAAChH,GAAG,CAACwF,KAAK,EAAEiB,IAAI,CAAC;QACtC;MACJ;IACJ,CAAC,MACI;MACD,IAAI,IAAI,CAACO,YAAY,CAACpH,GAAG,CAAC4F,KAAK,CAAC,EAAE;QAC9BiB,IAAI,GAAG,IAAI,CAACO,YAAY,CAAC/H,GAAG,CAACuG,KAAK,CAAC;MACvC,CAAC,MACI,IAAI,IAAI,CAACpD,UAAU,GAAG,CAAC,IAAI,IAAI,CAAClD,KAAK,IAAI,IAAI,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;QACjE,IAAI4D,UAAU,GAAG,KAAK,CAAC;QACvB,IAAI6B,SAAS,GAAG,KAAK,CAAC;QACtB,IAAI,IAAI,CAACxC,UAAU,KAAK,CAAC,EAAE;UACvBwC,SAAS,GAAG,IAAI,CAAC1F,KAAK,CAAC,CAAC,CAAC;QAC7B,CAAC,MACI;UACD0F,SAAS,GAAG,IAAI,CAAC1F,KAAK,CAACkE,MAAM,CAACyB,QAAQ,CAACW,KAAK,CAAC9C,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACjE;QACA,IAAIkC,SAAS,IAAIA,SAAS,YAAY1J,aAAa,EAAE;UACjD6H,UAAU,GAAG,IAAI,CAACI,eAAe,CAAC8D,MAAM,CAACrC,SAAS,CAAC;QACvD;QACA,IAAI7B,UAAU,EAAE;UACZ0D,IAAI,GAAGlL,gBAAgB,CAAC2L,KAAK,CAACnE,UAAU,EAAE,IAAI,CAACI,eAAe,EAAE,IAAI,CAAC;UACrEsD,IAAI,CAACwH,MAAM,GAAGzI,KAAK;UACnBiB,IAAI,CAACzB,IAAI,GAAGJ,SAAS;UACrB,IAAI,IAAI,CAACiK,QAAQ,IAAI,IAAI,CAACA,QAAQ,CAAC1P,MAAM,GAAG,CAAC,IAAIqG,KAAK,GAAG,IAAI,CAACqJ,QAAQ,CAAC1P,MAAM,EAAE;YAC3EsH,IAAI,CAACmI,KAAK,GAAG,IAAI,CAACC,QAAQ,CAACzL,MAAM,CAACyB,QAAQ,CAACW,KAAK,CAAC9C,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;UACxE,CAAC,MACI;YACD+D,IAAI,CAACmI,KAAK,GAAG,EAAE;UACnB;UACA,IAAI,CAAC5H,YAAY,CAAChH,GAAG,CAACwF,KAAK,EAAEiB,IAAI,CAAC;QACtC;MACJ;IACJ;IACA,OAAOA,IAAI;EACf,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI+P,YAAY,CAACzb,SAAS,CAACwc,OAAO,GAAG,UAAU9Q,IAAI,EAAE;IAC7C,IAAI,CAAC+H,aAAa,CAAC/H,IAAI,EAAE,IAAI,CAAC;IAC9B,OAAO,IAAI,CAACkI,WAAW,CAACxP,MAAM,GAAG,CAAC;EACtC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIqX,YAAY,CAACzb,SAAS,CAACyM,YAAY,GAAG,UAAUhC,KAAK,EAAE;IACnD,IAAIiB,IAAI,GAAG,IAAI,CAAC/F,MAAM,CAAC8E,KAAK,CAAC;IAC7B,IAAIiB,IAAI,IAAIA,IAAI,CAACzB,IAAI,EAAE;MACnB,IAAI,CAACgC,YAAY,CAACa,MAAM,CAACrC,KAAK,CAAC;MAC/B,IAAI,IAAI,CAACwB,YAAY,CAACc,IAAI,GAAG,CAAC,EAAE;QAC5B,IAAI0P,aAAa,GAAG,IAAIxP,GAAG,CAAC,CAAC;QAC7B,IAAI,CAAChB,YAAY,CAACiB,OAAO,CAAC,UAAUhI,KAAK,EAAEiI,GAAG,EAAE;UAC5C,IAAIA,GAAG,GAAG1C,KAAK,EAAE;YACbgS,aAAa,CAACxX,GAAG,CAACkI,GAAG,GAAG,CAAC,EAAEjI,KAAK,CAAC;UACrC,CAAC,MACI;YACDuX,aAAa,CAACxX,GAAG,CAACkI,GAAG,EAAEjI,KAAK,CAAC;UACjC;QACJ,CAAC,CAAC;QACF,IAAI,CAAC+G,YAAY,GAAGwQ,aAAa;MACrC;MACA,IAAI,IAAI,CAAC/X,WAAW,CAACG,GAAG,CAAC,KAAK,CAAC,EAAE;QAC7B,IAAIsW,OAAO,GAAG,IAAI,CAACrH,QAAQ;QAC3B,IAAIqH,OAAO,IAAIA,OAAO,CAAC/W,MAAM,GAAG,CAAC,EAAE;UAC/B+W,OAAO,CAACtO,MAAM,CAACpC,KAAK,EAAE,CAAC,CAAC;UACxB,IAAI,CAAC/F,WAAW,CAACO,GAAG,CAAC,KAAK,EAAEkW,OAAO,CAAC;UACpC,IAAI,CAACoB,YAAY,GAAGpB,OAAO;UAC3B,IAAI,CAACzW,WAAW,CAAC+B,QAAQ,GAAG,IAAI;QACpC;MACJ;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIgV,YAAY,CAACzb,SAAS,CAACoN,UAAU,GAAG,UAAU1B,IAAI,EAAE;IAChD,IAAIA,IAAI,IAAIA,IAAI,CAAC2J,IAAI,EAAE;MACnB,IAAI5K,KAAK,GAAG,KAAK,CAAC;MAClB,KAAK,IAAIrD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACsF,UAAU,EAAEtF,CAAC,EAAE,EAAE;QACtC,IAAIsV,SAAS,GAAG,IAAI,CAAC/W,MAAM,CAACyB,CAAC,CAAC;QAC9B,IAAIsV,SAAS,IAAIhR,IAAI,KAAKgR,SAAS,IAAIA,SAAS,CAACrH,IAAI,KAAK3J,IAAI,CAAC2J,IAAI,EAAE;UACjE5K,KAAK,GAAGrD,CAAC;UACT;QACJ;MACJ;MACA,IAAIqD,KAAK,KAAK,CAAC,CAAC,EAAE;QACd,IAAI,CAACgC,YAAY,CAAChC,KAAK,CAAC;MAC5B;IACJ;EACJ,CAAC;EACDgR,YAAY,CAACzb,SAAS,CAACmV,WAAW,GAAG,UAAUxO,IAAI,EAAEoC,IAAI,EAAEnC,MAAM,EAAE;IAC/D,IAAI,CAAChB,aAAa,GAAG,CAAC;IACtB,IAAI,CAACwC,eAAe,GAAGzB,IAAI,CAACyB,eAAe;IAC3C,IAAI,CAAC1B,KAAK,GAAGC,IAAI;IACjB,IAAI,CAACnC,KAAK,GAAGuE,IAAI;IACjB,IAAI,CAACrE,WAAW,GAAG,IAAIxE,cAAc,CAAC,IAAI,CAACkI,eAAe,CAAC;IAC3D,IAAI,CAAC6B,IAAI,GAAG,IAAI,CAAC7B,eAAe,CAACgG,iBAAiB,CAAC,CAAC;IACpD,IAAI,CAAChG,eAAe,CAACkG,SAAS,CAACrJ,GAAG,CAAC,IAAI,CAACgF,IAAI,EAAE,IAAI,CAACvF,WAAW,CAAC;IAC/D,IAAI,CAACA,WAAW,CAACkS,KAAK,GAAG,IAAI,CAAC3M,IAAI,CAACtC,QAAQ,CAAC,CAAC;IAC7C,IAAI,CAACjD,WAAW,CAACU,MAAM,CAAC,IAAI,EAAEhF,QAAQ,CAAC8D,GAAG,CAAC,IAAI,CAAC,CAAC;IACjD,IAAI,CAACQ,WAAW,CAACU,MAAM,CAAC,GAAG,EAAE2D,IAAI,CAAC;IAClC,IAAI,CAACkD,YAAY,GAAG,IAAIgB,GAAG,CAAC,CAAC;IAC7B,IAAI,CAAC2G,WAAW,GAAG,EAAE;IACrB,IAAI,CAACzP,KAAK,GAAG,EAAE;IACf,IAAI,CAACyC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAAC+V,eAAe,CAAC,CAAC;EAC1B,CAAC;EACDlB,YAAY,CAACzb,SAAS,CAAC4c,WAAW,GAAG,UAAUlR,IAAI,EAAE;IACjD,IAAImR,UAAU,GAAG,EAAE;IACnB,IAAInO,QAAQ,GAAG,CAAC;IAChB,IAAIhD,IAAI,KAAKA,IAAI,CAAChH,WAAW,CAACG,GAAG,CAAC,IAAI,CAAC,IAAI6G,IAAI,CAAChH,WAAW,CAACG,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE;MACpE,IAAI6G,IAAI,CAAChH,WAAW,CAACG,GAAG,CAAC,IAAI,CAAC,EAAE;QAC5B,IAAIiY,UAAU,GAAGpR,IAAI,CAAChH,WAAW,CAACR,GAAG,CAAC,IAAI,CAAC,CAAC6Y,KAAK,CAAC,GAAG,CAAC;QACtD,KAAK,IAAI3V,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0V,UAAU,CAAC1Y,MAAM,EAAEgD,CAAC,EAAE,EAAE;UACxC,IAAI8D,KAAK,GAAG4R,UAAU,CAACzU,MAAM,CAACyB,QAAQ,CAAC1C,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAACoV,KAAK,CAAC,GAAG,CAAC;UACpE,IAAID,UAAU,CAACzU,MAAM,CAACyB,QAAQ,CAAC1C,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAACqC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE;YAC7E6S,UAAU,GAAG3R,KAAK,CAAC,CAAC,CAAC;UACzB,CAAC,MACI,IAAI4R,UAAU,CAACzU,MAAM,CAACyB,QAAQ,CAAC1C,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAACqC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE;YAChF,IAAIkB,KAAK,CAAC,CAAC,CAAC,CAAC8R,QAAQ,CAAC,IAAI,CAAC,EAAE;cACzBtO,QAAQ,GAAGrG,MAAM,CAACC,UAAU,CAAC4C,KAAK,CAAC,CAAC,CAAC,CAAC+R,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAC5D;UACJ,CAAC,MACI,IAAIH,UAAU,CAACzU,MAAM,CAACyB,QAAQ,CAAC1C,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAACqC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,IAAI8S,UAAU,CAACzU,MAAM,CAACyB,QAAQ,CAAC1C,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAACqC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;YACzJ,IAAIkT,MAAM,GAAGhS,KAAK,CAAC,CAAC,CAAC;YACrB,IAAI6R,KAAK,GAAGG,MAAM,CAACH,KAAK,CAAC,GAAG,CAAC;YAC7B,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,CAAC3Y,MAAM,EAAE+Y,CAAC,EAAE,EAAE;cACnC,IAAIJ,KAAK,CAAC1U,MAAM,CAACyB,QAAQ,CAACqT,CAAC,CAACxV,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,EAAE,IAAI,CAACoV,KAAK,CAAC1U,MAAM,CAACyB,QAAQ,CAACqT,CAAC,CAACxV,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAACqV,QAAQ,CAAC,IAAI,CAAC,EAAE;gBAC7GH,UAAU,IAAIE,KAAK,CAAC1U,MAAM,CAACyB,QAAQ,CAACqT,CAAC,CAACxV,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG;cAChE;cACA,IAAIoV,KAAK,CAAC1U,MAAM,CAACyB,QAAQ,CAACqT,CAAC,CAACxV,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAACqV,QAAQ,CAAC,IAAI,CAAC,EAAE;gBACzDtO,QAAQ,GAAGrG,MAAM,CAACC,UAAU,CAACyU,KAAK,CAAC1U,MAAM,CAACyB,QAAQ,CAACqT,CAAC,CAACxV,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAACsV,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;cAC5F;YACJ;YACA,OAAOJ,UAAU,KAAK,GAAG,IAAIA,UAAU,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;cACnDH,UAAU,GAAGA,UAAU,CAACO,SAAS,CAAC,CAAC,EAAEP,UAAU,CAACzY,MAAM,GAAG,CAAC,CAAC;YAC/D;YACA,IAAIyY,UAAU,CAAC7S,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;cAChC6S,UAAU,GAAGA,UAAU,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACzC;UACJ;QACJ;MACJ,CAAC,MACI;QACD,IAAI7X,KAAK,GAAGwG,IAAI,CAAChH,WAAW,CAACR,GAAG,CAAC,IAAI,CAAC;QACtC,IAAIgB,KAAK,IAAIA,KAAK,KAAK,EAAE,IAAIA,KAAK,CAAC8E,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;UACrD,IAAIqT,cAAc,GAAGnY,KAAK,CAAC6X,KAAK,CAAC,GAAG,CAAC;UACrC,KAAK,IAAI3V,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiW,cAAc,CAACjZ,MAAM,EAAEgD,CAAC,EAAE,EAAE;YAC5C,IAAIiW,cAAc,CAAChV,MAAM,CAACyB,QAAQ,CAAC1C,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAACqC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;cACxE6S,UAAU,GAAGQ,cAAc,CAACjW,CAAC,GAAG,CAAC,CAAC;cAClC,OAAOyV,UAAU,KAAK,EAAE,IAAIA,UAAU,CAACzY,MAAM,GAAG,CAAC,IAAIyY,UAAU,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;gBACxEA,UAAU,GAAGA,UAAU,CAACO,SAAS,CAAC,CAAC,CAAC;cACxC;cACA1O,QAAQ,GAAGrG,MAAM,CAACC,UAAU,CAAC+U,cAAc,CAACjW,CAAC,GAAG,CAAC,CAAC,CAAC;YACvD;UACJ;UACA,IAAIJ,MAAM,GAAG,GAAG;UAChB,IAAI0H,QAAQ,KAAK,CAAC,EAAE;YAChB,IAAId,IAAI,GAAG,IAAI7K,eAAe,CAACD,aAAa,CAACW,SAAS,EAAEuD,MAAM,CAAC;YAC/D,IAAI4G,IAAI,KAAK,IAAI,EAAE;cACf5G,MAAM,GAAG,IAAI,CAACsW,cAAc,CAAC1P,IAAI,CAAC2P,WAAW,CAAC;cAC9C,IAAIlV,MAAM,CAACmV,KAAK,CAACxW,MAAM,CAAC,IAAIA,MAAM,KAAK,CAAC,EAAE;gBACtCA,MAAM,GAAG,EAAE;cACf;cACA4G,IAAI,CAACe,KAAK,GAAG3H,MAAM;cACnB0H,QAAQ,GAAG1H,MAAM;YACrB;UACJ;QACJ;MACJ;MACA6V,UAAU,GAAGA,UAAU,CAACY,IAAI,CAAC,CAAC;MAC9B,QAAQZ,UAAU;QACd,KAAK,MAAM;UACP,IAAI,CAAChP,KAAK,GAAG,IAAI9K,eAAe,CAACD,aAAa,CAACW,SAAS,EAAEiL,QAAQ,EAAEzL,YAAY,CAACU,OAAO,CAAC;UACzF;QACJ,KAAK,SAAS;QACd,KAAK,MAAM;UACP,IAAI,CAACkK,KAAK,GAAG,IAAI9K,eAAe,CAACD,aAAa,CAAC4a,OAAO,EAAEhP,QAAQ,EAAEzL,YAAY,CAACU,OAAO,CAAC;UACvF;QACJ,KAAK,MAAM;UACP,IAAI,CAACkK,KAAK,GAAG,IAAI9K,eAAe,CAACD,aAAa,CAAC6a,MAAM,EAAEjP,QAAQ,EAAEzL,YAAY,CAACU,OAAO,CAAC;UACtF;QACJ,KAAK,MAAM;UACP,IAAI,CAACkK,KAAK,GAAG,IAAI9K,eAAe,CAACD,aAAa,CAACe,UAAU,EAAE6K,QAAQ,EAAEzL,YAAY,CAACU,OAAO,CAAC;UAC1F;QACJ,KAAK,MAAM;UACP,IAAI,CAACkK,KAAK,GAAG,IAAI9K,eAAe,CAACD,aAAa,CAACiP,YAAY,EAAErD,QAAQ,EAAEzL,YAAY,CAACU,OAAO,CAAC;UAC5F;QACJ;UACI,IAAI,CAACkK,KAAK,GAAG,IAAI9K,eAAe,CAACD,aAAa,CAACW,SAAS,EAAEiL,QAAQ,EAAEzL,YAAY,CAACU,OAAO,CAAC;UACzF;MACR;IACJ;IACA,OAAO,IAAI,CAACkK,KAAK;EACrB,CAAC;EACD4N,YAAY,CAACzb,SAAS,CAAC4d,oBAAoB,GAAG,YAAY;IACtD,IAAI5I,KAAK,GAAG,IAAI;IAChB,IAAI6I,MAAM,GAAG,EAAE;IACf,IAAI,IAAI,CAACnZ,WAAW,CAACG,GAAG,CAAC,GAAG,CAAC,EAAE;MAC3B,IAAIiZ,SAAS,GAAG,IAAI,CAACpZ,WAAW,CAACR,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;MAC3C,IAAI6Z,KAAK,GAAG,IAAI,CAACrZ,WAAW,CAACwD,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;MAC5C,IAAI4V,SAAS,KAAK,IAAI,IAAI,OAAOA,SAAS,KAAK,WAAW,EAAE;QACxD,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;UAC/BD,MAAM,CAAC9N,IAAI,CAAC+N,SAAS,CAAC;QAC1B,CAAC,MACI,IAAIne,KAAK,CAACoc,OAAO,CAAC+B,SAAS,CAAC,EAAE;UAC/BC,KAAK,CAAC7Q,OAAO,CAAC,UAAUX,OAAO,EAAE;YAC7BsR,MAAM,CAAC9N,IAAI,CAACxD,OAAO,CAAC;UACxB,CAAC,CAAC;QACN;MACJ;IACJ,CAAC,MACI;MACD,IAAIyR,eAAe,GAAG,IAAI,CAACtZ,WAAW,CAACR,GAAG,CAAC,GAAG,CAAC;MAC/C,IAAI8Z,eAAe,KAAK,IAAI,IACxB,OAAOA,eAAe,KAAK,WAAW,IACtCA,eAAe,CAAC5Z,MAAM,GAAG,CAAC,IAC1B4Z,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IACvB,IAAI,CAAClK,QAAQ,IACb,IAAI,CAACA,QAAQ,CAAC1P,MAAM,GAAG,CAAC,EAAE;QAC1B4Z,eAAe,CAAC9Q,OAAO,CAAC,UAAUzC,KAAK,EAAE;UACrCoT,MAAM,CAAC9N,IAAI,CAACiF,KAAK,CAAClB,QAAQ,CAACzL,MAAM,CAACyB,QAAQ,CAACW,KAAK,CAAC9C,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACzE,CAAC,CAAC;MACN;IACJ;IACA,OAAOkW,MAAM;EACjB,CAAC;EACDpC,YAAY,CAACzb,SAAS,CAACiX,cAAc,GAAG,UAAUC,SAAS,EAAE;IACzD,IAAIA,SAAS,KAAK,KAAK,CAAC,EAAE;MAAEA,SAAS,GAAG,KAAK;IAAE;IAC/C,IAAIA,SAAS,IAAI,IAAI,CAAC7K,cAAc,IAAI,IAAI,CAAC9H,KAAK,CAAC8H,cAAc,EAAE;MAC/D,IAAI8K,KAAK,GAAG,IAAI,CAAC9P,UAAU;MAC3B,IAAI,IAAI,CAAClD,KAAK,IAAI,IAAI,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;QACrC,IAAI+S,KAAK,GAAG,CAAC,EAAE;UACX,KAAK,IAAI/P,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+P,KAAK,EAAE/P,CAAC,EAAE,EAAE;YAC5B,IAAIsE,IAAI,GAAG,IAAI,CAAC/F,MAAM,CAACyB,CAAC,CAAC;YACzB,IAAIsE,IAAI,IAAI,CAAC,IAAI,CAACgC,eAAe,CAAChC,IAAI,CAAChH,WAAW,CAAC,EAAE;cACjD,IAAI0O,QAAQ,GAAG,IAAI,CAACiE,iBAAiB,CAAC3L,IAAI,CAAC;cAC3C,IAAIwL,SAAS,EAAE;gBACX,IAAIvQ,IAAI,GAAG+E,IAAI,CAACiB,QAAQ,CAAC,CAAC;gBAC1B,IAAIhG,IAAI,EAAE;kBACN,IAAI,CAACwM,aAAa,CAACC,QAAQ,EAAEzM,IAAI,EAAE+E,IAAI,CAAC9E,MAAM,CAAC;gBACnD;cACJ,CAAC,MACI;gBACD,IAAI,CAACsN,cAAc,CAACxI,IAAI,CAAChH,WAAW,EAAE0O,QAAQ,EAAE,GAAG,CAAC;cACxD;cACA1H,IAAI,CAAChH,WAAW,CAAC+B,QAAQ,GAAG,CAACyQ,SAAS;YAC1C;UACJ;QACJ,CAAC,MACI;UACD,IAAIxL,IAAI,GAAG,IAAI,CAAC/F,MAAM,CAAC,CAAC,CAAC;UACzB,IAAIyN,QAAQ,GAAG,IAAI,CAACiE,iBAAiB,CAAC,CAAC;UACvC,IAAIH,SAAS,EAAE;YACX,IAAIvQ,IAAI,GAAG,IAAI,CAACA,IAAI;YACpB,IAAIA,IAAI,EAAE;cACN,IAAI,CAACwM,aAAa,CAACC,QAAQ,EAAEzM,IAAI,EAAE,IAAI,CAACC,MAAM,CAAC;YACnD;UACJ,CAAC,MACI;YACD,IAAI,CAACsN,cAAc,CAACxI,IAAI,CAAChH,WAAW,EAAE0O,QAAQ,EAAE,GAAG,CAAC;UACxD;UACA1H,IAAI,CAAChH,WAAW,CAAC+B,QAAQ,GAAG,CAACyQ,SAAS;QAC1C;MACJ,CAAC,MACI,IAAI,IAAI,CAACxS,WAAW,EAAE;QACvB,IAAI0O,QAAQ,GAAG,IAAI,CAACiE,iBAAiB,CAAC,CAAC;QACvC,IAAIH,SAAS,EAAE;UACX,IAAIvQ,IAAI,GAAG,IAAI,CAACA,IAAI;UACpB,IAAIA,IAAI,EAAE;YACN,IAAI,CAACwM,aAAa,CAACC,QAAQ,EAAEzM,IAAI,EAAE,IAAI,CAACC,MAAM,CAAC;UACnD;QACJ,CAAC,MACI;UACD,IAAI,CAACsN,cAAc,CAAC,IAAI,CAACxP,WAAW,EAAE0O,QAAQ,EAAE,GAAG,CAAC;QACxD;MACJ;MACA,IAAI,CAAC1O,WAAW,CAAC+B,QAAQ,GAAG,CAACyQ,SAAS;IAC1C;EACJ,CAAC;EACDuE,YAAY,CAACzb,SAAS,CAACgc,YAAY,GAAG,UAAU9W,KAAK,EAAE;IACnD,IAAIuF,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,IAAI,CAACqJ,QAAQ,IAAI,IAAI,CAACA,QAAQ,CAAC1P,MAAM,GAAG,CAAC,EAAE;MAC3C,KAAK,IAAIgD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC0M,QAAQ,CAAC1P,MAAM,EAAEgD,CAAC,EAAE,EAAE;QAC3C,IAAIlC,KAAK,KAAK,IAAI,CAAC4O,QAAQ,CAACzL,MAAM,CAACyB,QAAQ,CAAC1C,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;UAC/D8C,KAAK,GAAGrD,CAAC;UACT;QACJ;MACJ;IACJ;IACA,OAAOqD,KAAK;EAChB,CAAC;EACDgR,YAAY,CAACzb,SAAS,CAAC2c,eAAe,GAAG,YAAY;IACjD,IAAIjX,MAAM,GAAG,IAAInF,mBAAmB,CAAC,CAAC;IACtCmF,MAAM,CAACoR,OAAO,CAAC,IAAI,CAACpQ,KAAK,EAAE,IAAI,CAACE,MAAM,EAAE,IAAI,CAAC;IAC7C,IAAI,CAACoM,SAAS,CAACtN,MAAM,CAAC;IACtBA,MAAM,CAAChB,WAAW,CAACU,MAAM,CAAC,IAAI,EAAE,IAAIlF,cAAc,CAAC,IAAI,CAACkI,eAAe,CAAC,CAAC;IACzE1C,MAAM,CAACqC,aAAa,CAAC3C,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5CM,MAAM,CAACqC,aAAa,CAAC3C,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5CM,MAAM,CAAChB,WAAW,CAACU,MAAM,CAAC,IAAI,EAAE,qBAAqB,CAAC;EAC1D,CAAC;EACD,OAAOqW,YAAY;AACvB,CAAC,CAACpY,QAAQ,CAAE;AACZ,SAASoY,YAAY;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIwC,gBAAgB,GAAG,aAAe,UAAUlJ,MAAM,EAAE;EACpD3V,SAAS,CAAC6e,gBAAgB,EAAElJ,MAAM,CAAC;EACnC,SAASkJ,gBAAgBA,CAACtX,IAAI,EAAEoC,IAAI,EAAEnC,MAAM,EAAE;IAC1C,IAAIoO,KAAK,GAAGD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrC,IAAItO,IAAI,IAAIoC,IAAI,IAAInC,MAAM,EAAE;MACxBoO,KAAK,CAACG,WAAW,CAACxO,IAAI,EAAEoC,IAAI,EAAEnC,MAAM,CAAC;MACrCoO,KAAK,CAACxM,WAAW,IAAIzG,UAAU,CAACmc,KAAK;IACzC;IACA,OAAOlJ,KAAK;EAChB;EACAxV,MAAM,CAACyE,cAAc,CAACga,gBAAgB,CAACje,SAAS,EAAE,iBAAiB,EAAE;IACjE;AACR;AACA;AACA;AACA;AACA;IACQkE,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI4U,cAAc,GAAG,KAAK;MAC1B,IAAI,IAAI,CAACtT,SAAS,IAAI,IAAI,CAACjB,KAAK,EAAE;QAC9B,IAAI4Z,QAAQ,GAAG,IAAI,CAAC5Z,KAAK,CAACG,WAAW;QACrC,IAAIyZ,QAAQ,IAAIA,QAAQ,CAACtZ,GAAG,CAAC,IAAI,CAAC,EAAE;UAChC,IAAIuZ,UAAU,GAAGD,QAAQ,CAACja,GAAG,CAAC,IAAI,CAAC;UACnC,IAAIka,UAAU,EAAE;YACZ,IAAI5P,iBAAiB,GAAG,IAAI9G,qBAAqB,CAAC0W,UAAU,CAAC;YAC7D,IAAI5P,iBAAiB,CAACE,QAAQ,KAAK,CAAC,EAAE;cAClC,IAAI,IAAI,CAACvK,KAAK,IAAI,IAAI,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;gBACrC,IAAIsK,QAAQ,GAAG,KAAK;gBACpB,IAAI,IAAI,CAAChK,WAAW,CAACG,GAAG,CAAC,IAAI,CAAC,EAAE;kBAC5BuZ,UAAU,GAAG,IAAI,CAAC1Z,WAAW,CAACR,GAAG,CAAC,IAAI,CAAC;kBACvC,IAAIka,UAAU,EAAE;oBACZ5P,iBAAiB,GAAG,IAAI9G,qBAAqB,CAAC0W,UAAU,CAAC;oBACzD,IAAI5P,iBAAiB,IAAIA,iBAAiB,CAACE,QAAQ,GAAG,CAAC,EAAE;sBACrDA,QAAQ,GAAG,IAAI;oBACnB;kBACJ;gBACJ;gBACA,IAAI,CAACA,QAAQ,EAAE;kBACX,KAAK,IAAItH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACjD,KAAK,CAACC,MAAM,EAAEgD,CAAC,EAAE,EAAE;oBACxC,IAAIY,UAAU,GAAG,KAAK,CAAC;oBACvB,IAAI6B,SAAS,GAAG,IAAI,CAAC1F,KAAK,CAACkE,MAAM,CAACyB,QAAQ,CAAC1C,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;oBAC7D,IAAIkC,SAAS,IAAIA,SAAS,YAAY1J,aAAa,EAAE;sBACjD6H,UAAU,GAAG,IAAI,CAACI,eAAe,CAAC8D,MAAM,CAACrC,SAAS,CAAC;oBACvD;oBACA,IAAI7B,UAAU,EAAE;sBACZ,IAAIA,UAAU,CAACnD,GAAG,CAAC,IAAI,CAAC,EAAE;wBACtBuZ,UAAU,GAAGpW,UAAU,CAAC9D,GAAG,CAAC,IAAI,CAAC;wBACjC,IAAI8C,MAAM,GAAG,CAAC;wBACd,IAAIoX,UAAU,EAAE;0BACZ5P,iBAAiB,GAAG,IAAI9G,qBAAqB,CAAC0W,UAAU,CAAC;0BACzD,IAAI5P,iBAAiB,EAAE;4BACnBxH,MAAM,GAAGwH,iBAAiB,CAACE,QAAQ;0BACvC;wBACJ;wBACA,IAAI1H,MAAM,KAAK,CAAC,EAAE;0BACd8R,cAAc,GAAG,IAAI;wBACzB;sBACJ,CAAC,MACI;wBACDA,cAAc,GAAG,IAAI;sBACzB;oBACJ;kBACJ;gBACJ;cACJ,CAAC,MACI;gBACD,IAAI,IAAI,CAACpU,WAAW,CAACG,GAAG,CAAC,IAAI,CAAC,EAAE;kBAC5BuZ,UAAU,GAAG,IAAI,CAAC1Z,WAAW,CAACR,GAAG,CAAC,IAAI,CAAC;kBACvC,IAAI8C,MAAM,GAAG,CAAC;kBACd,IAAIoX,UAAU,EAAE;oBACZ5P,iBAAiB,GAAG,IAAI9G,qBAAqB,CAAC0W,UAAU,CAAC;oBACzD,IAAI5P,iBAAiB,EAAE;sBACnBxH,MAAM,GAAGwH,iBAAiB,CAACE,QAAQ;oBACvC;kBACJ;kBACA,IAAI1H,MAAM,KAAK,CAAC,EAAE;oBACd8R,cAAc,GAAG,IAAI;kBACzB;gBACJ,CAAC,MACI;kBACDA,cAAc,GAAG,IAAI;gBACzB;cACJ;YACJ;UACJ;QACJ;MACJ;MACA,OAAOA,cAAc;IACzB,CAAC;IACDzU,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI2Z,gBAAgB,CAAC9R,KAAK,GAAG,UAAUhC,IAAI,EAAEnC,UAAU,EAAEoN,cAAc,EAAEvL,SAAS,EAAE;IAC5E,IAAI6J,KAAK,GAAG,IAAIuK,gBAAgB,CAAC,CAAC;IAClCvK,KAAK,CAAClO,SAAS,GAAG,IAAI;IACtBkO,KAAK,CAACnP,KAAK,GAAG4F,IAAI;IAClBuJ,KAAK,CAAChP,WAAW,GAAGsD,UAAU;IAC9B0L,KAAK,CAACtL,eAAe,GAAGgN,cAAc;IACtC1B,KAAK,CAACzJ,IAAI,GAAGJ,SAAS;IACtB,IAAI6J,KAAK,CAAChP,WAAW,CAACG,GAAG,CAAC,MAAM,CAAC,EAAE;MAC/B6O,KAAK,CAACvP,KAAK,GAAGuP,KAAK,CAAChP,WAAW,CAACR,GAAG,CAAC,MAAM,CAAC;IAC/C;IACA,IAAIiX,OAAO,GAAGzH,KAAK,CAAChP,WAAW,CAACwD,QAAQ,CAAC,KAAK,CAAC;IAC/C,IAAIiT,OAAO,KAAK,IAAI,IAAI,OAAOA,OAAO,KAAK,WAAW,EAAE;MACpDzH,KAAK,CAACE,WAAW,GAAG,IAAIjU,KAAK,CAACwb,OAAO,CAAC/W,MAAM,CAAC;IACjD;IACAsP,KAAK,CAAC9N,aAAa,GAAG,CAAC;IACvB8N,KAAK,CAACzH,YAAY,GAAG,IAAIgB,GAAG,CAAC,CAAC;IAC9B,IAAIyG,KAAK,CAACrM,UAAU,GAAG,CAAC,EAAE;MACtBqM,KAAK,CAACiH,oBAAoB,CAAC,CAAC;IAChC;IACA,OAAOjH,KAAK;EAChB,CAAC;EACDuK,gBAAgB,CAACje,SAAS,CAAC2a,oBAAoB,GAAG,YAAY;IAC1D,IAAI,IAAI,CAACjW,WAAW,CAACG,GAAG,CAAC,KAAK,CAAC,EAAE;MAC7B,IAAIsW,OAAO,GAAG,IAAI,CAACzW,WAAW,CAACwD,QAAQ,CAAC,KAAK,CAAC;MAC9C,IAAIiT,OAAO,IAAIA,OAAO,CAAC/W,MAAM,GAAG,CAAC,EAAE;QAC/B,IAAIsI,UAAU,GAAG,IAAI,CAACrF,UAAU;QAChC,IAAI8P,KAAK,GAAGgE,OAAO,CAAC/W,MAAM,IAAIsI,UAAU,GAAGyO,OAAO,CAAC/W,MAAM,GAAGsI,UAAU;QACtE,KAAK,IAAItF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+P,KAAK,EAAE/P,CAAC,EAAE,EAAE;UAC5B,IAAIiO,IAAI,GAAG8F,OAAO,CAAC9S,MAAM,CAACyB,QAAQ,CAAC1C,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;UACxD,IAAI0N,IAAI,EAAE;YACN,IAAI,CAAC1P,MAAM,CAACyB,CAAC,CAAC,CAACyM,KAAK,GAAGwB,IAAI,GAAGA,IAAI,GAAG,EAAE;UAC3C;QACJ;MACJ;IACJ;EACJ,CAAC;EACD4I,gBAAgB,CAACje,SAAS,CAACqX,iBAAiB,GAAG,UAAU3L,IAAI,EAAE;IAC3D,IAAIqD,SAAS,GAAG,IAAItO,eAAe,CAAC,CAAC;IACrC,IAAIiL,IAAI,EAAE;MACN,IAAI9E,MAAM,GAAG8E,IAAI,CAAC9E,MAAM;MACxB,IAAID,IAAI,GAAG+E,IAAI,CAACiB,QAAQ,CAAC,CAAC;MAC1B,IAAIjB,IAAI,CAAClG,SAAS,IAAImB,IAAI,IAAI,OAAOA,IAAI,CAAC0M,QAAQ,KAAK,WAAW,IAAI1M,IAAI,CAAC0M,QAAQ,KAAKjR,gBAAgB,CAACoH,MAAM,EAAE;QAC7GuF,SAAS,CAACnI,MAAM,GAAG,IAAI,CAACyN,cAAc,CAAC,CAACzN,MAAM,CAACC,CAAC,EAAED,MAAM,CAACE,CAAC,EAAEF,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACI,MAAM,CAAC,EAAEL,IAAI,CAACoG,IAAI,EAAEpG,IAAI,CAAC0M,QAAQ,CAAC;MACvH,CAAC,MACI;QACDtE,SAAS,CAACnI,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAEA,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACI,MAAM,CAAC;MAC1D;MACA,IAAIyQ,SAAS,GAAG/L,IAAI,CAACG,SAAS;MAC9B,IAAI4L,SAAS,EAAE;QACX1I,SAAS,CAACE,SAAS,GAAG,IAAIrM,QAAQ,CAAC6U,SAAS,CAAC;MACjD;MACA1I,SAAS,CAAC+B,SAAS,GAAG,IAAIlO,QAAQ,CAAC8I,IAAI,CAACpE,KAAK,CAAC;MAC9C,IAAIqB,MAAM,GAAG+C,IAAI,CAAC/C,MAAM;MACxBoG,SAAS,CAACI,SAAS,GAAG,IAAItM,MAAM,CAAC6I,IAAI,CAAC5D,WAAW,EAAEa,MAAM,CAAC5B,KAAK,CAAC;MAChEgI,SAAS,CAACjG,WAAW,GAAGH,MAAM,CAAC6E,KAAK;MACpCuB,SAAS,CAACK,WAAW,GAAGzG,MAAM,CAAC5B,KAAK;MACpC,IAAI0Q,SAAS,EAAE;QACX,IAAIxG,WAAW,GAAG,CAACwG,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,EAAEA,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,EAAEA,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;QAC3E,IAAInQ,KAAK,GAAG,CAAC2J,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,EACjDA,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,EACxCA,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAC7ClC,SAAS,CAACW,WAAW,GAAG,IAAI9M,QAAQ,CAAC0E,KAAK,CAAC;MAC/C;MACAyH,SAAS,CAACtF,aAAa,GAAGiC,IAAI,CAACvE,MAAM;MACrC,IAAIiR,SAAS,GAAG,OAAO1M,IAAI,CAACqL,aAAa,KAAK,WAAW,GAAGrL,IAAI,CAACqL,aAAa,GAAG9U,gBAAgB,CAAC0S,IAAI;MACtG,IAAI0J,iBAAiB,GAAG,IAAI,CAAClC,WAAW,GAAGzZ,oBAAoB,CAAC4b,GAAG,GAAG5b,oBAAoB,CAACoQ,MAAM;MACjG/D,SAAS,CAACwP,YAAY,GAAG,IAAI9b,eAAe,CAAC2V,SAAS,EAAEiG,iBAAiB,CAAC;IAC9E,CAAC,MACI;MACD,IAAIzX,MAAM,GAAG,IAAI,CAACA,MAAM;MACxB,IAAIA,MAAM,EAAE;QACR,IAAI,IAAI,CAACpB,SAAS,IACd,IAAI,CAACmB,IAAI,IACT,OAAO,IAAI,CAACA,IAAI,CAAC0M,QAAQ,KAAK,WAAW,IACzC,IAAI,CAAC1M,IAAI,CAAC0M,QAAQ,KAAKjR,gBAAgB,CAACoH,MAAM,EAAE;UAChDuF,SAAS,CAACnI,MAAM,GAAG,IAAI,CAACyN,cAAc,CAAC,CAACzN,MAAM,CAACC,CAAC,EAAED,MAAM,CAACE,CAAC,EAAEF,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACI,MAAM,CAAC,EAAE,IAAI,CAACL,IAAI,CAACoG,IAAI,EAAE,IAAI,CAACpG,IAAI,CAAC0M,QAAQ,CAAC;QACjI,CAAC,MACI;UACDtE,SAAS,CAACnI,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAEA,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACI,MAAM,CAAC;QAC1D;MACJ;MACA,IAAIyQ,SAAS,GAAG,IAAI,CAAC5L,SAAS;MAC9B,IAAI4L,SAAS,EAAE;QACX1I,SAAS,CAACE,SAAS,GAAG,IAAIrM,QAAQ,CAAC6U,SAAS,CAAC;MACjD;MACA1I,SAAS,CAAC+B,SAAS,GAAG,IAAIlO,QAAQ,CAAC,IAAI,CAAC0E,KAAK,CAAC;MAC9C,IAAIqB,MAAM,GAAG,IAAI,CAACA,MAAM;MACxBoG,SAAS,CAACI,SAAS,GAAG,IAAItM,MAAM,CAAC,IAAI,CAACiF,WAAW,EAAEa,MAAM,CAAC5B,KAAK,CAAC;MAChEgI,SAAS,CAACjG,WAAW,GAAGH,MAAM,CAAC6E,KAAK;MACpCuB,SAAS,CAACK,WAAW,GAAGzG,MAAM,CAAC5B,KAAK;MACpC,IAAI0Q,SAAS,EAAE;QACX,IAAIxG,WAAW,GAAG,CAACwG,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,EAAEA,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,EAAEA,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;QAC3E,IAAInQ,KAAK,GAAG,CAAC2J,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,EACjDA,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,EACxCA,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAC7ClC,SAAS,CAACW,WAAW,GAAG,IAAI9M,QAAQ,CAAC0E,KAAK,CAAC;MAC/C;MACAyH,SAAS,CAACtF,aAAa,GAAG,IAAI,CAACA,aAAa;MAC5C,IAAI2O,SAAS,GAAG,OAAO,IAAI,CAACrB,aAAa,KAAK,WAAW,GAAG,IAAI,CAACA,aAAa,GAAG9U,gBAAgB,CAAC0S,IAAI;MACtG,IAAI0J,iBAAiB,GAAG,IAAI,CAAClC,WAAW,GAAGzZ,oBAAoB,CAAC4b,GAAG,GAAG5b,oBAAoB,CAACoQ,MAAM;MACjG/D,SAAS,CAACwP,YAAY,GAAG,IAAI9b,eAAe,CAAC2V,SAAS,EAAEiG,iBAAiB,CAAC;IAC9E;IACAtP,SAAS,CAACrG,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAClC,IAAIqG,SAAS,CAACnI,MAAM,KAAK,IAAI,IAAI,OAAOmI,SAAS,CAACnI,MAAM,KAAK,WAAW,EAAE;MACtEmI,SAAS,CAACnI,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACnC;IACA,IAAIwM,QAAQ,GAAG,IAAI5Q,WAAW,CAACuM,SAAS,CAACnI,MAAM,EAAE,IAAI,CAACwB,eAAe,CAAC;IACtE,IAAI+H,QAAQ,GAAGiD,QAAQ,CAACjD,QAAQ;IAChCA,QAAQ,CAACmD,GAAG,CAACkL,MAAM,CAAC,CAAC;IACrB,IAAI,CAAC,IAAI,CAAC9V,QAAQ,EAAE;MAChByH,QAAQ,CAACmD,GAAG,CAACqE,oBAAoB,CAAC,IAAI,CAAC;MACvCxH,QAAQ,CAACyH,sBAAsB,CAAC,CAAC;IACrC;IACA,IAAI,IAAI,CAACpS,SAAS,EAAE;MAChB,IAAIoI,IAAI,GAAG,KAAK,CAAC;MACjB,IAAIlC,IAAI,EAAE;QACNkC,IAAI,GAAG,IAAI,CAACgP,WAAW,CAAClR,IAAI,CAAC;MACjC;MACA,IAAI,OAAOkC,IAAI,KAAK,WAAW,IAAIA,IAAI,KAAK,IAAI,EAAE;QAC9CA,IAAI,GAAG,IAAI,CAAClK,eAAe;MAC/B;MACA,IAAI,CAAC+a,aAAa,CAACtO,QAAQ,EAAEpB,SAAS,EAAEnB,IAAI,EAAEmB,SAAS,CAACwP,YAAY,CAAC;IACzE,CAAC,MACI;MACD,IAAI,CAAC,IAAI,CAAC1Q,KAAK,EAAE;QACb,IAAI,CAACA,KAAK,GAAG,IAAI9K,eAAe,CAACD,aAAa,CAACe,UAAU,EAAE,IAAI,CAACyZ,cAAc,CAACxa,aAAa,CAACW,SAAS,CAAC,CAAC;MAC5G;MACA,IAAI,CAACgb,aAAa,CAACtO,QAAQ,EAAEpB,SAAS,EAAE,IAAI,CAAClB,KAAK,EAAEkB,SAAS,CAACwP,YAAY,CAAC;IAC/E;IACA,IAAI,CAAC,IAAI,CAAC7V,QAAQ,EAAE;MAChByH,QAAQ,CAACmD,GAAG,CAACyE,kBAAkB,CAAC,CAAC;IACrC;IACA,OAAO3E,QAAQ;EACnB,CAAC;EACD6K,gBAAgB,CAACje,SAAS,CAACye,aAAa,GAAG,UAAUtO,QAAQ,EAAEpB,SAAS,EAAEnB,IAAI,EAAE2Q,YAAY,EAAE;IAC1F,IAAIpO,QAAQ,CAACqI,mBAAmB,IAAIzJ,SAAS,CAACrG,QAAQ,EAAE;MACpDyH,QAAQ,CAACiC,IAAI,CAAC,CAAC;MACfjC,QAAQ,CAACyH,sBAAsB,CAAC,CAAC;IACrC;IACA,IAAI,CAAC/I,uBAAuB,CAACsB,QAAQ,EAAEpB,SAAS,CAAC;IACjD,IAAIoB,QAAQ,CAACqI,mBAAmB,IAAIzJ,SAAS,CAACrG,QAAQ,EAAE;MACpDyH,QAAQ,CAAC4C,OAAO,CAAC,CAAC;MAClB5C,QAAQ,CAACiC,IAAI,CAAC,CAAC;MACfjC,QAAQ,CAACmD,GAAG,CAACqE,oBAAoB,CAAC,IAAI,CAAC;MACvCxH,QAAQ,CAACyH,sBAAsB,CAAC,CAAC;IACrC;IACA,IAAIuD,OAAO,GAAG,IAAI,CAACrH,QAAQ;IAC3B,IAAIkK,eAAe,GAAG,IAAI,CAACtZ,WAAW,CAACR,GAAG,CAAC,GAAG,CAAC;IAC/C,IAAIkD,CAAC,GAAG,CAAC,CAAC;IACV,IAAI4W,eAAe,IAAIA,eAAe,CAAC5Z,MAAM,GAAG,CAAC,EAAE;MAC/CgD,CAAC,GAAG4W,eAAe,CAAC,CAAC,CAAC;IAC1B;IACA,IAAI5W,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAG+T,OAAO,CAAC/W,MAAM,EAAE;MAC9B,IAAIsH,IAAI,GAAGyP,OAAO,CAAC9S,MAAM,CAACyB,QAAQ,CAAC1C,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;MACvD,IAAI+W,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;MACvB,IAAItP,WAAW,GAAGL,SAAS,CAACK,WAAW;MACvC,IAAIuP,iBAAiB,GAAG,CAAC,GAAGvP,WAAW;MACvC,IAAIwP,cAAc,GAAG,CAAC;MACtB,IAAIC,OAAO,GAAI9P,SAAS,CAACjG,WAAW,KAAK3G,cAAc,CAACgH,KAAK,IAAI4F,SAAS,CAACjG,WAAW,KAAK3G,cAAc,CAAC+G,OAAQ;MAClH,IAAI2V,OAAO,EAAE;QACTH,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGC,iBAAiB;QACrCD,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGtP,WAAW;MACnC,CAAC,MACI;QACDsP,UAAU,CAAC,CAAC,CAAC,GAAGC,iBAAiB,GAAGC,cAAc;QAClDF,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGtP,WAAW,IAAIwP,cAAc,GAAG,CAAC,CAAC;MAC1D;MACA,IAAIhP,KAAK,GAAGb,SAAS,CAAC+B,SAAS;MAC/B,IAAIwD,IAAI,GAAGvF,SAAS,CAACnI,MAAM;MAC3B,IAAIG,KAAK,GAAGuN,IAAI,CAAC,CAAC,CAAC,GAAGqK,iBAAiB;MACvC,IAAIrN,SAAS,GAAGgD,IAAI;MACpB,IAAIuK,OAAO,EAAE;QACTvN,SAAS,CAAC,CAAC,CAAC,IAAIqN,iBAAiB;MACrC,CAAC,MACI;QACDrN,SAAS,CAAC,CAAC,CAAC,IAAIlC,WAAW;MAC/B;MACAe,QAAQ,CAAC2O,OAAO,CAACxN,SAAS,EAAE/O,WAAW,CAACwc,OAAO,CAAC;MAChD,IAAIhQ,SAAS,CAACtF,aAAa,KAAK,CAAC,EAAE;QAC/B,IAAI5C,CAAC,GAAGyN,IAAI,CAAC,CAAC,CAAC,GAAGlF,WAAW;QAC7B,IAAIyP,OAAO,EAAE;UACThY,CAAC,IAAIuI,WAAW;UAChBrI,KAAK,IAAI4X,iBAAiB;QAC9B;QACA/O,KAAK,GAAG,IAAIhN,QAAQ,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QACrCuN,QAAQ,CAACnB,aAAa,CAACnI,CAAC,EAAE6X,UAAU,CAAC,CAAC,CAAC,EAAE3X,KAAK,EAAEuN,IAAI,CAAC,CAAC,CAAC,EAAE1E,KAAK,CAAC;QAC/DA,KAAK,GAAG,IAAIhN,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;MACnC;MACA,IAAIsC,KAAK,GAAG,KAAK,CAAC;MAClB,IAAIwG,IAAI,IAAI/L,KAAK,CAACoc,OAAO,CAACrQ,IAAI,CAAC,EAAE;QAC7BxG,KAAK,GAAGwG,IAAI,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC;MACvC,CAAC,MACI;QACDxG,KAAK,GAAGwG,IAAI;MAChB;MACA,IAAIxG,KAAK,EAAE;QACP,IAAI8Z,aAAa,GAAG,CAACN,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,EAAE3X,KAAK,GAAG2X,UAAU,CAAC,CAAC,CAAC,EAAEpK,IAAI,CAAC,CAAC,CAAC,CAAC;QAClF,IAAIvF,SAAS,CAACtF,aAAa,GAAG,CAAC,EAAE;UAC7B,IAAI4G,KAAK,GAAGF,QAAQ,CAACiC,IAAI,CAAC,CAAC;UAC3B,IAAIrD,SAAS,CAACtF,aAAa,KAAK,EAAE,EAAE;YAChC0G,QAAQ,CAACoC,kBAAkB,CAAC,CAAC,EAAEpC,QAAQ,CAACxB,KAAK,CAAC,CAAC,CAAC,CAAC;YACjDwB,QAAQ,CAACqC,eAAe,CAAC,CAAC,EAAE,CAAC;YAC7B,IAAIyM,GAAG,GAAG9O,QAAQ,CAACxB,KAAK,CAAC,CAAC,CAAC,IAAI2C,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,CAAC;YAC3D,IAAIxK,CAAC,GAAGwK,SAAS,CAAC,CAAC,CAAC;YACpBA,SAAS,GAAG,CAAC2N,GAAG,EAAEnY,CAAC,EAAEwK,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,CAAC;UACnE,CAAC,MACI,IAAIvC,SAAS,CAACtF,aAAa,KAAK,GAAG,EAAE;YACtC0G,QAAQ,CAACoC,kBAAkB,CAACpC,QAAQ,CAACxB,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACjDwB,QAAQ,CAACqC,eAAe,CAAC,CAAC,GAAG,CAAC;YAC9B,IAAI0M,GAAG,GAAG5N,SAAS,CAAC,CAAC,CAAC;YACtB,IAAIxK,CAAC,GAAGqJ,QAAQ,CAACxB,KAAK,CAAC,CAAC,CAAC,IAAI2C,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,CAAC;YACzDA,SAAS,GAAG,CAAC4N,GAAG,EAAEpY,CAAC,EAAEwK,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,CAAC;UACnE,CAAC,MACI,IAAIvC,SAAS,CAACtF,aAAa,KAAK,GAAG,EAAE;YACtC0G,QAAQ,CAACoC,kBAAkB,CAACpC,QAAQ,CAACxB,KAAK,CAAC,CAAC,CAAC,EAAEwB,QAAQ,CAACxB,KAAK,CAAC,CAAC,CAAC,CAAC;YACjEwB,QAAQ,CAACqC,eAAe,CAAC,CAAC,GAAG,CAAC;YAC9B,IAAI2M,GAAG,GAAGhP,QAAQ,CAACxB,KAAK,CAAC,CAAC,CAAC,IAAI2C,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,CAAC;YAC3D,IAAIxK,CAAC,GAAGqJ,QAAQ,CAACxB,KAAK,CAAC,CAAC,CAAC,IAAI2C,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,CAAC;YACzDA,SAAS,GAAG,CAAC6N,GAAG,EAAErY,CAAC,EAAEwK,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,CAAC;UACpD;UACA,IAAIzK,CAAC,GAAGyN,IAAI,CAAC,CAAC,CAAC,GAAGlF,WAAW;UAC7B,IAAIyP,OAAO,EAAE;YACThY,CAAC,IAAIuI,WAAW;YAChBrI,KAAK,IAAI4X,iBAAiB;UAC9B;UACA/O,KAAK,GAAG,IAAIhN,QAAQ,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;UACrCuN,QAAQ,CAACnB,aAAa,CAACnI,CAAC,EAAE6X,UAAU,CAAC,CAAC,CAAC,EAAE3X,KAAK,EAAEuN,IAAI,CAAC,CAAC,CAAC,EAAE1E,KAAK,CAAC;UAC/DA,KAAK,GAAG,IAAIhN,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;UAC/BuN,QAAQ,CAACyC,UAAU,CAAC1N,KAAK,EAAE0I,IAAI,EAAEoR,aAAa,EAAE,IAAI,EAAEpP,KAAK,EAAE2O,YAAY,CAAC;UAC1EpO,QAAQ,CAAC4C,OAAO,CAAC1C,KAAK,CAAC;QAC3B,CAAC,MACI;UACDF,QAAQ,CAACyC,UAAU,CAAC1N,KAAK,EAAE0I,IAAI,EAAEoR,aAAa,EAAE,IAAI,EAAEpP,KAAK,EAAE2O,YAAY,CAAC;QAC9E;MACJ;IACJ;IACA,IAAIpO,QAAQ,CAACqI,mBAAmB,IAAIzJ,SAAS,CAACrG,QAAQ,EAAE;MACpDyH,QAAQ,CAACmD,GAAG,CAACyE,kBAAkB,CAAC,CAAC;MACjC5H,QAAQ,CAAC4C,OAAO,CAAC,CAAC;IACtB;EACJ,CAAC;EACDkL,gBAAgB,CAACje,SAAS,CAACsd,cAAc,GAAG,UAAUT,UAAU,EAAE;IAC9D,IAAIf,MAAM,GAAG,IAAI,CAACpX,WAAW,CAACR,GAAG,CAAC,GAAG,CAAC;IACtC,IAAIkb,CAAC;IACL,IAAIC,QAAQ;IACZ,IAAIrH,MAAM;IACV,IAAImD,OAAO;IACX,IAAIvU,MAAM;IACV,IAAIwI,WAAW,GAAG,IAAI,CAACzG,MAAM,CAAC5B,KAAK;IACnC,IAAI,IAAI,CAACvB,SAAS,EAAE;MAChB6Z,QAAQ,GAAG,IAAItc,eAAe,CAAC8Z,UAAU,EAAE,EAAE,CAAC;MAC9C7E,MAAM,GAAG,IAAIvV,eAAe,CAACR,gBAAgB,CAAC4Q,MAAM,EAAEnQ,oBAAoB,CAACoQ,MAAM,CAAC;MAClFqI,OAAO,GAAG,IAAI,CAACzW,WAAW,CAACwD,QAAQ,CAAC,KAAK,CAAC;MAC1CtB,MAAM,GAAG,IAAI,CAACA,MAAM;MACpB,IAAI0Y,QAAQ,GAAG,EAAE;MACjB,IAAIxD,MAAM,IAAIA,MAAM,CAAC1X,MAAM,GAAG,CAAC,EAAE;QAC7B0X,MAAM,CAAC5O,OAAO,CAAC,UAAUhC,KAAK,EAAE;UAC5BoU,QAAQ,CAACvP,IAAI,CAACsP,QAAQ,CAACE,aAAa,CAACpE,OAAO,CAAC9S,MAAM,CAACyB,QAAQ,CAACoB,KAAK,CAACvD,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEqQ,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrH,CAAC,CAAC;MACN,CAAC,MACI,IAAImD,OAAO,CAAC/W,MAAM,GAAG,CAAC,EAAE;QACzB,IAAIwN,GAAG,GAAGyN,QAAQ,CAACE,aAAa,CAACpE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEnD,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACxE,KAAK,IAAI5Q,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+T,OAAO,CAAC/W,MAAM,EAAE,EAAEgD,CAAC,EAAE;UACrC,IAAIL,KAAK,GAAGsY,QAAQ,CAACE,aAAa,CAACpE,OAAO,CAAC9S,MAAM,CAACyB,QAAQ,CAAC1C,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEqQ,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;UAC1GpG,GAAG,GAAGD,IAAI,CAACC,GAAG,CAACA,GAAG,EAAE7K,KAAK,CAAC;UAC1BuY,QAAQ,CAACvP,IAAI,CAAC6B,GAAG,CAAC;QACtB;MACJ;MACAwN,CAAC,GAAIE,QAAQ,CAAClb,MAAM,GAAG,CAAC,GAAM,EAAE,IAAIwC,MAAM,CAACG,KAAK,GAAG,CAAC,GAAGqI,WAAW,CAAC,GAAMkQ,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAEF,QAAQ,CAAClb,MAAM,GAAG,CAAC,CAAE,GAAI,EAAE;IACzH,CAAC,MACI;MACDgb,CAAC,GAAG,CAAC;MACL,IAAItD,MAAM,IAAIA,MAAM,CAAC1X,MAAM,GAAG,CAAC,EAAE;QAC7Bib,QAAQ,GAAG,IAAItc,eAAe,CAAC8Z,UAAU,EAAE,EAAE,CAAC;QAC9C7E,MAAM,GAAG,IAAIvV,eAAe,CAACR,gBAAgB,CAAC4Q,MAAM,EAAEnQ,oBAAoB,CAACoQ,MAAM,CAAC;QAClFqI,OAAO,GAAG,IAAI,CAACzW,WAAW,CAACwD,QAAQ,CAAC,KAAK,CAAC;QAC1C,IAAInB,KAAK,GAAGsY,QAAQ,CAACE,aAAa,CAACpE,OAAO,CAACW,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE9D,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAClFpR,MAAM,GAAG,IAAI,CAACA,MAAM;QACpB,IAAIG,KAAK,EAAE;UACPqY,CAAC,GAAI,EAAE,IAAIxY,MAAM,CAACG,KAAK,GAAG,CAAC,GAAGqI,WAAW,CAAC,GAAIrI,KAAK;QACvD,CAAC,MACI;UACDqY,CAAC,GAAG,EAAE;QACV;MACJ,CAAC,MACI;QACD,OAAOA,CAAC;MACZ;IACJ;IACA,IAAI1Q,QAAQ,GAAG,CAAC;IAChB,IAAIoN,MAAM,IAAIA,MAAM,CAAC1X,MAAM,GAAG,CAAC,EAAE;MAC7B,IAAIgb,CAAC,KAAK,EAAE,EAAE;QACVC,QAAQ,GAAG,IAAItc,eAAe,CAAC8Z,UAAU,EAAEuC,CAAC,CAAC;QAC7C,IAAI/J,IAAI,GAAG8F,OAAO,CAACW,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChC,IAAI2D,QAAQ,GAAGJ,QAAQ,CAACE,aAAa,CAAClK,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE2C,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;QACjE,IAAIyH,QAAQ,CAAC,CAAC,CAAC,GAAG7Y,MAAM,CAACG,KAAK,IAAI0Y,QAAQ,CAAC,CAAC,CAAC,GAAG7Y,MAAM,CAACI,MAAM,EAAE;UAC3D,IAAID,KAAK,GAAGH,MAAM,CAACG,KAAK,GAAG,CAAC,GAAGqI,WAAW;UAC1C,IAAIsQ,CAAC,GAAG9Y,MAAM,CAACI,MAAM,GAAG,CAAC,GAAGoI,WAAW;UACvC,IAAI0C,GAAG,GAAG,KAAK;UACf,KAAK,IAAI1K,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIR,MAAM,CAACI,MAAM,EAAEI,CAAC,EAAE,EAAE;YACrCiY,QAAQ,CAAC1Q,KAAK,GAAGvH,CAAC;YAClB,IAAI2F,IAAI,GAAGsS,QAAQ,CAACE,aAAa,CAAClK,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE2C,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;YAC7D,IAAIjL,IAAI,CAAC,CAAC,CAAC,GAAGnG,MAAM,CAACG,KAAK,IAAIgG,IAAI,CAAC,CAAC,CAAC,GAAG2S,CAAC,EAAE;cACvChR,QAAQ,GAAGtH,CAAC;cACZ,GAAG;gBACCsH,QAAQ,GAAGA,QAAQ,GAAG,KAAK;gBAC3B2Q,QAAQ,CAAC1Q,KAAK,GAAGD,QAAQ;gBACzB,IAAIiR,SAAS,GAAGN,QAAQ,CAACO,YAAY,CAACvK,IAAI,EAAE2C,MAAM,CAAC;gBACnD,IAAItJ,QAAQ,GAAGoD,GAAG,EAAE;kBAChBuN,QAAQ,CAAC1Q,KAAK,GAAGmD,GAAG;kBACpB;gBACJ;gBACA/E,IAAI,GAAGsS,QAAQ,CAACE,aAAa,CAAClK,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE2C,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;gBACzD,IAAI2H,SAAS,GAAG5Y,KAAK,IAAIgG,IAAI,CAAC,CAAC,CAAC,GAAG2S,CAAC,EAAE;kBAClCL,QAAQ,CAAC1Q,KAAK,GAAGD,QAAQ;kBACzB;gBACJ;cACJ,CAAC,QAAQA,QAAQ,GAAGoD,GAAG;cACvBsN,CAAC,GAAG1Q,QAAQ;cACZ;YACJ;UACJ;QACJ;MACJ;IACJ,CAAC,MACI,IAAI0Q,CAAC,GAAG,EAAE,EAAE;MACbA,CAAC,GAAG,EAAE;IACV;IACA,OAAOA,CAAC;EACZ,CAAC;EACD,OAAOnB,gBAAgB;AAC3B,CAAC,CAACxC,YAAY,CAAE;AAChB,SAASwC,gBAAgB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAItK,eAAe,GAAG,aAAe,UAAUoB,MAAM,EAAE;EACnD3V,SAAS,CAACuU,eAAe,EAAEoB,MAAM,CAAC;EAClC,SAASpB,eAAeA,CAAChN,IAAI,EAAEoC,IAAI,EAAEnC,MAAM,EAAE;IACzC,IAAIoO,KAAK,GAAGD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrC,IAAItO,IAAI,IAAIoC,IAAI,IAAInC,MAAM,EAAE;MACxBoO,KAAK,CAACG,WAAW,CAACxO,IAAI,EAAEoC,IAAI,EAAEnC,MAAM,CAAC;IACzC;IACA,OAAOoO,KAAK;EAChB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIrB,eAAe,CAACxH,KAAK,GAAG,UAAUhC,IAAI,EAAEnC,UAAU,EAAEoN,cAAc,EAAEvL,SAAS,EAAE;IAC3E,IAAI6J,KAAK,GAAG,IAAIC,eAAe,CAAC,CAAC;IACjCD,KAAK,CAAClO,SAAS,GAAG,IAAI;IACtBkO,KAAK,CAACnP,KAAK,GAAG4F,IAAI;IAClBuJ,KAAK,CAAChP,WAAW,GAAGsD,UAAU;IAC9B0L,KAAK,CAACtL,eAAe,GAAGgN,cAAc;IACtC1B,KAAK,CAACzJ,IAAI,GAAGJ,SAAS;IACtB,IAAI6J,KAAK,CAAChP,WAAW,CAACG,GAAG,CAAC,MAAM,CAAC,EAAE;MAC/B6O,KAAK,CAACvP,KAAK,GAAGuP,KAAK,CAAChP,WAAW,CAACR,GAAG,CAAC,MAAM,CAAC;IAC/C;IACA,IAAIiX,OAAO,GAAGzH,KAAK,CAAChP,WAAW,CAACwD,QAAQ,CAAC,KAAK,CAAC;IAC/C,IAAIiT,OAAO,KAAK,IAAI,IAAI,OAAOA,OAAO,KAAK,WAAW,EAAE;MACpDzH,KAAK,CAACE,WAAW,GAAG,IAAIjU,KAAK,CAACwb,OAAO,CAAC/W,MAAM,CAAC;IACjD;IACAsP,KAAK,CAAC9N,aAAa,GAAG,CAAC;IACvB8N,KAAK,CAACzH,YAAY,GAAG,IAAIgB,GAAG,CAAC,CAAC;IAC9B,IAAIyG,KAAK,CAACrM,UAAU,GAAG,CAAC,EAAE;MACtBqM,KAAK,CAACiH,oBAAoB,CAAC,CAAC;IAChC;IACA,OAAOjH,KAAK;EAChB,CAAC;EACDC,eAAe,CAAC3T,SAAS,CAAC2a,oBAAoB,GAAG,YAAY;IACzD,IAAI,IAAI,CAACjW,WAAW,CAACG,GAAG,CAAC,KAAK,CAAC,EAAE;MAC7B,IAAIsW,OAAO,GAAG,IAAI,CAACzW,WAAW,CAACwD,QAAQ,CAAC,KAAK,CAAC;MAC9C,IAAIiT,OAAO,IAAIA,OAAO,CAAC/W,MAAM,GAAG,CAAC,EAAE;QAC/B,IAAIqG,KAAK,GAAG,IAAI,CAAC/F,WAAW,CAACR,GAAG,CAAC,GAAG,CAAC;QACrC,KAAK,IAAIkD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+T,OAAO,CAAC/W,MAAM,EAAEgD,CAAC,EAAE,EAAE;UACrC,IAAI,OAAOqD,KAAK,KAAK,WAAW,IAAIA,KAAK,KAAK,IAAI,EAAE;YAChD,IAAI,CAACmJ,WAAW,CAACvL,MAAM,CAACyB,QAAQ,CAAC1C,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAGwT,OAAO,CAAC9S,MAAM,CAACyB,QAAQ,CAAC1C,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACnG,IAAIP,CAAC,KAAKqD,KAAK,EAAE;cACb,IAAI,CAAC9E,MAAM,CAACyB,CAAC,CAAC,CAACyM,KAAK,GAAG,IAAI,CAACD,WAAW,CAACvL,MAAM,CAACyB,QAAQ,CAAC1C,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;cAC1E,IAAI,CAAC+S,cAAc,GAAGtT,CAAC;YAC3B,CAAC,MACI;cACD,IAAI,CAACzB,MAAM,CAACyB,CAAC,CAAC,CAACyM,KAAK,GAAG,IAAI,CAACD,WAAW,CAACvL,MAAM,CAACyB,QAAQ,CAAC1C,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC9E;UACJ,CAAC,MACI;YACD,IAAI,CAAChC,MAAM,CAACyB,CAAC,CAAC,CAACyM,KAAK,GAAG,EAAE;UAC7B;QACJ;MACJ;IACJ;EACJ,CAAC;EACDF,eAAe,CAAC3T,SAAS,CAACqX,iBAAiB,GAAG,UAAU3L,IAAI,EAAE;IAC1D,IAAIqD,SAAS,GAAG,IAAItO,eAAe,CAAC,CAAC;IACrC,IAAIiL,IAAI,EAAE;MACN,IAAI9E,MAAM,GAAG8E,IAAI,CAAC9E,MAAM;MACxB,IAAID,IAAI,GAAG+E,IAAI,CAACiB,QAAQ,CAAC,CAAC;MAC1B,IAAIjB,IAAI,CAAClG,SAAS,IAAImB,IAAI,IAAI,OAAOA,IAAI,CAAC0M,QAAQ,KAAK,WAAW,IAAI1M,IAAI,CAAC0M,QAAQ,KAAKjR,gBAAgB,CAACoH,MAAM,EAAE;QAC7GuF,SAAS,CAACnI,MAAM,GAAG,IAAI,CAACyN,cAAc,CAAC,CAACzN,MAAM,CAACC,CAAC,EAAED,MAAM,CAACE,CAAC,EAAEF,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACI,MAAM,CAAC,EAAEL,IAAI,CAACoG,IAAI,EAAEpG,IAAI,CAAC0M,QAAQ,CAAC;MACvH,CAAC,MACI;QACDtE,SAAS,CAACnI,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAEA,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACI,MAAM,CAAC;MAC1D;MACA,IAAIyQ,SAAS,GAAG/L,IAAI,CAACG,SAAS;MAC9B,IAAI4L,SAAS,EAAE;QACX1I,SAAS,CAACE,SAAS,GAAG,IAAIrM,QAAQ,CAAC6U,SAAS,CAAC;MACjD;MACA1I,SAAS,CAAC+B,SAAS,GAAG,IAAIlO,QAAQ,CAAC8I,IAAI,CAACpE,KAAK,CAAC;MAC9C,IAAIqB,MAAM,GAAG+C,IAAI,CAAC/C,MAAM;MACxBoG,SAAS,CAACI,SAAS,GAAG,IAAItM,MAAM,CAAC6I,IAAI,CAAC5D,WAAW,EAAEa,MAAM,CAAC5B,KAAK,CAAC;MAChEgI,SAAS,CAACjG,WAAW,GAAGH,MAAM,CAAC6E,KAAK;MACpCuB,SAAS,CAACK,WAAW,GAAGzG,MAAM,CAAC5B,KAAK;MACpC,IAAI0Q,SAAS,EAAE;QACX,IAAIxG,WAAW,GAAG,CAACwG,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,EAAEA,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,EAAEA,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;QAC3E,IAAInQ,KAAK,GAAG,CAAC2J,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,EACjDA,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,EACxCA,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAC7ClC,SAAS,CAACW,WAAW,GAAG,IAAI9M,QAAQ,CAAC0E,KAAK,CAAC;MAC/C;MACAyH,SAAS,CAACtF,aAAa,GAAGiC,IAAI,CAACvE,MAAM;MACrC,IAAIiR,SAAS,GAAG,OAAO1M,IAAI,CAACqL,aAAa,KAAK,WAAW,GAAGrL,IAAI,CAACqL,aAAa,GAAG9U,gBAAgB,CAAC0S,IAAI;MACtG,IAAI0J,iBAAiB,GAAG,IAAI,CAAClC,WAAW,GAAGzZ,oBAAoB,CAAC4b,GAAG,GAAG5b,oBAAoB,CAACoQ,MAAM;MACjG/D,SAAS,CAACwP,YAAY,GAAG,IAAI9b,eAAe,CAAC2V,SAAS,EAAEiG,iBAAiB,CAAC;IAC9E,CAAC,MACI;MACD,IAAIzX,MAAM,GAAG,IAAI,CAACA,MAAM;MACxB,IAAI,IAAI,CAACpB,SAAS,IACd,IAAI,CAACmB,IAAI,IACT,OAAO,IAAI,CAACA,IAAI,CAAC0M,QAAQ,KAAK,WAAW,IACzC,IAAI,CAAC1M,IAAI,CAAC0M,QAAQ,KAAKjR,gBAAgB,CAACoH,MAAM,EAAE;QAChDuF,SAAS,CAACnI,MAAM,GAAG,IAAI,CAACyN,cAAc,CAAC,CAACzN,MAAM,CAACC,CAAC,EAAED,MAAM,CAACE,CAAC,EAAEF,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACI,MAAM,CAAC,EAAE,IAAI,CAACL,IAAI,CAACoG,IAAI,EAAE,IAAI,CAACpG,IAAI,CAAC0M,QAAQ,CAAC;MACjI,CAAC,MACI;QACDtE,SAAS,CAACnI,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAEA,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACI,MAAM,CAAC;MAC1D;MACA,IAAIyQ,SAAS,GAAG,IAAI,CAAC5L,SAAS;MAC9B,IAAI4L,SAAS,EAAE;QACX1I,SAAS,CAACE,SAAS,GAAG,IAAIrM,QAAQ,CAAC6U,SAAS,CAAC;MACjD;MACA1I,SAAS,CAAC+B,SAAS,GAAG,IAAIlO,QAAQ,CAAC,IAAI,CAAC0E,KAAK,CAAC;MAC9C,IAAIqB,MAAM,GAAG,IAAI,CAACA,MAAM;MACxBoG,SAAS,CAACI,SAAS,GAAG,IAAItM,MAAM,CAAC,IAAI,CAACiF,WAAW,EAAEa,MAAM,CAAC5B,KAAK,CAAC;MAChEgI,SAAS,CAACjG,WAAW,GAAGH,MAAM,CAAC6E,KAAK;MACpCuB,SAAS,CAACK,WAAW,GAAGzG,MAAM,CAAC5B,KAAK;MACpC,IAAI0Q,SAAS,EAAE;QACX,IAAIxG,WAAW,GAAG,CAACwG,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,EAAEA,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,EAAEA,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;QAC3E,IAAInQ,KAAK,GAAG,CAAC2J,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,EACjDA,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,EACxCA,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAC7ClC,SAAS,CAACW,WAAW,GAAG,IAAI9M,QAAQ,CAAC0E,KAAK,CAAC;MAC/C;MACAyH,SAAS,CAACtF,aAAa,GAAG,IAAI,CAACA,aAAa;MAC5C,IAAI2O,SAAS,GAAG,OAAO,IAAI,CAACrB,aAAa,KAAK,WAAW,GAAG,IAAI,CAACA,aAAa,GAAG9U,gBAAgB,CAAC0S,IAAI;MACtG,IAAI0J,iBAAiB,GAAG,IAAI,CAAClC,WAAW,GAAGzZ,oBAAoB,CAAC4b,GAAG,GAAG5b,oBAAoB,CAACoQ,MAAM;MACjG/D,SAAS,CAACwP,YAAY,GAAG,IAAI9b,eAAe,CAAC2V,SAAS,EAAEiG,iBAAiB,CAAC;IAC9E;IACAtP,SAAS,CAACrG,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAClC,IAAI0K,QAAQ,GAAG,IAAI5Q,WAAW,CAACuM,SAAS,CAACnI,MAAM,EAAE,IAAI,CAACwB,eAAe,CAAC;IACtE,IAAI+H,QAAQ,GAAGiD,QAAQ,CAACjD,QAAQ;IAChCA,QAAQ,CAACmD,GAAG,CAACkL,MAAM,CAAC,CAAC;IACrB,IAAI,CAAC,IAAI,CAAC9V,QAAQ,EAAE;MAChByH,QAAQ,CAACmD,GAAG,CAACqE,oBAAoB,CAAC,IAAI,CAAC;MACvCxH,QAAQ,CAACyH,sBAAsB,CAAC,CAAC;IACrC;IACA,IAAI,IAAI,CAACpS,SAAS,EAAE;MAChB,IAAIoI,IAAI,GAAG,IAAI,CAACgP,WAAW,CAAClR,IAAI,CAAC;MACjC,IAAK,OAAOkC,IAAI,KAAK,WAAW,IAAIA,IAAI,KAAK,IAAI,IAAM,CAAC,IAAI,CAACpI,SAAS,IAAIoI,IAAI,CAACb,IAAI,KAAK,CAAE,EAAE;QACxFa,IAAI,GAAG,IAAI,CAAClK,eAAe;MAC/B;MACA,IAAI,CAACmc,YAAY,CAAC1P,QAAQ,EAAEpB,SAAS,EAAEnB,IAAI,EAAEmB,SAAS,CAACwP,YAAY,CAAC;IACxE,CAAC,MACI;MACD,IAAI,CAAC,IAAI,CAAC1Q,KAAK,EAAE;QACb,IAAI,CAACA,KAAK,GAAG,IAAI,CAACjK,gBAAgB;MACtC;MACA,IAAI,CAACic,YAAY,CAAC1P,QAAQ,EAAEpB,SAAS,EAAE,IAAI,CAAClB,KAAK,EAAEkB,SAAS,CAACwP,YAAY,CAAC;IAC9E;IACA,IAAI,CAAC,IAAI,CAAC7V,QAAQ,EAAE;MAChByH,QAAQ,CAACmD,GAAG,CAACyE,kBAAkB,CAAC,CAAC;IACrC;IACA,OAAO3E,QAAQ;EACnB,CAAC;EACDO,eAAe,CAAC3T,SAAS,CAAC6f,YAAY,GAAG,UAAU1P,QAAQ,EAAEpB,SAAS,EAAEnB,IAAI,EAAE2Q,YAAY,EAAE;IACxF,IAAIpO,QAAQ,CAACqI,mBAAmB,IAAIzJ,SAAS,CAACrG,QAAQ,EAAE;MACpDyH,QAAQ,CAACiC,IAAI,CAAC,CAAC;MACfjC,QAAQ,CAACyH,sBAAsB,CAAC,CAAC;IACrC;IACA,IAAI,CAAC/I,uBAAuB,CAACsB,QAAQ,EAAEpB,SAAS,CAAC;IACjD,IAAIoB,QAAQ,CAACqI,mBAAmB,IAAIzJ,SAAS,CAACrG,QAAQ,EAAE;MACpDyH,QAAQ,CAAC4C,OAAO,CAAC,CAAC;MAClB5C,QAAQ,CAACiC,IAAI,CAAC,CAAC;MACfjC,QAAQ,CAACmD,GAAG,CAACqE,oBAAoB,CAAC,IAAI,CAAC;MACvCxH,QAAQ,CAACyH,sBAAsB,CAAC,CAAC;IACrC;IACA,IAAIuD,OAAO,GAAG,IAAI,CAACrH,QAAQ;IAC3B,IAAIgM,OAAO,GAAG,SAAAA,CAAUrV,KAAK,EAAE;MAC3B,IAAIiB,IAAI,GAAGyP,OAAO,CAAC9S,MAAM,CAACyB,QAAQ,CAACW,KAAK,CAAC9C,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;MACzD,IAAIoY,UAAU,GAAG,EAAE;MACnB,IAAI3Q,WAAW,GAAGL,SAAS,CAACK,WAAW;MACvC,IAAIuP,iBAAiB,GAAG,CAAC,GAAGvP,WAAW;MACvC,IAAIwP,cAAc,GAAG,CAAC;MACtB,IAAIC,OAAO,GAAI9P,SAAS,CAACjG,WAAW,KAAK3G,cAAc,CAACgH,KAAK,IAAI4F,SAAS,CAACjG,WAAW,KAAK3G,cAAc,CAAC+G,OAAQ;MAClH,IAAI2V,OAAO,EAAE;QACTkB,UAAU,CAAChQ,IAAI,CAAC,CAAC,GAAG4O,iBAAiB,CAAC;QACtCoB,UAAU,CAAChQ,IAAI,CAAC,CAACtF,KAAK,GAAG,CAAC,IAAI2E,WAAW,GAAGxB,IAAI,CAACoE,QAAQ,CAACC,UAAU,CAAC,CAAC,GAAGxH,KAAK,CAAC;MACnF,CAAC,MACI;QACDsV,UAAU,CAAChQ,IAAI,CAAC4O,iBAAiB,GAAGC,cAAc,CAAC;QACnDmB,UAAU,CAAChQ,IAAI,CAAC,CAACtF,KAAK,GAAG,CAAC,IAAI2E,WAAW,GAAGxB,IAAI,CAACoE,QAAQ,CAACC,UAAU,CAAC,CAAC,GAAGxH,KAAK,IAAImU,cAAc,GAAG,CAAC,CAAC,CAAC;MAC1G;MACA,IAAIhP,KAAK,GAAGb,SAAS,CAAC+B,SAAS;MAC/B,IAAIwD,IAAI,GAAGvF,SAAS,CAACnI,MAAM;MAC3B,IAAIG,KAAK,GAAGuN,IAAI,CAAC,CAAC,CAAC,GAAGqK,iBAAiB;MACvC,IAAIrN,SAAS,GAAGgD,IAAI;MACpB,IAAIuK,OAAO,EAAE;QACTvN,SAAS,CAAC,CAAC,CAAC,IAAIqN,iBAAiB;MACrC,CAAC,MACI;QACDrN,SAAS,CAAC,CAAC,CAAC,IAAIlC,WAAW;MAC/B;MACAe,QAAQ,CAAC2O,OAAO,CAACxN,SAAS,EAAE/O,WAAW,CAACwc,OAAO,CAAC;MAChD,IAAIiB,QAAQ,GAAG,KAAK;MACpB,IAAIhC,eAAe,GAAGiC,MAAM,CAACvb,WAAW,CAACR,GAAG,CAAC,GAAG,CAAC;MACjD,IAAI8Z,eAAe,KAAK,IAAI,IAAI,OAAOA,eAAe,KAAK,WAAW,IAAIA,eAAe,CAAC5Z,MAAM,GAAG,CAAC,EAAE;QAClG4Z,eAAe,CAAC9Q,OAAO,CAAC,UAAU2N,aAAa,EAAE;UAC7CmF,QAAQ,GAAGA,QAAQ,IAAKnF,aAAa,KAAKpQ,KAAM;QACpD,CAAC,CAAC;MACN;MACA,IAAIsE,SAAS,CAACtF,aAAa,KAAK,CAAC,EAAE;QAC/B,IAAIuW,QAAQ,EAAE;UACV,IAAInZ,CAAC,GAAGyN,IAAI,CAAC,CAAC,CAAC,GAAGlF,WAAW;UAC7B,IAAIyP,OAAO,EAAE;YACThY,CAAC,IAAIuI,WAAW;YAChBrI,KAAK,IAAI4X,iBAAiB;UAC9B;UACA/O,KAAK,GAAG,IAAIhN,QAAQ,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;UACrCuN,QAAQ,CAACnB,aAAa,CAACnI,CAAC,EAAEkZ,UAAU,CAAC,CAAC,CAAC,EAAEhZ,KAAK,EAAE6G,IAAI,CAACoE,QAAQ,CAACC,UAAU,CAAC,CAAC,EAAErC,KAAK,CAAC;UAClFA,KAAK,GAAG,IAAIhN,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACnC;MACJ;MACA,IAAIsC,KAAK,GAAGwG,IAAI,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC;MACvC,IAAIsT,aAAa,GAAG,CAACe,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,EAAEhZ,KAAK,GAAGgZ,UAAU,CAAC,CAAC,CAAC,EAAEnS,IAAI,CAACoE,QAAQ,CAACC,UAAU,CAAC,CAAC,CAAC;MACrG,IAAIlD,SAAS,CAACtF,aAAa,GAAG,CAAC,EAAE;QAC7B,IAAI4G,KAAK,GAAGF,QAAQ,CAACiC,IAAI,CAAC,CAAC;QAC3B,IAAIrD,SAAS,CAACtF,aAAa,KAAK,EAAE,EAAE;UAChC0G,QAAQ,CAACoC,kBAAkB,CAAC,CAAC,EAAEpC,QAAQ,CAACxB,KAAK,CAAC,CAAC,CAAC,CAAC;UACjDwB,QAAQ,CAACqC,eAAe,CAAC,CAAC,EAAE,CAAC;UAC7B,IAAI3L,CAAC,GAAGsJ,QAAQ,CAACxB,KAAK,CAAC,CAAC,CAAC,IAAI2C,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,CAAC;UACzD,IAAIxK,CAAC,GAAGwK,SAAS,CAAC,CAAC,CAAC;UACpBA,SAAS,GAAG,CAACzK,CAAC,EAAEC,CAAC,EAAEwK,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,CAAC;QACjE,CAAC,MACI,IAAIvC,SAAS,CAACtF,aAAa,KAAK,GAAG,EAAE;UACtC0G,QAAQ,CAACoC,kBAAkB,CAACpC,QAAQ,CAACxB,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;UACjDwB,QAAQ,CAACqC,eAAe,CAAC,CAAC,GAAG,CAAC;UAC9B,IAAI3L,CAAC,GAAGyK,SAAS,CAAC,CAAC,CAAC;UACpB,IAAIxK,CAAC,GAAGqJ,QAAQ,CAACxB,KAAK,CAAC,CAAC,CAAC,IAAI2C,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,CAAC;UACzDA,SAAS,GAAG,CAACzK,CAAC,EAAEC,CAAC,EAAEwK,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,CAAC;QACjE,CAAC,MACI,IAAIvC,SAAS,CAACtF,aAAa,KAAK,GAAG,EAAE;UACtC0G,QAAQ,CAACoC,kBAAkB,CAACpC,QAAQ,CAACxB,KAAK,CAAC,CAAC,CAAC,EAAEwB,QAAQ,CAACxB,KAAK,CAAC,CAAC,CAAC,CAAC;UACjEwB,QAAQ,CAACqC,eAAe,CAAC,CAAC,GAAG,CAAC;UAC9B,IAAI3L,CAAC,GAAGsJ,QAAQ,CAACxB,KAAK,CAAC,CAAC,CAAC,IAAI2C,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,CAAC;UACzD,IAAIxK,CAAC,GAAGqJ,QAAQ,CAACxB,KAAK,CAAC,CAAC,CAAC,IAAI2C,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,CAAC;UACzDA,SAAS,GAAG,CAACzK,CAAC,EAAEC,CAAC,EAAEwK,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,CAAC;QAClD;QACA,IAAI0O,QAAQ,EAAE;UACV,IAAInZ,CAAC,GAAGyN,IAAI,CAAC,CAAC,CAAC,GAAGlF,WAAW;UAC7B,IAAIyP,OAAO,EAAE;YACThY,CAAC,IAAIuI,WAAW;YAChBrI,KAAK,IAAI4X,iBAAiB;UAC9B;UACA/O,KAAK,GAAG,IAAIhN,QAAQ,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;UACrCuN,QAAQ,CAACnB,aAAa,CAACnI,CAAC,EAAEkZ,UAAU,CAAC,CAAC,CAAC,EAAEhZ,KAAK,EAAE6G,IAAI,CAACoE,QAAQ,CAACC,UAAU,CAAC,CAAC,EAAErC,KAAK,CAAC;UAClFA,KAAK,GAAG,IAAIhN,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACnC;QACAuN,QAAQ,CAACyC,UAAU,CAAC1N,KAAK,EAAE0I,IAAI,EAAEoR,aAAa,EAAE,IAAI,EAAEpP,KAAK,EAAE2O,YAAY,CAAC;QAC1EpO,QAAQ,CAAC4C,OAAO,CAAC1C,KAAK,CAAC;MAC3B,CAAC,MACI;QACDF,QAAQ,CAACyC,UAAU,CAAC1N,KAAK,EAAE0I,IAAI,EAAEoR,aAAa,EAAE,IAAI,EAAEpP,KAAK,EAAE2O,YAAY,CAAC;MAC9E;IACJ,CAAC;IACD,IAAI0B,MAAM,GAAG,IAAI;IACjB,KAAK,IAAIxV,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG0Q,OAAO,CAAC/W,MAAM,EAAE,EAAEqG,KAAK,EAAE;MACjDqV,OAAO,CAACrV,KAAK,CAAC;IAClB;IACA,IAAI0F,QAAQ,CAACqI,mBAAmB,IAAIzJ,SAAS,CAACrG,QAAQ,EAAE;MACpDyH,QAAQ,CAACmD,GAAG,CAACyE,kBAAkB,CAAC,CAAC;MACjC5H,QAAQ,CAAC4C,OAAO,CAAC,CAAC;IACtB;EACJ,CAAC;EACDY,eAAe,CAAC3T,SAAS,CAACsd,cAAc,GAAG,UAAUT,UAAU,EAAE;IAC7D,IAAIwC,QAAQ,GAAG,IAAItc,eAAe,CAAC8Z,UAAU,EAAE,EAAE,EAAE5Z,YAAY,CAACU,OAAO,CAAC;IACxE,IAAIqU,MAAM,GAAG,IAAIvV,eAAe,CAACR,gBAAgB,CAAC0S,IAAI,EAAEjS,oBAAoB,CAACoQ,MAAM,CAAC;IACpF,IAAIsM,CAAC,GAAG,CAAC;IACT,IAAI,IAAI,CAACxL,WAAW,CAACxP,MAAM,GAAG,CAAC,EAAE;MAC7B,IAAIwN,GAAG,GAAGyN,QAAQ,CAACE,aAAa,CAAC,IAAI,CAAC3L,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEoE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9E,KAAK,IAAI5Q,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACwM,WAAW,CAACxP,MAAM,EAAE,EAAEgD,CAAC,EAAE;QAC9C,IAAIlC,KAAK,GAAGma,QAAQ,CAACE,aAAa,CAAC,IAAI,CAAC3L,WAAW,CAACvL,MAAM,CAACyB,QAAQ,CAAC1C,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEqQ,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAChHpG,GAAG,GAAIA,GAAG,GAAG1M,KAAK,GAAI0M,GAAG,GAAG1M,KAAK;MACrC;MACAka,CAAC,GAAK,EAAE,IAAI,IAAI,CAACxY,MAAM,CAACG,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC4B,MAAM,CAAC5B,KAAK,CAAC,GAAI6K,GAAI;MAC9DwN,CAAC,GAAIA,CAAC,GAAG,EAAE,GAAI,EAAE,GAAGA,CAAC;IACzB;IACA,OAAOA,CAAC;EACZ,CAAC;EACD,OAAOzL,eAAe;AAC1B,CAAC,CAAC8H,YAAY,CAAE;AAChB,SAAS9H,eAAe;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIuM,iBAAiB,GAAG,aAAe,UAAUnL,MAAM,EAAE;EACrD3V,SAAS,CAAC8gB,iBAAiB,EAAEnL,MAAM,CAAC;EACpC,SAASmL,iBAAiBA,CAACvZ,IAAI,EAAEoC,IAAI,EAAEnC,MAAM,EAAE;IAC3C,IAAIoO,KAAK,GAAGD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrCD,KAAK,CAACmL,SAAS,GAAG,KAAK;IACvB,IAAIxZ,IAAI,IAAIoC,IAAI,IAAInC,MAAM,EAAE;MACxBoO,KAAK,CAACG,WAAW,CAACxO,IAAI,EAAEoC,IAAI,EAAEnC,MAAM,CAAC;IACzC;IACA,OAAOoO,KAAK;EAChB;EACAxV,MAAM,CAACyE,cAAc,CAACic,iBAAiB,CAAClgB,SAAS,EAAE,UAAU,EAAE;IAC3D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQkE,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI,CAAC,IAAI,CAACic,SAAS,EAAE;QACjB,IAAI,CAACC,YAAY,CAAC,CAAC;MACvB;MACA,OAAO,IAAI,CAACD,SAAS;IACzB,CAAC;IACD9b,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF9E,MAAM,CAACyE,cAAc,CAACic,iBAAiB,CAAClgB,SAAS,EAAE,WAAW,EAAE;IAC5D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQkE,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAAC0D,eAAe,CAAC,IAAI,CAAC;IACrC,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ3C,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAAC2C,gBAAgB,CAAC3C,KAAK,EAAE,IAAI,CAAC;IACtC,CAAC;IACDb,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF4b,iBAAiB,CAAC/T,KAAK,GAAG,UAAUhC,IAAI,EAAEnC,UAAU,EAAEoN,cAAc,EAAEvL,SAAS,EAAE;IAC7E,IAAI6J,KAAK,GAAG,IAAIwM,iBAAiB,CAAC,CAAC;IACnCxM,KAAK,CAAClO,SAAS,GAAG,IAAI;IACtBkO,KAAK,CAACnP,KAAK,GAAG4F,IAAI;IAClBuJ,KAAK,CAAChP,WAAW,GAAGsD,UAAU;IAC9B0L,KAAK,CAACtL,eAAe,GAAGgN,cAAc;IACtC1B,KAAK,CAACzJ,IAAI,GAAGJ,SAAS;IACtB,IAAI6J,KAAK,CAAChP,WAAW,CAACG,GAAG,CAAC,MAAM,CAAC,EAAE;MAC/B6O,KAAK,CAACvP,KAAK,GAAGuP,KAAK,CAAChP,WAAW,CAACR,GAAG,CAAC,MAAM,CAAC;IAC/C;IACAwP,KAAK,CAAC9N,aAAa,GAAG,CAAC;IACvB8N,KAAK,CAACzH,YAAY,GAAG,IAAIgB,GAAG,CAAC,CAAC;IAC9B,OAAOyG,KAAK;EAChB,CAAC;EACDwM,iBAAiB,CAAClgB,SAAS,CAACmV,WAAW,GAAG,UAAUxO,IAAI,EAAEoC,IAAI,EAAEnC,MAAM,EAAE;IACpE,IAAI,CAACwB,eAAe,GAAGzB,IAAI,CAACyB,eAAe;IAC3C,IAAI,CAAC1B,KAAK,GAAGC,IAAI;IACjB,IAAI,CAACnC,KAAK,GAAGuE,IAAI;IACjB,IAAI,CAACrE,WAAW,GAAG,IAAIxE,cAAc,CAAC,IAAI,CAACkI,eAAe,CAAC;IAC3D,IAAI,CAAC6B,IAAI,GAAG,IAAI,CAAC7B,eAAe,CAACgG,iBAAiB,CAAC,CAAC;IACpD,IAAI,CAAChG,eAAe,CAACkG,SAAS,CAACrJ,GAAG,CAAC,IAAI,CAACgF,IAAI,EAAE,IAAI,CAACvF,WAAW,CAAC;IAC/D,IAAI,CAACA,WAAW,CAACkS,KAAK,GAAG,IAAI,CAAC3M,IAAI,CAACtC,QAAQ,CAAC,CAAC;IAC7C,IAAI,CAACjD,WAAW,CAACU,MAAM,CAAC,IAAI,EAAEhF,QAAQ,CAAC8D,GAAG,CAAC,KAAK,CAAC,CAAC;IAClD,IAAI,CAACQ,WAAW,CAACU,MAAM,CAAC,GAAG,EAAE2D,IAAI,CAAC;IAClC,IAAI,CAACnD,aAAa,GAAG,CAAC;IACtB,IAAI,CAAC+H,eAAe,CAAC,IAAI,CAACnK,YAAY,CAAC;IACvC,IAAI,CAACqT,WAAW,CAACjQ,MAAM,CAAC;EAC5B,CAAC;EACDsZ,iBAAiB,CAAClgB,SAAS,CAAC6W,WAAW,GAAG,UAAUjQ,MAAM,EAAE;IACxD,IAAIlB,MAAM,GAAG,IAAInF,mBAAmB,CAAC,CAAC;IACtCmF,MAAM,CAACoR,OAAO,CAAC,IAAI,CAACpQ,KAAK,EAAEE,MAAM,EAAE,IAAI,CAAC;IACxClB,MAAM,CAAChB,WAAW,CAACU,MAAM,CAAC,IAAI,EAAE,IAAIlF,cAAc,CAAC,IAAI,CAACkI,eAAe,CAAC,CAAC;IACzE1C,MAAM,CAACqC,aAAa,CAAC3C,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5CM,MAAM,CAACqC,aAAa,CAAC3C,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5CM,MAAM,CAAChB,WAAW,CAACU,MAAM,CAAC,IAAI,EAAE,IAAI,CAACmJ,SAAS,GAAG,gBAAgB,CAAC;IAClE,IAAI,CAACyE,SAAS,CAACtN,MAAM,CAAC;EAC1B,CAAC;EACDwa,iBAAiB,CAAClgB,SAAS,CAACiX,cAAc,GAAG,UAAUC,SAAS,EAAE;IAC9D,IAAIA,SAAS,KAAK,KAAK,CAAC,EAAE;MAAEA,SAAS,GAAG,KAAK;IAAE;IAC/C,IAAImJ,cAAc,GAAG,IAAI,CAAChU,cAAc,IAAI,IAAI,CAAC9H,KAAK,CAAC8H,cAAc;IACrE,IAAI,CAAC,IAAI,CAAC7G,SAAS,KAAK0R,SAAS,IAAImJ,cAAc,CAAC,EAAE;MAClD,IAAIlJ,KAAK,GAAG,IAAI,CAAC9P,UAAU;MAC3B,IAAI8P,KAAK,GAAG,CAAC,EAAE;QACX,KAAK,IAAI/P,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+P,KAAK,EAAE/P,CAAC,EAAE,EAAE;UAC5B,IAAIsE,IAAI,GAAG,IAAI,CAAC/F,MAAM,CAACyB,CAAC,CAAC;UACzB,IAAIsE,IAAI,IAAIA,IAAI,CAAChH,WAAW,KAAK2b,cAAc,IAAKnJ,SAAS,IAAI,CAACxL,IAAI,CAAChH,WAAW,CAACG,GAAG,CAAC,IAAI,CAAE,CAAC,EAAE;YAC5F,IAAIuO,QAAQ,GAAG,IAAI,CAACiE,iBAAiB,CAAC3L,IAAI,EAAEwL,SAAS,CAAC;YACtD,IAAI,CAAChD,cAAc,CAACxI,IAAI,CAAChH,WAAW,EAAE0O,QAAQ,EAAE,GAAG,CAAC;UACxD;QACJ;MACJ;IACJ;IACA,IAAI8D,SAAS,EAAE;MACX,IAAIC,KAAK,GAAG,IAAI,CAAC9P,UAAU;MAC3B,IAAI8P,KAAK,GAAG,CAAC,EAAE;QACX,IAAImJ,iBAAiB,GAAG,KAAK,CAAC;QAC9B,KAAK,IAAIlZ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+P,KAAK,EAAE/P,CAAC,EAAE,EAAE;UAC5B,IAAIsE,IAAI,GAAG,IAAI,CAAC/F,MAAM,CAACyB,CAAC,CAAC;UACzB,IAAIsE,IAAI,IAAIA,IAAI,CAAChH,WAAW,EAAE;YAC1B,IAAIiC,IAAI,GAAG+E,IAAI,CAACiB,QAAQ,CAAC,CAAC;YAC1B,IAAIhG,IAAI,EAAE;cACN,IAAI,CAAC2Z,iBAAiB,IAAIlZ,CAAC,KAAK,CAAC,EAAE;gBAC/BkZ,iBAAiB,GAAG,IAAI,CAACC,gBAAgB,CAAC7U,IAAI,CAAChH,WAAW,CAAC;cAC/D;cACA,IAAI,CAAC8b,iBAAiB,CAAC9U,IAAI,CAAChH,WAAW,EAAEiC,IAAI,EAAE+E,IAAI,CAAC9E,MAAM,EAAE0Z,iBAAiB,CAAC;YAClF;UACJ;QACJ;MACJ,CAAC,MACI;QACD,IAAI,CAACE,iBAAiB,CAAC,IAAI,CAAC9b,WAAW,EAAE,IAAI,CAACiC,IAAI,EAAE,IAAI,CAACC,MAAM,CAAC;MACpE;IACJ;EACJ,CAAC;EACDsZ,iBAAiB,CAAClgB,SAAS,CAACqX,iBAAiB,GAAG,UAAU3R,MAAM,EAAEwR,SAAS,EAAE;IACzE,IAAItQ,MAAM,GAAGlB,MAAM,CAACkB,MAAM;IAC1B,IAAIwM,QAAQ,GAAG,IAAI5Q,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,EAAEoE,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACI,MAAM,CAAC,EAAE,IAAI,CAACoB,eAAe,CAAC;IACzFzG,UAAU,CAACyR,QAAQ,EAAE,IAAI,CAAC;IAC1BA,QAAQ,CAACoE,oBAAoB,GAAG,KAAK;IACrC,IAAIrH,QAAQ,GAAGiD,QAAQ,CAACjD,QAAQ;IAChC,IAAIpB,SAAS,GAAG,IAAItO,eAAe,CAAC,CAAC;IACrCsO,SAAS,CAACnI,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAEA,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACI,MAAM,CAAC;IACtD,IAAIyQ,SAAS,GAAG/R,MAAM,CAACmG,SAAS;IAChC,IAAIqL,SAAS,IAAIO,SAAS,EAAE;MACxB1I,SAAS,CAACE,SAAS,GAAG,IAAIrM,QAAQ,CAAC6U,SAAS,CAAC;IACjD;IACA1I,SAAS,CAAC+B,SAAS,GAAG,IAAIlO,QAAQ,CAAC8C,MAAM,CAAC4B,KAAK,CAAC;IAChD,IAAIqB,MAAM,GAAGjD,MAAM,CAACiD,MAAM;IAC1BoG,SAAS,CAACI,SAAS,GAAG,IAAItM,MAAM,CAAC6C,MAAM,CAACoC,WAAW,EAAEa,MAAM,CAAC5B,KAAK,CAAC;IAClEgI,SAAS,CAACjG,WAAW,GAAGH,MAAM,CAAC6E,KAAK;IACpCuB,SAAS,CAACK,WAAW,GAAGzG,MAAM,CAAC5B,KAAK;IACpC,IAAI0Q,SAAS,EAAE;MACX,IAAIxG,WAAW,GAAG,CAACwG,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,EAAEA,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,EAAEA,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;MAC3E,IAAInQ,KAAK,GAAG,CAAC2J,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,EACjDA,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,EACxCA,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAC7ClC,SAAS,CAACW,WAAW,GAAG,IAAI9M,QAAQ,CAAC0E,KAAK,CAAC;IAC/C;IACAyH,SAAS,CAACtF,aAAa,GAAG/D,MAAM,CAACyB,MAAM;IACvCgJ,QAAQ,CAACiC,IAAI,CAAC,CAAC;IACfjC,QAAQ,CAACyH,sBAAsB,CAAC,CAAC;IACjC,IAAI,CAAC/I,uBAAuB,CAACsB,QAAQ,EAAEpB,SAAS,CAAC;IACjDoB,QAAQ,CAAC4C,OAAO,CAAC,CAAC;IAClB,OAAOK,QAAQ;EACnB,CAAC;EACD8M,iBAAiB,CAAClgB,SAAS,CAACwgB,iBAAiB,GAAG,UAAUxY,UAAU,EAAErB,IAAI,EAAEC,MAAM,EAAE6Z,iBAAiB,EAAE;IACnG,IAAIrN,QAAQ;IACZ,IAAIpL,UAAU,CAACnD,GAAG,CAAC,IAAI,CAAC,EAAE;MACtB,IAAI6b,oBAAoB,GAAG1Y,UAAU,CAAC9D,GAAG,CAAC,IAAI,CAAC;MAC/C,IAAIwc,oBAAoB,IAAIA,oBAAoB,CAAC7b,GAAG,CAAC,GAAG,CAAC,EAAE;QACvD,IAAI0S,gBAAgB,GAAGmJ,oBAAoB,CAACxc,GAAG,CAAC,GAAG,CAAC;QACpD,IAAI2F,SAAS,GAAG6W,oBAAoB,CAAC1V,MAAM,CAAC,GAAG,CAAC;QAChD,IAAInB,SAAS,IAAI0N,gBAAgB,EAAE;UAC/BA,gBAAgB,CAAC1N,SAAS,GAAGA,SAAS;QAC1C;QACA,IAAI0N,gBAAgB,EAAE;UAClB,IAAIkJ,iBAAiB,EAAE;YACnBrN,QAAQ,GAAGqN,iBAAiB;UAChC,CAAC,MACI;YACDrN,QAAQ,GAAG,IAAI5Q,WAAW,CAAC+U,gBAAgB,EAAE,IAAI,CAACnP,eAAe,CAAC;UACtE;UACA,IAAIgL,QAAQ,IAAIzM,IAAI,EAAE;YAClB,IAAIwJ,QAAQ,GAAGxJ,IAAI,CAACwJ,QAAQ;YAC5B,IAAIE,KAAK,GAAGF,QAAQ,CAACiC,IAAI,CAAC,CAAC;YAC3B,IAAIzL,IAAI,CAAC0M,QAAQ,KAAKjR,gBAAgB,CAACoH,MAAM,EAAE;cAC3C2G,QAAQ,CAACgD,aAAa,CAACC,QAAQ,EAAE,IAAI,CAACuN,wBAAwB,CAAC/Z,MAAM,EAAED,IAAI,EAAEyM,QAAQ,EAAEjD,QAAQ,CAAC,CAAC;YACrG,CAAC,MACI;cACDA,QAAQ,CAACgD,aAAa,CAACC,QAAQ,EAAExM,MAAM,CAAC;YAC5C;YACAuJ,QAAQ,CAAC4C,OAAO,CAAC1C,KAAK,CAAC;UAC3B;QACJ;MACJ;IACJ,CAAC,MACI,IAAIoQ,iBAAiB,IAAI9Z,IAAI,EAAE;MAChC,IAAIwJ,QAAQ,GAAGxJ,IAAI,CAACwJ,QAAQ;MAC5B,IAAIE,KAAK,GAAGF,QAAQ,CAACiC,IAAI,CAAC,CAAC;MAC3B,IAAIzL,IAAI,CAAC0M,QAAQ,KAAKjR,gBAAgB,CAACoH,MAAM,EAAE;QAC3C2G,QAAQ,CAACgD,aAAa,CAACC,QAAQ,EAAE,IAAI,CAACuN,wBAAwB,CAAC/Z,MAAM,EAAED,IAAI,EAAEyM,QAAQ,EAAEjD,QAAQ,CAAC,CAAC;MACrG,CAAC,MACI;QACDA,QAAQ,CAACgD,aAAa,CAACC,QAAQ,EAAExM,MAAM,CAAC;MAC5C;MACAuJ,QAAQ,CAAC4C,OAAO,CAAC1C,KAAK,CAAC;IAC3B;EACJ,CAAC;EACD6P,iBAAiB,CAAClgB,SAAS,CAAC2gB,wBAAwB,GAAG,UAAU/Z,MAAM,EAAED,IAAI,EAAEyM,QAAQ,EAAEjD,QAAQ,EAAE;IAC/F,IAAItJ,CAAC,GAAGD,MAAM,CAACC,CAAC;IAChB,IAAIC,CAAC,GAAGF,MAAM,CAACE,CAAC;IAChB,IAAIH,IAAI,EAAE;MACN,IAAIia,gBAAgB,GAAG,IAAI,CAACC,uBAAuB,CAAC1Q,QAAQ,CAAC2Q,OAAO,CAAC;MACrE,IAAIF,gBAAgB,KAAK,EAAE,EAAE;QACzBzQ,QAAQ,CAACoC,kBAAkB,CAACa,QAAQ,CAACzE,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACjDwB,QAAQ,CAACqC,eAAe,CAAC,EAAE,CAAC;QAC5B3L,CAAC,GAAGD,MAAM,CAACC,CAAC;QACZC,CAAC,GAAG,EAAEH,IAAI,CAACgI,KAAK,CAAC,CAAC,CAAC,GAAG/H,MAAM,CAACE,CAAC,GAAGF,MAAM,CAACI,MAAM,CAAC;MACnD,CAAC,MACI,IAAI4Z,gBAAgB,KAAK,GAAG,EAAE;QAC/BzQ,QAAQ,CAACoC,kBAAkB,CAACa,QAAQ,CAACzE,KAAK,CAAC,CAAC,CAAC,EAAEyE,QAAQ,CAACzE,KAAK,CAAC,CAAC,CAAC,CAAC;QACjEwB,QAAQ,CAACqC,eAAe,CAAC,GAAG,CAAC;QAC7B3L,CAAC,GAAG,EAAEF,IAAI,CAACgI,KAAK,CAAC,CAAC,CAAC,IAAI/H,MAAM,CAACC,CAAC,GAAGuM,QAAQ,CAACzE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACrD7H,CAAC,GAAG,EAAEH,IAAI,CAACgI,KAAK,CAAC,CAAC,CAAC,GAAG/H,MAAM,CAACE,CAAC,GAAGsM,QAAQ,CAACzE,KAAK,CAAC,CAAC,CAAC,CAAC;MACvD,CAAC,MACI,IAAIiS,gBAAgB,KAAK,GAAG,EAAE;QAC/BzQ,QAAQ,CAACoC,kBAAkB,CAAC,CAAC,EAAEa,QAAQ,CAACzE,KAAK,CAAC,CAAC,CAAC,CAAC;QACjDwB,QAAQ,CAACqC,eAAe,CAAC,GAAG,CAAC;QAC7B3L,CAAC,GAAG,EAAEF,IAAI,CAACgI,KAAK,CAAC,CAAC,CAAC,GAAG/H,MAAM,CAACC,CAAC,GAAGD,MAAM,CAACG,KAAK,CAAC;QAC9CD,CAAC,GAAGF,MAAM,CAACE,CAAC;MAChB;IACJ;IACA,OAAO;MAAED,CAAC,EAAEA,CAAC;MAAEC,CAAC,EAAEA,CAAC;MAAEC,KAAK,EAAEH,MAAM,CAACG,KAAK;MAAEC,MAAM,EAAEJ,MAAM,CAACI;IAAO,CAAC;EACrE,CAAC;EACDkZ,iBAAiB,CAAClgB,SAAS,CAAC6gB,uBAAuB,GAAG,UAAUE,MAAM,EAAE;IACpE,IAAI7Z,KAAK,GAAGyK,IAAI,CAACqP,KAAK,CAACrP,IAAI,CAACsP,KAAK,CAACF,MAAM,CAACD,OAAO,CAACI,SAAS,CAAC,CAAC,CAAC,EAAEH,MAAM,CAACD,OAAO,CAACI,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGvP,IAAI,CAACwP,EAAE,CAAC;IAC5G,QAAQja,KAAK;MACT,KAAK,CAAC,EAAE;QACJA,KAAK,GAAG,EAAE;QACV;MACJ,KAAK,CAAC,GAAG;QACLA,KAAK,GAAG,GAAG;QACX;MACJ,KAAK,EAAE;QACHA,KAAK,GAAG,GAAG;QACX;IACR;IACA,OAAOA,KAAK;EAChB,CAAC;EACDgZ,iBAAiB,CAAClgB,SAAS,CAACugB,gBAAgB,GAAG,UAAUvY,UAAU,EAAE;IACjE,IAAIoL,QAAQ;IACZ,IAAIpL,UAAU,CAACnD,GAAG,CAAC,IAAI,CAAC,EAAE;MACtB,IAAI6b,oBAAoB,GAAG1Y,UAAU,CAAC9D,GAAG,CAAC,IAAI,CAAC;MAC/C,IAAIwc,oBAAoB,IAAIA,oBAAoB,CAAC7b,GAAG,CAAC,GAAG,CAAC,EAAE;QACvD,IAAI0S,gBAAgB,GAAGmJ,oBAAoB,CAACxc,GAAG,CAAC,GAAG,CAAC;QACpD,IAAI2F,SAAS,GAAG6W,oBAAoB,CAAC1V,MAAM,CAAC,GAAG,CAAC;QAChD,IAAInB,SAAS,EAAE;UACX0N,gBAAgB,CAAC1N,SAAS,GAAGA,SAAS;QAC1C;QACA,IAAI0N,gBAAgB,EAAE;UAClBnE,QAAQ,GAAG,IAAI5Q,WAAW,CAAC+U,gBAAgB,EAAE,IAAI,CAACnP,eAAe,CAAC;QACtE;MACJ;IACJ;IACA,OAAOgL,QAAQ;EACnB,CAAC;EACD8M,iBAAiB,CAAClgB,SAAS,CAACogB,YAAY,GAAG,YAAY;IACnD,IAAI,IAAI,CAAC1b,WAAW,IAAI,IAAI,CAACA,WAAW,CAACG,GAAG,CAAC,GAAG,CAAC,EAAE;MAC/C,IAAImD,UAAU,GAAG,IAAI,CAACtD,WAAW,CAACR,GAAG,CAAC,GAAG,CAAC;MAC1C,IAAI8D,UAAU,KAAK,IAAI,IAAI,OAAOA,UAAU,KAAK,WAAW,IAAIA,UAAU,CAAC+E,IAAI,GAAG,CAAC,EAAE;QACjF,IAAI,CAACoT,SAAS,GAAG,IAAI;MACzB;IACJ;EACJ,CAAC;EACD,OAAOD,iBAAiB;AAC5B,CAAC,CAAC7c,QAAQ,CAAE;AACZ,SAAS6c,iBAAiB;AAC1B,IAAIxY,qBAAqB,GAAG,aAAe,YAAY;EACnD,SAASA,qBAAqBA,CAAC4F,EAAE,EAAE;IAC/B,IAAIhG,KAAK;IACT,IAAImH,QAAQ,GAAG,EAAE;IACjB,IAAIC,QAAQ,GAAG,CAAC;IAChB,IAAIpB,EAAE,IAAI,OAAOA,EAAE,KAAK,QAAQ,IAAIA,EAAE,KAAK,EAAE,EAAE;MAC3C,IAAI8T,MAAM,GAAG9T,EAAE,CAACyP,KAAK,CAAC,GAAG,CAAC;MAC1B,KAAK,IAAI3V,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGga,MAAM,CAAChd,MAAM,EAAEgD,CAAC,EAAE,EAAE;QACpC,QAAQga,MAAM,CAAC/Y,MAAM,CAACyB,QAAQ,CAAC1C,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;UAC7C,KAAK,GAAG;YACJL,KAAK,GAAG,CAACe,MAAM,CAACC,UAAU,CAAC8Y,MAAM,CAACha,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC1C;UACJ,KAAK,IAAI;YACLE,KAAK,GAAG,CAACe,MAAM,CAACC,UAAU,CAAC8Y,MAAM,CAACha,CAAC,GAAG,CAAC,CAAC,CAAC,EAAEiB,MAAM,CAACC,UAAU,CAAC8Y,MAAM,CAACha,CAAC,GAAG,CAAC,CAAC,CAAC,EAAEiB,MAAM,CAACC,UAAU,CAAC8Y,MAAM,CAACha,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC9G;UACJ,KAAK,GAAG;YACJE,KAAK,GAAG,CAACe,MAAM,CAACC,UAAU,CAAC8Y,MAAM,CAACha,CAAC,GAAG,CAAC,CAAC,CAAC,EAAEiB,MAAM,CAACC,UAAU,CAAC8Y,MAAM,CAACha,CAAC,GAAG,CAAC,CAAC,CAAC,EAAEiB,MAAM,CAACC,UAAU,CAAC8Y,MAAM,CAACha,CAAC,GAAG,CAAC,CAAC,CAAC,EACzGiB,MAAM,CAACC,UAAU,CAAC8Y,MAAM,CAACha,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACrC;UACJ,KAAK,IAAI;YACLsH,QAAQ,GAAGrG,MAAM,CAACC,UAAU,CAAC8Y,MAAM,CAACha,CAAC,GAAG,CAAC,CAAC,CAAC;YAC3CqH,QAAQ,GAAG2S,MAAM,CAACha,CAAC,GAAG,CAAC,CAAC,CAACgW,SAAS,CAAC,CAAC,CAAC;YACrC,IAAI3O,QAAQ,CAAC4S,QAAQ,CAAC,KAAK,CAAC,EAAE;cAC1B5S,QAAQ,CAACwO,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;YAChC;YACA;QACR;MACJ;IACJ;IACA,IAAI,CAACxO,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACpH,KAAK,GAAI,OAAOA,KAAK,KAAK,WAAW,GAAIhG,WAAW,CAACgG,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAChF;EACAI,qBAAqB,CAAC1H,SAAS,CAAC2H,QAAQ,GAAG,YAAY;IACnD,IAAIL,KAAK,GAAG,CAACe,MAAM,CAACC,UAAU,CAAC,CAAC,IAAI,CAAChB,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,EAAEiB,OAAO,CAAC,CAAC,CAAC,CAAC,EAC5DF,MAAM,CAACC,UAAU,CAAC,CAAC,IAAI,CAAChB,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,EAAEiB,OAAO,CAAC,CAAC,CAAC,CAAC,EACnDF,MAAM,CAACC,UAAU,CAAC,CAAC,IAAI,CAAChB,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,EAAEiB,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IACxD,OAAO,GAAG,GACN,IAAI,CAACkG,QAAQ,GACb,GAAG,GACH,IAAI,CAACC,QAAQ,GACb,MAAM,GACNpH,KAAK,CAAC,CAAC,CAAC,CAACK,QAAQ,CAAC,CAAC,GACnB,GAAG,GACHL,KAAK,CAAC,CAAC,CAAC,CAACK,QAAQ,CAAC,CAAC,GACnB,GAAG,GACHL,KAAK,CAAC,CAAC,CAAC,CAACK,QAAQ,CAAC,CAAC,GACnB,KAAK;EACb,CAAC;EACD,OAAOD,qBAAqB;AAChC,CAAC,CAAC,CAAE;AACJ,SAASA,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}