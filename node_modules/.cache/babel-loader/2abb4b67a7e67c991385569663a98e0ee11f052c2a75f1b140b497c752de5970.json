{"ast":null,"code":"import * as CONSTANT from './../base/constant';\n/**\n * Link internal component\n *\n * @hidden\n\n */\nvar MDInsertText = /** @class */function () {\n  /**\n   * Constructor for creating the insert text plugin\n   *\n   * @param {MarkdownParser} parent - specifies the parent element\n   * @hidden\n    */\n  function MDInsertText(parent) {\n    this.parent = parent;\n    this.selection = this.parent.markdownSelection;\n    this.addEventListener();\n  }\n  MDInsertText.prototype.addEventListener = function () {\n    this.parent.observer.on(CONSTANT.INSERT_TEXT_COMMAND, this.InsertTextExec, this);\n  };\n  MDInsertText.prototype.InsertTextExec = function (e) {\n    var textArea = this.parent.element;\n    textArea.focus();\n    var start = textArea.selectionStart;\n    var end = textArea.selectionEnd;\n    var text = e.value.text;\n    var startOffset = start + text.length;\n    var endOffset = end + text.length;\n    textArea.value = textArea.value.substr(0, start) + text + textArea.value.substr(end, textArea.value.length);\n    this.parent.markdownSelection.setSelection(textArea, startOffset, endOffset);\n    this.restore(textArea, startOffset, endOffset, e);\n  };\n  MDInsertText.prototype.restore = function (textArea, start, end, event) {\n    this.selection.save(start, end);\n    this.selection.restore(textArea);\n    if (event && event.callBack) {\n      event.callBack({\n        requestType: event.subCommand,\n        selectedText: this.selection.getSelectedText(textArea),\n        editorMode: 'Markdown',\n        event: event.event\n      });\n    }\n  };\n  return MDInsertText;\n}();\nexport { MDInsertText };","map":{"version":3,"names":["CONSTANT","MDInsertText","parent","selection","markdownSelection","addEventListener","prototype","observer","on","INSERT_TEXT_COMMAND","InsertTextExec","e","textArea","element","focus","start","selectionStart","end","selectionEnd","text","value","startOffset","length","endOffset","substr","setSelection","restore","event","save","callBack","requestType","subCommand","selectedText","getSelectedText","editorMode"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-richtexteditor/src/markdown-parser/plugin/insert-text.js"],"sourcesContent":["import * as CONSTANT from './../base/constant';\n/**\n * Link internal component\n *\n * @hidden\n\n */\nvar MDInsertText = /** @class */ (function () {\n    /**\n     * Constructor for creating the insert text plugin\n     *\n     * @param {MarkdownParser} parent - specifies the parent element\n     * @hidden\n\n     */\n    function MDInsertText(parent) {\n        this.parent = parent;\n        this.selection = this.parent.markdownSelection;\n        this.addEventListener();\n    }\n    MDInsertText.prototype.addEventListener = function () {\n        this.parent.observer.on(CONSTANT.INSERT_TEXT_COMMAND, this.InsertTextExec, this);\n    };\n    MDInsertText.prototype.InsertTextExec = function (e) {\n        var textArea = this.parent.element;\n        textArea.focus();\n        var start = textArea.selectionStart;\n        var end = textArea.selectionEnd;\n        var text = e.value.text;\n        var startOffset = start + text.length;\n        var endOffset = end + text.length;\n        textArea.value = textArea.value.substr(0, start)\n            + text + textArea.value.substr(end, textArea.value.length);\n        this.parent.markdownSelection.setSelection(textArea, startOffset, endOffset);\n        this.restore(textArea, startOffset, endOffset, e);\n    };\n    MDInsertText.prototype.restore = function (textArea, start, end, event) {\n        this.selection.save(start, end);\n        this.selection.restore(textArea);\n        if (event && event.callBack) {\n            event.callBack({\n                requestType: event.subCommand,\n                selectedText: this.selection.getSelectedText(textArea),\n                editorMode: 'Markdown',\n                event: event.event\n            });\n        }\n    };\n    return MDInsertText;\n}());\nexport { MDInsertText };\n"],"mappings":"AAAA,OAAO,KAAKA,QAAQ,MAAM,oBAAoB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,YAAY,GAAG,aAAe,YAAY;EAC1C;AACJ;AACA;AACA;AACA;AACA;EAEI,SAASA,YAAYA,CAACC,MAAM,EAAE;IAC1B,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,SAAS,GAAG,IAAI,CAACD,MAAM,CAACE,iBAAiB;IAC9C,IAAI,CAACC,gBAAgB,CAAC,CAAC;EAC3B;EACAJ,YAAY,CAACK,SAAS,CAACD,gBAAgB,GAAG,YAAY;IAClD,IAAI,CAACH,MAAM,CAACK,QAAQ,CAACC,EAAE,CAACR,QAAQ,CAACS,mBAAmB,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;EACpF,CAAC;EACDT,YAAY,CAACK,SAAS,CAACI,cAAc,GAAG,UAAUC,CAAC,EAAE;IACjD,IAAIC,QAAQ,GAAG,IAAI,CAACV,MAAM,CAACW,OAAO;IAClCD,QAAQ,CAACE,KAAK,CAAC,CAAC;IAChB,IAAIC,KAAK,GAAGH,QAAQ,CAACI,cAAc;IACnC,IAAIC,GAAG,GAAGL,QAAQ,CAACM,YAAY;IAC/B,IAAIC,IAAI,GAAGR,CAAC,CAACS,KAAK,CAACD,IAAI;IACvB,IAAIE,WAAW,GAAGN,KAAK,GAAGI,IAAI,CAACG,MAAM;IACrC,IAAIC,SAAS,GAAGN,GAAG,GAAGE,IAAI,CAACG,MAAM;IACjCV,QAAQ,CAACQ,KAAK,GAAGR,QAAQ,CAACQ,KAAK,CAACI,MAAM,CAAC,CAAC,EAAET,KAAK,CAAC,GAC1CI,IAAI,GAAGP,QAAQ,CAACQ,KAAK,CAACI,MAAM,CAACP,GAAG,EAAEL,QAAQ,CAACQ,KAAK,CAACE,MAAM,CAAC;IAC9D,IAAI,CAACpB,MAAM,CAACE,iBAAiB,CAACqB,YAAY,CAACb,QAAQ,EAAES,WAAW,EAAEE,SAAS,CAAC;IAC5E,IAAI,CAACG,OAAO,CAACd,QAAQ,EAAES,WAAW,EAAEE,SAAS,EAAEZ,CAAC,CAAC;EACrD,CAAC;EACDV,YAAY,CAACK,SAAS,CAACoB,OAAO,GAAG,UAAUd,QAAQ,EAAEG,KAAK,EAAEE,GAAG,EAAEU,KAAK,EAAE;IACpE,IAAI,CAACxB,SAAS,CAACyB,IAAI,CAACb,KAAK,EAAEE,GAAG,CAAC;IAC/B,IAAI,CAACd,SAAS,CAACuB,OAAO,CAACd,QAAQ,CAAC;IAChC,IAAIe,KAAK,IAAIA,KAAK,CAACE,QAAQ,EAAE;MACzBF,KAAK,CAACE,QAAQ,CAAC;QACXC,WAAW,EAAEH,KAAK,CAACI,UAAU;QAC7BC,YAAY,EAAE,IAAI,CAAC7B,SAAS,CAAC8B,eAAe,CAACrB,QAAQ,CAAC;QACtDsB,UAAU,EAAE,UAAU;QACtBP,KAAK,EAAEA,KAAK,CAACA;MACjB,CAAC,CAAC;IACN;EACJ,CAAC;EACD,OAAO1B,YAAY;AACvB,CAAC,CAAC,CAAE;AACJ,SAASA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}