{"ast":null,"code":"import { closest, createElement, detach, isNullOrUndefined as isNOU, removeClass } from '@syncfusion/ej2-base';\nimport * as EVENTS from '../../common/constant';\nimport { SelectionCommands } from '../plugin';\nvar FormatPainterActions = /** @class */function () {\n  function FormatPainterActions(parent, options) {\n    this.INVALID_TAGS = ['A', 'AUDIO', 'IMG', 'VIDEO', 'IFRAME'];\n    this.parent = parent;\n    this.settings = options;\n    this.addEventListener();\n    this.setDeniedFormats();\n  }\n  FormatPainterActions.prototype.addEventListener = function () {\n    this.parent.observer.on(EVENTS.FORMAT_PAINTER_ACTIONS, this.actionHandler, this);\n    this.parent.observer.on(EVENTS.MODEL_CHANGED_PLUGIN, this.onPropertyChanged, this);\n  };\n  FormatPainterActions.prototype.onPropertyChanged = function (prop) {\n    if (prop && prop.module === 'formatPainter') {\n      if (!isNOU(prop.newProp.formatPainterSettings.allowedFormats)) {\n        this.settings.allowedFormats = prop.newProp.formatPainterSettings.allowedFormats;\n      }\n      if (!isNOU(prop.newProp.formatPainterSettings.deniedFormats)) {\n        this.settings.deniedFormats = prop.newProp.formatPainterSettings.deniedFormats;\n        this.setDeniedFormats();\n      }\n    }\n  };\n  FormatPainterActions.prototype.removeEventListener = function () {\n    this.parent.observer.off(EVENTS.FORMAT_PAINTER_ACTIONS, this.actionHandler);\n    this.parent.observer.off(EVENTS.MODEL_CHANGED_PLUGIN, this.onPropertyChanged);\n  };\n  /**\n   * Destroys the format painter.\n   *\n   * @function destroy\n   * @returns {void}\n   * @hidden\n    */\n  FormatPainterActions.prototype.destroy = function () {\n    this.removeEventListener();\n    this.INVALID_TAGS = null;\n    this.copyCollection = null;\n    this.deniedFormatsCollection = null;\n    this.newElem = null;\n    this.newElemLastChild = null;\n    this.settings = null;\n    this.parent = null;\n  };\n  FormatPainterActions.prototype.actionHandler = function (args) {\n    this.settings.allowedContext = ['Text', 'List', 'Table'];\n    if (!isNOU(args) && !isNOU(args.item) && !isNOU(args.item.formatPainterAction)) {\n      switch (args.item.formatPainterAction) {\n        case 'format-copy':\n          this.copyAction();\n          break;\n        case 'format-paste':\n          this.pasteAction();\n          break;\n        case 'escape':\n          this.escapeAction();\n          break;\n      }\n      this.callBack(args);\n    }\n  };\n  FormatPainterActions.prototype.callBack = function (event) {\n    if (event.callBack) {\n      event.callBack({\n        requestType: 'FormatPainter',\n        action: event.item.formatPainterAction,\n        event: event.event,\n        editorMode: 'HTML',\n        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n      });\n    }\n  };\n  FormatPainterActions.prototype.generateElement = function () {\n    var copyCollection = this.copyCollection.slice(); // To clone without reversing the collcection array\n    copyCollection.reverse();\n    var length = copyCollection.length;\n    var elemCollection = createElement('div', {\n      className: 'e-format-paste-wrapper'\n    });\n    var lastAppendChild;\n    for (var i = 0; i < length; i++) {\n      var _a = copyCollection[i],\n        attrs = _a.attrs,\n        className = _a.className,\n        styles = _a.styles,\n        tagName = _a.tagName;\n      var elem = createElement(tagName);\n      if (className !== '') {\n        elem.className = className;\n      }\n      for (var i_1 = 0; i_1 < attrs.length; i_1++) {\n        var property = attrs[i_1].name;\n        var value = attrs[i_1].value;\n        elem.setAttribute(property, value);\n      }\n      for (var i_2 = 0; i_2 < styles.length; i_2++) {\n        var property = styles[i_2].property;\n        var value = styles[i_2].value;\n        var priority = styles[i_2].priority;\n        elem.style.setProperty(property, value, priority);\n      }\n      if (elemCollection.childElementCount === 0) {\n        elemCollection.append(elem);\n        lastAppendChild = elem;\n      } else {\n        lastAppendChild.append(elem);\n        lastAppendChild = elem;\n      }\n    }\n    var elemChild = this.removeDeniedFormats(elemCollection);\n    var currentElem = elemChild;\n    while (currentElem) {\n      if (currentElem.firstChild === null) {\n        lastAppendChild = currentElem;\n        currentElem = undefined;\n      } else {\n        currentElem = currentElem.firstChild;\n      }\n    }\n    this.newElem = elemChild;\n    this.newElemLastChild = lastAppendChild;\n  };\n  FormatPainterActions.prototype.pasteAction = function () {\n    if (isNOU(this.copyCollection) || this.copyCollection.length === 0) {\n      this.paintPlainTextFormat();\n      return;\n    }\n    this.insertFormatNode(this.newElem, this.newElemLastChild);\n  };\n  FormatPainterActions.prototype.removeDeniedFormats = function (parentElement) {\n    if (!isNOU(this.deniedFormatsCollection) && this.deniedFormatsCollection.length > 0) {\n      var deniedPropArray = this.deniedFormatsCollection;\n      var length_1 = deniedPropArray.length;\n      for (var i = 0; i < length_1; i++) {\n        var tag = deniedPropArray[i].tag;\n        if (deniedPropArray[i].tag) {\n          var elementsList = parentElement.querySelectorAll(tag);\n          for (var j = 0; j < elementsList.length; j++) {\n            if (deniedPropArray[i].classes.length > 0) {\n              var classes = deniedPropArray[i].classes;\n              var classLength = classes.length;\n              for (var k = 0; k < classLength; k++) {\n                if (elementsList[j].classList.contains(classes[k])) {\n                  removeClass([elementsList[j]], classes[k].trim());\n                }\n              }\n              if (elementsList[j].classList.length === 0) {\n                elementsList[j].removeAttribute('class');\n              }\n            }\n            if (deniedPropArray[i].styles.length > 0) {\n              var styles = deniedPropArray[i].styles;\n              var styleLength = styles.length;\n              for (var k = 0; k < styleLength; k++) {\n                elementsList[j].style.removeProperty(styles[k].trim());\n              }\n              if (elementsList[j].style.length === 0) {\n                elementsList[j].removeAttribute('style');\n              }\n            }\n            if (deniedPropArray[i].attributes.length > 0) {\n              var attributes = deniedPropArray[i].attributes;\n              var attributeLength = attributes.length;\n              for (var k = 0; k < attributeLength; k++) {\n                elementsList[j].removeAttribute(attributes[k].trim());\n              }\n            }\n          }\n        }\n      }\n    }\n    return parentElement.firstElementChild;\n  };\n  FormatPainterActions.prototype.copyAction = function () {\n    var copyCollection = [];\n    var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\n    var domSelection = this.parent.nodeSelection;\n    var nodes = range.collapsed ? domSelection.getSelectionNodeCollection(range) : domSelection.getSelectionNodeCollectionBr(range);\n    if (nodes.length === 0 && domSelection.getSelectionNodeCollectionBr(range).length === 0) {\n      return;\n    } else {\n      nodes = nodes.length === 0 ? domSelection.getSelectionNodeCollectionBr(range) : nodes;\n    }\n    var parentElem = nodes[0].parentElement;\n    var currentContext = this.findCurrentContext(parentElem);\n    var allowedRulesArray = this.settings.allowedFormats.indexOf(';') > -1 ? this.settings.allowedFormats.split(';') : [this.settings.allowedFormats];\n    for (var i = 0; i < allowedRulesArray.length; i++) {\n      allowedRulesArray[i] = allowedRulesArray[i].trim();\n    }\n    var _a = this.getRangeParentElem(currentContext, parentElem),\n      rangeParentElem = _a[0],\n      context = _a[1];\n    if (currentContext === null) {\n      currentContext = context;\n    }\n    if (!isNOU(currentContext) && this.settings.allowedContext.indexOf(currentContext) > -1) {\n      if (range.startContainer.nodeName === '#text') {\n        parentElem = range.startContainer.parentElement;\n      }\n      var lastElement = parentElem;\n      do {\n        if (allowedRulesArray.indexOf(parentElem.nodeName.toLowerCase()) > -1) {\n          var allAttributes = parentElem.attributes;\n          var attribute = [];\n          for (var i = 0; i < allAttributes.length; i++) {\n            if (allAttributes[i].name !== 'class' && allAttributes[i].name !== 'style') {\n              attribute.push(allAttributes[i]);\n            }\n          }\n          var classes = parentElem.className;\n          var allStyles = parentElem.style;\n          var styleProp = [];\n          for (var i = 0; i < allStyles.length; i++) {\n            var property = allStyles[i];\n            var value = allStyles.getPropertyValue(property);\n            var priority = allStyles.getPropertyPriority(property);\n            styleProp.push({\n              property: property,\n              value: value,\n              priority: priority\n            });\n          }\n          copyCollection.push({\n            attrs: attribute,\n            className: classes,\n            styles: styleProp,\n            tagName: parentElem.nodeName\n          });\n        }\n        if (rangeParentElem === parentElem) {\n          parentElem = undefined;\n        } else if (!isNOU(parentElem.parentElement)) {\n          parentElem = parentElem.parentElement;\n        }\n        if (lastElement === parentElem) {\n          break;\n        }\n      } while (!isNOU(parentElem) || parentElem === this.parent.editableElement);\n      this.copyCollection = copyCollection;\n    }\n    this.generateElement();\n  };\n  FormatPainterActions.prototype.getRangeParentElem = function (currentContext, rangeParent) {\n    var startContainer = rangeParent;\n    var rangeParentELem;\n    if (startContainer.nodeType === 3) {\n      startContainer = startContainer.parentElement;\n    }\n    switch (currentContext) {\n      case 'Table':\n        rangeParentELem = closest(startContainer, 'td');\n        if (isNOU(rangeParentELem)) {\n          rangeParentELem = closest(startContainer, 'th');\n        }\n        break;\n      case 'List':\n        rangeParentELem = closest(startContainer, 'li');\n        break;\n      case 'Text':\n        rangeParentELem = closest(startContainer, 'p');\n        break;\n    }\n    if (isNOU(rangeParentELem)) {\n      var nearBlockParentName = this.getNearestBlockParentElement(rangeParent);\n      if (!isNOU(nearBlockParentName) && nearBlockParentName !== 'UL' && nearBlockParentName !== 'OL' && nearBlockParentName !== 'LI') {\n        rangeParentELem = closest(startContainer, nearBlockParentName);\n        currentContext = 'Text';\n      }\n    }\n    if (currentContext === 'List') {\n      rangeParentELem = rangeParentELem.parentElement;\n    }\n    return [rangeParentELem, currentContext];\n  };\n  FormatPainterActions.prototype.getNearestBlockParentElement = function (rangeParent) {\n    var node = rangeParent;\n    if (node.nodeType === 3) {\n      node = node.parentNode;\n    }\n    // iterate untill the content editable div\n    while (node && node !== this.parent.editableElement) {\n      // If true return the block node name.\n      if (!isNOU(node) && this.isBlockElement(node)) {\n        return node.nodeName;\n      }\n      // if false re assign node to parent node\n      node = node.parentNode;\n    }\n    return null;\n  };\n  FormatPainterActions.prototype.isBlockElement = function (node) {\n    var blockTags = ['P', 'DIV', 'UL', 'OL', 'LI', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'ADDRESS', 'ARTICLE', 'ASIDE', 'BLOCKQUOTE', 'FIGCAPTION', 'FIGURE', 'FOOTER', 'HEADER', 'HR', 'MAIN', 'NAV', 'SECTION', 'SUMMARY', 'PRE'];\n    return blockTags.indexOf(node.nodeName) > -1;\n  };\n  FormatPainterActions.prototype.escapeAction = function () {\n    this.copyCollection = [];\n  };\n  FormatPainterActions.prototype.paintPlainTextFormat = function () {\n    var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\n    var domSelection = this.parent.nodeSelection;\n    var nodes = range.collapsed ? domSelection.getSelectionNodeCollection(range) : domSelection.getSelectionNodeCollectionBr(range);\n    var isInValid;\n    if (nodes.length > 1) {\n      for (var i = 0; i < nodes.length; i++) {\n        isInValid = this.validateELementTag(nodes[i]);\n      }\n    } else {\n      isInValid = this.validateELementTag(range.startContainer) && this.validateELementTag(range.endContainer);\n    }\n    if (!isInValid) {\n      this.parent.execCommand('Clear', 'ClearFormat', null, null);\n    }\n  };\n  FormatPainterActions.prototype.validateELementTag = function (node) {\n    if (node.nodeType === 3) {\n      node = node.parentElement;\n    }\n    return this.INVALID_TAGS.indexOf(node.tagName) > -1;\n  };\n  FormatPainterActions.prototype.findCurrentContext = function (parentElem) {\n    var closestParagraph = closest(parentElem, 'p');\n    var closestList = closest(parentElem, 'li');\n    if (closestParagraph && !closestList) {\n      return 'Text';\n    } else if (closest(parentElem, 'li')) {\n      if (!isNOU(closestParagraph) && !isNOU(closestList) && closestParagraph.textContent.trim() !== closestList.textContent.trim()) {\n        return 'Text';\n      }\n      return 'List';\n    } else if (closest(parentElem, 'td') || closest(parentElem, 'tr') || closest(parentElem, 'th')) {\n      return 'Table';\n    }\n    return null;\n  };\n  FormatPainterActions.prototype.insertFormatNode = function (elem, lastChild) {\n    var clonedElem = elem.cloneNode(true);\n    if (!this.isBlockElement(elem)) {\n      var newBlockElem = createElement('P');\n      newBlockElem.appendChild(elem);\n      clonedElem = newBlockElem.cloneNode(true);\n    }\n    var endNode = this.parent.editableElement;\n    var docElement = this.parent.currentDocument;\n    var childElem = clonedElem.firstChild;\n    var inlineElement;\n    while (childElem) {\n      if (this.isBlockElement(childElem)) {\n        childElem = childElem.firstChild;\n      } else {\n        inlineElement = childElem.parentNode.removeChild(childElem);\n        break;\n      }\n    }\n    var formatValues = {\n      element: inlineElement,\n      lastChild: lastChild\n    };\n    SelectionCommands.applyFormat(docElement, null, endNode, 'P', 'formatPainter', null, formatValues);\n    var range = this.parent.nodeSelection.getRange(docElement);\n    var isCollapsed = range.collapsed;\n    var blockNodes = this.parent.domNode.blockNodes();\n    var isFullNodeSelected = false;\n    if (blockNodes.length === 1) {\n      isFullNodeSelected = blockNodes[0].textContent.trim() === range.toString().trim();\n    }\n    if (this.isBlockElement(clonedElem) && isCollapsed || blockNodes.length > 1 || isFullNodeSelected) {\n      this.insertBlockNode(clonedElem, range, docElement, blockNodes);\n    }\n  };\n  FormatPainterActions.prototype.insertBlockNode = function (element, range, docElement, nodes) {\n    var domSelection = this.parent.nodeSelection;\n    var saveSelection = domSelection.save(range, docElement);\n    this.parent.domNode.setMarker(saveSelection);\n    var listElement; // To clone to multiple list elements\n    var cloneListParentNode;\n    var sameListType = false;\n    if (element.nodeName === 'UL' || element.nodeName === 'OL') {\n      cloneListParentNode = element.cloneNode(true);\n      listElement = cloneListParentNode.firstChild;\n    }\n    var cloneElementNode = isNOU(cloneListParentNode) ? element : element.firstChild;\n    for (var index = 0; index < nodes.length; index++) {\n      if (this.INVALID_TAGS.indexOf(nodes[index].nodeName) > -1 || nodes[index].querySelectorAll('img,audio,video,iframe').length > 0) {\n        continue;\n      }\n      var cloneParentNode = cloneElementNode.cloneNode(false);\n      // Appending all the child elements\n      while (nodes[index].firstChild) {\n        if (nodes[index].textContent.trim().length !== 0) {\n          cloneParentNode.appendChild(nodes[index].firstChild);\n        } else {\n          nodes[index].removeChild(nodes[index].firstChild);\n        }\n      }\n      if (nodes[index].nodeName === 'TD' || nodes[index].nodeName === 'TH') {\n        if (isNOU(cloneListParentNode)) {\n          nodes[index].appendChild(cloneParentNode);\n          continue;\n        } else if (index === 0 && !isNOU(cloneListParentNode)) {\n          nodes[index].appendChild(cloneListParentNode);\n          cloneListParentNode.appendChild(cloneParentNode);\n          continue;\n        } else {\n          nodes[index].appendChild(cloneParentNode);\n          continue;\n        }\n      }\n      if (!isNOU(cloneListParentNode)) {\n        sameListType = this.isSameListType(element, nodes[index]);\n      }\n      if (cloneParentNode.nodeName === 'LI' && !sameListType) {\n        this.insertNewList(range, nodes, index, cloneListParentNode, cloneParentNode);\n      } else if (sameListType) {\n        this.insertSameList(nodes, index, cloneListParentNode, cloneParentNode);\n      } else {\n        nodes[index].parentNode.replaceChild(cloneParentNode, nodes[index]);\n      }\n      /**Removing the inserted block node in list and appending to previous element sibling */\n      if (cloneParentNode.nodeName !== 'LI' && (cloneParentNode.parentElement.nodeName === 'OL' || cloneParentNode.parentElement.nodeName === 'UL')) {\n        var parent_1 = cloneParentNode.parentElement;\n        // Cutting single ul or ol to two ul or ol based on the range\n        this.parent.nodeCutter.SplitNode(range, parent_1, true);\n        if (!isNOU(parent_1.previousElementSibling)) {\n          parent_1.previousElementSibling.after(cloneParentNode);\n          // To remove the nested list items out of the block element\n          if (cloneParentNode.childNodes.length > 1) {\n            for (var j = 0; j < cloneParentNode.childNodes.length; j++) {\n              var currentChild = cloneParentNode.childNodes[j];\n              if (currentChild.nodeName === 'OL' || currentChild.nodeName === 'UL') {\n                cloneParentNode.after(currentChild);\n              }\n            }\n          }\n        } else {\n          parent_1.parentElement.prepend(cloneParentNode);\n        }\n      }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n    !isNOU(listElement) ? detach(listElement) : false;\n    this.cleanEmptyLists();\n    var save = this.parent.domNode.saveMarker(saveSelection, null);\n    save.restore();\n  };\n  FormatPainterActions.prototype.insertNewList = function (range, nodes, index, cloneListParentNode, cloneParentNode) {\n    // Appending the li nodes to the ol or ul node\n    if (index === 0) {\n      var nodeName = nodes[index].nodeName;\n      nodes[index] = nodes[index].parentNode.replaceChild(cloneListParentNode, nodes[index]);\n      var parent_2 = nodeName === 'LI' ? cloneListParentNode.parentElement : cloneListParentNode;\n      // Splicing and then inserting the node to previous element sibling of the Listparent.parent\n      this.parent.nodeCutter.SplitNode(range, parent_2, true);\n      if (nodes[index].nodeName === 'LI' && !isNOU(parent_2)) {\n        cloneListParentNode.append(cloneParentNode);\n        if (!isNOU(parent_2.parentNode)) {\n          parent_2.parentNode.insertBefore(cloneListParentNode, parent_2);\n        }\n      } else {\n        if (!isNOU(parent_2)) {\n          if (!isNOU(parent_2.previousElementSibling) && parent_2.previousElementSibling.nodeName === cloneListParentNode.nodeName) {\n            var currentParent = parent_2.previousElementSibling;\n            currentParent.append(cloneParentNode);\n            while (currentParent.firstChild) {\n              cloneListParentNode.append(currentParent.firstChild);\n            }\n          } else if (!isNOU(parent_2.nextElementSibling) && parent_2.nextElementSibling.nodeName === cloneListParentNode.nodeName) {\n            var currentParent = parent_2.nextElementSibling;\n            currentParent.prepend(cloneParentNode);\n            while (currentParent.firstChild) {\n              cloneListParentNode.append(currentParent.firstChild);\n            }\n          } else {\n            cloneListParentNode.append(cloneParentNode);\n          }\n        } else {\n          cloneListParentNode.append(cloneParentNode);\n        }\n      }\n    } else {\n      cloneListParentNode.append(cloneParentNode);\n    }\n    this.detachEmptyBlockNodes(nodes[index]);\n  };\n  FormatPainterActions.prototype.insertSameList = function (nodes, index, cloneListParentNode, cloneParentNode) {\n    if (index === 0) {\n      if (!isNOU(nodes[index].parentNode) && (nodes[index].parentNode.nodeName === 'UL' || nodes[index].parentNode.nodeName === 'OL')) {\n        // append the nodes[index].parentNode.childNodes to the clonelistparentnode\n        if (nodes.length === 1) {\n          // When clicked with cursor in the single list item\n          while (cloneParentNode.firstChild) {\n            nodes[index].append(cloneParentNode.firstChild);\n          }\n          for (var i = 0; i < nodes[index].parentNode.childNodes.length; i++) {\n            var currentChild = nodes[index].parentNode.childNodes[i];\n            cloneListParentNode.append(currentChild.cloneNode(true));\n          }\n        } else {\n          cloneListParentNode.append(cloneParentNode);\n        }\n        // replace the older ol and ul with new ol and ul of clonelistparentnode\n        nodes[index].parentNode.parentNode.replaceChild(cloneListParentNode, nodes[index].parentNode);\n      }\n    } else {\n      cloneListParentNode.append(cloneParentNode);\n    }\n    this.detachEmptyBlockNodes(nodes[index]);\n  };\n  FormatPainterActions.prototype.isSameListType = function (element, node) {\n    var isSameListType = false;\n    var nearestListNode = closest(node, 'ol, ul');\n    if (!isNOU(nearestListNode) && nearestListNode.querySelectorAll('li').length > 0) {\n      if (nearestListNode.nodeName === element.nodeName) {\n        isSameListType = true;\n      } else {\n        isSameListType = false;\n      }\n    }\n    return isSameListType;\n  };\n  FormatPainterActions.prototype.cleanEmptyLists = function () {\n    var listElem = this.parent.editableElement.querySelectorAll('ol, ul');\n    for (var i = 0; i < listElem.length; i++) {\n      if (listElem[i].textContent.trim() === '') {\n        detach(listElem[i]);\n      }\n    }\n  };\n  FormatPainterActions.prototype.setDeniedFormats = function () {\n    var deniedFormatsCollection = [];\n    if (isNOU(this.settings) || isNOU(this.settings.deniedFormats)) {\n      return;\n    }\n    var deniedFormats = this.settings.deniedFormats.indexOf(';') > -1 ? this.settings.deniedFormats.split(';') : [this.settings.deniedFormats];\n    var length = deniedFormats.length;\n    for (var i = 0; i < length; i++) {\n      var formatString = deniedFormats[i];\n      if (formatString !== '') {\n        formatString.trim();\n        var collection = this.makeDeniedFormatsCollection(formatString);\n        if (!isNOU(collection)) {\n          deniedFormatsCollection.push(collection);\n        }\n      }\n    }\n    this.deniedFormatsCollection = deniedFormatsCollection;\n  };\n  FormatPainterActions.prototype.detachEmptyBlockNodes = function (node) {\n    if (!isNOU(node) && node.textContent.trim() === '') {\n      detach(node);\n    }\n  };\n  FormatPainterActions.prototype.makeDeniedFormatsCollection = function (value) {\n    var openParenIndex = value.indexOf('(');\n    var closeParenIndex = value.indexOf(')');\n    var openBracketIndex = value.indexOf('[');\n    var closeBracketIndex = value.indexOf(']');\n    var openBraceIndex = value.indexOf('{');\n    var closeBraceIndex = value.indexOf('}');\n    var classes = [];\n    var attributes = '';\n    var styles = '';\n    var tagName = '';\n    var classList = [];\n    var attributesList = [];\n    var stylesList = [];\n    if (openParenIndex > -1 && closeParenIndex > -1) {\n      classes = value.substring(openParenIndex + 1, closeParenIndex).split(' ');\n      classList = classes[0].split(')')[0].split(',');\n    }\n    if (openBracketIndex > -1 && closeBracketIndex > -1) {\n      attributes = value.substring(openBracketIndex + 1, closeBracketIndex);\n      attributesList = attributes.split(',');\n    }\n    if (openBraceIndex > -1 && closeBraceIndex > -1) {\n      styles = value.substring(openBraceIndex + 1, closeBraceIndex);\n      stylesList = styles.split(',');\n    }\n    var openIndexArray = [openParenIndex, openBracketIndex, openBraceIndex];\n    openIndexArray = openIndexArray.filter(function (index) {\n      return index > -1;\n    });\n    var len = openIndexArray.length;\n    var min;\n    if (len === 1) {\n      min = openIndexArray[0];\n    } else if (len === 2) {\n      min = Math.min(openIndexArray[0], openIndexArray[1]);\n    } else if (len === 3) {\n      min = Math.min(openIndexArray[0], openIndexArray[1], openIndexArray[2]);\n    }\n    tagName = value.substring(0, min);\n    tagName = tagName.trim();\n    return {\n      tag: tagName,\n      styles: stylesList,\n      classes: classList,\n      attributes: attributesList\n    };\n  };\n  return FormatPainterActions;\n}();\nexport { FormatPainterActions };","map":{"version":3,"names":["closest","createElement","detach","isNullOrUndefined","isNOU","removeClass","EVENTS","SelectionCommands","FormatPainterActions","parent","options","INVALID_TAGS","settings","addEventListener","setDeniedFormats","prototype","observer","on","FORMAT_PAINTER_ACTIONS","actionHandler","MODEL_CHANGED_PLUGIN","onPropertyChanged","prop","module","newProp","formatPainterSettings","allowedFormats","deniedFormats","removeEventListener","off","destroy","copyCollection","deniedFormatsCollection","newElem","newElemLastChild","args","allowedContext","item","formatPainterAction","copyAction","pasteAction","escapeAction","callBack","event","requestType","action","editorMode","range","nodeSelection","getRange","currentDocument","elements","getSelectedNodes","generateElement","slice","reverse","length","elemCollection","className","lastAppendChild","i","_a","attrs","styles","tagName","elem","i_1","property","name","value","setAttribute","i_2","priority","style","setProperty","childElementCount","append","elemChild","removeDeniedFormats","currentElem","firstChild","undefined","paintPlainTextFormat","insertFormatNode","parentElement","deniedPropArray","length_1","tag","elementsList","querySelectorAll","j","classes","classLength","k","classList","contains","trim","removeAttribute","styleLength","removeProperty","attributes","attributeLength","firstElementChild","domSelection","nodes","collapsed","getSelectionNodeCollection","getSelectionNodeCollectionBr","parentElem","currentContext","findCurrentContext","allowedRulesArray","indexOf","split","getRangeParentElem","rangeParentElem","context","startContainer","nodeName","lastElement","toLowerCase","allAttributes","attribute","push","allStyles","styleProp","getPropertyValue","getPropertyPriority","editableElement","rangeParent","rangeParentELem","nodeType","nearBlockParentName","getNearestBlockParentElement","node","parentNode","isBlockElement","blockTags","isInValid","validateELementTag","endContainer","execCommand","closestParagraph","closestList","textContent","lastChild","clonedElem","cloneNode","newBlockElem","appendChild","endNode","docElement","childElem","inlineElement","removeChild","formatValues","element","applyFormat","isCollapsed","blockNodes","domNode","isFullNodeSelected","toString","insertBlockNode","saveSelection","save","setMarker","listElement","cloneListParentNode","sameListType","cloneElementNode","index","cloneParentNode","isSameListType","insertNewList","insertSameList","replaceChild","parent_1","nodeCutter","SplitNode","previousElementSibling","after","childNodes","currentChild","prepend","cleanEmptyLists","saveMarker","restore","parent_2","insertBefore","currentParent","nextElementSibling","detachEmptyBlockNodes","nearestListNode","listElem","formatString","collection","makeDeniedFormatsCollection","openParenIndex","closeParenIndex","openBracketIndex","closeBracketIndex","openBraceIndex","closeBraceIndex","attributesList","stylesList","substring","openIndexArray","filter","len","min","Math"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/format-painter-actions.js"],"sourcesContent":["import { closest, createElement, detach, isNullOrUndefined as isNOU, removeClass } from '@syncfusion/ej2-base';\nimport * as EVENTS from '../../common/constant';\nimport { SelectionCommands } from '../plugin';\nvar FormatPainterActions = /** @class */ (function () {\n    function FormatPainterActions(parent, options) {\n        this.INVALID_TAGS = ['A', 'AUDIO', 'IMG', 'VIDEO', 'IFRAME'];\n        this.parent = parent;\n        this.settings = options;\n        this.addEventListener();\n        this.setDeniedFormats();\n    }\n    FormatPainterActions.prototype.addEventListener = function () {\n        this.parent.observer.on(EVENTS.FORMAT_PAINTER_ACTIONS, this.actionHandler, this);\n        this.parent.observer.on(EVENTS.MODEL_CHANGED_PLUGIN, this.onPropertyChanged, this);\n    };\n    FormatPainterActions.prototype.onPropertyChanged = function (prop) {\n        if (prop && prop.module === 'formatPainter') {\n            if (!isNOU(prop.newProp.formatPainterSettings.allowedFormats)) {\n                this.settings.allowedFormats = prop.newProp.formatPainterSettings.allowedFormats;\n            }\n            if (!isNOU(prop.newProp.formatPainterSettings.deniedFormats)) {\n                this.settings.deniedFormats = prop.newProp.formatPainterSettings.deniedFormats;\n                this.setDeniedFormats();\n            }\n        }\n    };\n    FormatPainterActions.prototype.removeEventListener = function () {\n        this.parent.observer.off(EVENTS.FORMAT_PAINTER_ACTIONS, this.actionHandler);\n        this.parent.observer.off(EVENTS.MODEL_CHANGED_PLUGIN, this.onPropertyChanged);\n    };\n    /**\n     * Destroys the format painter.\n     *\n     * @function destroy\n     * @returns {void}\n     * @hidden\n\n     */\n    FormatPainterActions.prototype.destroy = function () {\n        this.removeEventListener();\n        this.INVALID_TAGS = null;\n        this.copyCollection = null;\n        this.deniedFormatsCollection = null;\n        this.newElem = null;\n        this.newElemLastChild = null;\n        this.settings = null;\n        this.parent = null;\n    };\n    FormatPainterActions.prototype.actionHandler = function (args) {\n        this.settings.allowedContext = ['Text', 'List', 'Table'];\n        if (!isNOU(args) && !isNOU(args.item) && !isNOU(args.item.formatPainterAction)) {\n            switch (args.item.formatPainterAction) {\n                case 'format-copy':\n                    this.copyAction();\n                    break;\n                case 'format-paste':\n                    this.pasteAction();\n                    break;\n                case 'escape':\n                    this.escapeAction();\n                    break;\n            }\n            this.callBack(args);\n        }\n    };\n    FormatPainterActions.prototype.callBack = function (event) {\n        if (event.callBack) {\n            event.callBack({\n                requestType: 'FormatPainter',\n                action: event.item.formatPainterAction,\n                event: event.event,\n                editorMode: 'HTML',\n                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n            });\n        }\n    };\n    FormatPainterActions.prototype.generateElement = function () {\n        var copyCollection = this.copyCollection.slice(); // To clone without reversing the collcection array\n        copyCollection.reverse();\n        var length = copyCollection.length;\n        var elemCollection = createElement('div', { className: 'e-format-paste-wrapper' });\n        var lastAppendChild;\n        for (var i = 0; i < length; i++) {\n            var _a = copyCollection[i], attrs = _a.attrs, className = _a.className, styles = _a.styles, tagName = _a.tagName;\n            var elem = createElement(tagName);\n            if (className !== '') {\n                elem.className = className;\n            }\n            for (var i_1 = 0; i_1 < attrs.length; i_1++) {\n                var property = attrs[i_1].name;\n                var value = attrs[i_1].value;\n                elem.setAttribute(property, value);\n            }\n            for (var i_2 = 0; i_2 < styles.length; i_2++) {\n                var property = styles[i_2].property;\n                var value = styles[i_2].value;\n                var priority = styles[i_2].priority;\n                elem.style.setProperty(property, value, priority);\n            }\n            if (elemCollection.childElementCount === 0) {\n                elemCollection.append(elem);\n                lastAppendChild = elem;\n            }\n            else {\n                lastAppendChild.append(elem);\n                lastAppendChild = elem;\n            }\n        }\n        var elemChild = this.removeDeniedFormats(elemCollection);\n        var currentElem = elemChild;\n        while (currentElem) {\n            if (currentElem.firstChild === null) {\n                lastAppendChild = currentElem;\n                currentElem = undefined;\n            }\n            else {\n                currentElem = currentElem.firstChild;\n            }\n        }\n        this.newElem = elemChild;\n        this.newElemLastChild = lastAppendChild;\n    };\n    FormatPainterActions.prototype.pasteAction = function () {\n        if (isNOU(this.copyCollection) || this.copyCollection.length === 0) {\n            this.paintPlainTextFormat();\n            return;\n        }\n        this.insertFormatNode(this.newElem, this.newElemLastChild);\n    };\n    FormatPainterActions.prototype.removeDeniedFormats = function (parentElement) {\n        if (!isNOU(this.deniedFormatsCollection) && this.deniedFormatsCollection.length > 0) {\n            var deniedPropArray = this.deniedFormatsCollection;\n            var length_1 = deniedPropArray.length;\n            for (var i = 0; i < length_1; i++) {\n                var tag = deniedPropArray[i].tag;\n                if (deniedPropArray[i].tag) {\n                    var elementsList = parentElement.querySelectorAll(tag);\n                    for (var j = 0; j < elementsList.length; j++) {\n                        if (deniedPropArray[i].classes.length > 0) {\n                            var classes = deniedPropArray[i].classes;\n                            var classLength = classes.length;\n                            for (var k = 0; k < classLength; k++) {\n                                if (elementsList[j].classList.contains(classes[k])) {\n                                    removeClass([elementsList[j]], classes[k].trim());\n                                }\n                            }\n                            if (elementsList[j].classList.length === 0) {\n                                elementsList[j].removeAttribute('class');\n                            }\n                        }\n                        if (deniedPropArray[i].styles.length > 0) {\n                            var styles = deniedPropArray[i].styles;\n                            var styleLength = styles.length;\n                            for (var k = 0; k < styleLength; k++) {\n                                elementsList[j].style.removeProperty(styles[k].trim());\n                            }\n                            if (elementsList[j].style.length === 0) {\n                                elementsList[j].removeAttribute('style');\n                            }\n                        }\n                        if (deniedPropArray[i].attributes.length > 0) {\n                            var attributes = deniedPropArray[i].attributes;\n                            var attributeLength = attributes.length;\n                            for (var k = 0; k < attributeLength; k++) {\n                                elementsList[j].removeAttribute(attributes[k].trim());\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return parentElement.firstElementChild;\n    };\n    FormatPainterActions.prototype.copyAction = function () {\n        var copyCollection = [];\n        var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\n        var domSelection = this.parent.nodeSelection;\n        var nodes = range.collapsed ? domSelection.getSelectionNodeCollection(range) :\n            domSelection.getSelectionNodeCollectionBr(range);\n        if (nodes.length === 0 && domSelection.getSelectionNodeCollectionBr(range).length === 0) {\n            return;\n        }\n        else {\n            nodes = nodes.length === 0 ? domSelection.getSelectionNodeCollectionBr(range) : nodes;\n        }\n        var parentElem = nodes[0].parentElement;\n        var currentContext = this.findCurrentContext(parentElem);\n        var allowedRulesArray = this.settings.allowedFormats.indexOf(';') > -1 ? this.settings.allowedFormats.split(';') :\n            [this.settings.allowedFormats];\n        for (var i = 0; i < allowedRulesArray.length; i++) {\n            allowedRulesArray[i] = allowedRulesArray[i].trim();\n        }\n        var _a = this.getRangeParentElem(currentContext, parentElem), rangeParentElem = _a[0], context = _a[1];\n        if (currentContext === null) {\n            currentContext = context;\n        }\n        if (!isNOU(currentContext) && this.settings.allowedContext.indexOf(currentContext) > -1) {\n            if (range.startContainer.nodeName === '#text') {\n                parentElem = range.startContainer.parentElement;\n            }\n            var lastElement = parentElem;\n            do {\n                if (allowedRulesArray.indexOf(parentElem.nodeName.toLowerCase()) > -1) {\n                    var allAttributes = parentElem.attributes;\n                    var attribute = [];\n                    for (var i = 0; i < allAttributes.length; i++) {\n                        if (allAttributes[i].name !== 'class' && allAttributes[i].name !== 'style') {\n                            attribute.push(allAttributes[i]);\n                        }\n                    }\n                    var classes = parentElem.className;\n                    var allStyles = parentElem.style;\n                    var styleProp = [];\n                    for (var i = 0; i < allStyles.length; i++) {\n                        var property = allStyles[i];\n                        var value = allStyles.getPropertyValue(property);\n                        var priority = allStyles.getPropertyPriority(property);\n                        styleProp.push({ property: property, value: value, priority: priority });\n                    }\n                    copyCollection.push({\n                        attrs: attribute, className: classes, styles: styleProp, tagName: parentElem.nodeName\n                    });\n                }\n                if (rangeParentElem === parentElem) {\n                    parentElem = undefined;\n                }\n                else if (!isNOU(parentElem.parentElement)) {\n                    parentElem = parentElem.parentElement;\n                }\n                if (lastElement === parentElem) {\n                    break;\n                }\n            } while (!isNOU(parentElem) || parentElem === this.parent.editableElement);\n            this.copyCollection = copyCollection;\n        }\n        this.generateElement();\n    };\n    FormatPainterActions.prototype.getRangeParentElem = function (currentContext, rangeParent) {\n        var startContainer = rangeParent;\n        var rangeParentELem;\n        if (startContainer.nodeType === 3) {\n            startContainer = startContainer.parentElement;\n        }\n        switch (currentContext) {\n            case 'Table':\n                rangeParentELem = closest(startContainer, 'td');\n                if (isNOU(rangeParentELem)) {\n                    rangeParentELem = closest(startContainer, 'th');\n                }\n                break;\n            case 'List':\n                rangeParentELem = closest(startContainer, 'li');\n                break;\n            case 'Text':\n                rangeParentELem = closest(startContainer, 'p');\n                break;\n        }\n        if (isNOU(rangeParentELem)) {\n            var nearBlockParentName = this.getNearestBlockParentElement(rangeParent);\n            if (!isNOU(nearBlockParentName) && nearBlockParentName !== 'UL' &&\n                nearBlockParentName !== 'OL' && nearBlockParentName !== 'LI') {\n                rangeParentELem = closest(startContainer, nearBlockParentName);\n                currentContext = 'Text';\n            }\n        }\n        if (currentContext === 'List') {\n            rangeParentELem = rangeParentELem.parentElement;\n        }\n        return [rangeParentELem, currentContext];\n    };\n    FormatPainterActions.prototype.getNearestBlockParentElement = function (rangeParent) {\n        var node = rangeParent;\n        if (node.nodeType === 3) {\n            node = node.parentNode;\n        }\n        // iterate untill the content editable div\n        while (node && node !== this.parent.editableElement) {\n            // If true return the block node name.\n            if (!isNOU(node) && this.isBlockElement(node)) {\n                return node.nodeName;\n            }\n            // if false re assign node to parent node\n            node = node.parentNode;\n        }\n        return null;\n    };\n    FormatPainterActions.prototype.isBlockElement = function (node) {\n        var blockTags = ['P', 'DIV', 'UL', 'OL', 'LI', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6',\n            'ADDRESS', 'ARTICLE', 'ASIDE', 'BLOCKQUOTE', 'FIGCAPTION', 'FIGURE', 'FOOTER', 'HEADER',\n            'HR', 'MAIN', 'NAV', 'SECTION', 'SUMMARY', 'PRE'];\n        return blockTags.indexOf(node.nodeName) > -1;\n    };\n    FormatPainterActions.prototype.escapeAction = function () {\n        this.copyCollection = [];\n    };\n    FormatPainterActions.prototype.paintPlainTextFormat = function () {\n        var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\n        var domSelection = this.parent.nodeSelection;\n        var nodes = range.collapsed ? domSelection.getSelectionNodeCollection(range) :\n            domSelection.getSelectionNodeCollectionBr(range);\n        var isInValid;\n        if (nodes.length > 1) {\n            for (var i = 0; i < nodes.length; i++) {\n                isInValid = this.validateELementTag(nodes[i]);\n            }\n        }\n        else {\n            isInValid = this.validateELementTag(range.startContainer) && this.validateELementTag(range.endContainer);\n        }\n        if (!isInValid) {\n            this.parent.execCommand('Clear', 'ClearFormat', null, null);\n        }\n    };\n    FormatPainterActions.prototype.validateELementTag = function (node) {\n        if (node.nodeType === 3) {\n            node = node.parentElement;\n        }\n        return this.INVALID_TAGS.indexOf(node.tagName) > -1;\n    };\n    FormatPainterActions.prototype.findCurrentContext = function (parentElem) {\n        var closestParagraph = closest(parentElem, 'p');\n        var closestList = closest(parentElem, 'li');\n        if (closestParagraph && !closestList) {\n            return 'Text';\n        }\n        else if (closest(parentElem, 'li')) {\n            if (!isNOU(closestParagraph) && !isNOU(closestList) && closestParagraph.textContent.trim() !== closestList.textContent.trim()) {\n                return 'Text';\n            }\n            return 'List';\n        }\n        else if (closest(parentElem, 'td') || closest(parentElem, 'tr') || closest(parentElem, 'th')) {\n            return 'Table';\n        }\n        return null;\n    };\n    FormatPainterActions.prototype.insertFormatNode = function (elem, lastChild) {\n        var clonedElem = elem.cloneNode(true);\n        if (!this.isBlockElement(elem)) {\n            var newBlockElem = createElement('P');\n            newBlockElem.appendChild(elem);\n            clonedElem = newBlockElem.cloneNode(true);\n        }\n        var endNode = this.parent.editableElement;\n        var docElement = this.parent.currentDocument;\n        var childElem = clonedElem.firstChild;\n        var inlineElement;\n        while (childElem) {\n            if (this.isBlockElement(childElem)) {\n                childElem = childElem.firstChild;\n            }\n            else {\n                inlineElement = childElem.parentNode.removeChild(childElem);\n                break;\n            }\n        }\n        var formatValues = {\n            element: inlineElement,\n            lastChild: lastChild\n        };\n        SelectionCommands.applyFormat(docElement, null, endNode, 'P', 'formatPainter', null, formatValues);\n        var range = this.parent.nodeSelection.getRange(docElement);\n        var isCollapsed = range.collapsed;\n        var blockNodes = this.parent.domNode.blockNodes();\n        var isFullNodeSelected = false;\n        if (blockNodes.length === 1) {\n            isFullNodeSelected = blockNodes[0].textContent.trim() === range.toString().trim();\n        }\n        if (this.isBlockElement(clonedElem) && isCollapsed || blockNodes.length > 1 || isFullNodeSelected) {\n            this.insertBlockNode(clonedElem, range, docElement, blockNodes);\n        }\n    };\n    FormatPainterActions.prototype.insertBlockNode = function (element, range, docElement, nodes) {\n        var domSelection = this.parent.nodeSelection;\n        var saveSelection = domSelection.save(range, docElement);\n        this.parent.domNode.setMarker(saveSelection);\n        var listElement; // To clone to multiple list elements\n        var cloneListParentNode;\n        var sameListType = false;\n        if (element.nodeName === 'UL' || element.nodeName === 'OL') {\n            cloneListParentNode = element.cloneNode(true);\n            listElement = cloneListParentNode.firstChild;\n        }\n        var cloneElementNode = isNOU(cloneListParentNode) ? element : element.firstChild;\n        for (var index = 0; index < nodes.length; index++) {\n            if (this.INVALID_TAGS.indexOf(nodes[index].nodeName) > -1 ||\n                nodes[index].querySelectorAll('img,audio,video,iframe').length > 0) {\n                continue;\n            }\n            var cloneParentNode = cloneElementNode.cloneNode(false);\n            // Appending all the child elements\n            while (nodes[index].firstChild) {\n                if (nodes[index].textContent.trim().length !== 0) {\n                    cloneParentNode.appendChild(nodes[index].firstChild);\n                }\n                else {\n                    nodes[index].removeChild(nodes[index].firstChild);\n                }\n            }\n            if (nodes[index].nodeName === 'TD' || nodes[index].nodeName === 'TH') {\n                if (isNOU(cloneListParentNode)) {\n                    nodes[index].appendChild(cloneParentNode);\n                    continue;\n                }\n                else if (index === 0 && !isNOU(cloneListParentNode)) {\n                    nodes[index].appendChild(cloneListParentNode);\n                    cloneListParentNode.appendChild(cloneParentNode);\n                    continue;\n                }\n                else {\n                    nodes[index].appendChild(cloneParentNode);\n                    continue;\n                }\n            }\n            if (!isNOU(cloneListParentNode)) {\n                sameListType = this.isSameListType(element, nodes[index]);\n            }\n            if (cloneParentNode.nodeName === 'LI' && !sameListType) {\n                this.insertNewList(range, nodes, index, cloneListParentNode, cloneParentNode);\n            }\n            else if (sameListType) {\n                this.insertSameList(nodes, index, cloneListParentNode, cloneParentNode);\n            }\n            else {\n                nodes[index].parentNode.replaceChild(cloneParentNode, nodes[index]);\n            }\n            /**Removing the inserted block node in list and appending to previous element sibling */\n            if (cloneParentNode.nodeName !== 'LI' && (cloneParentNode.parentElement.nodeName === 'OL' ||\n                cloneParentNode.parentElement.nodeName === 'UL')) {\n                var parent_1 = cloneParentNode.parentElement;\n                // Cutting single ul or ol to two ul or ol based on the range\n                this.parent.nodeCutter.SplitNode(range, parent_1, true);\n                if (!isNOU(parent_1.previousElementSibling)) {\n                    parent_1.previousElementSibling.after(cloneParentNode);\n                    // To remove the nested list items out of the block element\n                    if (cloneParentNode.childNodes.length > 1) {\n                        for (var j = 0; j < cloneParentNode.childNodes.length; j++) {\n                            var currentChild = cloneParentNode.childNodes[j];\n                            if (currentChild.nodeName === 'OL' || currentChild.nodeName === 'UL') {\n                                cloneParentNode.after(currentChild);\n                            }\n                        }\n                    }\n                }\n                else {\n                    parent_1.parentElement.prepend(cloneParentNode);\n                }\n            }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n        !isNOU(listElement) ? detach(listElement) : false;\n        this.cleanEmptyLists();\n        var save = this.parent.domNode.saveMarker(saveSelection, null);\n        save.restore();\n    };\n    FormatPainterActions.prototype.insertNewList = function (range, nodes, index, cloneListParentNode, cloneParentNode) {\n        // Appending the li nodes to the ol or ul node\n        if (index === 0) {\n            var nodeName = nodes[index].nodeName;\n            nodes[index] = nodes[index].parentNode.replaceChild(cloneListParentNode, nodes[index]);\n            var parent_2 = nodeName === 'LI' ? cloneListParentNode.parentElement\n                : cloneListParentNode;\n            // Splicing and then inserting the node to previous element sibling of the Listparent.parent\n            this.parent.nodeCutter.SplitNode(range, parent_2, true);\n            if (nodes[index].nodeName === 'LI' && !isNOU(parent_2)) {\n                cloneListParentNode.append(cloneParentNode);\n                if (!isNOU(parent_2.parentNode)) {\n                    parent_2.parentNode.insertBefore(cloneListParentNode, parent_2);\n                }\n            }\n            else {\n                if (!isNOU(parent_2)) {\n                    if (!isNOU(parent_2.previousElementSibling) && parent_2.previousElementSibling.nodeName === cloneListParentNode.nodeName) {\n                        var currentParent = parent_2.previousElementSibling;\n                        currentParent.append(cloneParentNode);\n                        while (currentParent.firstChild) {\n                            cloneListParentNode.append(currentParent.firstChild);\n                        }\n                    }\n                    else if (!isNOU(parent_2.nextElementSibling) && parent_2.nextElementSibling.nodeName === cloneListParentNode.nodeName) {\n                        var currentParent = parent_2.nextElementSibling;\n                        currentParent.prepend(cloneParentNode);\n                        while (currentParent.firstChild) {\n                            cloneListParentNode.append(currentParent.firstChild);\n                        }\n                    }\n                    else {\n                        cloneListParentNode.append(cloneParentNode);\n                    }\n                }\n                else {\n                    cloneListParentNode.append(cloneParentNode);\n                }\n            }\n        }\n        else {\n            cloneListParentNode.append(cloneParentNode);\n        }\n        this.detachEmptyBlockNodes(nodes[index]);\n    };\n    FormatPainterActions.prototype.insertSameList = function (nodes, index, cloneListParentNode, cloneParentNode) {\n        if (index === 0) {\n            if (!isNOU(nodes[index].parentNode) && (nodes[index].parentNode.nodeName === 'UL' || nodes[index].parentNode.nodeName === 'OL')) {\n                // append the nodes[index].parentNode.childNodes to the clonelistparentnode\n                if (nodes.length === 1) {\n                    // When clicked with cursor in the single list item\n                    while (cloneParentNode.firstChild) {\n                        nodes[index].append(cloneParentNode.firstChild);\n                    }\n                    for (var i = 0; i < nodes[index].parentNode.childNodes.length; i++) {\n                        var currentChild = nodes[index].parentNode.childNodes[i];\n                        cloneListParentNode.append(currentChild.cloneNode(true));\n                    }\n                }\n                else {\n                    cloneListParentNode.append(cloneParentNode);\n                }\n                // replace the older ol and ul with new ol and ul of clonelistparentnode\n                nodes[index].parentNode.parentNode.replaceChild(cloneListParentNode, nodes[index].parentNode);\n            }\n        }\n        else {\n            cloneListParentNode.append(cloneParentNode);\n        }\n        this.detachEmptyBlockNodes(nodes[index]);\n    };\n    FormatPainterActions.prototype.isSameListType = function (element, node) {\n        var isSameListType = false;\n        var nearestListNode = closest(node, 'ol, ul');\n        if (!isNOU(nearestListNode) && nearestListNode.querySelectorAll('li').length > 0) {\n            if (nearestListNode.nodeName === element.nodeName) {\n                isSameListType = true;\n            }\n            else {\n                isSameListType = false;\n            }\n        }\n        return isSameListType;\n    };\n    FormatPainterActions.prototype.cleanEmptyLists = function () {\n        var listElem = this.parent.editableElement.querySelectorAll('ol, ul');\n        for (var i = 0; i < listElem.length; i++) {\n            if (listElem[i].textContent.trim() === '') {\n                detach(listElem[i]);\n            }\n        }\n    };\n    FormatPainterActions.prototype.setDeniedFormats = function () {\n        var deniedFormatsCollection = [];\n        if (isNOU(this.settings) || isNOU(this.settings.deniedFormats)) {\n            return;\n        }\n        var deniedFormats = this.settings.deniedFormats.indexOf(';') > -1 ? this.settings.deniedFormats.split(';') :\n            [this.settings.deniedFormats];\n        var length = deniedFormats.length;\n        for (var i = 0; i < length; i++) {\n            var formatString = deniedFormats[i];\n            if (formatString !== '') {\n                formatString.trim();\n                var collection = this.makeDeniedFormatsCollection(formatString);\n                if (!isNOU(collection)) {\n                    deniedFormatsCollection.push(collection);\n                }\n            }\n        }\n        this.deniedFormatsCollection = deniedFormatsCollection;\n    };\n    FormatPainterActions.prototype.detachEmptyBlockNodes = function (node) {\n        if (!isNOU(node) && node.textContent.trim() === '') {\n            detach(node);\n        }\n    };\n    FormatPainterActions.prototype.makeDeniedFormatsCollection = function (value) {\n        var openParenIndex = value.indexOf('(');\n        var closeParenIndex = value.indexOf(')');\n        var openBracketIndex = value.indexOf('[');\n        var closeBracketIndex = value.indexOf(']');\n        var openBraceIndex = value.indexOf('{');\n        var closeBraceIndex = value.indexOf('}');\n        var classes = [];\n        var attributes = '';\n        var styles = '';\n        var tagName = '';\n        var classList = [];\n        var attributesList = [];\n        var stylesList = [];\n        if (openParenIndex > -1 && closeParenIndex > -1) {\n            classes = value.substring(openParenIndex + 1, closeParenIndex).split(' ');\n            classList = classes[0].split(')')[0].split(',');\n        }\n        if (openBracketIndex > -1 && closeBracketIndex > -1) {\n            attributes = value.substring(openBracketIndex + 1, closeBracketIndex);\n            attributesList = attributes.split(',');\n        }\n        if (openBraceIndex > -1 && closeBraceIndex > -1) {\n            styles = value.substring(openBraceIndex + 1, closeBraceIndex);\n            stylesList = styles.split(',');\n        }\n        var openIndexArray = [openParenIndex, openBracketIndex, openBraceIndex];\n        openIndexArray = openIndexArray.filter(function (index) { return index > -1; });\n        var len = openIndexArray.length;\n        var min;\n        if (len === 1) {\n            min = openIndexArray[0];\n        }\n        else if (len === 2) {\n            min = Math.min(openIndexArray[0], openIndexArray[1]);\n        }\n        else if (len === 3) {\n            min = Math.min(openIndexArray[0], openIndexArray[1], openIndexArray[2]);\n        }\n        tagName = value.substring(0, min);\n        tagName = tagName.trim();\n        return ({\n            tag: tagName, styles: stylesList, classes: classList,\n            attributes: attributesList\n        });\n    };\n    return FormatPainterActions;\n}());\nexport { FormatPainterActions };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}