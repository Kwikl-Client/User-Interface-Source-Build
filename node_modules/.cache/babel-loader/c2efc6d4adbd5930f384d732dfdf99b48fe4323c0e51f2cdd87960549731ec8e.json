{"ast":null,"code":"/**\n * These utility methods help to process the data and to convert it to desired dimensions\n */\n/** @private */\nexport function processPathData(data) {\n  var collection = [];\n  var j;\n  var arrayCollection = parsePathData(data);\n  if (arrayCollection.length > 0) {\n    for (var i = 0; i < arrayCollection.length; i++) {\n      var ob = arrayCollection[parseInt(i.toString(), 10)];\n      var char = '';\n      char = ob[0];\n      switch (char.toLowerCase()) {\n        case 'm':\n          for (j = 1; j < ob.length; j++) {\n            collection.push({\n              command: char,\n              x: ob[parseInt(j.toString(), 10)],\n              y: ob[j + 1]\n            });\n            j = j + 1;\n            if (char === 'm') {\n              char = 'l';\n            } else if (char === 'M') {\n              char = 'L';\n            }\n          }\n          break;\n        case 'l':\n        case 't':\n          for (j = 1; j < ob.length; j++) {\n            collection.push({\n              command: char,\n              x: ob[parseInt(j.toString(), 10)],\n              y: ob[j + 1]\n            });\n            j = j + 1;\n          }\n          break;\n        case 'h':\n          for (j = 1; j < ob.length; j++) {\n            collection.push({\n              command: char,\n              x: ob[parseInt(j.toString(), 10)]\n            });\n          }\n          break;\n        case 'v':\n          for (j = 1; j < ob.length; j++) {\n            collection.push({\n              command: char,\n              y: ob[parseInt(j.toString(), 10)]\n            });\n          }\n          break;\n        case 'z':\n          collection.push({\n            command: char\n          });\n          break;\n        case 'c':\n          for (j = 1; j < ob.length; j++) {\n            collection.push({\n              command: char,\n              x1: ob[parseInt(j.toString(), 10)],\n              y1: ob[j + 1],\n              x2: ob[j + 2],\n              y2: ob[j + 3],\n              x: ob[j + 4],\n              y: ob[j + 5]\n            });\n            j = j + 5;\n          }\n          break;\n        case 's':\n          for (j = 1; j < ob.length; j++) {\n            collection.push({\n              command: char,\n              x2: ob[parseInt(j.toString(), 10)],\n              y2: ob[j + 1],\n              x: ob[j + 2],\n              y: ob[j + 3]\n            });\n            j = j + 3;\n          }\n          break;\n        case 'q':\n          for (j = 1; j < ob.length; j++) {\n            collection.push({\n              command: char,\n              x1: ob[parseInt(j.toString(), 10)],\n              y1: ob[j + 1],\n              x: ob[j + 2],\n              y: ob[j + 3]\n            });\n            j = j + 3;\n          }\n          break;\n        case 'a':\n          for (j = 1; j < ob.length; j++) {\n            collection.push({\n              command: char,\n              r1: ob[parseInt(j.toString(), 10)],\n              r2: ob[j + 1],\n              angle: ob[j + 2],\n              largeArc: ob[j + 3],\n              sweep: ob[j + 4],\n              x: ob[j + 5],\n              y: ob[j + 6]\n            });\n            j = j + 6;\n          }\n          break;\n      }\n    }\n  }\n  return collection;\n}\n/** @private */\nexport function parsePathData(data) {\n  var tokenizer = /([a-z]+)|([+-]?(?:\\d+\\.?\\d*|\\.\\d+))/gi;\n  var current = [];\n  var commands = [];\n  var match = {};\n  tokenizer.lastIndex = 0;\n  var isExponential = false;\n  match = tokenizer.exec(data);\n  while (match) {\n    if (match[1] === 'e') {\n      var s1 = '';\n      isExponential = true;\n    } else if (match[1]) {\n      if (match[1].toLowerCase() === 'zm') {\n        if (current.length) {\n          commands.push(current);\n        }\n        commands.push(['Z']);\n        current = [match[1].substring(1, 2)];\n      } else {\n        if (current.length) {\n          commands.push(current);\n        }\n        current = [match[1]];\n      }\n      isExponential = false;\n    } else {\n      if (!current.length) {\n        current = [];\n      }\n      if (!isExponential) {\n        current.push(Number(match[2]));\n      }\n      isExponential = false;\n    }\n    match = tokenizer.exec(data);\n  }\n  if (current.length) {\n    commands.push(current);\n  }\n  return commands;\n}\n/**\n * Used to find the path for rounded rect\n */\nexport function getRectanglePath(cornerRadius, height, width) {\n  if (cornerRadius > height / 2) {\n    cornerRadius = height / 2;\n  }\n  if (cornerRadius > width / 2) {\n    cornerRadius = width / 2;\n  }\n  var x = 0;\n  var y = 0;\n  var path = '';\n  var points = [{\n    x: x + cornerRadius,\n    y: y\n  }, {\n    x: x + width - cornerRadius,\n    y: y\n  }, {\n    x: x + width,\n    y: y + cornerRadius\n  }, {\n    x: x + width,\n    y: y + height - cornerRadius\n  }, {\n    x: x + width - cornerRadius,\n    y: y + height\n  }, {\n    x: x + cornerRadius,\n    y: y + height\n  }, {\n    x: x,\n    y: y + height - cornerRadius\n  }, {\n    x: x,\n    y: y + cornerRadius\n  }];\n  var corners = [{\n    x: x + width,\n    y: y\n  }, {\n    x: x + width,\n    y: y + height\n  }, {\n    x: x,\n    y: y + height\n  }, {\n    x: x,\n    y: y\n  }];\n  var corner = 0;\n  var point2;\n  var next;\n  path = 'M' + points[0].x + ' ' + points[0].y;\n  var i;\n  for (i = 0; i < points.length; i = i + 2) {\n    point2 = points[i + 1];\n    path += 'L' + point2.x + ' ' + point2.y;\n    next = points[i + 2] || points[0];\n    // eslint-disable-next-line\n    path += 'Q' + corners[corner].x + ' ' + corners[corner].y + ' ' + next.x + ' ' + next.y;\n    corner++;\n  }\n  return path;\n}\n/** @private */\nexport function pathSegmentCollection(collection) {\n  var x0;\n  var y0;\n  var x1;\n  var y1;\n  var x2;\n  var y2;\n  var x;\n  var y;\n  var length;\n  var i;\n  var initx;\n  var inity;\n  var segments = [];\n  for (x = 0, y = 0, i = 0, length = collection.length; i < length; ++i) {\n    var obj = collection[parseInt(i.toString(), 10)];\n    var seg = obj;\n    var char = '';\n    char = seg.command;\n    if ('y1' in seg) {\n      y1 = seg.y1;\n    }\n    if ('y2' in seg) {\n      y2 = seg.y2;\n    }\n    if ('x1' in seg) {\n      x1 = seg.x1;\n    }\n    if ('x2' in seg) {\n      x2 = seg.x2;\n    }\n    if ('x' in seg) {\n      x = seg.x;\n    }\n    if ('y' in seg) {\n      y = seg.y;\n    }\n    var prev = segments[segments.length - 1];\n    switch (char) {\n      case 'M':\n        segments.push({\n          command: 'M',\n          x: x,\n          y: y\n        });\n        break;\n      case 'L':\n        segments.push({\n          command: 'L',\n          x0: x0,\n          y0: y0,\n          x: x,\n          y: y\n        });\n        break;\n      case 'H':\n        segments.push({\n          command: 'L',\n          x0: x0,\n          y0: y0,\n          x: x,\n          y: y0\n        });\n        break;\n      case 'V':\n        segments.push({\n          command: 'L',\n          x0: x0,\n          y0: y0,\n          x: x0,\n          y: y\n        });\n        break;\n      case 'C':\n        segments.push({\n          command: 'C',\n          x0: x0,\n          y0: y0,\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2,\n          x: x,\n          y: y\n        });\n        break;\n      case 'S':\n        if (prev) {\n          var ctrl = void 0;\n          if (prev.command === 'C' || prev.command === 'S') {\n            ctrl = {\n              x: prev.x2,\n              y: prev.y2\n            };\n          } else {\n            ctrl = {\n              x: x0,\n              y: y0\n            };\n          }\n          var cpt2 = {\n            x: 2 * x0 - ctrl.x,\n            y: 2 * y0 - ctrl.y\n          };\n          segments.push({\n            command: 'C',\n            x0: x0,\n            y0: y0,\n            x1: cpt2.x,\n            y1: cpt2.y,\n            x2: x2,\n            y2: y2,\n            x: x,\n            y: y\n          });\n        }\n        break;\n      case 'Q':\n        //ctx.quadraticCurveTo(x1, y1, x, y);\n        segments.push({\n          command: 'Q',\n          x0: x0,\n          y0: y0,\n          x1: x1,\n          y1: y1,\n          x: x,\n          y: y\n        });\n        break;\n      case 'T':\n        if (prev) {\n          var ctrl = void 0;\n          if (prev.command === 'Q') {\n            ctrl = {\n              x: prev.x1,\n              y: prev.y1\n            };\n          } else {\n            ctrl = {\n              x: x0,\n              y: y0\n            };\n          }\n          var cpt2 = {\n            x: 2 * x0 - ctrl.x,\n            y: 2 * y0 - ctrl.y\n          };\n          segments.push({\n            command: 'Q',\n            x0: x0,\n            y0: y0,\n            x1: cpt2.x,\n            y1: cpt2.y,\n            x: x,\n            y: y\n          });\n        }\n        break;\n      case 'A':\n        var newSeg = seg;\n        newSeg.command = 'A';\n        segments.push(newSeg);\n        break;\n      case 'Z':\n      case 'z':\n        segments.push({\n          command: 'Z'\n        });\n        x = x0;\n        y = y0;\n        break;\n    }\n    if (char === 'M' || char === 'm') {\n      initx = x;\n      inity = y;\n    }\n    x0 = x;\n    y0 = y;\n  }\n  return segments;\n}\n/** @private */\nexport function transformPath(arr, sX, sY, s, bX, bY, iX, iY) {\n  var x0;\n  var y0;\n  var x1;\n  var y1;\n  var x2;\n  var y2;\n  var x;\n  var y;\n  var length;\n  var i;\n  var newSeg;\n  for (x = 0, y = 0, i = 0, length = arr.length; i < length; ++i) {\n    var obj = arr[parseInt(i.toString(), 10)];\n    var seg = obj;\n    var char = seg.command;\n    if ('x' in seg) {\n      x = seg.x;\n    }\n    if ('y' in seg) {\n      y = seg.y;\n    }\n    if ('y1' in seg) {\n      y1 = seg.y1;\n    }\n    if ('y2' in seg) {\n      y2 = seg.y2;\n    }\n    if ('x1' in seg) {\n      x1 = seg.x1;\n    }\n    if ('x2' in seg) {\n      x2 = seg.x2;\n    }\n    if (s) {\n      if (x !== undefined) {\n        x = scalePathData(x, sX, bX, iX);\n      }\n      if (y !== undefined) {\n        y = scalePathData(y, sY, bY, iY);\n      }\n      if (x1 !== undefined) {\n        x1 = scalePathData(x1, sX, bX, iX);\n      }\n      if (y1 !== undefined) {\n        y1 = scalePathData(y1, sY, bY, iY);\n      }\n      if (x2 !== undefined) {\n        x2 = scalePathData(x2, sX, bX, iX);\n      }\n      if (y2 !== undefined) {\n        y2 = scalePathData(y2, sY, bY, iY);\n      }\n    } else {\n      if (x !== undefined) {\n        x = Number((x + sX).toFixed(2));\n      }\n      if (y !== undefined) {\n        y = Number((y + sY).toFixed(2));\n      }\n      if (x1 !== undefined) {\n        x1 = Number((x1 + sX).toFixed(2));\n      }\n      if (y1 !== undefined) {\n        y1 = Number((y1 + sY).toFixed(2));\n      }\n      if (x2 !== undefined) {\n        x2 = Number((x2 + sX).toFixed(2));\n      }\n      if (y2 !== undefined) {\n        y2 = Number((y2 + sY).toFixed(2));\n      }\n    }\n    var scaledPath = {\n      x: x,\n      y: y,\n      x1: x1,\n      y1: y1,\n      x2: x2,\n      y2: y2,\n      r1: seg.r1,\n      r2: seg.r2\n    };\n    newSeg = updatedSegment(seg, char, scaledPath, s, sX, sY);\n    if (newSeg) {\n      arr[parseInt(i.toString(), 10)] = newSeg;\n    }\n    // Record the start of a subpath\n    if (char === 'M' || char === 'm') {\n      x0 = x;\n      y0 = y;\n    }\n  }\n  var pathData = getPathString(arr);\n  return pathData;\n}\n/** @private */\nexport function updatedSegment(segment, char, obj, isScale, sX, sY) {\n  switch (char) {\n    case 'M':\n      segment.x = obj.x;\n      segment.y = obj.y;\n      break;\n    case 'L':\n      segment.x = obj.x;\n      segment.y = obj.y;\n      break;\n    case 'H':\n      segment.x = obj.x;\n      break;\n    case 'V':\n      segment.y = obj.y;\n      break;\n    case 'C':\n      segment.x = obj.x;\n      segment.y = obj.y;\n      segment.x1 = obj.x1;\n      segment.y1 = obj.y1;\n      segment.x2 = obj.x2;\n      segment.y2 = obj.y2;\n      break;\n    case 'S':\n      segment.x = obj.x;\n      segment.y = obj.y;\n      segment.x2 = obj.x2;\n      segment.y2 = obj.y2;\n      break;\n    case 'Q':\n      segment.x = obj.x;\n      segment.y = obj.y;\n      segment.x1 = obj.x1;\n      segment.y1 = obj.y1;\n      break;\n    case 'T':\n      segment.x = obj.x;\n      segment.y = obj.y;\n      break;\n    case 'A':\n      var r1 = obj.r1;\n      var r2 = obj.r2;\n      if (isScale) {\n        obj.r1 = r1 = r1 * sX;\n        obj.r2 = r2 = r2 * sY;\n      }\n      segment.x = obj.x;\n      segment.y = obj.y;\n      segment.r1 = obj.r1;\n      segment.r2 = obj.r2;\n      break;\n    case 'z':\n    case 'Z':\n      segment = {\n        command: 'Z'\n      };\n      break;\n  }\n  return segment;\n}\n/** @private */\nexport function scalePathData(val, scaleFactor, oldOffset, newOffset) {\n  if (val !== oldOffset) {\n    if (newOffset !== oldOffset) {\n      val = val * scaleFactor - (Number(oldOffset) * scaleFactor - Number(oldOffset)) + (newOffset - Number(oldOffset));\n    } else {\n      val = Number(val) * scaleFactor - (Number(oldOffset) * scaleFactor - Number(oldOffset));\n    }\n  } else {\n    if (newOffset !== oldOffset) {\n      val = newOffset;\n    }\n  }\n  return Number(val.toFixed(2));\n}\n/** @private */\nexport function splitArrayCollection(arrayCollection) {\n  var x0;\n  var y0;\n  var x1;\n  var y1;\n  var x2;\n  var y2;\n  var x;\n  var y;\n  var length;\n  var i;\n  for (x = 0, y = 0, i = 0, length = arrayCollection.length; i < length; ++i) {\n    var path = arrayCollection[parseInt(i.toString(), 10)];\n    var seg = path;\n    var char = seg.command;\n    if (/[MLHVCSQTA]/.test(char)) {\n      if ('x' in seg) {\n        seg.x = x = seg.x;\n      }\n      if ('y' in seg) {\n        seg.y = y = seg.y;\n      }\n    } else {\n      if ('x1' in seg) {\n        seg.x1 = x1 = x + seg.x1;\n      }\n      if ('x2' in seg) {\n        seg.x2 = x2 = x + seg.x2;\n      }\n      if ('y1' in seg) {\n        seg.y1 = y1 = y + seg.y1;\n      }\n      if ('y2' in seg) {\n        seg.y2 = y2 = y + seg.y2;\n      }\n      if ('x' in seg) {\n        seg.x = x += seg.x;\n      }\n      if ('y' in seg) {\n        seg.y = y += seg.y;\n      }\n      var newSeg = void 0;\n      switch (char) {\n        case 'm':\n        case 'M':\n          newSeg = {\n            command: 'M',\n            x: x,\n            y: y\n          };\n          break;\n        case 'l':\n        case 'L':\n          newSeg = {\n            command: 'L',\n            x: x,\n            y: y\n          };\n          break;\n        case 'h':\n        case 'H':\n          newSeg = {\n            command: 'H',\n            x: x\n          };\n          break;\n        case 'v':\n        case 'V':\n          newSeg = {\n            command: 'V',\n            y: y\n          };\n          break;\n        case 'c':\n        case 'C':\n          newSeg = {\n            command: 'C',\n            x: x,\n            y: y,\n            x1: x1,\n            y1: y1,\n            x2: x2,\n            y2: y2\n          };\n          break;\n        case 's':\n        case 'S':\n          newSeg = {\n            command: 'S',\n            x: x,\n            y: y,\n            x2: x2,\n            y2: y2\n          };\n          break;\n        case 'q':\n        case 'Q':\n          newSeg = {\n            command: 'Q',\n            x: x,\n            y: y,\n            x1: x1,\n            y1: y1\n          };\n          break;\n        case 't':\n        case 'T':\n          newSeg = {\n            command: 'T',\n            x: x,\n            y: y\n          };\n          break;\n        case 'a':\n        case 'A':\n          newSeg = {\n            command: 'A',\n            x: x,\n            y: y\n          };\n          newSeg.r1 = seg.r1;\n          newSeg.r2 = seg.r2;\n          newSeg.angle = seg.angle;\n          newSeg.largeArc = seg.largeArc;\n          newSeg.sweep = seg.sweep;\n          break;\n        case 'z':\n        case 'Z':\n          newSeg = {\n            command: 'Z'\n          };\n          x = x0;\n          y = y0;\n          newSeg = arrayCollection[parseInt(i.toString(), 10)];\n          break;\n      }\n      if (newSeg) {\n        arrayCollection[parseInt(i.toString(), 10)] = newSeg;\n      }\n    }\n    if (char === 'M' || char === 'm') {\n      x0 = x;\n      y0 = y;\n    }\n  }\n  return arrayCollection;\n}\n/** @private */\nexport function getPathString(arrayCollection) {\n  var getNewString = '';\n  var i;\n  for (i = 0; i < arrayCollection.length; i++) {\n    if (i === 0) {\n      getNewString += getString(arrayCollection[parseInt(i.toString(), 10)]);\n    } else {\n      getNewString += ' ' + getString(arrayCollection[parseInt(i.toString(), 10)]);\n    }\n  }\n  return getNewString;\n}\n/** @private */\nexport function getString(obj) {\n  var string = '';\n  switch (obj.command) {\n    case 'Z':\n    case 'z':\n      string = obj.command;\n      break;\n    case 'M':\n    case 'm':\n    case 'L':\n    case 'l':\n      string = obj.command + ' ' + obj.x + ' ' + obj.y;\n      break;\n    case 'C':\n    case 'c':\n      string = obj.command + ' ' + obj.x1 + ' ' + obj.y1 + ' ' + obj.x2 + ' ' + obj.y2 + ' ' + obj.x + ' ' + obj.y;\n      break;\n    case 'Q':\n    case 'q':\n      string = obj.command + ' ' + obj.x1 + ' ' + obj.y1 + ' ' + obj.x + ' ' + obj.y;\n      break;\n    case 'A':\n    case 'a':\n      var cmd = obj.command;\n      var ang = obj.angle;\n      var l = obj.largeArc ? '1' : '0';\n      var s = obj.sweep ? '1' : '0';\n      string = cmd + ' ' + obj.r1 + ' ' + obj.r2 + ' ' + ang + ' ' + l + ' ' + s + ' ' + obj.x + ' ' + obj.y;\n      break;\n    case 'H':\n    case 'h':\n      string = obj.command + ' ' + obj.x;\n      break;\n    case 'V':\n    case 'v':\n      string = obj.command + ' ' + obj.y;\n      break;\n    case 'S':\n    case 's':\n      string = obj.command + ' ' + obj.x2 + ' ' + obj.y2 + ' ' + obj.x + ' ' + obj.y;\n      break;\n    case 'T':\n    case 't':\n      string = obj.command + ' ' + obj.x + ' ' + obj.y;\n  }\n  return string;\n}","map":{"version":3,"names":["processPathData","data","collection","j","arrayCollection","parsePathData","length","i","ob","parseInt","toString","char","toLowerCase","push","command","x","y","x1","y1","x2","y2","r1","r2","angle","largeArc","sweep","tokenizer","current","commands","match","lastIndex","isExponential","exec","s1","substring","Number","getRectanglePath","cornerRadius","height","width","path","points","corners","corner","point2","next","pathSegmentCollection","x0","y0","initx","inity","segments","obj","seg","prev","ctrl","cpt2","newSeg","transformPath","arr","sX","sY","s","bX","bY","iX","iY","undefined","scalePathData","toFixed","scaledPath","updatedSegment","pathData","getPathString","segment","isScale","val","scaleFactor","oldOffset","newOffset","splitArrayCollection","test","getNewString","getString","string","cmd","ang","l"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-drawings/src/drawing/utility/path-util.js"],"sourcesContent":["/**\n * These utility methods help to process the data and to convert it to desired dimensions\n */\n/** @private */\nexport function processPathData(data) {\n    var collection = [];\n    var j;\n    var arrayCollection = parsePathData(data);\n    if (arrayCollection.length > 0) {\n        for (var i = 0; i < arrayCollection.length; i++) {\n            var ob = arrayCollection[parseInt(i.toString(), 10)];\n            var char = '';\n            char = ob[0];\n            switch (char.toLowerCase()) {\n                case 'm':\n                    for (j = 1; j < ob.length; j++) {\n                        collection.push({ command: char, x: ob[parseInt(j.toString(), 10)], y: ob[j + 1] });\n                        j = j + 1;\n                        if (char === 'm') {\n                            char = 'l';\n                        }\n                        else if (char === 'M') {\n                            char = 'L';\n                        }\n                    }\n                    break;\n                case 'l':\n                case 't':\n                    for (j = 1; j < ob.length; j++) {\n                        collection.push({ command: char, x: ob[parseInt(j.toString(), 10)], y: ob[j + 1] });\n                        j = j + 1;\n                    }\n                    break;\n                case 'h':\n                    for (j = 1; j < ob.length; j++) {\n                        collection.push({ command: char, x: ob[parseInt(j.toString(), 10)] });\n                    }\n                    break;\n                case 'v':\n                    for (j = 1; j < ob.length; j++) {\n                        collection.push({ command: char, y: ob[parseInt(j.toString(), 10)] });\n                    }\n                    break;\n                case 'z':\n                    collection.push({ command: char });\n                    break;\n                case 'c':\n                    for (j = 1; j < ob.length; j++) {\n                        collection.push({\n                            command: char, x1: ob[parseInt(j.toString(), 10)], y1: ob[j + 1], x2: ob[j + 2], y2: ob[j + 3], x: ob[j + 4], y: ob[j + 5]\n                        });\n                        j = j + 5;\n                    }\n                    break;\n                case 's':\n                    for (j = 1; j < ob.length; j++) {\n                        collection.push({ command: char, x2: ob[parseInt(j.toString(), 10)], y2: ob[j + 1], x: ob[j + 2], y: ob[j + 3] });\n                        j = j + 3;\n                    }\n                    break;\n                case 'q':\n                    for (j = 1; j < ob.length; j++) {\n                        collection.push({ command: char, x1: ob[parseInt(j.toString(), 10)], y1: ob[j + 1], x: ob[j + 2], y: ob[j + 3] });\n                        j = j + 3;\n                    }\n                    break;\n                case 'a':\n                    for (j = 1; j < ob.length; j++) {\n                        collection.push({\n                            command: char, r1: ob[parseInt(j.toString(), 10)], r2: ob[j + 1], angle: ob[j + 2], largeArc: ob[j + 3],\n                            sweep: ob[j + 4], x: ob[j + 5], y: ob[j + 6]\n                        });\n                        j = j + 6;\n                    }\n                    break;\n            }\n        }\n    }\n    return collection;\n}\n/** @private */\nexport function parsePathData(data) {\n    var tokenizer = /([a-z]+)|([+-]?(?:\\d+\\.?\\d*|\\.\\d+))/gi;\n    var current = [];\n    var commands = [];\n    var match = {};\n    tokenizer.lastIndex = 0;\n    var isExponential = false;\n    match = tokenizer.exec(data);\n    while (match) {\n        if (match[1] === 'e') {\n            var s1 = '';\n            isExponential = true;\n        }\n        else if (match[1]) {\n            if (match[1].toLowerCase() === 'zm') {\n                if (current.length) {\n                    commands.push(current);\n                }\n                commands.push(['Z']);\n                current = [match[1].substring(1, 2)];\n            }\n            else {\n                if (current.length) {\n                    commands.push(current);\n                }\n                current = [match[1]];\n            }\n            isExponential = false;\n        }\n        else {\n            if (!current.length) {\n                current = [];\n            }\n            if (!isExponential) {\n                current.push(Number(match[2]));\n            }\n            isExponential = false;\n        }\n        match = tokenizer.exec(data);\n    }\n    if (current.length) {\n        commands.push(current);\n    }\n    return commands;\n}\n/**\n * Used to find the path for rounded rect\n */\nexport function getRectanglePath(cornerRadius, height, width) {\n    if (cornerRadius > height / 2) {\n        cornerRadius = height / 2;\n    }\n    if (cornerRadius > width / 2) {\n        cornerRadius = width / 2;\n    }\n    var x = 0;\n    var y = 0;\n    var path = '';\n    var points = [{ x: x + cornerRadius, y: y }, { x: x + width - cornerRadius, y: y },\n        { x: x + width, y: y + cornerRadius }, { x: x + width, y: y + height - cornerRadius },\n        { x: x + width - cornerRadius, y: y + height }, { x: x + cornerRadius, y: y + height },\n        { x: x, y: y + height - cornerRadius }, { x: x, y: y + cornerRadius }\n    ];\n    var corners = [{ x: x + width, y: y }, { x: x + width, y: y + height }, { x: x, y: y + height }, { x: x, y: y }];\n    var corner = 0;\n    var point2;\n    var next;\n    path = 'M' + points[0].x + ' ' + points[0].y;\n    var i;\n    for (i = 0; i < points.length; i = i + 2) {\n        point2 = points[i + 1];\n        path += 'L' + point2.x + ' ' + point2.y;\n        next = points[i + 2] || points[0];\n        // eslint-disable-next-line\n        path += 'Q' + corners[corner].x + ' ' + corners[corner].y + ' ' + next.x + ' ' + next.y;\n        corner++;\n    }\n    return path;\n}\n/** @private */\nexport function pathSegmentCollection(collection) {\n    var x0;\n    var y0;\n    var x1;\n    var y1;\n    var x2;\n    var y2;\n    var x;\n    var y;\n    var length;\n    var i;\n    var initx;\n    var inity;\n    var segments = [];\n    for (x = 0, y = 0, i = 0, length = collection.length; i < length; ++i) {\n        var obj = collection[parseInt(i.toString(), 10)];\n        var seg = obj;\n        var char = '';\n        char = seg.command;\n        if ('y1' in seg) {\n            y1 = seg.y1;\n        }\n        if ('y2' in seg) {\n            y2 = seg.y2;\n        }\n        if ('x1' in seg) {\n            x1 = seg.x1;\n        }\n        if ('x2' in seg) {\n            x2 = seg.x2;\n        }\n        if ('x' in seg) {\n            x = seg.x;\n        }\n        if ('y' in seg) {\n            y = seg.y;\n        }\n        var prev = segments[segments.length - 1];\n        switch (char) {\n            case 'M':\n                segments.push({ command: 'M', x: x, y: y });\n                break;\n            case 'L':\n                segments.push({ command: 'L', x0: x0, y0: y0, x: x, y: y });\n                break;\n            case 'H':\n                segments.push({ command: 'L', x0: x0, y0: y0, x: x, y: y0 });\n                break;\n            case 'V':\n                segments.push({ command: 'L', x0: x0, y0: y0, x: x0, y: y });\n                break;\n            case 'C':\n                segments.push({ command: 'C', x0: x0, y0: y0, x1: x1, y1: y1, x2: x2, y2: y2, x: x, y: y });\n                break;\n            case 'S':\n                if (prev) {\n                    var ctrl = void 0;\n                    if (prev.command === 'C' || prev.command === 'S') {\n                        ctrl = { x: prev.x2, y: prev.y2 };\n                    }\n                    else {\n                        ctrl = { x: x0, y: y0 };\n                    }\n                    var cpt2 = { x: 2 * x0 - ctrl.x, y: 2 * y0 - ctrl.y };\n                    segments.push({ command: 'C', x0: x0, y0: y0, x1: cpt2.x, y1: cpt2.y, x2: x2, y2: y2, x: x, y: y });\n                }\n                break;\n            case 'Q':\n                //ctx.quadraticCurveTo(x1, y1, x, y);\n                segments.push({ command: 'Q', x0: x0, y0: y0, x1: x1, y1: y1, x: x, y: y });\n                break;\n            case 'T':\n                if (prev) {\n                    var ctrl = void 0;\n                    if (prev.command === 'Q') {\n                        ctrl = { x: prev.x1, y: prev.y1 };\n                    }\n                    else {\n                        ctrl = { x: x0, y: y0 };\n                    }\n                    var cpt2 = { x: 2 * x0 - ctrl.x, y: 2 * y0 - ctrl.y };\n                    segments.push({ command: 'Q', x0: x0, y0: y0, x1: cpt2.x, y1: cpt2.y, x: x, y: y });\n                }\n                break;\n            case 'A':\n                var newSeg = seg;\n                newSeg.command = 'A';\n                segments.push(newSeg);\n                break;\n            case 'Z':\n            case 'z':\n                segments.push({ command: 'Z' });\n                x = x0;\n                y = y0;\n                break;\n        }\n        if (char === 'M' || char === 'm') {\n            initx = x;\n            inity = y;\n        }\n        x0 = x;\n        y0 = y;\n    }\n    return segments;\n}\n/** @private */\nexport function transformPath(arr, sX, sY, s, bX, bY, iX, iY) {\n    var x0;\n    var y0;\n    var x1;\n    var y1;\n    var x2;\n    var y2;\n    var x;\n    var y;\n    var length;\n    var i;\n    var newSeg;\n    for (x = 0, y = 0, i = 0, length = arr.length; i < length; ++i) {\n        var obj = arr[parseInt(i.toString(), 10)];\n        var seg = obj;\n        var char = seg.command;\n        if ('x' in seg) {\n            x = seg.x;\n        }\n        if ('y' in seg) {\n            y = seg.y;\n        }\n        if ('y1' in seg) {\n            y1 = seg.y1;\n        }\n        if ('y2' in seg) {\n            y2 = seg.y2;\n        }\n        if ('x1' in seg) {\n            x1 = seg.x1;\n        }\n        if ('x2' in seg) {\n            x2 = seg.x2;\n        }\n        if (s) {\n            if (x !== undefined) {\n                x = scalePathData(x, sX, bX, iX);\n            }\n            if (y !== undefined) {\n                y = scalePathData(y, sY, bY, iY);\n            }\n            if (x1 !== undefined) {\n                x1 = scalePathData(x1, sX, bX, iX);\n            }\n            if (y1 !== undefined) {\n                y1 = scalePathData(y1, sY, bY, iY);\n            }\n            if (x2 !== undefined) {\n                x2 = scalePathData(x2, sX, bX, iX);\n            }\n            if (y2 !== undefined) {\n                y2 = scalePathData(y2, sY, bY, iY);\n            }\n        }\n        else {\n            if (x !== undefined) {\n                x = Number((x + sX).toFixed(2));\n            }\n            if (y !== undefined) {\n                y = Number((y + sY).toFixed(2));\n            }\n            if (x1 !== undefined) {\n                x1 = Number((x1 + sX).toFixed(2));\n            }\n            if (y1 !== undefined) {\n                y1 = Number((y1 + sY).toFixed(2));\n            }\n            if (x2 !== undefined) {\n                x2 = Number((x2 + sX).toFixed(2));\n            }\n            if (y2 !== undefined) {\n                y2 = Number((y2 + sY).toFixed(2));\n            }\n        }\n        var scaledPath = { x: x, y: y, x1: x1, y1: y1, x2: x2, y2: y2, r1: seg.r1, r2: seg.r2 };\n        newSeg = updatedSegment(seg, char, scaledPath, s, sX, sY);\n        if (newSeg) {\n            arr[parseInt(i.toString(), 10)] = newSeg;\n        }\n        // Record the start of a subpath\n        if (char === 'M' || char === 'm') {\n            x0 = x;\n            y0 = y;\n        }\n    }\n    var pathData = getPathString(arr);\n    return pathData;\n}\n/** @private */\nexport function updatedSegment(segment, char, obj, isScale, sX, sY) {\n    switch (char) {\n        case 'M':\n            segment.x = obj.x;\n            segment.y = obj.y;\n            break;\n        case 'L':\n            segment.x = obj.x;\n            segment.y = obj.y;\n            break;\n        case 'H':\n            segment.x = obj.x;\n            break;\n        case 'V':\n            segment.y = obj.y;\n            break;\n        case 'C':\n            segment.x = obj.x;\n            segment.y = obj.y;\n            segment.x1 = obj.x1;\n            segment.y1 = obj.y1;\n            segment.x2 = obj.x2;\n            segment.y2 = obj.y2;\n            break;\n        case 'S':\n            segment.x = obj.x;\n            segment.y = obj.y;\n            segment.x2 = obj.x2;\n            segment.y2 = obj.y2;\n            break;\n        case 'Q':\n            segment.x = obj.x;\n            segment.y = obj.y;\n            segment.x1 = obj.x1;\n            segment.y1 = obj.y1;\n            break;\n        case 'T':\n            segment.x = obj.x;\n            segment.y = obj.y;\n            break;\n        case 'A':\n            var r1 = obj.r1;\n            var r2 = obj.r2;\n            if (isScale) {\n                obj.r1 = r1 = (r1 * sX);\n                obj.r2 = r2 = (r2 * sY);\n            }\n            segment.x = obj.x;\n            segment.y = obj.y;\n            segment.r1 = obj.r1;\n            segment.r2 = obj.r2;\n            break;\n        case 'z':\n        case 'Z':\n            segment = { command: 'Z' };\n            break;\n    }\n    return segment;\n}\n/** @private */\nexport function scalePathData(val, scaleFactor, oldOffset, newOffset) {\n    if (val !== oldOffset) {\n        if (newOffset !== oldOffset) {\n            val = (((val * scaleFactor) - (Number(oldOffset) * scaleFactor - Number(oldOffset)))\n                + (newOffset - Number(oldOffset)));\n        }\n        else {\n            val = ((Number(val) * scaleFactor) - (Number(oldOffset) * scaleFactor - Number(oldOffset)));\n        }\n    }\n    else {\n        if (newOffset !== oldOffset) {\n            val = newOffset;\n        }\n    }\n    return Number(val.toFixed(2));\n}\n/** @private */\nexport function splitArrayCollection(arrayCollection) {\n    var x0;\n    var y0;\n    var x1;\n    var y1;\n    var x2;\n    var y2;\n    var x;\n    var y;\n    var length;\n    var i;\n    for (x = 0, y = 0, i = 0, length = arrayCollection.length; i < length; ++i) {\n        var path = arrayCollection[parseInt(i.toString(), 10)];\n        var seg = path;\n        var char = seg.command;\n        if (/[MLHVCSQTA]/.test(char)) {\n            if ('x' in seg) {\n                seg.x = x = seg.x;\n            }\n            if ('y' in seg) {\n                seg.y = y = seg.y;\n            }\n        }\n        else {\n            if ('x1' in seg) {\n                seg.x1 = x1 = x + seg.x1;\n            }\n            if ('x2' in seg) {\n                seg.x2 = x2 = x + seg.x2;\n            }\n            if ('y1' in seg) {\n                seg.y1 = y1 = y + seg.y1;\n            }\n            if ('y2' in seg) {\n                seg.y2 = y2 = y + seg.y2;\n            }\n            if ('x' in seg) {\n                seg.x = x += seg.x;\n            }\n            if ('y' in seg) {\n                seg.y = y += seg.y;\n            }\n            var newSeg = void 0;\n            switch (char) {\n                case 'm':\n                case 'M':\n                    newSeg = { command: 'M', x: x, y: y };\n                    break;\n                case 'l':\n                case 'L':\n                    newSeg = { command: 'L', x: x, y: y };\n                    break;\n                case 'h':\n                case 'H':\n                    newSeg = { command: 'H', x: x };\n                    break;\n                case 'v':\n                case 'V':\n                    newSeg = { command: 'V', y: y };\n                    break;\n                case 'c':\n                case 'C':\n                    newSeg = { command: 'C', x: x, y: y, x1: x1, y1: y1, x2: x2, y2: y2 };\n                    break;\n                case 's':\n                case 'S':\n                    newSeg = { command: 'S', x: x, y: y, x2: x2, y2: y2 };\n                    break;\n                case 'q':\n                case 'Q':\n                    newSeg = { command: 'Q', x: x, y: y, x1: x1, y1: y1 };\n                    break;\n                case 't':\n                case 'T':\n                    newSeg = { command: 'T', x: x, y: y };\n                    break;\n                case 'a':\n                case 'A':\n                    newSeg = { command: 'A', x: x, y: y };\n                    newSeg.r1 = seg.r1;\n                    newSeg.r2 = seg.r2;\n                    newSeg.angle = seg.angle;\n                    newSeg.largeArc = seg.largeArc;\n                    newSeg.sweep = seg.sweep;\n                    break;\n                case 'z':\n                case 'Z':\n                    newSeg = { command: 'Z' };\n                    x = x0;\n                    y = y0;\n                    newSeg = arrayCollection[parseInt(i.toString(), 10)];\n                    break;\n            }\n            if (newSeg) {\n                arrayCollection[parseInt(i.toString(), 10)] = newSeg;\n            }\n        }\n        if (char === 'M' || char === 'm') {\n            x0 = x;\n            y0 = y;\n        }\n    }\n    return arrayCollection;\n}\n/** @private */\nexport function getPathString(arrayCollection) {\n    var getNewString = '';\n    var i;\n    for (i = 0; i < arrayCollection.length; i++) {\n        if (i === 0) {\n            getNewString += getString(arrayCollection[parseInt(i.toString(), 10)]);\n        }\n        else {\n            getNewString += ' ' + getString(arrayCollection[parseInt(i.toString(), 10)]);\n        }\n    }\n    return getNewString;\n}\n/** @private */\nexport function getString(obj) {\n    var string = '';\n    switch (obj.command) {\n        case 'Z':\n        case 'z':\n            string = obj.command;\n            break;\n        case 'M':\n        case 'm':\n        case 'L':\n        case 'l':\n            string = obj.command + ' ' + obj.x + ' ' + obj.y;\n            break;\n        case 'C':\n        case 'c':\n            string = obj.command + ' ' + obj.x1 + ' ' + obj.y1 + ' ' + obj.x2 + ' ' + obj.y2 + ' ' + obj.x + ' ' + obj.y;\n            break;\n        case 'Q':\n        case 'q':\n            string = obj.command + ' ' + obj.x1 + ' ' + obj.y1 + ' ' + obj.x + ' ' + obj.y;\n            break;\n        case 'A':\n        case 'a':\n            var cmd = obj.command;\n            var ang = obj.angle;\n            var l = (obj.largeArc ? '1' : '0');\n            var s = (obj.sweep ? '1' : '0');\n            string = cmd + ' ' + obj.r1 + ' ' + obj.r2 + ' ' + ang + ' ' + l + ' ' + s + ' ' + obj.x + ' ' + obj.y;\n            break;\n        case 'H':\n        case 'h':\n            string = obj.command + ' ' + obj.x;\n            break;\n        case 'V':\n        case 'v':\n            string = obj.command + ' ' + obj.y;\n            break;\n        case 'S':\n        case 's':\n            string = obj.command + ' ' + obj.x2 + ' ' + obj.y2 + ' ' + obj.x + ' ' + obj.y;\n            break;\n        case 'T':\n        case 't':\n            string = obj.command + ' ' + obj.x + ' ' + obj.y;\n    }\n    return string;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,eAAeA,CAACC,IAAI,EAAE;EAClC,IAAIC,UAAU,GAAG,EAAE;EACnB,IAAIC,CAAC;EACL,IAAIC,eAAe,GAAGC,aAAa,CAACJ,IAAI,CAAC;EACzC,IAAIG,eAAe,CAACE,MAAM,GAAG,CAAC,EAAE;IAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,eAAe,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC7C,IAAIC,EAAE,GAAGJ,eAAe,CAACK,QAAQ,CAACF,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;MACpD,IAAIC,IAAI,GAAG,EAAE;MACbA,IAAI,GAAGH,EAAE,CAAC,CAAC,CAAC;MACZ,QAAQG,IAAI,CAACC,WAAW,CAAC,CAAC;QACtB,KAAK,GAAG;UACJ,KAAKT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,EAAE,CAACF,MAAM,EAAEH,CAAC,EAAE,EAAE;YAC5BD,UAAU,CAACW,IAAI,CAAC;cAAEC,OAAO,EAAEH,IAAI;cAAEI,CAAC,EAAEP,EAAE,CAACC,QAAQ,CAACN,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;cAAEM,CAAC,EAAER,EAAE,CAACL,CAAC,GAAG,CAAC;YAAE,CAAC,CAAC;YACnFA,CAAC,GAAGA,CAAC,GAAG,CAAC;YACT,IAAIQ,IAAI,KAAK,GAAG,EAAE;cACdA,IAAI,GAAG,GAAG;YACd,CAAC,MACI,IAAIA,IAAI,KAAK,GAAG,EAAE;cACnBA,IAAI,GAAG,GAAG;YACd;UACJ;UACA;QACJ,KAAK,GAAG;QACR,KAAK,GAAG;UACJ,KAAKR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,EAAE,CAACF,MAAM,EAAEH,CAAC,EAAE,EAAE;YAC5BD,UAAU,CAACW,IAAI,CAAC;cAAEC,OAAO,EAAEH,IAAI;cAAEI,CAAC,EAAEP,EAAE,CAACC,QAAQ,CAACN,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;cAAEM,CAAC,EAAER,EAAE,CAACL,CAAC,GAAG,CAAC;YAAE,CAAC,CAAC;YACnFA,CAAC,GAAGA,CAAC,GAAG,CAAC;UACb;UACA;QACJ,KAAK,GAAG;UACJ,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,EAAE,CAACF,MAAM,EAAEH,CAAC,EAAE,EAAE;YAC5BD,UAAU,CAACW,IAAI,CAAC;cAAEC,OAAO,EAAEH,IAAI;cAAEI,CAAC,EAAEP,EAAE,CAACC,QAAQ,CAACN,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;YAAE,CAAC,CAAC;UACzE;UACA;QACJ,KAAK,GAAG;UACJ,KAAKP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,EAAE,CAACF,MAAM,EAAEH,CAAC,EAAE,EAAE;YAC5BD,UAAU,CAACW,IAAI,CAAC;cAAEC,OAAO,EAAEH,IAAI;cAAEK,CAAC,EAAER,EAAE,CAACC,QAAQ,CAACN,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;YAAE,CAAC,CAAC;UACzE;UACA;QACJ,KAAK,GAAG;UACJR,UAAU,CAACW,IAAI,CAAC;YAAEC,OAAO,EAAEH;UAAK,CAAC,CAAC;UAClC;QACJ,KAAK,GAAG;UACJ,KAAKR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,EAAE,CAACF,MAAM,EAAEH,CAAC,EAAE,EAAE;YAC5BD,UAAU,CAACW,IAAI,CAAC;cACZC,OAAO,EAAEH,IAAI;cAAEM,EAAE,EAAET,EAAE,CAACC,QAAQ,CAACN,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;cAAEQ,EAAE,EAAEV,EAAE,CAACL,CAAC,GAAG,CAAC,CAAC;cAAEgB,EAAE,EAAEX,EAAE,CAACL,CAAC,GAAG,CAAC,CAAC;cAAEiB,EAAE,EAAEZ,EAAE,CAACL,CAAC,GAAG,CAAC,CAAC;cAAEY,CAAC,EAAEP,EAAE,CAACL,CAAC,GAAG,CAAC,CAAC;cAAEa,CAAC,EAAER,EAAE,CAACL,CAAC,GAAG,CAAC;YAC7H,CAAC,CAAC;YACFA,CAAC,GAAGA,CAAC,GAAG,CAAC;UACb;UACA;QACJ,KAAK,GAAG;UACJ,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,EAAE,CAACF,MAAM,EAAEH,CAAC,EAAE,EAAE;YAC5BD,UAAU,CAACW,IAAI,CAAC;cAAEC,OAAO,EAAEH,IAAI;cAAEQ,EAAE,EAAEX,EAAE,CAACC,QAAQ,CAACN,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;cAAEU,EAAE,EAAEZ,EAAE,CAACL,CAAC,GAAG,CAAC,CAAC;cAAEY,CAAC,EAAEP,EAAE,CAACL,CAAC,GAAG,CAAC,CAAC;cAAEa,CAAC,EAAER,EAAE,CAACL,CAAC,GAAG,CAAC;YAAE,CAAC,CAAC;YACjHA,CAAC,GAAGA,CAAC,GAAG,CAAC;UACb;UACA;QACJ,KAAK,GAAG;UACJ,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,EAAE,CAACF,MAAM,EAAEH,CAAC,EAAE,EAAE;YAC5BD,UAAU,CAACW,IAAI,CAAC;cAAEC,OAAO,EAAEH,IAAI;cAAEM,EAAE,EAAET,EAAE,CAACC,QAAQ,CAACN,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;cAAEQ,EAAE,EAAEV,EAAE,CAACL,CAAC,GAAG,CAAC,CAAC;cAAEY,CAAC,EAAEP,EAAE,CAACL,CAAC,GAAG,CAAC,CAAC;cAAEa,CAAC,EAAER,EAAE,CAACL,CAAC,GAAG,CAAC;YAAE,CAAC,CAAC;YACjHA,CAAC,GAAGA,CAAC,GAAG,CAAC;UACb;UACA;QACJ,KAAK,GAAG;UACJ,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,EAAE,CAACF,MAAM,EAAEH,CAAC,EAAE,EAAE;YAC5BD,UAAU,CAACW,IAAI,CAAC;cACZC,OAAO,EAAEH,IAAI;cAAEU,EAAE,EAAEb,EAAE,CAACC,QAAQ,CAACN,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;cAAEY,EAAE,EAAEd,EAAE,CAACL,CAAC,GAAG,CAAC,CAAC;cAAEoB,KAAK,EAAEf,EAAE,CAACL,CAAC,GAAG,CAAC,CAAC;cAAEqB,QAAQ,EAAEhB,EAAE,CAACL,CAAC,GAAG,CAAC,CAAC;cACvGsB,KAAK,EAAEjB,EAAE,CAACL,CAAC,GAAG,CAAC,CAAC;cAAEY,CAAC,EAAEP,EAAE,CAACL,CAAC,GAAG,CAAC,CAAC;cAAEa,CAAC,EAAER,EAAE,CAACL,CAAC,GAAG,CAAC;YAC/C,CAAC,CAAC;YACFA,CAAC,GAAGA,CAAC,GAAG,CAAC;UACb;UACA;MACR;IACJ;EACJ;EACA,OAAOD,UAAU;AACrB;AACA;AACA,OAAO,SAASG,aAAaA,CAACJ,IAAI,EAAE;EAChC,IAAIyB,SAAS,GAAG,uCAAuC;EACvD,IAAIC,OAAO,GAAG,EAAE;EAChB,IAAIC,QAAQ,GAAG,EAAE;EACjB,IAAIC,KAAK,GAAG,CAAC,CAAC;EACdH,SAAS,CAACI,SAAS,GAAG,CAAC;EACvB,IAAIC,aAAa,GAAG,KAAK;EACzBF,KAAK,GAAGH,SAAS,CAACM,IAAI,CAAC/B,IAAI,CAAC;EAC5B,OAAO4B,KAAK,EAAE;IACV,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MAClB,IAAII,EAAE,GAAG,EAAE;MACXF,aAAa,GAAG,IAAI;IACxB,CAAC,MACI,IAAIF,KAAK,CAAC,CAAC,CAAC,EAAE;MACf,IAAIA,KAAK,CAAC,CAAC,CAAC,CAACjB,WAAW,CAAC,CAAC,KAAK,IAAI,EAAE;QACjC,IAAIe,OAAO,CAACrB,MAAM,EAAE;UAChBsB,QAAQ,CAACf,IAAI,CAACc,OAAO,CAAC;QAC1B;QACAC,QAAQ,CAACf,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACpBc,OAAO,GAAG,CAACE,KAAK,CAAC,CAAC,CAAC,CAACK,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACxC,CAAC,MACI;QACD,IAAIP,OAAO,CAACrB,MAAM,EAAE;UAChBsB,QAAQ,CAACf,IAAI,CAACc,OAAO,CAAC;QAC1B;QACAA,OAAO,GAAG,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC;MACxB;MACAE,aAAa,GAAG,KAAK;IACzB,CAAC,MACI;MACD,IAAI,CAACJ,OAAO,CAACrB,MAAM,EAAE;QACjBqB,OAAO,GAAG,EAAE;MAChB;MACA,IAAI,CAACI,aAAa,EAAE;QAChBJ,OAAO,CAACd,IAAI,CAACsB,MAAM,CAACN,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;MAClC;MACAE,aAAa,GAAG,KAAK;IACzB;IACAF,KAAK,GAAGH,SAAS,CAACM,IAAI,CAAC/B,IAAI,CAAC;EAChC;EACA,IAAI0B,OAAO,CAACrB,MAAM,EAAE;IAChBsB,QAAQ,CAACf,IAAI,CAACc,OAAO,CAAC;EAC1B;EACA,OAAOC,QAAQ;AACnB;AACA;AACA;AACA;AACA,OAAO,SAASQ,gBAAgBA,CAACC,YAAY,EAAEC,MAAM,EAAEC,KAAK,EAAE;EAC1D,IAAIF,YAAY,GAAGC,MAAM,GAAG,CAAC,EAAE;IAC3BD,YAAY,GAAGC,MAAM,GAAG,CAAC;EAC7B;EACA,IAAID,YAAY,GAAGE,KAAK,GAAG,CAAC,EAAE;IAC1BF,YAAY,GAAGE,KAAK,GAAG,CAAC;EAC5B;EACA,IAAIxB,CAAC,GAAG,CAAC;EACT,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIwB,IAAI,GAAG,EAAE;EACb,IAAIC,MAAM,GAAG,CAAC;IAAE1B,CAAC,EAAEA,CAAC,GAAGsB,YAAY;IAAErB,CAAC,EAAEA;EAAE,CAAC,EAAE;IAAED,CAAC,EAAEA,CAAC,GAAGwB,KAAK,GAAGF,YAAY;IAAErB,CAAC,EAAEA;EAAE,CAAC,EAC9E;IAAED,CAAC,EAAEA,CAAC,GAAGwB,KAAK;IAAEvB,CAAC,EAAEA,CAAC,GAAGqB;EAAa,CAAC,EAAE;IAAEtB,CAAC,EAAEA,CAAC,GAAGwB,KAAK;IAAEvB,CAAC,EAAEA,CAAC,GAAGsB,MAAM,GAAGD;EAAa,CAAC,EACrF;IAAEtB,CAAC,EAAEA,CAAC,GAAGwB,KAAK,GAAGF,YAAY;IAAErB,CAAC,EAAEA,CAAC,GAAGsB;EAAO,CAAC,EAAE;IAAEvB,CAAC,EAAEA,CAAC,GAAGsB,YAAY;IAAErB,CAAC,EAAEA,CAAC,GAAGsB;EAAO,CAAC,EACtF;IAAEvB,CAAC,EAAEA,CAAC;IAAEC,CAAC,EAAEA,CAAC,GAAGsB,MAAM,GAAGD;EAAa,CAAC,EAAE;IAAEtB,CAAC,EAAEA,CAAC;IAAEC,CAAC,EAAEA,CAAC,GAAGqB;EAAa,CAAC,CACxE;EACD,IAAIK,OAAO,GAAG,CAAC;IAAE3B,CAAC,EAAEA,CAAC,GAAGwB,KAAK;IAAEvB,CAAC,EAAEA;EAAE,CAAC,EAAE;IAAED,CAAC,EAAEA,CAAC,GAAGwB,KAAK;IAAEvB,CAAC,EAAEA,CAAC,GAAGsB;EAAO,CAAC,EAAE;IAAEvB,CAAC,EAAEA,CAAC;IAAEC,CAAC,EAAEA,CAAC,GAAGsB;EAAO,CAAC,EAAE;IAAEvB,CAAC,EAAEA,CAAC;IAAEC,CAAC,EAAEA;EAAE,CAAC,CAAC;EAChH,IAAI2B,MAAM,GAAG,CAAC;EACd,IAAIC,MAAM;EACV,IAAIC,IAAI;EACRL,IAAI,GAAG,GAAG,GAAGC,MAAM,CAAC,CAAC,CAAC,CAAC1B,CAAC,GAAG,GAAG,GAAG0B,MAAM,CAAC,CAAC,CAAC,CAACzB,CAAC;EAC5C,IAAIT,CAAC;EACL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkC,MAAM,CAACnC,MAAM,EAAEC,CAAC,GAAGA,CAAC,GAAG,CAAC,EAAE;IACtCqC,MAAM,GAAGH,MAAM,CAAClC,CAAC,GAAG,CAAC,CAAC;IACtBiC,IAAI,IAAI,GAAG,GAAGI,MAAM,CAAC7B,CAAC,GAAG,GAAG,GAAG6B,MAAM,CAAC5B,CAAC;IACvC6B,IAAI,GAAGJ,MAAM,CAAClC,CAAC,GAAG,CAAC,CAAC,IAAIkC,MAAM,CAAC,CAAC,CAAC;IACjC;IACAD,IAAI,IAAI,GAAG,GAAGE,OAAO,CAACC,MAAM,CAAC,CAAC5B,CAAC,GAAG,GAAG,GAAG2B,OAAO,CAACC,MAAM,CAAC,CAAC3B,CAAC,GAAG,GAAG,GAAG6B,IAAI,CAAC9B,CAAC,GAAG,GAAG,GAAG8B,IAAI,CAAC7B,CAAC;IACvF2B,MAAM,EAAE;EACZ;EACA,OAAOH,IAAI;AACf;AACA;AACA,OAAO,SAASM,qBAAqBA,CAAC5C,UAAU,EAAE;EAC9C,IAAI6C,EAAE;EACN,IAAIC,EAAE;EACN,IAAI/B,EAAE;EACN,IAAIC,EAAE;EACN,IAAIC,EAAE;EACN,IAAIC,EAAE;EACN,IAAIL,CAAC;EACL,IAAIC,CAAC;EACL,IAAIV,MAAM;EACV,IAAIC,CAAC;EACL,IAAI0C,KAAK;EACT,IAAIC,KAAK;EACT,IAAIC,QAAQ,GAAG,EAAE;EACjB,KAAKpC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAET,CAAC,GAAG,CAAC,EAAED,MAAM,GAAGJ,UAAU,CAACI,MAAM,EAAEC,CAAC,GAAGD,MAAM,EAAE,EAAEC,CAAC,EAAE;IACnE,IAAI6C,GAAG,GAAGlD,UAAU,CAACO,QAAQ,CAACF,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAChD,IAAI2C,GAAG,GAAGD,GAAG;IACb,IAAIzC,IAAI,GAAG,EAAE;IACbA,IAAI,GAAG0C,GAAG,CAACvC,OAAO;IAClB,IAAI,IAAI,IAAIuC,GAAG,EAAE;MACbnC,EAAE,GAAGmC,GAAG,CAACnC,EAAE;IACf;IACA,IAAI,IAAI,IAAImC,GAAG,EAAE;MACbjC,EAAE,GAAGiC,GAAG,CAACjC,EAAE;IACf;IACA,IAAI,IAAI,IAAIiC,GAAG,EAAE;MACbpC,EAAE,GAAGoC,GAAG,CAACpC,EAAE;IACf;IACA,IAAI,IAAI,IAAIoC,GAAG,EAAE;MACblC,EAAE,GAAGkC,GAAG,CAAClC,EAAE;IACf;IACA,IAAI,GAAG,IAAIkC,GAAG,EAAE;MACZtC,CAAC,GAAGsC,GAAG,CAACtC,CAAC;IACb;IACA,IAAI,GAAG,IAAIsC,GAAG,EAAE;MACZrC,CAAC,GAAGqC,GAAG,CAACrC,CAAC;IACb;IACA,IAAIsC,IAAI,GAAGH,QAAQ,CAACA,QAAQ,CAAC7C,MAAM,GAAG,CAAC,CAAC;IACxC,QAAQK,IAAI;MACR,KAAK,GAAG;QACJwC,QAAQ,CAACtC,IAAI,CAAC;UAAEC,OAAO,EAAE,GAAG;UAAEC,CAAC,EAAEA,CAAC;UAAEC,CAAC,EAAEA;QAAE,CAAC,CAAC;QAC3C;MACJ,KAAK,GAAG;QACJmC,QAAQ,CAACtC,IAAI,CAAC;UAAEC,OAAO,EAAE,GAAG;UAAEiC,EAAE,EAAEA,EAAE;UAAEC,EAAE,EAAEA,EAAE;UAAEjC,CAAC,EAAEA,CAAC;UAAEC,CAAC,EAAEA;QAAE,CAAC,CAAC;QAC3D;MACJ,KAAK,GAAG;QACJmC,QAAQ,CAACtC,IAAI,CAAC;UAAEC,OAAO,EAAE,GAAG;UAAEiC,EAAE,EAAEA,EAAE;UAAEC,EAAE,EAAEA,EAAE;UAAEjC,CAAC,EAAEA,CAAC;UAAEC,CAAC,EAAEgC;QAAG,CAAC,CAAC;QAC5D;MACJ,KAAK,GAAG;QACJG,QAAQ,CAACtC,IAAI,CAAC;UAAEC,OAAO,EAAE,GAAG;UAAEiC,EAAE,EAAEA,EAAE;UAAEC,EAAE,EAAEA,EAAE;UAAEjC,CAAC,EAAEgC,EAAE;UAAE/B,CAAC,EAAEA;QAAE,CAAC,CAAC;QAC5D;MACJ,KAAK,GAAG;QACJmC,QAAQ,CAACtC,IAAI,CAAC;UAAEC,OAAO,EAAE,GAAG;UAAEiC,EAAE,EAAEA,EAAE;UAAEC,EAAE,EAAEA,EAAE;UAAE/B,EAAE,EAAEA,EAAE;UAAEC,EAAE,EAAEA,EAAE;UAAEC,EAAE,EAAEA,EAAE;UAAEC,EAAE,EAAEA,EAAE;UAAEL,CAAC,EAAEA,CAAC;UAAEC,CAAC,EAAEA;QAAE,CAAC,CAAC;QAC3F;MACJ,KAAK,GAAG;QACJ,IAAIsC,IAAI,EAAE;UACN,IAAIC,IAAI,GAAG,KAAK,CAAC;UACjB,IAAID,IAAI,CAACxC,OAAO,KAAK,GAAG,IAAIwC,IAAI,CAACxC,OAAO,KAAK,GAAG,EAAE;YAC9CyC,IAAI,GAAG;cAAExC,CAAC,EAAEuC,IAAI,CAACnC,EAAE;cAAEH,CAAC,EAAEsC,IAAI,CAAClC;YAAG,CAAC;UACrC,CAAC,MACI;YACDmC,IAAI,GAAG;cAAExC,CAAC,EAAEgC,EAAE;cAAE/B,CAAC,EAAEgC;YAAG,CAAC;UAC3B;UACA,IAAIQ,IAAI,GAAG;YAAEzC,CAAC,EAAE,CAAC,GAAGgC,EAAE,GAAGQ,IAAI,CAACxC,CAAC;YAAEC,CAAC,EAAE,CAAC,GAAGgC,EAAE,GAAGO,IAAI,CAACvC;UAAE,CAAC;UACrDmC,QAAQ,CAACtC,IAAI,CAAC;YAAEC,OAAO,EAAE,GAAG;YAAEiC,EAAE,EAAEA,EAAE;YAAEC,EAAE,EAAEA,EAAE;YAAE/B,EAAE,EAAEuC,IAAI,CAACzC,CAAC;YAAEG,EAAE,EAAEsC,IAAI,CAACxC,CAAC;YAAEG,EAAE,EAAEA,EAAE;YAAEC,EAAE,EAAEA,EAAE;YAAEL,CAAC,EAAEA,CAAC;YAAEC,CAAC,EAAEA;UAAE,CAAC,CAAC;QACvG;QACA;MACJ,KAAK,GAAG;QACJ;QACAmC,QAAQ,CAACtC,IAAI,CAAC;UAAEC,OAAO,EAAE,GAAG;UAAEiC,EAAE,EAAEA,EAAE;UAAEC,EAAE,EAAEA,EAAE;UAAE/B,EAAE,EAAEA,EAAE;UAAEC,EAAE,EAAEA,EAAE;UAAEH,CAAC,EAAEA,CAAC;UAAEC,CAAC,EAAEA;QAAE,CAAC,CAAC;QAC3E;MACJ,KAAK,GAAG;QACJ,IAAIsC,IAAI,EAAE;UACN,IAAIC,IAAI,GAAG,KAAK,CAAC;UACjB,IAAID,IAAI,CAACxC,OAAO,KAAK,GAAG,EAAE;YACtByC,IAAI,GAAG;cAAExC,CAAC,EAAEuC,IAAI,CAACrC,EAAE;cAAED,CAAC,EAAEsC,IAAI,CAACpC;YAAG,CAAC;UACrC,CAAC,MACI;YACDqC,IAAI,GAAG;cAAExC,CAAC,EAAEgC,EAAE;cAAE/B,CAAC,EAAEgC;YAAG,CAAC;UAC3B;UACA,IAAIQ,IAAI,GAAG;YAAEzC,CAAC,EAAE,CAAC,GAAGgC,EAAE,GAAGQ,IAAI,CAACxC,CAAC;YAAEC,CAAC,EAAE,CAAC,GAAGgC,EAAE,GAAGO,IAAI,CAACvC;UAAE,CAAC;UACrDmC,QAAQ,CAACtC,IAAI,CAAC;YAAEC,OAAO,EAAE,GAAG;YAAEiC,EAAE,EAAEA,EAAE;YAAEC,EAAE,EAAEA,EAAE;YAAE/B,EAAE,EAAEuC,IAAI,CAACzC,CAAC;YAAEG,EAAE,EAAEsC,IAAI,CAACxC,CAAC;YAAED,CAAC,EAAEA,CAAC;YAAEC,CAAC,EAAEA;UAAE,CAAC,CAAC;QACvF;QACA;MACJ,KAAK,GAAG;QACJ,IAAIyC,MAAM,GAAGJ,GAAG;QAChBI,MAAM,CAAC3C,OAAO,GAAG,GAAG;QACpBqC,QAAQ,CAACtC,IAAI,CAAC4C,MAAM,CAAC;QACrB;MACJ,KAAK,GAAG;MACR,KAAK,GAAG;QACJN,QAAQ,CAACtC,IAAI,CAAC;UAAEC,OAAO,EAAE;QAAI,CAAC,CAAC;QAC/BC,CAAC,GAAGgC,EAAE;QACN/B,CAAC,GAAGgC,EAAE;QACN;IACR;IACA,IAAIrC,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,GAAG,EAAE;MAC9BsC,KAAK,GAAGlC,CAAC;MACTmC,KAAK,GAAGlC,CAAC;IACb;IACA+B,EAAE,GAAGhC,CAAC;IACNiC,EAAE,GAAGhC,CAAC;EACV;EACA,OAAOmC,QAAQ;AACnB;AACA;AACA,OAAO,SAASO,aAAaA,CAACC,GAAG,EAAEC,EAAE,EAAEC,EAAE,EAAEC,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE;EAC1D,IAAInB,EAAE;EACN,IAAIC,EAAE;EACN,IAAI/B,EAAE;EACN,IAAIC,EAAE;EACN,IAAIC,EAAE;EACN,IAAIC,EAAE;EACN,IAAIL,CAAC;EACL,IAAIC,CAAC;EACL,IAAIV,MAAM;EACV,IAAIC,CAAC;EACL,IAAIkD,MAAM;EACV,KAAK1C,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAET,CAAC,GAAG,CAAC,EAAED,MAAM,GAAGqD,GAAG,CAACrD,MAAM,EAAEC,CAAC,GAAGD,MAAM,EAAE,EAAEC,CAAC,EAAE;IAC5D,IAAI6C,GAAG,GAAGO,GAAG,CAAClD,QAAQ,CAACF,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACzC,IAAI2C,GAAG,GAAGD,GAAG;IACb,IAAIzC,IAAI,GAAG0C,GAAG,CAACvC,OAAO;IACtB,IAAI,GAAG,IAAIuC,GAAG,EAAE;MACZtC,CAAC,GAAGsC,GAAG,CAACtC,CAAC;IACb;IACA,IAAI,GAAG,IAAIsC,GAAG,EAAE;MACZrC,CAAC,GAAGqC,GAAG,CAACrC,CAAC;IACb;IACA,IAAI,IAAI,IAAIqC,GAAG,EAAE;MACbnC,EAAE,GAAGmC,GAAG,CAACnC,EAAE;IACf;IACA,IAAI,IAAI,IAAImC,GAAG,EAAE;MACbjC,EAAE,GAAGiC,GAAG,CAACjC,EAAE;IACf;IACA,IAAI,IAAI,IAAIiC,GAAG,EAAE;MACbpC,EAAE,GAAGoC,GAAG,CAACpC,EAAE;IACf;IACA,IAAI,IAAI,IAAIoC,GAAG,EAAE;MACblC,EAAE,GAAGkC,GAAG,CAAClC,EAAE;IACf;IACA,IAAI2C,CAAC,EAAE;MACH,IAAI/C,CAAC,KAAKoD,SAAS,EAAE;QACjBpD,CAAC,GAAGqD,aAAa,CAACrD,CAAC,EAAE6C,EAAE,EAAEG,EAAE,EAAEE,EAAE,CAAC;MACpC;MACA,IAAIjD,CAAC,KAAKmD,SAAS,EAAE;QACjBnD,CAAC,GAAGoD,aAAa,CAACpD,CAAC,EAAE6C,EAAE,EAAEG,EAAE,EAAEE,EAAE,CAAC;MACpC;MACA,IAAIjD,EAAE,KAAKkD,SAAS,EAAE;QAClBlD,EAAE,GAAGmD,aAAa,CAACnD,EAAE,EAAE2C,EAAE,EAAEG,EAAE,EAAEE,EAAE,CAAC;MACtC;MACA,IAAI/C,EAAE,KAAKiD,SAAS,EAAE;QAClBjD,EAAE,GAAGkD,aAAa,CAAClD,EAAE,EAAE2C,EAAE,EAAEG,EAAE,EAAEE,EAAE,CAAC;MACtC;MACA,IAAI/C,EAAE,KAAKgD,SAAS,EAAE;QAClBhD,EAAE,GAAGiD,aAAa,CAACjD,EAAE,EAAEyC,EAAE,EAAEG,EAAE,EAAEE,EAAE,CAAC;MACtC;MACA,IAAI7C,EAAE,KAAK+C,SAAS,EAAE;QAClB/C,EAAE,GAAGgD,aAAa,CAAChD,EAAE,EAAEyC,EAAE,EAAEG,EAAE,EAAEE,EAAE,CAAC;MACtC;IACJ,CAAC,MACI;MACD,IAAInD,CAAC,KAAKoD,SAAS,EAAE;QACjBpD,CAAC,GAAGoB,MAAM,CAAC,CAACpB,CAAC,GAAG6C,EAAE,EAAES,OAAO,CAAC,CAAC,CAAC,CAAC;MACnC;MACA,IAAIrD,CAAC,KAAKmD,SAAS,EAAE;QACjBnD,CAAC,GAAGmB,MAAM,CAAC,CAACnB,CAAC,GAAG6C,EAAE,EAAEQ,OAAO,CAAC,CAAC,CAAC,CAAC;MACnC;MACA,IAAIpD,EAAE,KAAKkD,SAAS,EAAE;QAClBlD,EAAE,GAAGkB,MAAM,CAAC,CAAClB,EAAE,GAAG2C,EAAE,EAAES,OAAO,CAAC,CAAC,CAAC,CAAC;MACrC;MACA,IAAInD,EAAE,KAAKiD,SAAS,EAAE;QAClBjD,EAAE,GAAGiB,MAAM,CAAC,CAACjB,EAAE,GAAG2C,EAAE,EAAEQ,OAAO,CAAC,CAAC,CAAC,CAAC;MACrC;MACA,IAAIlD,EAAE,KAAKgD,SAAS,EAAE;QAClBhD,EAAE,GAAGgB,MAAM,CAAC,CAAChB,EAAE,GAAGyC,EAAE,EAAES,OAAO,CAAC,CAAC,CAAC,CAAC;MACrC;MACA,IAAIjD,EAAE,KAAK+C,SAAS,EAAE;QAClB/C,EAAE,GAAGe,MAAM,CAAC,CAACf,EAAE,GAAGyC,EAAE,EAAEQ,OAAO,CAAC,CAAC,CAAC,CAAC;MACrC;IACJ;IACA,IAAIC,UAAU,GAAG;MAAEvD,CAAC,EAAEA,CAAC;MAAEC,CAAC,EAAEA,CAAC;MAAEC,EAAE,EAAEA,EAAE;MAAEC,EAAE,EAAEA,EAAE;MAAEC,EAAE,EAAEA,EAAE;MAAEC,EAAE,EAAEA,EAAE;MAAEC,EAAE,EAAEgC,GAAG,CAAChC,EAAE;MAAEC,EAAE,EAAE+B,GAAG,CAAC/B;IAAG,CAAC;IACvFmC,MAAM,GAAGc,cAAc,CAAClB,GAAG,EAAE1C,IAAI,EAAE2D,UAAU,EAAER,CAAC,EAAEF,EAAE,EAAEC,EAAE,CAAC;IACzD,IAAIJ,MAAM,EAAE;MACRE,GAAG,CAAClD,QAAQ,CAACF,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG+C,MAAM;IAC5C;IACA;IACA,IAAI9C,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,GAAG,EAAE;MAC9BoC,EAAE,GAAGhC,CAAC;MACNiC,EAAE,GAAGhC,CAAC;IACV;EACJ;EACA,IAAIwD,QAAQ,GAAGC,aAAa,CAACd,GAAG,CAAC;EACjC,OAAOa,QAAQ;AACnB;AACA;AACA,OAAO,SAASD,cAAcA,CAACG,OAAO,EAAE/D,IAAI,EAAEyC,GAAG,EAAEuB,OAAO,EAAEf,EAAE,EAAEC,EAAE,EAAE;EAChE,QAAQlD,IAAI;IACR,KAAK,GAAG;MACJ+D,OAAO,CAAC3D,CAAC,GAAGqC,GAAG,CAACrC,CAAC;MACjB2D,OAAO,CAAC1D,CAAC,GAAGoC,GAAG,CAACpC,CAAC;MACjB;IACJ,KAAK,GAAG;MACJ0D,OAAO,CAAC3D,CAAC,GAAGqC,GAAG,CAACrC,CAAC;MACjB2D,OAAO,CAAC1D,CAAC,GAAGoC,GAAG,CAACpC,CAAC;MACjB;IACJ,KAAK,GAAG;MACJ0D,OAAO,CAAC3D,CAAC,GAAGqC,GAAG,CAACrC,CAAC;MACjB;IACJ,KAAK,GAAG;MACJ2D,OAAO,CAAC1D,CAAC,GAAGoC,GAAG,CAACpC,CAAC;MACjB;IACJ,KAAK,GAAG;MACJ0D,OAAO,CAAC3D,CAAC,GAAGqC,GAAG,CAACrC,CAAC;MACjB2D,OAAO,CAAC1D,CAAC,GAAGoC,GAAG,CAACpC,CAAC;MACjB0D,OAAO,CAACzD,EAAE,GAAGmC,GAAG,CAACnC,EAAE;MACnByD,OAAO,CAACxD,EAAE,GAAGkC,GAAG,CAAClC,EAAE;MACnBwD,OAAO,CAACvD,EAAE,GAAGiC,GAAG,CAACjC,EAAE;MACnBuD,OAAO,CAACtD,EAAE,GAAGgC,GAAG,CAAChC,EAAE;MACnB;IACJ,KAAK,GAAG;MACJsD,OAAO,CAAC3D,CAAC,GAAGqC,GAAG,CAACrC,CAAC;MACjB2D,OAAO,CAAC1D,CAAC,GAAGoC,GAAG,CAACpC,CAAC;MACjB0D,OAAO,CAACvD,EAAE,GAAGiC,GAAG,CAACjC,EAAE;MACnBuD,OAAO,CAACtD,EAAE,GAAGgC,GAAG,CAAChC,EAAE;MACnB;IACJ,KAAK,GAAG;MACJsD,OAAO,CAAC3D,CAAC,GAAGqC,GAAG,CAACrC,CAAC;MACjB2D,OAAO,CAAC1D,CAAC,GAAGoC,GAAG,CAACpC,CAAC;MACjB0D,OAAO,CAACzD,EAAE,GAAGmC,GAAG,CAACnC,EAAE;MACnByD,OAAO,CAACxD,EAAE,GAAGkC,GAAG,CAAClC,EAAE;MACnB;IACJ,KAAK,GAAG;MACJwD,OAAO,CAAC3D,CAAC,GAAGqC,GAAG,CAACrC,CAAC;MACjB2D,OAAO,CAAC1D,CAAC,GAAGoC,GAAG,CAACpC,CAAC;MACjB;IACJ,KAAK,GAAG;MACJ,IAAIK,EAAE,GAAG+B,GAAG,CAAC/B,EAAE;MACf,IAAIC,EAAE,GAAG8B,GAAG,CAAC9B,EAAE;MACf,IAAIqD,OAAO,EAAE;QACTvB,GAAG,CAAC/B,EAAE,GAAGA,EAAE,GAAIA,EAAE,GAAGuC,EAAG;QACvBR,GAAG,CAAC9B,EAAE,GAAGA,EAAE,GAAIA,EAAE,GAAGuC,EAAG;MAC3B;MACAa,OAAO,CAAC3D,CAAC,GAAGqC,GAAG,CAACrC,CAAC;MACjB2D,OAAO,CAAC1D,CAAC,GAAGoC,GAAG,CAACpC,CAAC;MACjB0D,OAAO,CAACrD,EAAE,GAAG+B,GAAG,CAAC/B,EAAE;MACnBqD,OAAO,CAACpD,EAAE,GAAG8B,GAAG,CAAC9B,EAAE;MACnB;IACJ,KAAK,GAAG;IACR,KAAK,GAAG;MACJoD,OAAO,GAAG;QAAE5D,OAAO,EAAE;MAAI,CAAC;MAC1B;EACR;EACA,OAAO4D,OAAO;AAClB;AACA;AACA,OAAO,SAASN,aAAaA,CAACQ,GAAG,EAAEC,WAAW,EAAEC,SAAS,EAAEC,SAAS,EAAE;EAClE,IAAIH,GAAG,KAAKE,SAAS,EAAE;IACnB,IAAIC,SAAS,KAAKD,SAAS,EAAE;MACzBF,GAAG,GAAMA,GAAG,GAAGC,WAAW,IAAK1C,MAAM,CAAC2C,SAAS,CAAC,GAAGD,WAAW,GAAG1C,MAAM,CAAC2C,SAAS,CAAC,CAAC,IAC5EC,SAAS,GAAG5C,MAAM,CAAC2C,SAAS,CAAC,CAAE;IAC1C,CAAC,MACI;MACDF,GAAG,GAAKzC,MAAM,CAACyC,GAAG,CAAC,GAAGC,WAAW,IAAK1C,MAAM,CAAC2C,SAAS,CAAC,GAAGD,WAAW,GAAG1C,MAAM,CAAC2C,SAAS,CAAC,CAAE;IAC/F;EACJ,CAAC,MACI;IACD,IAAIC,SAAS,KAAKD,SAAS,EAAE;MACzBF,GAAG,GAAGG,SAAS;IACnB;EACJ;EACA,OAAO5C,MAAM,CAACyC,GAAG,CAACP,OAAO,CAAC,CAAC,CAAC,CAAC;AACjC;AACA;AACA,OAAO,SAASW,oBAAoBA,CAAC5E,eAAe,EAAE;EAClD,IAAI2C,EAAE;EACN,IAAIC,EAAE;EACN,IAAI/B,EAAE;EACN,IAAIC,EAAE;EACN,IAAIC,EAAE;EACN,IAAIC,EAAE;EACN,IAAIL,CAAC;EACL,IAAIC,CAAC;EACL,IAAIV,MAAM;EACV,IAAIC,CAAC;EACL,KAAKQ,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAET,CAAC,GAAG,CAAC,EAAED,MAAM,GAAGF,eAAe,CAACE,MAAM,EAAEC,CAAC,GAAGD,MAAM,EAAE,EAAEC,CAAC,EAAE;IACxE,IAAIiC,IAAI,GAAGpC,eAAe,CAACK,QAAQ,CAACF,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACtD,IAAI2C,GAAG,GAAGb,IAAI;IACd,IAAI7B,IAAI,GAAG0C,GAAG,CAACvC,OAAO;IACtB,IAAI,aAAa,CAACmE,IAAI,CAACtE,IAAI,CAAC,EAAE;MAC1B,IAAI,GAAG,IAAI0C,GAAG,EAAE;QACZA,GAAG,CAACtC,CAAC,GAAGA,CAAC,GAAGsC,GAAG,CAACtC,CAAC;MACrB;MACA,IAAI,GAAG,IAAIsC,GAAG,EAAE;QACZA,GAAG,CAACrC,CAAC,GAAGA,CAAC,GAAGqC,GAAG,CAACrC,CAAC;MACrB;IACJ,CAAC,MACI;MACD,IAAI,IAAI,IAAIqC,GAAG,EAAE;QACbA,GAAG,CAACpC,EAAE,GAAGA,EAAE,GAAGF,CAAC,GAAGsC,GAAG,CAACpC,EAAE;MAC5B;MACA,IAAI,IAAI,IAAIoC,GAAG,EAAE;QACbA,GAAG,CAAClC,EAAE,GAAGA,EAAE,GAAGJ,CAAC,GAAGsC,GAAG,CAAClC,EAAE;MAC5B;MACA,IAAI,IAAI,IAAIkC,GAAG,EAAE;QACbA,GAAG,CAACnC,EAAE,GAAGA,EAAE,GAAGF,CAAC,GAAGqC,GAAG,CAACnC,EAAE;MAC5B;MACA,IAAI,IAAI,IAAImC,GAAG,EAAE;QACbA,GAAG,CAACjC,EAAE,GAAGA,EAAE,GAAGJ,CAAC,GAAGqC,GAAG,CAACjC,EAAE;MAC5B;MACA,IAAI,GAAG,IAAIiC,GAAG,EAAE;QACZA,GAAG,CAACtC,CAAC,GAAGA,CAAC,IAAIsC,GAAG,CAACtC,CAAC;MACtB;MACA,IAAI,GAAG,IAAIsC,GAAG,EAAE;QACZA,GAAG,CAACrC,CAAC,GAAGA,CAAC,IAAIqC,GAAG,CAACrC,CAAC;MACtB;MACA,IAAIyC,MAAM,GAAG,KAAK,CAAC;MACnB,QAAQ9C,IAAI;QACR,KAAK,GAAG;QACR,KAAK,GAAG;UACJ8C,MAAM,GAAG;YAAE3C,OAAO,EAAE,GAAG;YAAEC,CAAC,EAAEA,CAAC;YAAEC,CAAC,EAAEA;UAAE,CAAC;UACrC;QACJ,KAAK,GAAG;QACR,KAAK,GAAG;UACJyC,MAAM,GAAG;YAAE3C,OAAO,EAAE,GAAG;YAAEC,CAAC,EAAEA,CAAC;YAAEC,CAAC,EAAEA;UAAE,CAAC;UACrC;QACJ,KAAK,GAAG;QACR,KAAK,GAAG;UACJyC,MAAM,GAAG;YAAE3C,OAAO,EAAE,GAAG;YAAEC,CAAC,EAAEA;UAAE,CAAC;UAC/B;QACJ,KAAK,GAAG;QACR,KAAK,GAAG;UACJ0C,MAAM,GAAG;YAAE3C,OAAO,EAAE,GAAG;YAAEE,CAAC,EAAEA;UAAE,CAAC;UAC/B;QACJ,KAAK,GAAG;QACR,KAAK,GAAG;UACJyC,MAAM,GAAG;YAAE3C,OAAO,EAAE,GAAG;YAAEC,CAAC,EAAEA,CAAC;YAAEC,CAAC,EAAEA,CAAC;YAAEC,EAAE,EAAEA,EAAE;YAAEC,EAAE,EAAEA,EAAE;YAAEC,EAAE,EAAEA,EAAE;YAAEC,EAAE,EAAEA;UAAG,CAAC;UACrE;QACJ,KAAK,GAAG;QACR,KAAK,GAAG;UACJqC,MAAM,GAAG;YAAE3C,OAAO,EAAE,GAAG;YAAEC,CAAC,EAAEA,CAAC;YAAEC,CAAC,EAAEA,CAAC;YAAEG,EAAE,EAAEA,EAAE;YAAEC,EAAE,EAAEA;UAAG,CAAC;UACrD;QACJ,KAAK,GAAG;QACR,KAAK,GAAG;UACJqC,MAAM,GAAG;YAAE3C,OAAO,EAAE,GAAG;YAAEC,CAAC,EAAEA,CAAC;YAAEC,CAAC,EAAEA,CAAC;YAAEC,EAAE,EAAEA,EAAE;YAAEC,EAAE,EAAEA;UAAG,CAAC;UACrD;QACJ,KAAK,GAAG;QACR,KAAK,GAAG;UACJuC,MAAM,GAAG;YAAE3C,OAAO,EAAE,GAAG;YAAEC,CAAC,EAAEA,CAAC;YAAEC,CAAC,EAAEA;UAAE,CAAC;UACrC;QACJ,KAAK,GAAG;QACR,KAAK,GAAG;UACJyC,MAAM,GAAG;YAAE3C,OAAO,EAAE,GAAG;YAAEC,CAAC,EAAEA,CAAC;YAAEC,CAAC,EAAEA;UAAE,CAAC;UACrCyC,MAAM,CAACpC,EAAE,GAAGgC,GAAG,CAAChC,EAAE;UAClBoC,MAAM,CAACnC,EAAE,GAAG+B,GAAG,CAAC/B,EAAE;UAClBmC,MAAM,CAAClC,KAAK,GAAG8B,GAAG,CAAC9B,KAAK;UACxBkC,MAAM,CAACjC,QAAQ,GAAG6B,GAAG,CAAC7B,QAAQ;UAC9BiC,MAAM,CAAChC,KAAK,GAAG4B,GAAG,CAAC5B,KAAK;UACxB;QACJ,KAAK,GAAG;QACR,KAAK,GAAG;UACJgC,MAAM,GAAG;YAAE3C,OAAO,EAAE;UAAI,CAAC;UACzBC,CAAC,GAAGgC,EAAE;UACN/B,CAAC,GAAGgC,EAAE;UACNS,MAAM,GAAGrD,eAAe,CAACK,QAAQ,CAACF,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;UACpD;MACR;MACA,IAAI+C,MAAM,EAAE;QACRrD,eAAe,CAACK,QAAQ,CAACF,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG+C,MAAM;MACxD;IACJ;IACA,IAAI9C,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,GAAG,EAAE;MAC9BoC,EAAE,GAAGhC,CAAC;MACNiC,EAAE,GAAGhC,CAAC;IACV;EACJ;EACA,OAAOZ,eAAe;AAC1B;AACA;AACA,OAAO,SAASqE,aAAaA,CAACrE,eAAe,EAAE;EAC3C,IAAI8E,YAAY,GAAG,EAAE;EACrB,IAAI3E,CAAC;EACL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,eAAe,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;IACzC,IAAIA,CAAC,KAAK,CAAC,EAAE;MACT2E,YAAY,IAAIC,SAAS,CAAC/E,eAAe,CAACK,QAAQ,CAACF,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAC1E,CAAC,MACI;MACDwE,YAAY,IAAI,GAAG,GAAGC,SAAS,CAAC/E,eAAe,CAACK,QAAQ,CAACF,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAChF;EACJ;EACA,OAAOwE,YAAY;AACvB;AACA;AACA,OAAO,SAASC,SAASA,CAAC/B,GAAG,EAAE;EAC3B,IAAIgC,MAAM,GAAG,EAAE;EACf,QAAQhC,GAAG,CAACtC,OAAO;IACf,KAAK,GAAG;IACR,KAAK,GAAG;MACJsE,MAAM,GAAGhC,GAAG,CAACtC,OAAO;MACpB;IACJ,KAAK,GAAG;IACR,KAAK,GAAG;IACR,KAAK,GAAG;IACR,KAAK,GAAG;MACJsE,MAAM,GAAGhC,GAAG,CAACtC,OAAO,GAAG,GAAG,GAAGsC,GAAG,CAACrC,CAAC,GAAG,GAAG,GAAGqC,GAAG,CAACpC,CAAC;MAChD;IACJ,KAAK,GAAG;IACR,KAAK,GAAG;MACJoE,MAAM,GAAGhC,GAAG,CAACtC,OAAO,GAAG,GAAG,GAAGsC,GAAG,CAACnC,EAAE,GAAG,GAAG,GAAGmC,GAAG,CAAClC,EAAE,GAAG,GAAG,GAAGkC,GAAG,CAACjC,EAAE,GAAG,GAAG,GAAGiC,GAAG,CAAChC,EAAE,GAAG,GAAG,GAAGgC,GAAG,CAACrC,CAAC,GAAG,GAAG,GAAGqC,GAAG,CAACpC,CAAC;MAC5G;IACJ,KAAK,GAAG;IACR,KAAK,GAAG;MACJoE,MAAM,GAAGhC,GAAG,CAACtC,OAAO,GAAG,GAAG,GAAGsC,GAAG,CAACnC,EAAE,GAAG,GAAG,GAAGmC,GAAG,CAAClC,EAAE,GAAG,GAAG,GAAGkC,GAAG,CAACrC,CAAC,GAAG,GAAG,GAAGqC,GAAG,CAACpC,CAAC;MAC9E;IACJ,KAAK,GAAG;IACR,KAAK,GAAG;MACJ,IAAIqE,GAAG,GAAGjC,GAAG,CAACtC,OAAO;MACrB,IAAIwE,GAAG,GAAGlC,GAAG,CAAC7B,KAAK;MACnB,IAAIgE,CAAC,GAAInC,GAAG,CAAC5B,QAAQ,GAAG,GAAG,GAAG,GAAI;MAClC,IAAIsC,CAAC,GAAIV,GAAG,CAAC3B,KAAK,GAAG,GAAG,GAAG,GAAI;MAC/B2D,MAAM,GAAGC,GAAG,GAAG,GAAG,GAAGjC,GAAG,CAAC/B,EAAE,GAAG,GAAG,GAAG+B,GAAG,CAAC9B,EAAE,GAAG,GAAG,GAAGgE,GAAG,GAAG,GAAG,GAAGC,CAAC,GAAG,GAAG,GAAGzB,CAAC,GAAG,GAAG,GAAGV,GAAG,CAACrC,CAAC,GAAG,GAAG,GAAGqC,GAAG,CAACpC,CAAC;MACtG;IACJ,KAAK,GAAG;IACR,KAAK,GAAG;MACJoE,MAAM,GAAGhC,GAAG,CAACtC,OAAO,GAAG,GAAG,GAAGsC,GAAG,CAACrC,CAAC;MAClC;IACJ,KAAK,GAAG;IACR,KAAK,GAAG;MACJqE,MAAM,GAAGhC,GAAG,CAACtC,OAAO,GAAG,GAAG,GAAGsC,GAAG,CAACpC,CAAC;MAClC;IACJ,KAAK,GAAG;IACR,KAAK,GAAG;MACJoE,MAAM,GAAGhC,GAAG,CAACtC,OAAO,GAAG,GAAG,GAAGsC,GAAG,CAACjC,EAAE,GAAG,GAAG,GAAGiC,GAAG,CAAChC,EAAE,GAAG,GAAG,GAAGgC,GAAG,CAACrC,CAAC,GAAG,GAAG,GAAGqC,GAAG,CAACpC,CAAC;MAC9E;IACJ,KAAK,GAAG;IACR,KAAK,GAAG;MACJoE,MAAM,GAAGhC,GAAG,CAACtC,OAAO,GAAG,GAAG,GAAGsC,GAAG,CAACrC,CAAC,GAAG,GAAG,GAAGqC,GAAG,CAACpC,CAAC;EACxD;EACA,OAAOoE,MAAM;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}