{"ast":null,"code":"import { _TokenType } from './enumerator';\nvar _ContentParser = /** @class */function () {\n  function _ContentParser(contentStream) {\n    this._recordCollection = [];\n    this._operands = [];\n    this._lexer = new _ContentLexer(contentStream);\n  }\n  _ContentParser.prototype._readContent = function () {\n    this._parseObject(_TokenType.eof);\n    return this._recordCollection;\n  };\n  _ContentParser.prototype._parseObject = function (tokenType) {\n    var symbol;\n    while ((symbol = this._getNextToken()) !== _TokenType.eof) {\n      // eslint-disable-line\n      if (symbol === tokenType || symbol === _TokenType.none) {\n        return;\n      }\n      switch (symbol) {\n        case _TokenType.comment:\n          break;\n        case _TokenType.number:\n          if (this._lexer._operatorParams === '-') {\n            this._operands.push('0');\n          } else {\n            this._operands.push(this._lexer._operatorParams);\n          }\n          break;\n        case _TokenType.real:\n          this._operands.push(this._lexer._operatorParams);\n          break;\n        case _TokenType.string:\n        case _TokenType.hexString:\n        case _TokenType.unicodeHexString:\n        case _TokenType.unicodeString:\n          this._operands.push(this._lexer._operatorParams);\n          break;\n        case _TokenType.name:\n          this._operands.push(this._lexer._operatorParams);\n          break;\n        case _TokenType.operator:\n          this._createRecord();\n          this._operands = [];\n          break;\n        case _TokenType.beginArray:\n          break;\n        case _TokenType.endArray:\n          throw new Error('Error while parsing content');\n      }\n    }\n  };\n  _ContentParser.prototype._createRecord = function () {\n    var operand = this._lexer._operatorParams;\n    var record = new _PdfRecord(operand, this._operands);\n    this._recordCollection.push(record);\n  };\n  _ContentParser.prototype._getNextToken = function () {\n    return this._lexer._getNextToken();\n  };\n  return _ContentParser;\n}();\nexport { _ContentParser };\nvar _ContentLexer = /** @class */function () {\n  function _ContentLexer(data) {\n    this._tokenType = _TokenType.none;\n    this._currentCharacter = '\\0';\n    this._nextCharacter = '\\0';\n    this._offset = 0;\n    this._data = data instanceof Uint8Array ? data : new Uint8Array(data);\n  }\n  _ContentLexer.prototype._getNextToken = function () {\n    this._operatorParams = '';\n    var value = this._moveToNextChar();\n    switch (value) {\n      case '%':\n        return this._tokenType = this._getComment();\n      case '/':\n        return this._tokenType = this._getName();\n      case '[':\n      case '(':\n        return this._tokenType = this._getLiteralString();\n      case '+':\n      case '-':\n        return this._tokenType = this._getNumber();\n      case '<':\n        return this._tokenType = this._getEncodedDecimalString();\n      case '.':\n        return this._tokenType = this._getNumber();\n      case '\"':\n      case '\\'':\n        return this._tokenType = this._getOperator();\n    }\n    if (!isNaN(parseInt(value, 10))) {\n      return this._tokenType = this._getNumber();\n    }\n    if (/[a-zA-Z]/.test(value)) {\n      return this._tokenType = this._getOperator();\n    }\n    if (value === String.fromCharCode(65535)) {\n      return this._tokenType = _TokenType.eof;\n    }\n    return this._tokenType = _TokenType.none;\n  };\n  _ContentLexer.prototype._getComment = function () {\n    this._operatorParams = '';\n    var value;\n    var flag = (value = this._consumeValue()) !== '\\x0A' && value !== String.fromCharCode(65535);\n    while (flag) {\n      flag = (value = this._consumeValue()) !== '\\x0A' && value !== String.fromCharCode(65535);\n    }\n    return _TokenType.comment;\n  };\n  _ContentLexer.prototype._getName = function () {\n    this._operatorParams = '';\n    var flag = false;\n    while (!flag) {\n      var value = this._consumeValue();\n      switch (value) {\n        case '\\0':\n        case '\\t':\n        case '\\x0A':\n        case '\\f':\n        case '\\x0D':\n        case '\\b':\n        case ' ':\n        case '%':\n        case '(':\n        case ')':\n        case '<':\n        case '>':\n        case '[':\n        case ']':\n        case '/':\n          flag = true;\n          return _TokenType.name;\n        default:\n          break;\n      }\n    }\n    return _TokenType.none;\n  };\n  _ContentLexer.prototype._getNumber = function () {\n    var value = this._currentCharacter;\n    if (value === '+' || value === '-') {\n      this._operatorParams += this._currentCharacter;\n      value = this._getNextChar();\n    }\n    while (!isNaN(parseInt(value, 10)) || value === '.') {\n      if (!isNaN(parseInt(value, 10))) {\n        this._operatorParams += this._currentCharacter;\n      } else if (value === '.') {\n        if (this._operatorParams.includes('.')) {\n          break;\n        } else {\n          this._operatorParams += this._currentCharacter;\n        }\n      }\n      value = this._getNextChar();\n    }\n    return _TokenType.number;\n  };\n  _ContentLexer.prototype._getOperator = function () {\n    this._operatorParams = '';\n    var value = this._currentCharacter;\n    while (this._isOperator(value)) {\n      value = this._consumeValue();\n    }\n    return _TokenType.operator;\n  };\n  _ContentLexer.prototype._isOperator = function (value) {\n    if (/[a-zA-Z]/.test(value)) {\n      return true;\n    }\n    switch (value) {\n      case '*':\n      case '\\'':\n      case '\\\"': // eslint-disable-line\n      case '1':\n      case '0':\n        return true;\n    }\n    return false;\n  };\n  _ContentLexer.prototype._getLiteralString = function () {\n    this._operatorParams = '';\n    var beginChar = this._currentCharacter;\n    var literal;\n    var value = this._consumeValue();\n    var flag = true;\n    while (flag) {\n      if (beginChar === '(') {\n        literal = this._getLiteralStringValue(value);\n        this._operatorParams += literal;\n        value = this._getNextChar();\n        flag = false;\n        break;\n      } else {\n        if (value === '(') {\n          value = this._consumeValue();\n          literal = this._getLiteralStringValue(value);\n          this._operatorParams += literal;\n          value = this._getNextChar();\n          continue;\n        } else if (value === ']') {\n          flag = false;\n          value = this._consumeValue();\n          break;\n        }\n        value = this._consumeValue();\n      }\n    }\n    return _TokenType.string;\n  };\n  _ContentLexer.prototype._getEncodedDecimalString = function () {\n    var startChar = '<';\n    var endChar = '>';\n    var space = ' ';\n    var parentLevel = 0;\n    var value = this._consumeValue();\n    var flag = true;\n    while (flag) {\n      if (value === startChar) {\n        parentLevel++;\n        value = this._consumeValue();\n      } else if (value === endChar) {\n        if (parentLevel === 0) {\n          this._consumeValue();\n          flag = false;\n          break;\n        } else if (parentLevel === 1) {\n          value = this._consumeValue();\n          if (value === '>') {\n            parentLevel--;\n          }\n          if (parentLevel === 1 && value === space) {\n            flag = false;\n            break;\n          }\n        } else {\n          if (value === '>') {\n            parentLevel--;\n          }\n          value = this._consumeValue();\n        }\n      } else {\n        value = this._consumeValue();\n        if (value === String.fromCharCode(65535)) {\n          flag = false;\n          break;\n        }\n      }\n    }\n    return _TokenType.hexString;\n  };\n  _ContentLexer.prototype._getLiteralStringValue = function (value) {\n    var parenthesesCount = 0;\n    var literal = '';\n    var flag = true;\n    while (flag) {\n      if (value === '\\\\') {\n        literal += value;\n        value = this._getNextChar();\n        literal += value;\n        value = this._getNextChar();\n        continue;\n      }\n      if (value === '(') {\n        parenthesesCount++;\n        literal += value;\n        value = this._getNextChar();\n        continue;\n      }\n      if (value === ')' && parenthesesCount !== 0) {\n        literal += value;\n        value = this._getNextChar();\n        parenthesesCount--;\n        continue;\n      }\n      if (value === ')' && parenthesesCount === 0) {\n        literal += value;\n        flag = false;\n        return literal;\n      }\n      literal += value;\n      value = this._getNextChar();\n    }\n    return literal;\n  };\n  _ContentLexer.prototype._consumeValue = function () {\n    this._operatorParams += this._currentCharacter;\n    return this._getNextChar();\n  };\n  _ContentLexer.prototype._moveToNextChar = function () {\n    while (this._currentCharacter !== String.fromCharCode(65535)) {\n      switch (this._currentCharacter) {\n        case '\\0':\n        case '\\t':\n        case '\\x0A':\n        case '\\f':\n        case '\\x0D':\n        case '\\b':\n        case ' ':\n          this._getNextChar();\n          break;\n        default:\n          return this._currentCharacter;\n      }\n    }\n    return this._currentCharacter;\n  };\n  _ContentLexer.prototype._getNextChar = function () {\n    if (this._data.length <= this._offset) {\n      if (this._nextCharacter === 'Q' || this._currentCharacter === 'D' && this._nextCharacter === 'o') {\n        this._currentCharacter = this._nextCharacter;\n        this._nextCharacter = String.fromCharCode(65535);\n        return this._currentCharacter;\n      }\n      this._currentCharacter = String.fromCharCode(65535);\n      this._nextCharacter = String.fromCharCode(65535);\n    } else {\n      this._currentCharacter = this._nextCharacter;\n      this._nextCharacter = String.fromCharCode(this._data[this._offset++]);\n      if (this._currentCharacter === '\\x0D') {\n        if (this._nextCharacter === '\\x0A') {\n          this._currentCharacter = this._nextCharacter;\n          if (this._data.length <= this._offset) {\n            this._nextCharacter = String.fromCharCode(65535);\n          } else {\n            this._nextCharacter = String.fromCharCode(this._data[this._offset++]);\n          }\n        } else {\n          this._currentCharacter = '\\x0A';\n        }\n      }\n    }\n    return this._currentCharacter;\n  };\n  return _ContentLexer;\n}();\nexport { _ContentLexer };\nvar _PdfRecord = /** @class */function () {\n  function _PdfRecord(operator, operands) {\n    this._operator = operator;\n    this._operands = operands;\n  }\n  return _PdfRecord;\n}();\nexport { _PdfRecord };","map":{"version":3,"names":["_TokenType","_ContentParser","contentStream","_recordCollection","_operands","_lexer","_ContentLexer","prototype","_readContent","_parseObject","eof","tokenType","symbol","_getNextToken","none","comment","number","_operatorParams","push","real","string","hexString","unicodeHexString","unicodeString","name","operator","_createRecord","beginArray","endArray","Error","operand","record","_PdfRecord","data","_tokenType","_currentCharacter","_nextCharacter","_offset","_data","Uint8Array","value","_moveToNextChar","_getComment","_getName","_getLiteralString","_getNumber","_getEncodedDecimalString","_getOperator","isNaN","parseInt","test","String","fromCharCode","flag","_consumeValue","_getNextChar","includes","_isOperator","beginChar","literal","_getLiteralStringValue","startChar","endChar","space","parentLevel","parenthesesCount","length","operands","_operator"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-pdf/src/pdf/core/content-parser.js"],"sourcesContent":["import { _TokenType } from './enumerator';\nvar _ContentParser = /** @class */ (function () {\n    function _ContentParser(contentStream) {\n        this._recordCollection = [];\n        this._operands = [];\n        this._lexer = new _ContentLexer(contentStream);\n    }\n    _ContentParser.prototype._readContent = function () {\n        this._parseObject(_TokenType.eof);\n        return this._recordCollection;\n    };\n    _ContentParser.prototype._parseObject = function (tokenType) {\n        var symbol;\n        while ((symbol = this._getNextToken()) !== _TokenType.eof) { // eslint-disable-line\n            if (symbol === tokenType || symbol === _TokenType.none) {\n                return;\n            }\n            switch (symbol) {\n                case _TokenType.comment:\n                    break;\n                case _TokenType.number:\n                    if (this._lexer._operatorParams === '-') {\n                        this._operands.push('0');\n                    }\n                    else {\n                        this._operands.push(this._lexer._operatorParams);\n                    }\n                    break;\n                case _TokenType.real:\n                    this._operands.push(this._lexer._operatorParams);\n                    break;\n                case _TokenType.string:\n                case _TokenType.hexString:\n                case _TokenType.unicodeHexString:\n                case _TokenType.unicodeString:\n                    this._operands.push(this._lexer._operatorParams);\n                    break;\n                case _TokenType.name:\n                    this._operands.push(this._lexer._operatorParams);\n                    break;\n                case _TokenType.operator:\n                    this._createRecord();\n                    this._operands = [];\n                    break;\n                case _TokenType.beginArray:\n                    break;\n                case _TokenType.endArray:\n                    throw new Error('Error while parsing content');\n            }\n        }\n    };\n    _ContentParser.prototype._createRecord = function () {\n        var operand = this._lexer._operatorParams;\n        var record = new _PdfRecord(operand, this._operands);\n        this._recordCollection.push(record);\n    };\n    _ContentParser.prototype._getNextToken = function () {\n        return this._lexer._getNextToken();\n    };\n    return _ContentParser;\n}());\nexport { _ContentParser };\nvar _ContentLexer = /** @class */ (function () {\n    function _ContentLexer(data) {\n        this._tokenType = _TokenType.none;\n        this._currentCharacter = '\\0';\n        this._nextCharacter = '\\0';\n        this._offset = 0;\n        this._data = data instanceof Uint8Array ? data : new Uint8Array(data);\n    }\n    _ContentLexer.prototype._getNextToken = function () {\n        this._operatorParams = '';\n        var value = this._moveToNextChar();\n        switch (value) {\n            case '%':\n                return this._tokenType = this._getComment();\n            case '/':\n                return this._tokenType = this._getName();\n            case '[':\n            case '(':\n                return this._tokenType = this._getLiteralString();\n            case '+':\n            case '-':\n                return this._tokenType = this._getNumber();\n            case '<':\n                return this._tokenType = this._getEncodedDecimalString();\n            case '.':\n                return this._tokenType = this._getNumber();\n            case '\"':\n            case '\\'':\n                return this._tokenType = this._getOperator();\n        }\n        if (!isNaN(parseInt(value, 10))) {\n            return this._tokenType = this._getNumber();\n        }\n        if ((/[a-zA-Z]/).test(value)) {\n            return this._tokenType = this._getOperator();\n        }\n        if (value === String.fromCharCode(65535)) {\n            return this._tokenType = _TokenType.eof;\n        }\n        return this._tokenType = _TokenType.none;\n    };\n    _ContentLexer.prototype._getComment = function () {\n        this._operatorParams = '';\n        var value;\n        var flag = (value = this._consumeValue()) !== '\\x0A' && value !== String.fromCharCode(65535);\n        while (flag) {\n            flag = (value = this._consumeValue()) !== '\\x0A' && value !== String.fromCharCode(65535);\n        }\n        return _TokenType.comment;\n    };\n    _ContentLexer.prototype._getName = function () {\n        this._operatorParams = '';\n        var flag = false;\n        while (!flag) {\n            var value = this._consumeValue();\n            switch (value) {\n                case '\\0':\n                case '\\t':\n                case '\\x0A':\n                case '\\f':\n                case '\\x0D':\n                case '\\b':\n                case ' ':\n                case '%':\n                case '(':\n                case ')':\n                case '<':\n                case '>':\n                case '[':\n                case ']':\n                case '/':\n                    flag = true;\n                    return _TokenType.name;\n                default:\n                    break;\n            }\n        }\n        return _TokenType.none;\n    };\n    _ContentLexer.prototype._getNumber = function () {\n        var value = this._currentCharacter;\n        if (value === '+' || value === '-') {\n            this._operatorParams += this._currentCharacter;\n            value = this._getNextChar();\n        }\n        while (!isNaN(parseInt(value, 10)) || value === '.') {\n            if (!isNaN(parseInt(value, 10))) {\n                this._operatorParams += this._currentCharacter;\n            }\n            else if (value === '.') {\n                if (this._operatorParams.includes('.')) {\n                    break;\n                }\n                else {\n                    this._operatorParams += this._currentCharacter;\n                }\n            }\n            value = this._getNextChar();\n        }\n        return _TokenType.number;\n    };\n    _ContentLexer.prototype._getOperator = function () {\n        this._operatorParams = '';\n        var value = this._currentCharacter;\n        while (this._isOperator(value)) {\n            value = this._consumeValue();\n        }\n        return _TokenType.operator;\n    };\n    _ContentLexer.prototype._isOperator = function (value) {\n        if ((/[a-zA-Z]/).test(value)) {\n            return true;\n        }\n        switch (value) {\n            case '*':\n            case '\\'':\n            case '\\\"': // eslint-disable-line\n            case '1':\n            case '0':\n                return true;\n        }\n        return false;\n    };\n    _ContentLexer.prototype._getLiteralString = function () {\n        this._operatorParams = '';\n        var beginChar = this._currentCharacter;\n        var literal;\n        var value = this._consumeValue();\n        var flag = true;\n        while (flag) {\n            if (beginChar === '(') {\n                literal = this._getLiteralStringValue(value);\n                this._operatorParams += literal;\n                value = this._getNextChar();\n                flag = false;\n                break;\n            }\n            else {\n                if (value === '(') {\n                    value = this._consumeValue();\n                    literal = this._getLiteralStringValue(value);\n                    this._operatorParams += literal;\n                    value = this._getNextChar();\n                    continue;\n                }\n                else if (value === ']') {\n                    flag = false;\n                    value = this._consumeValue();\n                    break;\n                }\n                value = this._consumeValue();\n            }\n        }\n        return _TokenType.string;\n    };\n    _ContentLexer.prototype._getEncodedDecimalString = function () {\n        var startChar = '<';\n        var endChar = '>';\n        var space = ' ';\n        var parentLevel = 0;\n        var value = this._consumeValue();\n        var flag = true;\n        while (flag) {\n            if (value === startChar) {\n                parentLevel++;\n                value = this._consumeValue();\n            }\n            else if (value === endChar) {\n                if (parentLevel === 0) {\n                    this._consumeValue();\n                    flag = false;\n                    break;\n                }\n                else if (parentLevel === 1) {\n                    value = this._consumeValue();\n                    if (value === '>') {\n                        parentLevel--;\n                    }\n                    if (parentLevel === 1 && value === space) {\n                        flag = false;\n                        break;\n                    }\n                }\n                else {\n                    if (value === '>') {\n                        parentLevel--;\n                    }\n                    value = this._consumeValue();\n                }\n            }\n            else {\n                value = this._consumeValue();\n                if (value === String.fromCharCode(65535)) {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        return _TokenType.hexString;\n    };\n    _ContentLexer.prototype._getLiteralStringValue = function (value) {\n        var parenthesesCount = 0;\n        var literal = '';\n        var flag = true;\n        while (flag) {\n            if (value === '\\\\') {\n                literal += value;\n                value = this._getNextChar();\n                literal += value;\n                value = this._getNextChar();\n                continue;\n            }\n            if (value === '(') {\n                parenthesesCount++;\n                literal += value;\n                value = this._getNextChar();\n                continue;\n            }\n            if (value === ')' && parenthesesCount !== 0) {\n                literal += value;\n                value = this._getNextChar();\n                parenthesesCount--;\n                continue;\n            }\n            if (value === ')' && parenthesesCount === 0) {\n                literal += value;\n                flag = false;\n                return literal;\n            }\n            literal += value;\n            value = this._getNextChar();\n        }\n        return literal;\n    };\n    _ContentLexer.prototype._consumeValue = function () {\n        this._operatorParams += this._currentCharacter;\n        return this._getNextChar();\n    };\n    _ContentLexer.prototype._moveToNextChar = function () {\n        while (this._currentCharacter !== String.fromCharCode(65535)) {\n            switch (this._currentCharacter) {\n                case '\\0':\n                case '\\t':\n                case '\\x0A':\n                case '\\f':\n                case '\\x0D':\n                case '\\b':\n                case ' ':\n                    this._getNextChar();\n                    break;\n                default:\n                    return this._currentCharacter;\n            }\n        }\n        return this._currentCharacter;\n    };\n    _ContentLexer.prototype._getNextChar = function () {\n        if (this._data.length <= this._offset) {\n            if (this._nextCharacter === 'Q' || (this._currentCharacter === 'D' && this._nextCharacter === 'o')) {\n                this._currentCharacter = this._nextCharacter;\n                this._nextCharacter = String.fromCharCode(65535);\n                return this._currentCharacter;\n            }\n            this._currentCharacter = String.fromCharCode(65535);\n            this._nextCharacter = String.fromCharCode(65535);\n        }\n        else {\n            this._currentCharacter = this._nextCharacter;\n            this._nextCharacter = String.fromCharCode(this._data[this._offset++]);\n            if (this._currentCharacter === '\\x0D') {\n                if (this._nextCharacter === '\\x0A') {\n                    this._currentCharacter = this._nextCharacter;\n                    if (this._data.length <= this._offset) {\n                        this._nextCharacter = String.fromCharCode(65535);\n                    }\n                    else {\n                        this._nextCharacter = String.fromCharCode(this._data[this._offset++]);\n                    }\n                }\n                else {\n                    this._currentCharacter = '\\x0A';\n                }\n            }\n        }\n        return this._currentCharacter;\n    };\n    return _ContentLexer;\n}());\nexport { _ContentLexer };\nvar _PdfRecord = /** @class */ (function () {\n    function _PdfRecord(operator, operands) {\n        this._operator = operator;\n        this._operands = operands;\n    }\n    return _PdfRecord;\n}());\nexport { _PdfRecord };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}