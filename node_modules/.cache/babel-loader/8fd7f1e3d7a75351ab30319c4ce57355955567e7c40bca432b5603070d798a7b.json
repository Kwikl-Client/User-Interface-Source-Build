{"ast":null,"code":"import { _PdfGraphicsUnit } from './../../enumerator';\nimport { _PdfUnitConvertor } from './../../graphics/pdf-graphics';\n/**\n * The 'PdfImage' contains methods and properties to handle the images.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Access first page\n * let page: PdfPage = document.getPage(0);\n * // Gets the graphics of the PDF page\n * let graphics: PdfGraphics = page.graphics;\n * // Create new image object by using JPEG image data as Base64 string format\n * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n * //Draw the image.\n * graphics.drawImage(image, 10, 20, 400, 400);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfImage = /** @class */function () {\n  function PdfImage() {}\n  Object.defineProperty(PdfImage.prototype, \"width\", {\n    /**\n     * Gets the width of the PDF image.\n     *\n     * @returns {number} image width.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create new image object by using JPEG image data as Base64 string format\n     * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n     * // Gets the width of the image.\n     * let width: number = image.width;\n     * //Draw the image.\n     * image.draw(graphics);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._imageWidth;\n    },\n    /**\n     * Sets the width of the PDF image.\n     *\n     * @param {number} value value.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create new image object by using JPEG image data as Base64 string format\n     * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n     * // Sets the width of the image.\n     * image.width = 100;\n     * //Draw the image.\n     * image.draw(graphics);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      this._imageWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfImage.prototype, \"height\", {\n    /**\n     * Gets the height of the PDF image.\n     *\n     * @returns {number} image height.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create new image object by using JPEG image data as Base64 string format\n     * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n     * // Gets the height of the image.\n     * let height: number = image.height;\n     * //Draw the image.\n     * image.draw(graphics);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._imageHeight;\n    },\n    /**\n     * Sets the height of the PDF image.\n     *\n     * @param {number} value value.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create new image object by using JPEG image data as Base64 string format\n     * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n     * // Sets the height of the image.\n     * image.height = 100;\n     * //Draw the image.\n     * image.draw(graphics);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      this._imageHeight = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfImage.prototype, \"physicalDimension\", {\n    /**\n     * Gets the physical dimension of the PDF image (Read only).\n     *\n     * @returns {number[]} image physical dimension.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create new image object by using JPEG image data as Base64 string format\n     * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n     * // Gets the physical dimension of the image.\n     * let dimension: number[] = image.physicalDimension;\n     * //Draw the image.\n     * image.draw(graphics);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      this._imagePhysicalDimension = this._getPointSize(this.width, this.height, this._horizontalResolution);\n      return [this.width, this.height];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfImage.prototype.draw = function (graphics, x, y) {\n    if ((x === null || typeof x === 'undefined') && (y === null || typeof y === 'undefined')) {\n      x = 0;\n      y = 0;\n    }\n    var needSave = x !== 0 || y !== 0;\n    var state = null;\n    if (needSave) {\n      state = graphics.save();\n      graphics.translateTransform(x, y);\n    }\n    graphics.drawImage(this, 0, 0);\n    if (needSave) {\n      graphics.restore(state);\n    }\n  };\n  PdfImage.prototype._getPointSize = function (width, height, horizontalResolution) {\n    if (horizontalResolution === null || typeof horizontalResolution === 'undefined') {\n      var dpiX = 96;\n      var size = this._getPointSize(width, height, dpiX);\n      return size;\n    } else {\n      var ucX = new _PdfUnitConvertor();\n      var ucY = new _PdfUnitConvertor();\n      var ptWidth = ucX._convertUnits(width, _PdfGraphicsUnit.pixel, _PdfGraphicsUnit.point);\n      var ptHeight = ucY._convertUnits(height, _PdfGraphicsUnit.pixel, _PdfGraphicsUnit.point);\n      var size = [ptWidth, ptHeight];\n      return size;\n    }\n  };\n  return PdfImage;\n}();\nexport { PdfImage };","map":{"version":3,"names":["_PdfGraphicsUnit","_PdfUnitConvertor","PdfImage","Object","defineProperty","prototype","get","_imageWidth","set","value","enumerable","configurable","_imageHeight","_imagePhysicalDimension","_getPointSize","width","height","_horizontalResolution","draw","graphics","x","y","needSave","state","save","translateTransform","drawImage","restore","horizontalResolution","dpiX","size","ucX","ucY","ptWidth","_convertUnits","pixel","point","ptHeight"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/images/pdf-image.js"],"sourcesContent":["import { _PdfGraphicsUnit } from './../../enumerator';\nimport { _PdfUnitConvertor } from './../../graphics/pdf-graphics';\n/**\n * The 'PdfImage' contains methods and properties to handle the images.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Access first page\n * let page: PdfPage = document.getPage(0);\n * // Gets the graphics of the PDF page\n * let graphics: PdfGraphics = page.graphics;\n * // Create new image object by using JPEG image data as Base64 string format\n * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n * //Draw the image.\n * graphics.drawImage(image, 10, 20, 400, 400);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfImage = /** @class */ (function () {\n    function PdfImage() {\n    }\n    Object.defineProperty(PdfImage.prototype, \"width\", {\n        /**\n         * Gets the width of the PDF image.\n         *\n         * @returns {number} image width.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access first page\n         * let page: PdfPage = document.getPage(0);\n         * // Gets the graphics of the PDF page\n         * let graphics: PdfGraphics = page.graphics;\n         * // Create new image object by using JPEG image data as Base64 string format\n         * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n         * // Gets the width of the image.\n         * let width: number = image.width;\n         * //Draw the image.\n         * image.draw(graphics);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._imageWidth;\n        },\n        /**\n         * Sets the width of the PDF image.\n         *\n         * @param {number} value value.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access first page\n         * let page: PdfPage = document.getPage(0);\n         * // Gets the graphics of the PDF page\n         * let graphics: PdfGraphics = page.graphics;\n         * // Create new image object by using JPEG image data as Base64 string format\n         * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n         * // Sets the width of the image.\n         * image.width = 100;\n         * //Draw the image.\n         * image.draw(graphics);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._imageWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfImage.prototype, \"height\", {\n        /**\n         * Gets the height of the PDF image.\n         *\n         * @returns {number} image height.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access first page\n         * let page: PdfPage = document.getPage(0);\n         * // Gets the graphics of the PDF page\n         * let graphics: PdfGraphics = page.graphics;\n         * // Create new image object by using JPEG image data as Base64 string format\n         * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n         * // Gets the height of the image.\n         * let height: number = image.height;\n         * //Draw the image.\n         * image.draw(graphics);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._imageHeight;\n        },\n        /**\n         * Sets the height of the PDF image.\n         *\n         * @param {number} value value.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access first page\n         * let page: PdfPage = document.getPage(0);\n         * // Gets the graphics of the PDF page\n         * let graphics: PdfGraphics = page.graphics;\n         * // Create new image object by using JPEG image data as Base64 string format\n         * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n         * // Sets the height of the image.\n         * image.height = 100;\n         * //Draw the image.\n         * image.draw(graphics);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._imageHeight = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfImage.prototype, \"physicalDimension\", {\n        /**\n         * Gets the physical dimension of the PDF image (Read only).\n         *\n         * @returns {number[]} image physical dimension.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access first page\n         * let page: PdfPage = document.getPage(0);\n         * // Gets the graphics of the PDF page\n         * let graphics: PdfGraphics = page.graphics;\n         * // Create new image object by using JPEG image data as Base64 string format\n         * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n         * // Gets the physical dimension of the image.\n         * let dimension: number[] = image.physicalDimension;\n         * //Draw the image.\n         * image.draw(graphics);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            this._imagePhysicalDimension = this._getPointSize(this.width, this.height, this._horizontalResolution);\n            return [this.width, this.height];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfImage.prototype.draw = function (graphics, x, y) {\n        if ((x === null || typeof x === 'undefined') && (y === null || typeof y === 'undefined')) {\n            x = 0;\n            y = 0;\n        }\n        var needSave = (x !== 0 || y !== 0);\n        var state = null;\n        if (needSave) {\n            state = graphics.save();\n            graphics.translateTransform(x, y);\n        }\n        graphics.drawImage(this, 0, 0);\n        if (needSave) {\n            graphics.restore(state);\n        }\n    };\n    PdfImage.prototype._getPointSize = function (width, height, horizontalResolution) {\n        if ((horizontalResolution === null || typeof horizontalResolution === 'undefined')) {\n            var dpiX = 96;\n            var size = this._getPointSize(width, height, dpiX);\n            return size;\n        }\n        else {\n            var ucX = new _PdfUnitConvertor();\n            var ucY = new _PdfUnitConvertor();\n            var ptWidth = ucX._convertUnits(width, _PdfGraphicsUnit.pixel, _PdfGraphicsUnit.point);\n            var ptHeight = ucY._convertUnits(height, _PdfGraphicsUnit.pixel, _PdfGraphicsUnit.point);\n            var size = [ptWidth, ptHeight];\n            return size;\n        }\n    };\n    return PdfImage;\n}());\nexport { PdfImage };\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,iBAAiB,QAAQ,+BAA+B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,QAAQ,GAAG,aAAe,YAAY;EACtC,SAASA,QAAQA,CAAA,EAAG,CACpB;EACAC,MAAM,CAACC,cAAc,CAACF,QAAQ,CAACG,SAAS,EAAE,OAAO,EAAE;IAC/C;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACC,WAAW;IAC3B,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACF,WAAW,GAAGE,KAAK;IAC5B,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFR,MAAM,CAACC,cAAc,CAACF,QAAQ,CAACG,SAAS,EAAE,QAAQ,EAAE;IAChD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACM,YAAY;IAC5B,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQJ,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACG,YAAY,GAAGH,KAAK;IAC7B,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFR,MAAM,CAACC,cAAc,CAACF,QAAQ,CAACG,SAAS,EAAE,mBAAmB,EAAE;IAC3D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI,CAACO,uBAAuB,GAAG,IAAI,CAACC,aAAa,CAAC,IAAI,CAACC,KAAK,EAAE,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,qBAAqB,CAAC;MACtG,OAAO,CAAC,IAAI,CAACF,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;IACpC,CAAC;IACDN,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFT,QAAQ,CAACG,SAAS,CAACa,IAAI,GAAG,UAAUC,QAAQ,EAAEC,CAAC,EAAEC,CAAC,EAAE;IAChD,IAAI,CAACD,CAAC,KAAK,IAAI,IAAI,OAAOA,CAAC,KAAK,WAAW,MAAMC,CAAC,KAAK,IAAI,IAAI,OAAOA,CAAC,KAAK,WAAW,CAAC,EAAE;MACtFD,CAAC,GAAG,CAAC;MACLC,CAAC,GAAG,CAAC;IACT;IACA,IAAIC,QAAQ,GAAIF,CAAC,KAAK,CAAC,IAAIC,CAAC,KAAK,CAAE;IACnC,IAAIE,KAAK,GAAG,IAAI;IAChB,IAAID,QAAQ,EAAE;MACVC,KAAK,GAAGJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MACvBL,QAAQ,CAACM,kBAAkB,CAACL,CAAC,EAAEC,CAAC,CAAC;IACrC;IACAF,QAAQ,CAACO,SAAS,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;IAC9B,IAAIJ,QAAQ,EAAE;MACVH,QAAQ,CAACQ,OAAO,CAACJ,KAAK,CAAC;IAC3B;EACJ,CAAC;EACDrB,QAAQ,CAACG,SAAS,CAACS,aAAa,GAAG,UAAUC,KAAK,EAAEC,MAAM,EAAEY,oBAAoB,EAAE;IAC9E,IAAKA,oBAAoB,KAAK,IAAI,IAAI,OAAOA,oBAAoB,KAAK,WAAW,EAAG;MAChF,IAAIC,IAAI,GAAG,EAAE;MACb,IAAIC,IAAI,GAAG,IAAI,CAAChB,aAAa,CAACC,KAAK,EAAEC,MAAM,EAAEa,IAAI,CAAC;MAClD,OAAOC,IAAI;IACf,CAAC,MACI;MACD,IAAIC,GAAG,GAAG,IAAI9B,iBAAiB,CAAC,CAAC;MACjC,IAAI+B,GAAG,GAAG,IAAI/B,iBAAiB,CAAC,CAAC;MACjC,IAAIgC,OAAO,GAAGF,GAAG,CAACG,aAAa,CAACnB,KAAK,EAAEf,gBAAgB,CAACmC,KAAK,EAAEnC,gBAAgB,CAACoC,KAAK,CAAC;MACtF,IAAIC,QAAQ,GAAGL,GAAG,CAACE,aAAa,CAAClB,MAAM,EAAEhB,gBAAgB,CAACmC,KAAK,EAAEnC,gBAAgB,CAACoC,KAAK,CAAC;MACxF,IAAIN,IAAI,GAAG,CAACG,OAAO,EAAEI,QAAQ,CAAC;MAC9B,OAAOP,IAAI;IACf;EACJ,CAAC;EACD,OAAO5B,QAAQ;AACnB,CAAC,CAAC,CAAE;AACJ,SAASA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}