{"ast":null,"code":"import { _PdfWordWrapType } from './../enumerator';\nvar _PdfStringLayouter = /** @class */function () {\n  function _PdfStringLayouter() {}\n  _PdfStringLayouter.prototype._layout = function (text, font, format, size) {\n    this._initialize(text, font, format, size);\n    var result = this._doLayout();\n    this._clear();\n    return result;\n  };\n  _PdfStringLayouter.prototype._initialize = function (text, font, format, size) {\n    this._font = font;\n    this._format = format;\n    this._size = size;\n    this._rectangle = [0, 0, size[0], size[1]];\n    this._reader = new _StringTokenizer(text);\n    this._pageHeight = 0;\n  };\n  _PdfStringLayouter.prototype._clear = function () {\n    this._font = null;\n    this._format = null;\n    this._reader._close();\n    this._reader = null;\n  };\n  _PdfStringLayouter.prototype._doLayout = function () {\n    var result = new _PdfStringLayoutResult();\n    var lineResult = new _PdfStringLayoutResult();\n    var lines = [];\n    var line = this._reader._peekLine();\n    var lineIndent = this._getLineIndent(true);\n    while (line !== null) {\n      lineResult = this._layoutLine(line, lineIndent);\n      if (typeof lineResult !== 'undefined' && lineResult !== null) {\n        var numSymbolsInserted = 0;\n        var returnedValue = this._copyToResult(result, lineResult, lines, numSymbolsInserted);\n        var success = returnedValue.success;\n        numSymbolsInserted = returnedValue.flag;\n        if (!success) {\n          this._reader._read(numSymbolsInserted);\n          break;\n        }\n      }\n      this._reader._readLine();\n      line = this._reader._peekLine();\n      lineIndent = this._getLineIndent(false);\n    }\n    this._finalizeResult(result, lines);\n    return result;\n  };\n  _PdfStringLayouter.prototype._getLineIndent = function (firstLine) {\n    var lineIndent = 0;\n    if (this._format) {\n      lineIndent = firstLine ? this._format.firstLineIndent : this._format.paragraphIndent;\n      lineIndent = this._size[0] > 0 ? Math.min(this._size[0], lineIndent) : lineIndent;\n    }\n    return lineIndent;\n  };\n  _PdfStringLayouter.prototype._getLineHeight = function () {\n    var height = this._font._metrics._getHeight();\n    if (this._format && this._format.lineSpacing !== 0) {\n      height = this._format.lineSpacing + this._font._metrics._getHeight();\n    }\n    return height;\n  };\n  _PdfStringLayouter.prototype._getLineWidth = function (line) {\n    return this._font.getLineWidth(line, this._format);\n  };\n  _PdfStringLayouter.prototype._layoutLine = function (line, lineIndent) {\n    var lineResult = new _PdfStringLayoutResult();\n    lineResult._lineHeight = this._getLineHeight();\n    var lines = [];\n    var maxWidth = this._size[0];\n    var lineWidth = this._getLineWidth(line) + lineIndent;\n    var lineType = _LineType.firstParagraphLine;\n    var readWord = true;\n    if (maxWidth <= 0 || Math.round(lineWidth) <= Math.round(maxWidth)) {\n      this._addToLineResult(lineResult, lines, line, lineWidth, _LineType.newLineBreak | lineType);\n    } else {\n      var builder = '';\n      var curLine = '';\n      lineWidth = lineIndent;\n      var curIndent = lineIndent;\n      var reader = new _StringTokenizer(line);\n      var word = reader._peekWord();\n      if (word.length !== reader._length) {\n        if (word === ' ') {\n          curLine = curLine + word;\n          builder = builder + word;\n          reader._position += 1;\n          word = reader._peekWord();\n        }\n      }\n      while (word !== null) {\n        curLine = curLine + word;\n        var curLineWidth = this._getLineWidth(curLine.toString()) + curIndent;\n        if (curLine.toString() === ' ') {\n          curLine = '';\n          curLineWidth = 0;\n        }\n        if (curLineWidth > maxWidth) {\n          if (this._getWrapType() === _PdfWordWrapType.none) {\n            break;\n          }\n          if (curLine.length === word.length) {\n            if (this._getWrapType() === _PdfWordWrapType.wordOnly) {\n              lineResult._remainder = line.substring(reader._position);\n              break;\n            } else if (curLine.length === 1) {\n              builder = builder + word;\n              break;\n            } else {\n              readWord = false;\n              curLine = '';\n              word = reader._peek().toString();\n              continue;\n            }\n          } else {\n            if (this._getLineWidth(word.toString()) > maxWidth) {\n              if (typeof this._format !== 'undefined' && this._format !== null) {\n                this._format._wordWrap = _PdfWordWrapType.character;\n              }\n            } else {\n              if (typeof this._format !== 'undefined' && this._format !== null) {\n                this._format._wordWrap = _PdfWordWrapType.word;\n              }\n            }\n            if (this._getWrapType() !== _PdfWordWrapType.character || !readWord) {\n              var stringValue = builder.toString();\n              if (stringValue !== ' ') {\n                this._addToLineResult(lineResult, lines, stringValue, lineWidth, _LineType.layoutBreak | lineType);\n              }\n              curLine = '';\n              builder = '';\n              lineWidth = 0;\n              curIndent = 0;\n              curLineWidth = 0;\n              lineType = _LineType.none;\n              word = readWord ? word : reader._peekWord();\n              readWord = true;\n            } else {\n              readWord = false;\n              curLine = '';\n              curLine = curLine + builder.toString();\n              word = reader._peek().toString();\n            }\n            continue;\n          }\n        }\n        builder = builder + word;\n        lineWidth = curLineWidth;\n        if (readWord) {\n          reader._readWord();\n          word = reader._peekWord();\n        } else {\n          reader._read();\n          word = reader._peek().toString();\n        }\n      }\n      if (builder.length > 0) {\n        this._addToLineResult(lineResult, lines, builder.toString(), lineWidth, _LineType.newLineBreak | _LineType.lastParagraphLine);\n      }\n      reader._close();\n    }\n    lineResult._layoutLines = [];\n    for (var index = 0; index < lines.length; index++) {\n      lineResult._layoutLines.push(lines[index]); // eslint-disable-line\n    }\n    lines = [];\n    return lineResult;\n  };\n  _PdfStringLayouter.prototype._addToLineResult = function (lineResult, lines, line, lineWidth, breakType) {\n    var info = new _LineInfo();\n    info._text = line;\n    info._width = lineWidth;\n    info._lineType = breakType;\n    lines.push(info);\n    var size = lineResult._actualSize;\n    size[1] = size[1] + this._getLineHeight();\n    size[0] = Math.max(size[0], lineWidth);\n    lineResult._size = size;\n  };\n  _PdfStringLayouter.prototype._copyToResult = function (result, lineResult, lines, flag) {\n    var success = true;\n    var allowPartialLines = this._format && !this._format.lineLimit;\n    var height = result._actualSize[1];\n    var maxHeight = this._size[1];\n    if (this._pageHeight > 0 && maxHeight + this._rectangle[1] > this._pageHeight) {\n      maxHeight = this._rectangle[1] - this._pageHeight;\n      maxHeight = Math.max(maxHeight, -maxHeight);\n    }\n    flag = 0;\n    if (lineResult._lines !== null) {\n      for (var i = 0, len = lineResult._lines.length; i < len; i++) {\n        var expHeight = height + lineResult._lineHeight;\n        if (expHeight <= maxHeight || maxHeight <= 0 || allowPartialLines) {\n          var info = lineResult._lines[i]; // eslint-disable-line\n          flag += info._text.length;\n          info = this._trimLine(info, lines.length === 0);\n          lines.push(info);\n          var size = result._actualSize;\n          size[0] = Math.max(size[0], info._width);\n          result._size = size;\n          height = expHeight;\n        } else {\n          success = false;\n          break;\n        }\n      }\n    }\n    if (height !== result._size[1]) {\n      result._size = [result._actualSize[0], height];\n    }\n    return {\n      success: success,\n      flag: flag\n    };\n  };\n  _PdfStringLayouter.prototype._finalizeResult = function (result, lines) {\n    result._layoutLines = [];\n    for (var index = 0; index < lines.length; index++) {\n      result._layoutLines.push(lines[index]); // eslint-disable-line\n    }\n    result._lineHeight = this._getLineHeight();\n    if (!this._reader._end) {\n      result._remainder = this._reader._readToEnd();\n    }\n    lines = [];\n  };\n  _PdfStringLayouter.prototype._trimLine = function (info, firstLine) {\n    var line = info._text.trim();\n    var lineWidth = info._width;\n    if (line.length !== info._text.length) {\n      lineWidth = this._getLineWidth(line);\n      if ((info._lineType & _LineType.firstParagraphLine) > 0) {\n        lineWidth += this._getLineIndent(firstLine);\n      }\n    }\n    info._text = line;\n    info._width = lineWidth;\n    return info;\n  };\n  _PdfStringLayouter.prototype._getWrapType = function () {\n    var wrapType = this._format !== null && typeof this._format !== 'undefined' ? this._format._wordWrap : _PdfWordWrapType.word;\n    return wrapType;\n  };\n  return _PdfStringLayouter;\n}();\nexport { _PdfStringLayouter };\nvar _PdfStringLayoutResult = /** @class */function () {\n  function _PdfStringLayoutResult() {}\n  Object.defineProperty(_PdfStringLayoutResult.prototype, \"_actualSize\", {\n    get: function () {\n      if (typeof this._size === 'undefined') {\n        this._size = [0, 0];\n      }\n      return this._size;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(_PdfStringLayoutResult.prototype, \"_lines\", {\n    get: function () {\n      return this._layoutLines;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(_PdfStringLayoutResult.prototype, \"_empty\", {\n    get: function () {\n      return this._layoutLines == null || this._layoutLines.length === 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(_PdfStringLayoutResult.prototype, \"_lineCount\", {\n    get: function () {\n      return !this._empty ? this._layoutLines.length : 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return _PdfStringLayoutResult;\n}();\nexport { _PdfStringLayoutResult };\nvar _LineInfo = /** @class */function () {\n  function _LineInfo() {}\n  return _LineInfo;\n}();\nexport { _LineInfo };\nexport var _LineType;\n(function (_LineType) {\n  _LineType[_LineType[\"none\"] = 0] = \"none\";\n  _LineType[_LineType[\"newLineBreak\"] = 1] = \"newLineBreak\";\n  _LineType[_LineType[\"layoutBreak\"] = 2] = \"layoutBreak\";\n  _LineType[_LineType[\"firstParagraphLine\"] = 4] = \"firstParagraphLine\";\n  _LineType[_LineType[\"lastParagraphLine\"] = 8] = \"lastParagraphLine\";\n})(_LineType || (_LineType = {}));\nvar _StringTokenizer = /** @class */function () {\n  function _StringTokenizer(textValue) {\n    this._position = 0;\n    if (typeof textValue === 'undefined' || textValue === null) {\n      throw new Error('ArgumentNullException:text');\n    }\n    this._text = textValue;\n  }\n  Object.defineProperty(_StringTokenizer.prototype, \"_length\", {\n    get: function () {\n      return this._text.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(_StringTokenizer.prototype, \"_end\", {\n    get: function () {\n      return this._position === this._text.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  _StringTokenizer.prototype._readLine = function () {\n    var position = this._position;\n    while (position < this._length) {\n      var ch = this._text[position]; // eslint-disable-line\n      var text = void 0;\n      switch (ch) {\n        case '\\r':\n        case '\\n':\n          text = this._text.substring(this._position, position);\n          this._position = position + 1;\n          if (ch === '\\r' && this._position < this._length && this._text[this._position] === '\\n') {\n            this._position++;\n          }\n          return text;\n      }\n      position++;\n    }\n    if (position > this._position) {\n      var text2 = this._text.substring(this._position, position);\n      this._position = position;\n      return text2;\n    }\n    return null;\n  };\n  _StringTokenizer.prototype._peekLine = function () {\n    var position = this._position;\n    var line = this._readLine();\n    this._position = position;\n    return line;\n  };\n  _StringTokenizer.prototype._readWord = function () {\n    var position = this._position;\n    while (position < this._length) {\n      var ch = this._text[position]; // eslint-disable-line\n      var text = void 0;\n      switch (ch) {\n        case '\\r':\n        case '\\n':\n          text = this._text.substring(this._position, position - this._position);\n          this._position = position + 1;\n          if (ch === '\\r' && this._position < this._length && this._text[this._position] === '\\n') {\n            this._position++;\n          }\n          return text;\n        case ' ':\n        case '\\t':\n          if (position === this._position) {\n            position++;\n          }\n          text = this._text.substring(this._position, position);\n          this._position = position;\n          return text;\n      }\n      position++;\n    }\n    if (position > this._position) {\n      var text2 = this._text.substring(this._position, position);\n      this._position = position;\n      return text2;\n    }\n    return null;\n  };\n  _StringTokenizer.prototype._peekWord = function () {\n    var position = this._position;\n    var word = this._readWord();\n    this._position = position;\n    return word;\n  };\n  _StringTokenizer.prototype._read = function (count) {\n    if (typeof count === 'undefined') {\n      var character = '0';\n      if (!this._end) {\n        character = this._text[this._position];\n        this._position++;\n      }\n      return character;\n    } else {\n      var value = 0;\n      var builder = '';\n      while (!this._end && value < count) {\n        builder += this._read();\n        value++;\n      }\n      return builder;\n    }\n  };\n  _StringTokenizer.prototype._peek = function () {\n    return this._end ? '0' : this._text[this._position];\n  };\n  _StringTokenizer.prototype._close = function () {\n    this._text = null;\n  };\n  _StringTokenizer.prototype._readToEnd = function () {\n    var text;\n    if (this._position === 0) {\n      text = this._text;\n    } else {\n      text = this._text.substring(this._position);\n    }\n    this._position = this._length;\n    return text;\n  };\n  _StringTokenizer._whiteSpace = ' ';\n  _StringTokenizer._tab = '\\t';\n  _StringTokenizer._spaces = [_StringTokenizer._whiteSpace, _StringTokenizer._tab];\n  return _StringTokenizer;\n}();\nexport { _StringTokenizer };","map":{"version":3,"names":["_PdfWordWrapType","_PdfStringLayouter","prototype","_layout","text","font","format","size","_initialize","result","_doLayout","_clear","_font","_format","_size","_rectangle","_reader","_StringTokenizer","_pageHeight","_close","_PdfStringLayoutResult","lineResult","lines","line","_peekLine","lineIndent","_getLineIndent","_layoutLine","numSymbolsInserted","returnedValue","_copyToResult","success","flag","_read","_readLine","_finalizeResult","firstLine","firstLineIndent","paragraphIndent","Math","min","_getLineHeight","height","_metrics","_getHeight","lineSpacing","_getLineWidth","getLineWidth","_lineHeight","maxWidth","lineWidth","lineType","_LineType","firstParagraphLine","readWord","round","_addToLineResult","newLineBreak","builder","curLine","curIndent","reader","word","_peekWord","length","_length","_position","curLineWidth","toString","_getWrapType","none","wordOnly","_remainder","substring","_peek","_wordWrap","character","stringValue","layoutBreak","_readWord","lastParagraphLine","_layoutLines","index","push","breakType","info","_LineInfo","_text","_width","_lineType","_actualSize","max","allowPartialLines","lineLimit","maxHeight","_lines","i","len","expHeight","_trimLine","_end","_readToEnd","trim","wrapType","Object","defineProperty","get","enumerable","configurable","_empty","textValue","Error","position","ch","text2","count","value","_whiteSpace","_tab","_spaces"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/string-layouter.js"],"sourcesContent":["import { _PdfWordWrapType } from './../enumerator';\nvar _PdfStringLayouter = /** @class */ (function () {\n    function _PdfStringLayouter() {\n    }\n    _PdfStringLayouter.prototype._layout = function (text, font, format, size) {\n        this._initialize(text, font, format, size);\n        var result = this._doLayout();\n        this._clear();\n        return result;\n    };\n    _PdfStringLayouter.prototype._initialize = function (text, font, format, size) {\n        this._font = font;\n        this._format = format;\n        this._size = size;\n        this._rectangle = [0, 0, size[0], size[1]];\n        this._reader = new _StringTokenizer(text);\n        this._pageHeight = 0;\n    };\n    _PdfStringLayouter.prototype._clear = function () {\n        this._font = null;\n        this._format = null;\n        this._reader._close();\n        this._reader = null;\n    };\n    _PdfStringLayouter.prototype._doLayout = function () {\n        var result = new _PdfStringLayoutResult();\n        var lineResult = new _PdfStringLayoutResult();\n        var lines = [];\n        var line = this._reader._peekLine();\n        var lineIndent = this._getLineIndent(true);\n        while (line !== null) {\n            lineResult = this._layoutLine(line, lineIndent);\n            if (typeof lineResult !== 'undefined' && lineResult !== null) {\n                var numSymbolsInserted = 0;\n                var returnedValue = this._copyToResult(result, lineResult, lines, numSymbolsInserted);\n                var success = returnedValue.success;\n                numSymbolsInserted = returnedValue.flag;\n                if (!success) {\n                    this._reader._read(numSymbolsInserted);\n                    break;\n                }\n            }\n            this._reader._readLine();\n            line = this._reader._peekLine();\n            lineIndent = this._getLineIndent(false);\n        }\n        this._finalizeResult(result, lines);\n        return result;\n    };\n    _PdfStringLayouter.prototype._getLineIndent = function (firstLine) {\n        var lineIndent = 0;\n        if (this._format) {\n            lineIndent = (firstLine) ? this._format.firstLineIndent : this._format.paragraphIndent;\n            lineIndent = (this._size[0] > 0) ? Math.min(this._size[0], lineIndent) : lineIndent;\n        }\n        return lineIndent;\n    };\n    _PdfStringLayouter.prototype._getLineHeight = function () {\n        var height = this._font._metrics._getHeight();\n        if (this._format && this._format.lineSpacing !== 0) {\n            height = this._format.lineSpacing + this._font._metrics._getHeight();\n        }\n        return height;\n    };\n    _PdfStringLayouter.prototype._getLineWidth = function (line) {\n        return this._font.getLineWidth(line, this._format);\n    };\n    _PdfStringLayouter.prototype._layoutLine = function (line, lineIndent) {\n        var lineResult = new _PdfStringLayoutResult();\n        lineResult._lineHeight = this._getLineHeight();\n        var lines = [];\n        var maxWidth = this._size[0];\n        var lineWidth = this._getLineWidth(line) + lineIndent;\n        var lineType = _LineType.firstParagraphLine;\n        var readWord = true;\n        if (maxWidth <= 0 || Math.round(lineWidth) <= Math.round(maxWidth)) {\n            this._addToLineResult(lineResult, lines, line, lineWidth, _LineType.newLineBreak | lineType);\n        }\n        else {\n            var builder = '';\n            var curLine = '';\n            lineWidth = lineIndent;\n            var curIndent = lineIndent;\n            var reader = new _StringTokenizer(line);\n            var word = reader._peekWord();\n            if (word.length !== reader._length) {\n                if (word === ' ') {\n                    curLine = curLine + word;\n                    builder = builder + word;\n                    reader._position += 1;\n                    word = reader._peekWord();\n                }\n            }\n            while (word !== null) {\n                curLine = curLine + word;\n                var curLineWidth = this._getLineWidth(curLine.toString()) + curIndent;\n                if (curLine.toString() === ' ') {\n                    curLine = '';\n                    curLineWidth = 0;\n                }\n                if (curLineWidth > maxWidth) {\n                    if (this._getWrapType() === _PdfWordWrapType.none) {\n                        break;\n                    }\n                    if (curLine.length === word.length) {\n                        if (this._getWrapType() === _PdfWordWrapType.wordOnly) {\n                            lineResult._remainder = line.substring(reader._position);\n                            break;\n                        }\n                        else if (curLine.length === 1) {\n                            builder = builder + word;\n                            break;\n                        }\n                        else {\n                            readWord = false;\n                            curLine = '';\n                            word = reader._peek().toString();\n                            continue;\n                        }\n                    }\n                    else {\n                        if (this._getLineWidth(word.toString()) > maxWidth) {\n                            if (typeof this._format !== 'undefined' && this._format !== null) {\n                                this._format._wordWrap = _PdfWordWrapType.character;\n                            }\n                        }\n                        else {\n                            if (typeof this._format !== 'undefined' && this._format !== null) {\n                                this._format._wordWrap = _PdfWordWrapType.word;\n                            }\n                        }\n                        if (this._getWrapType() !== _PdfWordWrapType.character || !readWord) {\n                            var stringValue = builder.toString();\n                            if (stringValue !== ' ') {\n                                this._addToLineResult(lineResult, lines, stringValue, lineWidth, _LineType.layoutBreak | lineType);\n                            }\n                            curLine = '';\n                            builder = '';\n                            lineWidth = 0;\n                            curIndent = 0;\n                            curLineWidth = 0;\n                            lineType = _LineType.none;\n                            word = (readWord) ? word : reader._peekWord();\n                            readWord = true;\n                        }\n                        else {\n                            readWord = false;\n                            curLine = '';\n                            curLine = curLine + builder.toString();\n                            word = reader._peek().toString();\n                        }\n                        continue;\n                    }\n                }\n                builder = builder + word;\n                lineWidth = curLineWidth;\n                if (readWord) {\n                    reader._readWord();\n                    word = reader._peekWord();\n                }\n                else {\n                    reader._read();\n                    word = reader._peek().toString();\n                }\n            }\n            if (builder.length > 0) {\n                this._addToLineResult(lineResult, lines, builder.toString(), lineWidth, _LineType.newLineBreak | _LineType.lastParagraphLine);\n            }\n            reader._close();\n        }\n        lineResult._layoutLines = [];\n        for (var index = 0; index < lines.length; index++) {\n            lineResult._layoutLines.push(lines[index]); // eslint-disable-line\n        }\n        lines = [];\n        return lineResult;\n    };\n    _PdfStringLayouter.prototype._addToLineResult = function (lineResult, lines, line, lineWidth, breakType) {\n        var info = new _LineInfo();\n        info._text = line;\n        info._width = lineWidth;\n        info._lineType = breakType;\n        lines.push(info);\n        var size = lineResult._actualSize;\n        size[1] = size[1] + this._getLineHeight();\n        size[0] = Math.max(size[0], lineWidth);\n        lineResult._size = size;\n    };\n    _PdfStringLayouter.prototype._copyToResult = function (result, lineResult, lines, flag) {\n        var success = true;\n        var allowPartialLines = (this._format && !this._format.lineLimit);\n        var height = result._actualSize[1];\n        var maxHeight = this._size[1];\n        if ((this._pageHeight > 0) && (maxHeight + this._rectangle[1] > this._pageHeight)) {\n            maxHeight = this._rectangle[1] - this._pageHeight;\n            maxHeight = Math.max(maxHeight, -maxHeight);\n        }\n        flag = 0;\n        if (lineResult._lines !== null) {\n            for (var i = 0, len = lineResult._lines.length; i < len; i++) {\n                var expHeight = height + lineResult._lineHeight;\n                if (expHeight <= maxHeight || maxHeight <= 0 || allowPartialLines) {\n                    var info = lineResult._lines[i]; // eslint-disable-line\n                    flag += info._text.length;\n                    info = this._trimLine(info, (lines.length === 0));\n                    lines.push(info);\n                    var size = result._actualSize;\n                    size[0] = Math.max(size[0], info._width);\n                    result._size = size;\n                    height = expHeight;\n                }\n                else {\n                    success = false;\n                    break;\n                }\n            }\n        }\n        if (height !== result._size[1]) {\n            result._size = [result._actualSize[0], height];\n        }\n        return { success: success, flag: flag };\n    };\n    _PdfStringLayouter.prototype._finalizeResult = function (result, lines) {\n        result._layoutLines = [];\n        for (var index = 0; index < lines.length; index++) {\n            result._layoutLines.push(lines[index]); // eslint-disable-line\n        }\n        result._lineHeight = this._getLineHeight();\n        if (!this._reader._end) {\n            result._remainder = this._reader._readToEnd();\n        }\n        lines = [];\n    };\n    _PdfStringLayouter.prototype._trimLine = function (info, firstLine) {\n        var line = info._text.trim();\n        var lineWidth = info._width;\n        if (line.length !== info._text.length) {\n            lineWidth = this._getLineWidth(line);\n            if ((info._lineType & _LineType.firstParagraphLine) > 0) {\n                lineWidth += this._getLineIndent(firstLine);\n            }\n        }\n        info._text = line;\n        info._width = lineWidth;\n        return info;\n    };\n    _PdfStringLayouter.prototype._getWrapType = function () {\n        var wrapType = (this._format !== null && typeof this._format !== 'undefined') ?\n            this._format._wordWrap : _PdfWordWrapType.word;\n        return wrapType;\n    };\n    return _PdfStringLayouter;\n}());\nexport { _PdfStringLayouter };\nvar _PdfStringLayoutResult = /** @class */ (function () {\n    function _PdfStringLayoutResult() {\n    }\n    Object.defineProperty(_PdfStringLayoutResult.prototype, \"_actualSize\", {\n        get: function () {\n            if (typeof this._size === 'undefined') {\n                this._size = [0, 0];\n            }\n            return this._size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(_PdfStringLayoutResult.prototype, \"_lines\", {\n        get: function () {\n            return this._layoutLines;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(_PdfStringLayoutResult.prototype, \"_empty\", {\n        get: function () {\n            return (this._layoutLines == null || this._layoutLines.length === 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(_PdfStringLayoutResult.prototype, \"_lineCount\", {\n        get: function () {\n            return (!this._empty) ? this._layoutLines.length : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return _PdfStringLayoutResult;\n}());\nexport { _PdfStringLayoutResult };\nvar _LineInfo = /** @class */ (function () {\n    function _LineInfo() {\n    }\n    return _LineInfo;\n}());\nexport { _LineInfo };\nexport var _LineType;\n(function (_LineType) {\n    _LineType[_LineType[\"none\"] = 0] = \"none\";\n    _LineType[_LineType[\"newLineBreak\"] = 1] = \"newLineBreak\";\n    _LineType[_LineType[\"layoutBreak\"] = 2] = \"layoutBreak\";\n    _LineType[_LineType[\"firstParagraphLine\"] = 4] = \"firstParagraphLine\";\n    _LineType[_LineType[\"lastParagraphLine\"] = 8] = \"lastParagraphLine\";\n})(_LineType || (_LineType = {}));\nvar _StringTokenizer = /** @class */ (function () {\n    function _StringTokenizer(textValue) {\n        this._position = 0;\n        if (typeof textValue === 'undefined' || textValue === null) {\n            throw new Error('ArgumentNullException:text');\n        }\n        this._text = textValue;\n    }\n    Object.defineProperty(_StringTokenizer.prototype, \"_length\", {\n        get: function () {\n            return this._text.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(_StringTokenizer.prototype, \"_end\", {\n        get: function () {\n            return (this._position === this._text.length);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    _StringTokenizer.prototype._readLine = function () {\n        var position = this._position;\n        while (position < this._length) {\n            var ch = this._text[position]; // eslint-disable-line\n            var text = void 0;\n            switch (ch) {\n                case '\\r':\n                case '\\n':\n                    text = this._text.substring(this._position, position);\n                    this._position = position + 1;\n                    if (((ch === '\\r') && (this._position < this._length)) && (this._text[this._position] === '\\n')) {\n                        this._position++;\n                    }\n                    return text;\n            }\n            position++;\n        }\n        if (position > this._position) {\n            var text2 = this._text.substring(this._position, position);\n            this._position = position;\n            return text2;\n        }\n        return null;\n    };\n    _StringTokenizer.prototype._peekLine = function () {\n        var position = this._position;\n        var line = this._readLine();\n        this._position = position;\n        return line;\n    };\n    _StringTokenizer.prototype._readWord = function () {\n        var position = this._position;\n        while (position < this._length) {\n            var ch = this._text[position]; // eslint-disable-line\n            var text = void 0;\n            switch (ch) {\n                case '\\r':\n                case '\\n':\n                    text = this._text.substring(this._position, position - this._position);\n                    this._position = position + 1;\n                    if (((ch === '\\r') && (this._position < this._length)) && (this._text[this._position] === '\\n')) {\n                        this._position++;\n                    }\n                    return text;\n                case ' ':\n                case '\\t':\n                    if (position === this._position) {\n                        position++;\n                    }\n                    text = this._text.substring(this._position, position);\n                    this._position = position;\n                    return text;\n            }\n            position++;\n        }\n        if (position > this._position) {\n            var text2 = this._text.substring(this._position, position);\n            this._position = position;\n            return text2;\n        }\n        return null;\n    };\n    _StringTokenizer.prototype._peekWord = function () {\n        var position = this._position;\n        var word = this._readWord();\n        this._position = position;\n        return word;\n    };\n    _StringTokenizer.prototype._read = function (count) {\n        if (typeof count === 'undefined') {\n            var character = '0';\n            if (!this._end) {\n                character = this._text[this._position];\n                this._position++;\n            }\n            return character;\n        }\n        else {\n            var value = 0;\n            var builder = '';\n            while (!this._end && value < count) {\n                builder += this._read();\n                value++;\n            }\n            return builder;\n        }\n    };\n    _StringTokenizer.prototype._peek = function () {\n        return this._end ? '0' : this._text[this._position];\n    };\n    _StringTokenizer.prototype._close = function () {\n        this._text = null;\n    };\n    _StringTokenizer.prototype._readToEnd = function () {\n        var text;\n        if (this._position === 0) {\n            text = this._text;\n        }\n        else {\n            text = this._text.substring(this._position);\n        }\n        this._position = this._length;\n        return text;\n    };\n    _StringTokenizer._whiteSpace = ' ';\n    _StringTokenizer._tab = '\\t';\n    _StringTokenizer._spaces = [_StringTokenizer._whiteSpace, _StringTokenizer._tab];\n    return _StringTokenizer;\n}());\nexport { _StringTokenizer };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}