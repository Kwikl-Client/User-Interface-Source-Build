{"ast":null,"code":"import { isNullOrUndefined, remove, extend } from '@syncfusion/ej2-base';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { RowRenderer } from '../renderer/row-renderer';\nimport * as events from '../base/constant';\nimport { getScrollBarWidth, getEditedDataIndex, resetRowIndex, setRowElements, getRowIndexFromElement, getGroupKeysAndFields, getPredicates, generateExpandPredicates } from '../base/util';\nimport * as literals from '../base/string-literals';\n/**\n * Infinite Scrolling class\n *\n * @hidden\n */\nvar InfiniteScroll = /** @class */function () {\n  /**\n   * Constructor for the Grid infinite scrolling.\n   *\n   * @param {IGrid} parent - specifies the IGrid\n   * @param {ServiceLocator} serviceLocator - specifies the ServiceLocator\n   * @hidden\n   */\n  function InfiniteScroll(parent, serviceLocator) {\n    this.infiniteCache = {};\n    this.infiniteCurrentViewData = {};\n    this.isDownScroll = false;\n    this.isUpScroll = false;\n    this.isScroll = true;\n    this.enableContinuousScroll = false;\n    this.initialRender = true;\n    this.isRemove = false;\n    this.isInitialCollapse = false;\n    this.prevScrollTop = 0;\n    this.actions = ['filtering', 'searching', 'grouping', 'ungrouping', 'reorder', 'sorting', 'refresh'];\n    this.keys = [literals.downArrow, literals.upArrow, literals.enter, literals.shiftEnter];\n    this.rowTop = 0;\n    this.virtualInfiniteData = {};\n    this.isCancel = false;\n    this.emptyRowData = {};\n    this.isNormaledit = false;\n    this.isInfiniteScroll = false;\n    this.isLastPage = false;\n    this.isInitialRender = true;\n    this.isFocusScroll = false;\n    this.isGroupCollapse = false;\n    this.parent = parent;\n    this.serviceLocator = serviceLocator;\n    this.isNormaledit = this.parent.editSettings.mode === 'Normal';\n    this.addEventListener();\n    this.widthService = serviceLocator.getService('widthService');\n    this.rowModelGenerator = new RowModelGenerator(this.parent);\n  }\n  InfiniteScroll.prototype.getModuleName = function () {\n    return 'infiniteScroll';\n  };\n  /**\n   * @returns {void}\n   * @hidden\n   */\n  InfiniteScroll.prototype.addEventListener = function () {\n    this.parent.on(events.dataReady, this.onDataReady, this);\n    this.parent.on(events.dataSourceModified, this.dataSourceModified, this);\n    this.parent.on(events.infinitePageQuery, this.infinitePageQuery, this);\n    this.parent.on(events.infiniteScrollHandler, this.infiniteScrollHandler, this);\n    this.parent.on(events.beforeCellFocused, this.infiniteCellFocus, this);\n    this.parent.on(events.appendInfiniteContent, this.appendInfiniteRows, this);\n    this.parent.on(events.removeInfiniteRows, this.removeInfiniteCacheRows, this);\n    this.parent.on(events.resetInfiniteBlocks, this.resetInfiniteBlocks, this);\n    this.parent.on(events.setInfiniteCache, this.setCache, this);\n    this.parent.on(events.initialCollapse, this.ensureIntialCollapse, this);\n    this.parent.on(events.keyPressed, this.infiniteCellFocus, this);\n    this.parent.on(events.infiniteShowHide, this.setDisplayNone, this);\n    this.parent.on(events.virtualScrollEditActionBegin, this.editActionBegin, this);\n    this.parent.on(events.getVirtualData, this.getVirtualInfiniteData, this);\n    this.parent.on(events.editReset, this.resetInfiniteEdit, this);\n    this.parent.on(events.virtualScrollEditSuccess, this.infiniteEditSuccess, this);\n    this.parent.on(events.refreshVirtualCache, this.refreshInfiniteCache, this);\n    this.parent.on(events.refreshInfiniteEditrowindex, this.refreshInfiniteEditrowindex, this);\n    this.parent.on(events.infiniteEditHandler, this.infiniteEditHandler, this);\n    this.parent.on(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin, this);\n    this.parent.on(events.modelChanged, this.modelChanged, this);\n    this.parent.on(events.refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData, this);\n    this.parent.on(events.destroy, this.destroy, this);\n    this.parent.on(events.contentReady, this.selectNewRow, this);\n    this.parent.on(events.captionActionComplete, this.captionActionComplete, this);\n    this.parent.on(events.setVirtualPageQuery, this.setGroupCollapsePageQuery, this);\n    this.actionBeginFunction = this.actionBegin.bind(this);\n    this.actionCompleteFunction = this.actionComplete.bind(this);\n    this.dataBoundFunction = this.dataBound.bind(this);\n    this.parent.addEventListener(events.actionBegin, this.actionBeginFunction);\n    this.parent.addEventListener(events.actionComplete, this.actionCompleteFunction);\n    this.parent.addEventListener(events.dataBound, this.dataBoundFunction);\n  };\n  /**\n   * @returns {void}\n   * @hidden\n   */\n  InfiniteScroll.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n    this.parent.off(events.dataReady, this.onDataReady);\n    this.parent.off(events.dataSourceModified, this.dataSourceModified);\n    this.parent.off(events.infinitePageQuery, this.infinitePageQuery);\n    this.parent.off(events.infiniteScrollHandler, this.infiniteScrollHandler);\n    this.parent.off(events.beforeCellFocused, this.infiniteCellFocus);\n    this.parent.off(events.appendInfiniteContent, this.appendInfiniteRows);\n    this.parent.off(events.removeInfiniteRows, this.removeInfiniteCacheRows);\n    this.parent.off(events.resetInfiniteBlocks, this.resetInfiniteBlocks);\n    this.parent.off(events.setInfiniteCache, this.setCache);\n    this.parent.off(events.initialCollapse, this.ensureIntialCollapse);\n    this.parent.off(events.keyPressed, this.infiniteCellFocus);\n    this.parent.off(events.infiniteShowHide, this.setDisplayNone);\n    this.parent.off(events.virtualScrollEditActionBegin, this.editActionBegin);\n    this.parent.off(events.getVirtualData, this.getVirtualInfiniteData);\n    this.parent.off(events.editReset, this.resetInfiniteEdit);\n    this.parent.off(events.virtualScrollEditSuccess, this.infiniteEditSuccess);\n    this.parent.off(events.refreshVirtualCache, this.refreshInfiniteCache);\n    this.parent.on(events.refreshInfiniteEditrowindex, this.refreshInfiniteEditrowindex);\n    this.parent.off(events.infiniteEditHandler, this.infiniteEditHandler);\n    this.parent.off(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin);\n    this.parent.off(events.modelChanged, this.modelChanged);\n    this.parent.off(events.refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData);\n    this.parent.off(events.destroy, this.destroy);\n    this.parent.off(events.contentReady, this.selectNewRow);\n    this.parent.off(events.captionActionComplete, this.captionActionComplete);\n    this.parent.off(events.setVirtualPageQuery, this.setGroupCollapsePageQuery);\n    this.parent.removeEventListener(events.actionBegin, this.actionBeginFunction);\n    this.parent.removeEventListener(events.actionComplete, this.actionCompleteFunction);\n    this.parent.removeEventListener(events.dataBound, this.dataBoundFunction);\n  };\n  InfiniteScroll.prototype.dataBound = function () {\n    if (this.groupCaptionAction === 'collapse') {\n      this.groupCaptionAction = 'refresh';\n      this.makeGroupCollapseRequest();\n    } else if (this.groupCaptionAction === 'refresh') {\n      this.parent.hideSpinner();\n      this.groupCaptionAction = this.empty;\n    }\n  };\n  InfiniteScroll.prototype.setGroupCollapsePageQuery = function (args) {\n    var gObj = this.parent;\n    if (!gObj.infiniteScrollSettings.enableCache && this.isGroupCollapse) {\n      args.skipPage = true;\n      this.isGroupCollapse = false;\n      if (this.groupCaptionAction === 'collapse') {\n        var captionRow = gObj.getRowObjectFromUID(this.parentCapUid);\n        var rowObjs = gObj.getRowsObject();\n        var childCount = 0;\n        for (var i = rowObjs.length - 1; i >= 0; i--) {\n          if (rowObjs[parseInt(i.toString(), 10)].indent === captionRow.indent) {\n            break;\n          }\n          if (rowObjs[parseInt(i.toString(), 10)].isDataRow) {\n            childCount++;\n          }\n        }\n        var key = getGroupKeysAndFields(rowObjs.indexOf(captionRow), rowObjs);\n        var pred = generateExpandPredicates(key.fields, key.keys, this);\n        var predicateList = getPredicates(pred);\n        pred = predicateList[predicateList.length - 1];\n        for (var i = predicateList.length - 2; i >= 0; i--) {\n          pred = pred.and(predicateList[parseInt(i.toString(), 10)]);\n        }\n        args.query.where(pred);\n        args.query.skip(childCount);\n        this.parentCapUid = this.empty;\n      } else {\n        var rows = gObj.getRows();\n        var size = gObj.pageSettings.pageSize;\n        var skip = getRowIndexFromElement(rows[rows.length - 1]) + 1;\n        var additionalCnt = skip - skip % size + size - skip;\n        if (skip % size === 0) {\n          additionalCnt = 0;\n        }\n        args.query.skip(skip);\n        args.query.take(gObj.infiniteScrollSettings.initialBlocks * gObj.pageSettings.pageSize + additionalCnt);\n      }\n    }\n  };\n  InfiniteScroll.prototype.captionActionComplete = function (args) {\n    var gObj = this.parent;\n    if (!gObj.infiniteScrollSettings.enableCache && args.isCollapse) {\n      var contetRect = gObj.getContent().firstElementChild.getBoundingClientRect();\n      var tableReact = gObj.contentModule.getTable().getBoundingClientRect();\n      if (Math.round(tableReact.bottom - gObj.getRowHeight()) <= Math.round(contetRect.bottom)) {\n        this.parentCapUid = args.parentUid;\n        this.groupCaptionAction = 'collapse';\n        gObj.showSpinner();\n        var caption = gObj.getRowObjectFromUID(args.parentUid);\n        var childCount = this.getCaptionChildCount(caption);\n        if (!childCount) {\n          this.groupCaptionAction = 'refresh';\n          this.makeGroupCollapseRequest();\n        } else {\n          this.makeGroupCollapseRequest(args.parentUid);\n        }\n      }\n    }\n  };\n  InfiniteScroll.prototype.makeGroupCollapseRequest = function (parentUid) {\n    var gObj = this.parent;\n    var captionRows = [].slice.call(gObj.getContentTable().querySelectorAll('tr'));\n    var rows = gObj.groupSettings.enableLazyLoading ? captionRows : gObj.getRows();\n    var index = !gObj.groupSettings.enableLazyLoading ? getRowIndexFromElement(rows[rows.length - 1]) : gObj.contentModule['visibleRows'].length - 1;\n    var prevPage = this.parent.pageSettings.currentPage;\n    var nextPage = Math.ceil(index / this.parent.pageSettings.pageSize) + 1;\n    if (prevPage >= this.maxPage || nextPage > this.maxPage) {\n      gObj.hideSpinner();\n      return;\n    }\n    this.parent.pageSettings.currentPage = nextPage;\n    var scrollArg = {\n      requestType: 'infiniteScroll',\n      currentPage: this.parent.pageSettings.currentPage,\n      prevPage: prevPage,\n      startIndex: index + 1,\n      direction: 'down',\n      isCaptionCollapse: true,\n      parentUid: parentUid\n    };\n    this.isGroupCollapse = true;\n    this.parent.notify('model-changed', scrollArg);\n  };\n  InfiniteScroll.prototype.getCaptionChildCount = function (caption) {\n    var rowObj = this.parent.getRowsObject();\n    var index = rowObj.indexOf(caption);\n    var make = false;\n    for (var i = index; i < rowObj.length; i++) {\n      if ((rowObj[parseInt(i.toString(), 10)].indent === caption.indent || rowObj[parseInt(i.toString(), 10)].indent < caption.indent) && rowObj[parseInt(i.toString(), 10)].data.key !== caption.data.key) {\n        break;\n      }\n      if (rowObj[parseInt(i.toString(), 10)].isCaptionRow && !this.childCheck(rowObj, rowObj[parseInt(i.toString(), 10)], i)) {\n        make = true;\n        break;\n      }\n    }\n    return make;\n  };\n  InfiniteScroll.prototype.childCheck = function (rowObj, row, index) {\n    var childCount = 0;\n    for (var i = index + 1; i < rowObj.length; i++) {\n      if (rowObj[parseInt(i.toString(), 10)].indent === row.indent) {\n        break;\n      }\n      if (rowObj[parseInt(i.toString(), 10)].indent === row.indent + 1 && rowObj[parseInt(i.toString(), 10)].parentUid === row.uid) {\n        childCount++;\n      }\n    }\n    return row.data.count === childCount;\n  };\n  InfiniteScroll.prototype.updateCurrentViewData = function () {\n    var gObj = this.parent;\n    if (gObj.groupSettings.columns.length) {\n      return;\n    }\n    var keys = Object.keys(this.infiniteCurrentViewData);\n    gObj.currentViewData = [];\n    var page = gObj.pageSettings.currentPage;\n    var isCache = gObj.infiniteScrollSettings.enableCache;\n    var blocks = gObj.infiniteScrollSettings.maxBlocks;\n    var isMiddlePage = isCache && (page > blocks || this.isUpScroll && page > 1);\n    var start = isMiddlePage ? this.isUpScroll ? page : page - blocks + 1 : 1;\n    var end = isMiddlePage ? start + blocks - 1 : isCache ? blocks : keys.length;\n    for (var i = start; i <= end; i++) {\n      if (this.infiniteCurrentViewData[parseInt(i.toString(), 10)]) {\n        gObj.currentViewData = gObj.currentViewData.concat(this.infiniteCurrentViewData[parseInt(i.toString(), 10)]);\n      }\n    }\n  };\n  InfiniteScroll.prototype.refreshInfiniteCurrentViewData = function (e) {\n    if (e.args.action === 'add' && e.args.requestType === 'save') {\n      this.parent.pageSettings.currentPage = Math.ceil(e.args['index'] / this.parent.pageSettings.pageSize) ? Math.ceil(e.args['index'] / this.parent.pageSettings.pageSize) : 1;\n    }\n    var page = this.parent.pageSettings.currentPage;\n    var size = this.parent.pageSettings.pageSize;\n    var blocks = this.parent.infiniteScrollSettings.initialBlocks;\n    var keys = Object.keys(this.infiniteCurrentViewData);\n    var cache = this.parent.infiniteScrollSettings.enableCache;\n    if (!this.parent.groupSettings.columns.length) {\n      var isAdd = e.args.requestType === 'save' && !(this.parent.sortSettings.columns.length || this.parent.filterSettings.columns.length || this.parent.groupSettings.columns.length || this.parent.searchSettings.key);\n      var isDelete = e.args.requestType === 'delete';\n      if (!cache && (isAdd || isDelete)) {\n        if (isAdd) {\n          var indexCount = 0;\n          for (var i = 1; i <= keys.length; i++) {\n            indexCount += this.infiniteCurrentViewData[parseInt(i.toString(), 10)].length - 1;\n            if (e.args.index <= indexCount) {\n              this.resetCurrentViewData(i);\n              this.infiniteCurrentViewData[parseInt(i.toString(), 10)].splice(e.args.index, 0, e.args.data);\n              break;\n            }\n          }\n        } else {\n          this.infiniteCurrentViewData[keys[keys.length - 1]].push(e.data[0]);\n        }\n      } else {\n        if (blocks > 1 && e.data.length === blocks * size) {\n          this.setInitialCache(e.data.slice(), {}, cache && e.args.requestType === 'delete', true);\n        } else {\n          this.infiniteCurrentViewData[parseInt(page.toString(), 10)] = e.data.slice();\n        }\n      }\n    }\n  };\n  InfiniteScroll.prototype.resetCurrentViewData = function (startIndex) {\n    var keys = Object.keys(this.infiniteCurrentViewData);\n    for (var i = startIndex; i <= keys.length; i++) {\n      var lastViewData = this.infiniteCurrentViewData[parseInt(i.toString(), 10)][this.infiniteCurrentViewData[parseInt(i.toString(), 10)].length - 1];\n      if (this.infiniteCurrentViewData[i + 1]) {\n        this.infiniteCurrentViewData[i + 1].splice(0, 0, lastViewData);\n      }\n      this.infiniteCurrentViewData[parseInt(i.toString(), 10)].pop();\n    }\n  };\n  InfiniteScroll.prototype.modelChanged = function (args) {\n    var rows = this.parent.getRows();\n    if (args.requestType === 'save' && args.index && args.data) {\n      this.addRowIndex = args.index;\n    }\n    if (rows && rows.length && args.requestType !== 'infiniteScroll' && (args.requestType === 'delete' || this.requestType === 'add')) {\n      this.firstIndex = getRowIndexFromElement(rows[0]);\n      this.firstBlock = Math.ceil((this.firstIndex + 1) / this.parent.pageSettings.pageSize);\n      this.lastIndex = getRowIndexFromElement(rows[rows.length - 1]);\n      if (args.requestType === 'delete') {\n        var rowObj = this.parent.getRowsObject();\n        args.startIndex = this.parent.infiniteScrollSettings.enableCache ? (this.firstBlock - 1) * this.parent.pageSettings.pageSize : rowObj[rowObj.length - 1].index;\n      } else {\n        args.startIndex = this.firstIndex;\n      }\n      if (!this.parent.infiniteScrollSettings.enableCache && this.parent.pageSettings.currentPage === this.maxPage && args.requestType === 'delete') {\n        this.isLastPage = true;\n        this.lastIndex = this.lastIndex - 1;\n      }\n    }\n  };\n  InfiniteScroll.prototype.infiniteAddActionBegin = function (args) {\n    if (this.isNormaledit) {\n      this.isAdd = true;\n      if (this.parent.infiniteScrollSettings.enableCache) {\n        if (!Object.keys(this.emptyRowData).length) {\n          this.createEmptyRowdata();\n        }\n        if (this.parent.pageSettings.currentPage > 1) {\n          args.startEdit = false;\n          this.resetInfiniteBlocks({}, true);\n          this.makeRequest({\n            currentPage: 1\n          });\n        }\n      }\n    }\n  };\n  InfiniteScroll.prototype.infiniteEditHandler = function (args) {\n    if (!this.parent.infiniteScrollSettings.enableCache && (args.e.requestType === 'delete' || args.e.requestType === 'save' && this.requestType === 'add')) {\n      var rowElms = this.parent.getRows();\n      var rows = this.parent.getRowsObject();\n      if (this.ensureRowAvailability(rows, args.result[0])) {\n        if (rowElms.length && !(this.addRowIndex && this.addRowIndex >= rowElms.length)) {\n          this.resetRowIndex(rows, args.e, rowElms, this.requestType === 'add', true);\n        }\n        if (!this.isLastPage) {\n          this.createRow(rows, args);\n        } else {\n          this.isLastPage = false;\n          this.parent.pageSettings.currentPage = this.maxPage;\n          if (this.parent.selectionModule.index < this.parent.frozenRows) {\n            remove(rowElms[this.parent.frozenRows - 1]);\n            this.createRow([rows[this.parent.frozenRows - 1]], args, false, true);\n            setRowElements(this.parent);\n          }\n        }\n      }\n      this.parent.hideSpinner();\n      this.parent.notify(events.refreshInfinitePersistSelection, {});\n      if (this.requestType === 'delete') {\n        this.parent.notify(events.deleteComplete, args.e);\n      } else {\n        this.parent.notify(events.saveComplete, args.e);\n      }\n    }\n    this.parent.notify(events.freezeRender, {\n      case: 'refreshHeight'\n    });\n  };\n  InfiniteScroll.prototype.createRow = function (rows, args, isMovable, isFrozenRows, isFrozenRight) {\n    var row = !isFrozenRows ? this.generateRows(args.result, args.e) : rows;\n    var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n    this.parent.removeMaskRow();\n    if (args.e.requestType === 'save' && args.e.index && args.e.data) {\n      row[0].index = this.addRowIndex;\n      this.addRowIndex = null;\n      if (row[0].index >= rows.length) {\n        return;\n      }\n    }\n    var tbody;\n    tbody = this.parent.getContent().querySelector(literals.tbody);\n    if (this.parent.frozenRows) {\n      tbody = isFrozenRows && this.requestType !== 'add' || !isFrozenRows && this.requestType === 'add' ? this.parent.getHeaderContent().querySelector(literals.tbody) : tbody;\n    }\n    var notifyArgs = {\n      rows: rows,\n      cancel: false,\n      args: args,\n      isMovable: isMovable,\n      isFrozenRows: isFrozenRows,\n      isFrozenRight: isFrozenRows,\n      row: row\n    };\n    this.parent.notify(events.infiniteCrudCancel, notifyArgs);\n    if (!notifyArgs.cancel) {\n      for (var i = row.length - 1; i >= 0; i--) {\n        if (this.requestType === 'delete') {\n          tbody.appendChild(rowRenderer.render(row[parseInt(i.toString(), 10)], this.parent.getColumns()));\n        } else {\n          tbody.insertBefore(rowRenderer.render(row[parseInt(i.toString(), 10)], this.parent.getColumns()), tbody.rows[args.e.index]);\n        }\n      }\n    }\n    if (!isFrozenRows && this.parent.frozenRows && (this.parent.selectionModule.index < this.parent.frozenRows || this.requestType === 'add')) {\n      var rowElems = this.parent.getRows();\n      var index = (isMovable || isFrozenRight) && this.requestType === 'add' ? this.parent.frozenRows : this.parent.frozenRows - 1;\n      remove(rowElems[parseInt(index.toString(), 10)]);\n      this.createRow([rows[this.parent.frozenRows - 1]], args, false, true, false);\n    }\n    if (!this.parent.infiniteScrollSettings.enableCache && !isFrozenRows) {\n      setRowElements(this.parent);\n      this.parent.contentModule.visibleRows = this.requestType === 'add' ? row.concat(rows) : rows.concat(row);\n    }\n  };\n  InfiniteScroll.prototype.ensureRowAvailability = function (rows, data) {\n    var resume = true;\n    if (this.parent.frozenRows && !this.parent.infiniteScrollSettings.enableCache && this.parent.sortSettings.columns && this.requestType === 'add') {\n      var key = this.parent.getPrimaryKeyFieldNames()[0];\n      for (var i = 0; i < rows.length; i++) {\n        if (rows[parseInt(i.toString(), 10)].data[\"\" + key] === data[\"\" + key]) {\n          resume = false;\n          break;\n        }\n      }\n    }\n    return resume;\n  };\n  InfiniteScroll.prototype.generateRows = function (data, args) {\n    return this.rowModelGenerator.generateRows(data, args);\n  };\n  InfiniteScroll.prototype.resetRowIndex = function (rows, args, rowElms, isAdd, isFrozen) {\n    var _this = this;\n    var keyField = this.parent.getPrimaryKeyFieldNames()[0];\n    var isRemove = !(rowElms.length % this.parent.pageSettings.pageSize);\n    if (isAdd) {\n      if (isRemove) {\n        if (isFrozen && !this.parent.groupSettings.columns.length) {\n          this.swapCurrentViewData(1, true);\n        }\n        remove(rowElms[rows.length - 1]);\n        rowElms.splice(rows.length - 1, 1);\n        rows.splice(rows.length - 1, 1);\n      }\n    } else {\n      rows.filter(function (e, index) {\n        if (e.data[\"\" + keyField] === args.data[0][\"\" + keyField]) {\n          if (isFrozen && !_this.parent.groupSettings.columns.length) {\n            var page = Math.ceil((index + 1) / _this.parent.pageSettings.pageSize);\n            _this.resetInfiniteCurrentViewData(page, index);\n          }\n          rows.splice(index, 1);\n          remove(rowElms[parseInt(index.toString(), 10)]);\n          rowElms.splice(index, 1);\n        }\n      });\n    }\n    var startIndex = isAdd ? this.addRowIndex ? this.addRowIndex + 1 : 1 : 0;\n    resetRowIndex(this.parent, rows, rowElms, startIndex, this.addRowIndex ? this.addRowIndex : 0);\n  };\n  InfiniteScroll.prototype.resetInfiniteCurrentViewData = function (page, index) {\n    index = index - (page - 1) * this.parent.pageSettings.pageSize;\n    this.infiniteCurrentViewData[parseInt(page.toString(), 10)].splice(index, 1);\n    this.swapCurrentViewData(page, false);\n  };\n  InfiniteScroll.prototype.swapCurrentViewData = function (page, isAdd) {\n    var keys = Object.keys(this.infiniteCurrentViewData);\n    var end = isAdd ? keys.length + 1 : keys.length;\n    for (var i = page; i < end; i++) {\n      if (this.infiniteCurrentViewData[i + 1]) {\n        var pageIndex = isAdd ? i : i + 1;\n        var index = isAdd ? this.infiniteCurrentViewData[parseInt(i.toString(), 10)].length - 1 : 0;\n        var data = this.infiniteCurrentViewData[parseInt(pageIndex.toString(), 10)].splice(index, 1);\n        if (isAdd) {\n          this.infiniteCurrentViewData[i + 1] = data.concat(this.infiniteCurrentViewData[i + 1]);\n          if (i + 1 === end - 1) {\n            this.infiniteCurrentViewData[i + 1].splice(this.infiniteCurrentViewData[i + 1].length - 1, 1);\n          }\n        } else {\n          this.infiniteCurrentViewData[parseInt(i.toString(), 10)].push(data[0]);\n        }\n      }\n    }\n    this.updateCurrentViewData();\n  };\n  InfiniteScroll.prototype.setDisplayNone = function (args) {\n    if (this.parent.infiniteScrollSettings.enableCache) {\n      var keys = Object.keys(this.infiniteCache);\n      for (var i = 1; i <= keys.length; i++) {\n        var cache = this.infiniteCache[parseInt(i.toString(), 10)];\n        cache.filter(function (e) {\n          e.cells[args.index].visible = args.visible === '';\n        });\n      }\n      this.resetContentModuleCache(this.infiniteCache);\n    }\n  };\n  InfiniteScroll.prototype.refreshInfiniteCache = function (args) {\n    this.getEditedRowObject().data = args.data;\n  };\n  InfiniteScroll.prototype.refreshInfiniteCacheRowVisibleLength = function (args, currentPage) {\n    var cPageRowArray = args[parseInt(currentPage.toString(), 10)];\n    if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {\n      var length_1 = 0;\n      var vRowLen = 0;\n      var hRowLen = 0;\n      for (var i = 0; i < cPageRowArray.length; i++) {\n        if (cPageRowArray[parseInt(i.toString(), 10)].visible || isNullOrUndefined(cPageRowArray[parseInt(i.toString(), 10)].visible)) {\n          vRowLen++;\n        } else {\n          hRowLen++;\n        }\n      }\n      if (hRowLen > vRowLen) {\n        length_1 = hRowLen - vRowLen;\n        if (length_1 > vRowLen) {\n          length_1 = vRowLen;\n        }\n      } else {\n        length_1 = vRowLen - hRowLen;\n        if (length_1 > hRowLen) {\n          length_1 = hRowLen;\n        }\n      }\n      if (length_1 === 0) {\n        length_1 = 1;\n      }\n      return length_1;\n    } else {\n      return cPageRowArray.length;\n    }\n  };\n  InfiniteScroll.prototype.refreshInfiniteEditrowindex = function (args) {\n    this.editRowIndex = args.index;\n  };\n  InfiniteScroll.prototype.getEditedRowObject = function () {\n    var rowObjects = this.parent.getRowsObject();\n    var editedrow;\n    for (var i = 0; i < rowObjects.length; i++) {\n      if (rowObjects[parseInt(i.toString(), 10)].index === this.editRowIndex) {\n        editedrow = rowObjects[parseInt(i.toString(), 10)];\n      }\n    }\n    return editedrow;\n  };\n  InfiniteScroll.prototype.infiniteEditSuccess = function (args) {\n    if (this.isNormaledit) {\n      if (!this.isAdd && args.data) {\n        this.updateCurrentViewRecords(args.data);\n      }\n      this.isAdd = false;\n    }\n  };\n  InfiniteScroll.prototype.updateCurrentViewRecords = function (data) {\n    var index = getEditedDataIndex(this.parent, data);\n    if (!isNullOrUndefined(index)) {\n      this.parent.getCurrentViewRecords()[parseInt(index.toString(), 10)] = data;\n    }\n  };\n  InfiniteScroll.prototype.actionBegin = function (args) {\n    if (args.requestType === 'add' || args.requestType === 'delete') {\n      this.requestType = args.requestType;\n    } else if (args.action === 'add' && args.requestType === 'save') {\n      this.requestType = args.action;\n    }\n    if (this.parent.isFrozenGrid() && !args.cancel && args.requestType === 'searching' || args.requestType === 'sorting' || args.requestType === 'filtering') {\n      this.isInitialRender = true;\n    }\n  };\n  InfiniteScroll.prototype.actionComplete = function (args) {\n    if (args.requestType === 'delete' || args.requestType === 'save' || args.requestType === 'cancel') {\n      this.requestType = this.empty;\n      this.isCancel = args.requestType === 'cancel' || args.requestType === 'save';\n      this.isAdd = this.isEdit = false;\n      if (this.isNormaledit) {\n        this.editRowIndex = this.empty;\n        this.virtualInfiniteData = {};\n        this.parent.editModule.previousVirtualData = {};\n      }\n    }\n  };\n  InfiniteScroll.prototype.resetInfiniteEdit = function () {\n    if (this.parent.enableInfiniteScrolling && this.isNormaledit) {\n      if (this.parent.editSettings.allowEditing && this.isEdit || this.parent.editSettings.allowAdding && this.isAdd) {\n        this.parent.isEdit = true;\n      }\n    }\n  };\n  InfiniteScroll.prototype.getVirtualInfiniteData = function (data) {\n    if (this.parent.infiniteScrollSettings.enableCache && this.parent.isEdit && isNullOrUndefined(data['endEdit'])) {\n      this.parent.editModule.closeEdit();\n    } else {\n      this.getVirtualInfiniteEditedData();\n      data.virtualData = this.virtualInfiniteData;\n      data.isAdd = this.isAdd;\n      data.isCancel = this.isCancel;\n    }\n  };\n  InfiniteScroll.prototype.editActionBegin = function (e) {\n    this.isEdit = true;\n    this.editRowIndex = e.index;\n    var rowObject = extend({}, this.getEditedRowObject().data);\n    e.data = Object.keys(this.virtualInfiniteData).length ? this.virtualInfiniteData : rowObject;\n  };\n  InfiniteScroll.prototype.dataSourceModified = function () {\n    this.resetInfiniteBlocks({\n      requestType: this.empty\n    }, true);\n  };\n  InfiniteScroll.prototype.onDataReady = function (e) {\n    if (!isNullOrUndefined(e.count) && e.requestType !== 'infiniteScroll') {\n      this.maxPage = Math.ceil(e.count / this.parent.pageSettings.pageSize);\n    }\n  };\n  InfiniteScroll.prototype.ensureIntialCollapse = function (isExpand) {\n    this.isInitialCollapse = !isExpand;\n  };\n  InfiniteScroll.prototype.infiniteScrollHandler = function (e) {\n    this.restoreInfiniteEdit();\n    this.restoreInfiniteAdd();\n    var targetEle = e.target;\n    var isInfinite = targetEle.classList.contains(literals.content);\n    if (isInfinite && this.parent.enableInfiniteScrolling && !e.isLeft) {\n      var scrollEle = this.parent.getContent().firstElementChild;\n      var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n      this.prevScrollTop = scrollEle.scrollTop;\n      var rows = this.parent.groupSettings.enableLazyLoading ? captionRows : this.parent.getRows();\n      if (!rows.length) {\n        return;\n      }\n      var index = getRowIndexFromElement(rows[rows.length - 1]) + 1;\n      var prevPage = this.parent.pageSettings.currentPage;\n      var args = void 0;\n      var offset = targetEle.scrollHeight - targetEle.scrollTop;\n      var round = Math.round(targetEle.scrollHeight - targetEle.scrollTop);\n      var floor = offset < targetEle.clientHeight ? Math.ceil(offset) : Math.floor(offset);\n      if (floor > targetEle.clientHeight) {\n        floor = floor - 1;\n      }\n      var isBottom = floor === targetEle.clientHeight || round === targetEle.clientHeight;\n      if (!isNullOrUndefined(this.groupCaptionAction)) {\n        return;\n      }\n      if (this.isScroll && isBottom && (this.parent.pageSettings.currentPage <= this.maxPage - 1 || this.enableContinuousScroll)) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n          this.isUpScroll = false;\n          this.isDownScroll = true;\n        }\n        var rows_1 = [].slice.call(scrollEle.querySelectorAll('.e-row:not(.e-addedrow)'));\n        var row = rows_1[rows_1.length - 1];\n        var rowIndex = !this.parent.groupSettings.enableLazyLoading ? getRowIndexFromElement(row) : this.parent.contentModule['visibleRows'].length - 1;\n        this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) + 1;\n        args = {\n          requestType: 'infiniteScroll',\n          currentPage: this.parent.pageSettings.currentPage,\n          prevPage: prevPage,\n          startIndex: index,\n          direction: 'down'\n        };\n        this.makeRequest(args);\n      }\n      if (this.isScroll && this.parent.infiniteScrollSettings.enableCache && targetEle.scrollTop === 0 && this.parent.pageSettings.currentPage !== 1) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n          this.isDownScroll = false;\n          this.isUpScroll = true;\n        }\n        var row = [].slice.call(scrollEle.getElementsByClassName(literals.row));\n        var rowIndex = getRowIndexFromElement(row[this.parent.pageSettings.pageSize - 1]);\n        var startIndex = getRowIndexFromElement(row[0]) - this.parent.pageSettings.pageSize;\n        this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) - 1;\n        if (this.parent.pageSettings.currentPage) {\n          args = {\n            requestType: 'infiniteScroll',\n            currentPage: this.parent.pageSettings.currentPage,\n            prevPage: prevPage,\n            startIndex: startIndex,\n            direction: 'up'\n          };\n          this.makeRequest(args);\n        }\n      }\n      if (this.parent.infiniteScrollSettings.enableCache && !this.isScroll && isNullOrUndefined(args)) {\n        if (this.isDownScroll || this.isUpScroll) {\n          scrollEle.scrollTop = this.top;\n        }\n      }\n    }\n  };\n  InfiniteScroll.prototype.makeRequest = function (args) {\n    var _this = this;\n    if (this.parent.pageSettings.currentPage !== args.prevPage) {\n      var initBlocks = this.parent.infiniteScrollSettings.initialBlocks;\n      if (initBlocks < this.maxPage && this.parent.pageSettings.currentPage <= this.maxPage) {\n        this.isInfiniteScroll = true;\n        if (isNullOrUndefined(this.infiniteCache[args.currentPage])) {\n          setTimeout(function () {\n            _this.getVirtualInfiniteEditedData();\n            _this.parent.notify('model-changed', args);\n          }, 100);\n        } else {\n          setTimeout(function () {\n            _this.getVirtualInfiniteEditedData();\n            _this.parent.notify(events.refreshInfiniteModeBlocks, args);\n          }, 100);\n        }\n      } else {\n        this.parent.pageSettings.currentPage = this.maxPage;\n      }\n    }\n  };\n  InfiniteScroll.prototype.infinitePageQuery = function (query) {\n    if (this.initialRender) {\n      this.initialRender = false;\n      this.intialPageQuery(query);\n    } else {\n      if (this.requestType === 'delete' || this.requestType === 'add') {\n        if (!this.isInfiniteScroll && !this.parent.groupSettings.enableLazyLoading) {\n          this.editPageQuery(query);\n        } else if (this.parent.groupSettings.enableLazyLoading && !this.parent.infiniteScrollSettings.enableCache) {\n          if (this.parent.infiniteScrollSettings.initialBlocks < this.parent.pageSettings.currentPage) {\n            query.page(1, this.parent.pageSettings.pageSize * this.parent.pageSettings.currentPage);\n          } else {\n            query.page(1, this.parent.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks);\n          }\n        } else {\n          query.page(this.parent.pageSettings.currentPage, this.parent.pageSettings.pageSize);\n        }\n      } else {\n        query.page(this.parent.pageSettings.currentPage, this.parent.pageSettings.pageSize);\n      }\n    }\n  };\n  InfiniteScroll.prototype.editPageQuery = function (query) {\n    var initialBlocks = this.parent.infiniteScrollSettings.initialBlocks;\n    var isCache = this.parent.infiniteScrollSettings.enableCache;\n    if (isCache) {\n      this.infiniteCache = {};\n      this.infiniteCurrentViewData = {};\n      query.skip(this.firstIndex);\n      query.take(initialBlocks * this.parent.pageSettings.pageSize);\n    } else {\n      if (this.parent.editSettings.mode === 'Dialog') {\n        this.parent.clearSelection();\n      }\n      var index = this.requestType === 'delete' ? this.lastIndex : this.addRowIndex ? this.addRowIndex : this.firstIndex;\n      query.skip(index);\n      if (!isNullOrUndefined(this.parent.getDataModule().dataManager.dataSource.url) && this.parent.getDataModule().dataManager.dataSource.url !== '' && (this.requestType === 'delete' || this.requestType === 'add')) {\n        query.take(initialBlocks * this.parent.pageSettings.pageSize);\n      } else {\n        query.take(1);\n      }\n    }\n  };\n  InfiniteScroll.prototype.intialPageQuery = function (query) {\n    if (this.parent.infiniteScrollSettings.enableCache && this.parent.infiniteScrollSettings.initialBlocks > this.parent.infiniteScrollSettings.maxBlocks) {\n      this.parent.infiniteScrollSettings.initialBlocks = this.parent.infiniteScrollSettings.maxBlocks;\n    }\n    var pageSize = this.parent.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks;\n    query.page(1, pageSize);\n  };\n  InfiniteScroll.prototype.scrollToLastFocusedCell = function (e) {\n    var gObj = this.parent;\n    var rowIdx = this.lastFocusInfo.rowIdx + (e.keyArgs.action === literals.upArrow ? -1 : 1);\n    var cellIdx = this.lastFocusInfo.cellIdx;\n    var row = gObj.getRowByIndex(rowIdx);\n    if (!row) {\n      var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n      var page = Math.floor(rowIdx / this.parent.pageSettings.pageSize) + 1;\n      gObj.pageSettings.currentPage = page;\n      var cols = gObj.getColumns();\n      remove(gObj.getContent().querySelector('tbody'));\n      gObj.getContent().querySelector('table').appendChild(gObj.createElement('tbody', {\n        attrs: {\n          'role': 'rowgroup'\n        }\n      }));\n      var focusRows = [];\n      // eslint-disable-next-line @typescript-eslint/tslint/config\n      for (var i = page === 1 || this.maxPage === page ? 0 : -1, k = 0; k < gObj.infiniteScrollSettings.maxBlocks; this.maxPage === page ? i-- : i++, k++) {\n        var rows = this.infiniteCache[page + i];\n        if (rows) {\n          focusRows = focusRows.concat(rows);\n          for (var j = 0; j < rows.length; j++) {\n            gObj.getContent().querySelector('tbody').appendChild(rowRenderer.render(rows[parseInt(j.toString(), 10)], cols));\n          }\n        }\n      }\n      gObj.notify(events.contentReady, {\n        rows: focusRows,\n        args: {}\n      });\n      setRowElements(gObj);\n    }\n    row = gObj.getRowByIndex(rowIdx);\n    var target = row.cells[parseInt(cellIdx.toString(), 10)];\n    gObj.focusModule.isInfiniteScroll = true;\n    gObj.focusModule.onClick({\n      target: target\n    }, true);\n    gObj.selectRow(rowIdx);\n    target.focus();\n    this.isFocusScroll = false;\n    e.cancel = true;\n  };\n  InfiniteScroll.prototype.setLastCellFocusInfo = function (e) {\n    var cell = e.byClick && e.clickArgs.target || e.byKey && e.keyArgs.target || (!this.isFocusScroll && e).target;\n    if (cell && cell.classList.contains('e-rowcell')) {\n      var cellIdx = parseInt(cell.getAttribute('data-colindex'), 10);\n      var rowIdx = parseInt(cell.parentElement.getAttribute('data-rowindex'), 10);\n      this.lastFocusInfo = {\n        rowIdx: rowIdx,\n        cellIdx: cellIdx\n      };\n    }\n  };\n  InfiniteScroll.prototype.infiniteCellFocus = function (e) {\n    var gObj = this.parent;\n    var cache = gObj.infiniteScrollSettings.enableCache;\n    if (e.byKey) {\n      if (cache && this.isFocusScroll) {\n        this.scrollToLastFocusedCell(e);\n        return;\n      }\n      var cell = document.activeElement;\n      var rowIndex = getRowIndexFromElement(cell.parentElement);\n      this.cellIndex = parseInt(cell.getAttribute(literals.dataColIndex), 10);\n      var content = gObj.getContent().firstElementChild;\n      var totalRowsCount = this.maxPage * gObj.pageSettings.pageSize - 1;\n      var visibleRowCount = Math.floor(content.offsetHeight / this.parent.getRowHeight());\n      var contentRect = content.getBoundingClientRect();\n      if (!isNaN(rowIndex)) {\n        if (e.keyArgs.action === literals.downArrow || e.keyArgs.action === literals.enter) {\n          this.rowIndex = rowIndex += 1;\n          var row = gObj.getRowByIndex(rowIndex);\n          var rowRect = row && row.getBoundingClientRect();\n          if (cache) {\n            rowIndex = cell.parentElement.rowIndex + 1;\n          }\n          if (this.isFocusScroll || !row && rowIndex < totalRowsCount || rowRect && rowRect.bottom >= contentRect.bottom) {\n            if (!this.isFocusScroll) {\n              this.pressedKey = e.keyArgs.action;\n            }\n            this.isFocusScroll = false;\n            content.scrollTop = (rowIndex - visibleRowCount + 1) * this.parent.getRowHeight();\n          } else if (!cache && row) {\n            if (rowRect && (rowRect.bottom >= contentRect.bottom || rowRect.top < contentRect.top)) {\n              row.cells[this.cellIndex].scrollIntoView();\n            }\n          }\n        } else if (e.keyArgs.action === literals.upArrow || e.keyArgs.action === literals.shiftEnter) {\n          this.rowIndex = rowIndex -= 1;\n          var row = gObj.getRowByIndex(rowIndex);\n          var rowRect = row && row.getBoundingClientRect();\n          if (cache) {\n            rowIndex = cell.parentElement.rowIndex - 1;\n          }\n          if (!row || rowRect.top <= contentRect.top) {\n            this.pressedKey = e.keyArgs.action;\n            content.scrollTop = rowIndex * this.parent.getRowHeight();\n          }\n        }\n      }\n    } else if (e.key === 'PageDown' || e.key === 'PageUp') {\n      this.pressedKey = e.key;\n    }\n    this.setLastCellFocusInfo(e);\n  };\n  InfiniteScroll.prototype.createEmptyRowdata = function () {\n    var _this = this;\n    this.parent.getColumns().filter(function (e) {\n      _this.emptyRowData[e.field] = _this.empty;\n    });\n  };\n  InfiniteScroll.prototype.getVirtualInfiniteEditedData = function () {\n    var editForm = this.parent.element.querySelector('.' + literals.editedRow);\n    var addForm = this.parent.element.querySelector('.' + literals.addedRow);\n    var gridForm = this.parent.element.querySelector('.e-gridform');\n    if (this.parent.infiniteScrollSettings.enableCache && (editForm || addForm)) {\n      var rowData = editForm ? extend({}, this.getEditedRowObject().data) : extend({}, this.emptyRowData);\n      this.virtualInfiniteData = this.parent.editModule.getCurrentEditedData(gridForm, rowData);\n      var hiddenColumn = this.parent.getHiddenColumns();\n      for (var i = 0; i < hiddenColumn.length; i++) {\n        if (hiddenColumn[parseInt(i.toString(), 10)].defaultValue) {\n          this.virtualInfiniteData[hiddenColumn[parseInt(i.toString(), 10)].field] = hiddenColumn[parseInt(i.toString(), 10)].defaultValue;\n        }\n      }\n    }\n  };\n  InfiniteScroll.prototype.restoreInfiniteEdit = function () {\n    var content = this.parent.getContent().firstElementChild;\n    var frozenEdit = this.parent.frozenRows ? this.editRowIndex >= this.parent.frozenRows : true;\n    if (this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && frozenEdit) {\n      if (this.parent.editSettings.allowEditing && !isNullOrUndefined(this.editRowIndex)) {\n        var row = this.parent.getRowByIndex(this.editRowIndex);\n        if (Object.keys(this.virtualInfiniteData).length && row && !this.parent.getContent().querySelector('.' + literals.editedRow)) {\n          var top_1 = row.getBoundingClientRect().top;\n          if (top_1 < content.offsetHeight && top_1 > this.parent.getRowHeight()) {\n            this.parent.isEdit = false;\n            this.parent.editModule.startEdit(row);\n          }\n        }\n      }\n    }\n  };\n  InfiniteScroll.prototype.restoreInfiniteAdd = function () {\n    var content = this.parent.getContent().firstElementChild;\n    if (this.parent.getCurrentViewRecords().length && this.parent.getRowByIndex(0) && this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && this.isAdd && !content.querySelector('.' + literals.addedRow)) {\n      var isTop = content.scrollTop < this.parent.getRowHeight();\n      if (isTop) {\n        this.parent.isEdit = false;\n        this.parent.addRecord();\n      }\n    }\n  };\n  InfiniteScroll.prototype.appendInfiniteRows = function (e) {\n    var scrollEle = this.parent.getContent().firstElementChild;\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n    if ((this.parent.isAngular || this.parent.isReact || this.parent.isVue || this.parent.isVue3) && isInfiniteScroll && !e.args.isFrozen && this.parent.infiniteScrollSettings.enableCache) {\n      var isChildGrid = this.parent.childGrid && this.parent.element.querySelectorAll('.e-childgrid').length ? true : false;\n      var rows = this.parent.getDataRows();\n      this.parent.refreshReactTemplateTD(rows, isChildGrid);\n    }\n    if (isInfiniteScroll && !e.args.isFrozen || !isInfiniteScroll) {\n      if (isInfiniteScroll && e.args.direction === 'up') {\n        e.tbody.insertBefore(e.frag, e.tbody.firstElementChild);\n      } else {\n        e.tbody.appendChild(e.frag);\n      }\n    }\n    this.parent.contentModule.getTable().appendChild(e.tbody);\n    this.updateCurrentViewData();\n    if (this.isInitialRender && !e.args.isFrozen) {\n      this.isInitialRender = false;\n      this.parent.scrollModule.setHeight();\n    }\n    if (!e.args.isFrozen) {\n      this.rowTop = !this.rowTop ? this.parent.getRows()[0].getBoundingClientRect().top : this.rowTop;\n      if (isInfiniteScroll) {\n        if (this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n          scrollEle.scrollTop = this.top;\n        }\n        setRowElements(this.parent);\n      }\n      this.restoreInfiniteAdd();\n      this.isScroll = true;\n    }\n    this.isInfiniteScroll = false;\n  };\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  InfiniteScroll.prototype.selectNewRow = function (args) {\n    var _this = this;\n    var gObj = this.parent;\n    var row = gObj.getRowByIndex(this.rowIndex);\n    var cache = gObj.infiniteScrollSettings.enableCache;\n    if (row && this.keys.some(function (value) {\n      return value === _this.pressedKey;\n    })) {\n      var content = gObj.getContent().firstElementChild;\n      var rowHeight = gObj.getRowHeight();\n      var target = row.cells[this.cellIndex];\n      if (this.pressedKey === literals.downArrow || this.pressedKey === literals.enter || cache && (this.pressedKey === literals.upArrow || this.pressedKey === literals.shiftEnter)) {\n        if (!cache && this.pressedKey !== literals.upArrow && this.pressedKey !== literals.shiftEnter) {\n          content.scrollTop = content.scrollTop + rowHeight;\n        }\n        gObj.focusModule.isInfiniteScroll = true;\n        gObj.focusModule.onClick({\n          target: target\n        }, true);\n        gObj.selectRow(this.rowIndex);\n      }\n    } else if (this.lastFocusInfo && (this.pressedKey === literals.pageDown || this.pressedKey === literals.pageUp)) {\n      var idx = cache ? 0 : this.lastFocusInfo.rowIdx;\n      if (gObj.getRowByIndex(idx)) {\n        var target = gObj.getCellFromIndex(idx, this.lastFocusInfo.cellIdx);\n        if (target) {\n          this.isFocusScroll = true;\n          if (!cache) {\n            gObj.focusModule.isInfiniteScroll = true;\n            gObj.focusModule.onClick({\n              target: target\n            }, true);\n          } else {\n            target.focus({\n              preventScroll: true\n            });\n          }\n        }\n      }\n    }\n    this.pressedKey = undefined;\n  };\n  InfiniteScroll.prototype.removeInfiniteCacheRows = function (e) {\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n    if (!e.args.isFrozen && isInfiniteScroll && this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n      var rows = [].slice.call(this.parent.getContentTable().getElementsByClassName(literals.row));\n      if (e.args.direction === 'down') {\n        if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n          var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n          this.removeCaptionRows(captionRows, e.args);\n        }\n        var addRowCount = this.parent.element.querySelector('.' + literals.addedRow) ? 0 : 1;\n        this.removeTopRows(rows, this.parent.pageSettings.pageSize - addRowCount);\n      }\n      if (e.args.direction === 'up') {\n        if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n          var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n          this.removeCaptionRows(captionRows, e.args);\n        } else {\n          this.removeBottomRows(rows, rows.length - 1, e.args);\n        }\n      }\n      this.isScroll = false;\n      this.top = this.calculateScrollTop(e.args);\n    }\n  };\n  InfiniteScroll.prototype.calculateScrollTop = function (args) {\n    var top = 0;\n    var scrollCnt = this.parent.getContent().firstElementChild;\n    if (args.direction === 'down') {\n      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n        top = this.captionRowHeight();\n      }\n      var captionRows = [].slice.call(this.parent.getContent().firstElementChild.querySelectorAll('tr:not(.e-row)'));\n      var captionCount = 0;\n      if (this.isInitialCollapse && !isNullOrUndefined(captionRows)) {\n        captionCount = Math.round((captionRows.length - 1) / this.parent.groupSettings.columns.length);\n      }\n      var value = captionCount ? captionCount : this.parent.pageSettings.pageSize * (this.parent.infiniteScrollSettings.maxBlocks - 1);\n      var currentViewRowCount = 0;\n      var i = 0;\n      while (currentViewRowCount < scrollCnt.clientHeight) {\n        i++;\n        currentViewRowCount = i * this.parent.getRowHeight();\n      }\n      i = i - 1;\n      top += (value - i) * this.parent.getRowHeight();\n    }\n    if (args.direction === 'up') {\n      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n        var len = this.refreshInfiniteCacheRowVisibleLength(this.infiniteCache, this.parent.pageSettings.currentPage);\n        top = len * this.parent.getRowHeight();\n      } else if (this.isInitialCollapse) {\n        var groupedData = this.infiniteCache[this.parent.pageSettings.currentPage];\n        var count = 0;\n        for (var i = 0; i < groupedData.length; i++) {\n          if (groupedData[parseInt(i.toString(), 10)].isCaptionRow) {\n            count++;\n          }\n        }\n        top += Math.round(count / this.parent.groupSettings.columns.length) * this.parent.getRowHeight();\n      } else {\n        top += this.parent.pageSettings.pageSize * this.parent.getRowHeight() + getScrollBarWidth();\n      }\n    }\n    return top;\n  };\n  InfiniteScroll.prototype.captionRowHeight = function () {\n    var rows = [].slice.call(this.parent.getContent().querySelectorAll('tr:not(.e-row)'));\n    return rows.length * this.parent.getRowHeight();\n  };\n  InfiniteScroll.prototype.removeTopRows = function (rows, maxIndx) {\n    for (var i = 0; i <= maxIndx; i++) {\n      if (this.parent.frozenRows && this.parent.pageSettings.currentPage === this.parent.infiniteScrollSettings.maxBlocks + 1 && i > maxIndx - this.parent.frozenRows) {\n        continue;\n      }\n      remove(rows[parseInt(i.toString(), 10)]);\n    }\n  };\n  InfiniteScroll.prototype.removeBottomRows = function (rows, maxIndx, args) {\n    var cnt = 0;\n    var pageSize = this.parent.pageSettings.pageSize;\n    if (this.infiniteCache[args.prevPage].length < pageSize) {\n      cnt = this.parent.pageSettings.pageSize - this.infiniteCache[args.prevPage].length;\n    }\n    for (var i = maxIndx; cnt < pageSize; i--) {\n      cnt++;\n      remove(rows[parseInt(i.toString(), 10)]);\n    }\n  };\n  InfiniteScroll.prototype.removeCaptionRows = function (rows, args) {\n    var rowElements = [].slice.call(this.parent.getContent().getElementsByClassName(literals.row));\n    if (args.direction === 'down') {\n      var lastRow = rowElements[this.parent.pageSettings.pageSize - 1];\n      var lastRowIndex = getRowIndexFromElement(lastRow) - 1;\n      var k = 0;\n      for (var i = 0; k < lastRowIndex; i++) {\n        if (!rows[parseInt(i.toString(), 10)].classList.contains(literals.row)) {\n          remove(rows[parseInt(i.toString(), 10)]);\n        } else {\n          k = getRowIndexFromElement(rows[parseInt(i.toString(), 10)]);\n        }\n      }\n    }\n    if (args.direction === 'up') {\n      var lastIndex = getRowIndexFromElement(rowElements[rowElements.length - 1]);\n      var page = Math.ceil(lastIndex / this.parent.pageSettings.pageSize);\n      var startIndex = 0;\n      for (var i = this.parent.pageSettings.currentPage + 1; i < page; i++) {\n        startIndex += this.infiniteCache[parseInt(i.toString(), 10)].length;\n      }\n      for (var i = startIndex; i < rows.length; i++) {\n        remove(rows[parseInt(i.toString(), 10)]);\n      }\n    }\n  };\n  InfiniteScroll.prototype.resetInfiniteBlocks = function (args, isDataModified) {\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && args.requestType !== 'infiniteScroll';\n    if (!this.initialRender && !isNullOrUndefined(this.parent.infiniteScrollModule) && isInfiniteScroll) {\n      if (this.actions.some(function (value) {\n        return value === args.requestType;\n      }) || isDataModified || args.requestType === 'save' && (this.parent.sortSettings.columns.length || this.parent.filterSettings.columns.length || this.parent.groupSettings.columns.length || this.parent.searchSettings.key)) {\n        var scrollEle = this.parent.getContent().firstElementChild;\n        this.initialRender = true;\n        scrollEle.scrollTop = 0;\n        this.parent.pageSettings.currentPage = 1;\n        this.infiniteCache = {};\n        this.infiniteCurrentViewData = {};\n        this.resetContentModuleCache({});\n        this.isRemove = false;\n        this.top = 0;\n        this.isInitialCollapse = false;\n        this.parent.contentModule.isRemove = this.isRemove;\n        this.parent.contentModule.isAddRows = this.isRemove;\n        this.parent.contentModule.visibleRows = [];\n        this.parent.contentModule.visibleFrozenRows = [];\n      }\n    }\n  };\n  InfiniteScroll.prototype.setCache = function (e) {\n    if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {\n      var isEdit = e.args.requestType !== 'infiniteScroll' && (this.requestType === 'delete' || this.requestType === 'add');\n      var currentPage = this.parent.pageSettings.currentPage;\n      if (!Object.keys(this.infiniteCache).length || isEdit) {\n        this.setInitialCache(e.modelData, e.args, isEdit);\n      }\n      if (isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage])) {\n        this.infiniteCache[this.parent.pageSettings.currentPage] = e.modelData;\n        this.resetContentModuleCache(this.infiniteCache);\n      }\n      if (e.isInfiniteScroll && !this.isRemove) {\n        this.isRemove = (currentPage - 1) % this.parent.infiniteScrollSettings.maxBlocks === 0;\n        this.parent.contentModule.isRemove = this.isRemove;\n      }\n    }\n  };\n  InfiniteScroll.prototype.setInitialCache = function (data, args, isEdit, isCurrentViewData) {\n    var k = !isEdit ? 1 : isNullOrUndefined(this.firstBlock) ? 1 : this.firstBlock;\n    for (var i = 1; i <= this.parent.infiniteScrollSettings.initialBlocks; i++) {\n      var startIndex = (i - 1) * this.parent.pageSettings.pageSize;\n      var endIndex = i * this.parent.pageSettings.pageSize;\n      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !isCurrentViewData) {\n        this.setInitialGroupCache(data, k, startIndex, endIndex);\n      } else {\n        if (isCurrentViewData) {\n          this.infiniteCurrentViewData[parseInt(k.toString(), 10)] = data.slice(startIndex, endIndex);\n        } else {\n          this.infiniteCache[parseInt(k.toString(), 10)] = data.slice(startIndex, endIndex);\n          this.resetContentModuleCache(this.infiniteCache);\n        }\n      }\n      k++;\n    }\n  };\n  InfiniteScroll.prototype.setInitialGroupCache = function (data, index, sIndex, eIndex) {\n    var pageData = [];\n    var startIndex = 0;\n    for (var i = 1; i <= Object.keys(this.infiniteCache).length; i++) {\n      startIndex += this.infiniteCache[parseInt(i.toString(), 10)].length;\n    }\n    var k = sIndex;\n    for (var i = startIndex; i < data.length && k < eIndex; i++) {\n      if (data[parseInt(i.toString(), 10)].index < eIndex || data[parseInt(i.toString(), 10)].isCaptionRow) {\n        k = data[parseInt(i.toString(), 10)].isCaptionRow ? k : data[parseInt(i.toString(), 10)].index;\n        pageData.push(data[parseInt(i.toString(), 10)]);\n      }\n      if (data[parseInt(i.toString(), 10)].index >= eIndex || data[parseInt(i.toString(), 10)].index === eIndex - 1) {\n        break;\n      }\n    }\n    this.infiniteCache[parseInt(index.toString(), 10)] = pageData;\n    this.resetContentModuleCache(this.infiniteCache);\n  };\n  InfiniteScroll.prototype.resetContentModuleCache = function (data) {\n    this.parent.contentModule.infiniteCache = data;\n  };\n  /**\n   * @returns {void}\n   * @hidden\n   */\n  InfiniteScroll.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n  return InfiniteScroll;\n}();\nexport { InfiniteScroll };","map":{"version":3,"names":["isNullOrUndefined","remove","extend","RowModelGenerator","RowRenderer","events","getScrollBarWidth","getEditedDataIndex","resetRowIndex","setRowElements","getRowIndexFromElement","getGroupKeysAndFields","getPredicates","generateExpandPredicates","literals","InfiniteScroll","parent","serviceLocator","infiniteCache","infiniteCurrentViewData","isDownScroll","isUpScroll","isScroll","enableContinuousScroll","initialRender","isRemove","isInitialCollapse","prevScrollTop","actions","keys","downArrow","upArrow","enter","shiftEnter","rowTop","virtualInfiniteData","isCancel","emptyRowData","isNormaledit","isInfiniteScroll","isLastPage","isInitialRender","isFocusScroll","isGroupCollapse","editSettings","mode","addEventListener","widthService","getService","rowModelGenerator","prototype","getModuleName","on","dataReady","onDataReady","dataSourceModified","infinitePageQuery","infiniteScrollHandler","beforeCellFocused","infiniteCellFocus","appendInfiniteContent","appendInfiniteRows","removeInfiniteRows","removeInfiniteCacheRows","resetInfiniteBlocks","setInfiniteCache","setCache","initialCollapse","ensureIntialCollapse","keyPressed","infiniteShowHide","setDisplayNone","virtualScrollEditActionBegin","editActionBegin","getVirtualData","getVirtualInfiniteData","editReset","resetInfiniteEdit","virtualScrollEditSuccess","infiniteEditSuccess","refreshVirtualCache","refreshInfiniteCache","refreshInfiniteEditrowindex","infiniteEditHandler","virtualScrollAddActionBegin","infiniteAddActionBegin","modelChanged","refreshInfiniteCurrentViewData","destroy","contentReady","selectNewRow","captionActionComplete","setVirtualPageQuery","setGroupCollapsePageQuery","actionBeginFunction","actionBegin","bind","actionCompleteFunction","actionComplete","dataBoundFunction","dataBound","removeEventListener","isDestroyed","off","groupCaptionAction","makeGroupCollapseRequest","hideSpinner","empty","args","gObj","infiniteScrollSettings","enableCache","skipPage","captionRow","getRowObjectFromUID","parentCapUid","rowObjs","getRowsObject","childCount","i","length","parseInt","toString","indent","isDataRow","key","indexOf","pred","fields","predicateList","and","query","where","skip","rows","getRows","size","pageSettings","pageSize","additionalCnt","take","initialBlocks","isCollapse","contetRect","getContent","firstElementChild","getBoundingClientRect","tableReact","contentModule","getTable","Math","round","bottom","getRowHeight","parentUid","showSpinner","caption","getCaptionChildCount","captionRows","slice","call","getContentTable","querySelectorAll","groupSettings","enableLazyLoading","index","prevPage","currentPage","nextPage","ceil","maxPage","scrollArg","requestType","startIndex","direction","isCaptionCollapse","notify","rowObj","make","data","isCaptionRow","childCheck","row","uid","count","updateCurrentViewData","columns","Object","currentViewData","page","isCache","blocks","maxBlocks","isMiddlePage","start","end","concat","e","action","cache","isAdd","sortSettings","filterSettings","searchSettings","isDelete","indexCount","resetCurrentViewData","splice","push","setInitialCache","lastViewData","pop","addRowIndex","firstIndex","firstBlock","lastIndex","createEmptyRowdata","startEdit","makeRequest","rowElms","ensureRowAvailability","result","createRow","selectionModule","frozenRows","refreshInfinitePersistSelection","deleteComplete","saveComplete","freezeRender","case","isMovable","isFrozenRows","isFrozenRight","generateRows","rowRenderer","removeMaskRow","tbody","querySelector","getHeaderContent","notifyArgs","cancel","infiniteCrudCancel","appendChild","render","getColumns","insertBefore","rowElems","visibleRows","resume","getPrimaryKeyFieldNames","isFrozen","_this","keyField","swapCurrentViewData","filter","resetInfiniteCurrentViewData","pageIndex","cells","visible","resetContentModuleCache","getEditedRowObject","refreshInfiniteCacheRowVisibleLength","cPageRowArray","enableInfiniteScrolling","length_1","vRowLen","hRowLen","editRowIndex","rowObjects","editedrow","updateCurrentViewRecords","getCurrentViewRecords","isFrozenGrid","isEdit","editModule","previousVirtualData","allowEditing","allowAdding","closeEdit","getVirtualInfiniteEditedData","virtualData","rowObject","isExpand","restoreInfiniteEdit","restoreInfiniteAdd","targetEle","target","isInfinite","classList","contains","content","isLeft","scrollEle","scrollTop","offset","scrollHeight","floor","clientHeight","isBottom","rows_1","rowIndex","getElementsByClassName","top","initBlocks","setTimeout","refreshInfiniteModeBlocks","intialPageQuery","editPageQuery","clearSelection","getDataModule","dataManager","dataSource","url","scrollToLastFocusedCell","rowIdx","lastFocusInfo","keyArgs","cellIdx","getRowByIndex","cols","createElement","attrs","focusRows","k","j","focusModule","onClick","selectRow","focus","setLastCellFocusInfo","cell","byClick","clickArgs","byKey","getAttribute","parentElement","document","activeElement","cellIndex","dataColIndex","totalRowsCount","visibleRowCount","offsetHeight","contentRect","isNaN","rowRect","pressedKey","scrollIntoView","field","editForm","element","editedRow","addForm","addedRow","gridForm","rowData","getCurrentEditedData","hiddenColumn","getHiddenColumns","defaultValue","frozenEdit","top_1","isTop","addRecord","isAngular","isReact","isVue","isVue3","isChildGrid","childGrid","getDataRows","refreshReactTemplateTD","frag","scrollModule","setHeight","some","value","rowHeight","pageDown","pageUp","idx","getCellFromIndex","preventScroll","undefined","allowGrouping","removeCaptionRows","addRowCount","removeTopRows","removeBottomRows","calculateScrollTop","scrollCnt","captionRowHeight","captionCount","currentViewRowCount","len","groupedData","maxIndx","cnt","rowElements","lastRow","lastRowIndex","isDataModified","infiniteScrollModule","isAddRows","visibleFrozenRows","modelData","isCurrentViewData","endIndex","setInitialGroupCache","sIndex","eIndex","pageData"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-grids/src/grid/actions/infinite-scroll.js"],"sourcesContent":["import { isNullOrUndefined, remove, extend } from '@syncfusion/ej2-base';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { RowRenderer } from '../renderer/row-renderer';\nimport * as events from '../base/constant';\nimport { getScrollBarWidth, getEditedDataIndex, resetRowIndex, setRowElements, getRowIndexFromElement, getGroupKeysAndFields, getPredicates, generateExpandPredicates } from '../base/util';\nimport * as literals from '../base/string-literals';\n/**\n * Infinite Scrolling class\n *\n * @hidden\n */\nvar InfiniteScroll = /** @class */ (function () {\n    /**\n     * Constructor for the Grid infinite scrolling.\n     *\n     * @param {IGrid} parent - specifies the IGrid\n     * @param {ServiceLocator} serviceLocator - specifies the ServiceLocator\n     * @hidden\n     */\n    function InfiniteScroll(parent, serviceLocator) {\n        this.infiniteCache = {};\n        this.infiniteCurrentViewData = {};\n        this.isDownScroll = false;\n        this.isUpScroll = false;\n        this.isScroll = true;\n        this.enableContinuousScroll = false;\n        this.initialRender = true;\n        this.isRemove = false;\n        this.isInitialCollapse = false;\n        this.prevScrollTop = 0;\n        this.actions = ['filtering', 'searching', 'grouping', 'ungrouping', 'reorder', 'sorting', 'refresh'];\n        this.keys = [literals.downArrow, literals.upArrow, literals.enter, literals.shiftEnter];\n        this.rowTop = 0;\n        this.virtualInfiniteData = {};\n        this.isCancel = false;\n        this.emptyRowData = {};\n        this.isNormaledit = false;\n        this.isInfiniteScroll = false;\n        this.isLastPage = false;\n        this.isInitialRender = true;\n        this.isFocusScroll = false;\n        this.isGroupCollapse = false;\n        this.parent = parent;\n        this.serviceLocator = serviceLocator;\n        this.isNormaledit = this.parent.editSettings.mode === 'Normal';\n        this.addEventListener();\n        this.widthService = serviceLocator.getService('widthService');\n        this.rowModelGenerator = new RowModelGenerator(this.parent);\n    }\n    InfiniteScroll.prototype.getModuleName = function () {\n        return 'infiniteScroll';\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    InfiniteScroll.prototype.addEventListener = function () {\n        this.parent.on(events.dataReady, this.onDataReady, this);\n        this.parent.on(events.dataSourceModified, this.dataSourceModified, this);\n        this.parent.on(events.infinitePageQuery, this.infinitePageQuery, this);\n        this.parent.on(events.infiniteScrollHandler, this.infiniteScrollHandler, this);\n        this.parent.on(events.beforeCellFocused, this.infiniteCellFocus, this);\n        this.parent.on(events.appendInfiniteContent, this.appendInfiniteRows, this);\n        this.parent.on(events.removeInfiniteRows, this.removeInfiniteCacheRows, this);\n        this.parent.on(events.resetInfiniteBlocks, this.resetInfiniteBlocks, this);\n        this.parent.on(events.setInfiniteCache, this.setCache, this);\n        this.parent.on(events.initialCollapse, this.ensureIntialCollapse, this);\n        this.parent.on(events.keyPressed, this.infiniteCellFocus, this);\n        this.parent.on(events.infiniteShowHide, this.setDisplayNone, this);\n        this.parent.on(events.virtualScrollEditActionBegin, this.editActionBegin, this);\n        this.parent.on(events.getVirtualData, this.getVirtualInfiniteData, this);\n        this.parent.on(events.editReset, this.resetInfiniteEdit, this);\n        this.parent.on(events.virtualScrollEditSuccess, this.infiniteEditSuccess, this);\n        this.parent.on(events.refreshVirtualCache, this.refreshInfiniteCache, this);\n        this.parent.on(events.refreshInfiniteEditrowindex, this.refreshInfiniteEditrowindex, this);\n        this.parent.on(events.infiniteEditHandler, this.infiniteEditHandler, this);\n        this.parent.on(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin, this);\n        this.parent.on(events.modelChanged, this.modelChanged, this);\n        this.parent.on(events.refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData, this);\n        this.parent.on(events.destroy, this.destroy, this);\n        this.parent.on(events.contentReady, this.selectNewRow, this);\n        this.parent.on(events.captionActionComplete, this.captionActionComplete, this);\n        this.parent.on(events.setVirtualPageQuery, this.setGroupCollapsePageQuery, this);\n        this.actionBeginFunction = this.actionBegin.bind(this);\n        this.actionCompleteFunction = this.actionComplete.bind(this);\n        this.dataBoundFunction = this.dataBound.bind(this);\n        this.parent.addEventListener(events.actionBegin, this.actionBeginFunction);\n        this.parent.addEventListener(events.actionComplete, this.actionCompleteFunction);\n        this.parent.addEventListener(events.dataBound, this.dataBoundFunction);\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    InfiniteScroll.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.dataReady, this.onDataReady);\n        this.parent.off(events.dataSourceModified, this.dataSourceModified);\n        this.parent.off(events.infinitePageQuery, this.infinitePageQuery);\n        this.parent.off(events.infiniteScrollHandler, this.infiniteScrollHandler);\n        this.parent.off(events.beforeCellFocused, this.infiniteCellFocus);\n        this.parent.off(events.appendInfiniteContent, this.appendInfiniteRows);\n        this.parent.off(events.removeInfiniteRows, this.removeInfiniteCacheRows);\n        this.parent.off(events.resetInfiniteBlocks, this.resetInfiniteBlocks);\n        this.parent.off(events.setInfiniteCache, this.setCache);\n        this.parent.off(events.initialCollapse, this.ensureIntialCollapse);\n        this.parent.off(events.keyPressed, this.infiniteCellFocus);\n        this.parent.off(events.infiniteShowHide, this.setDisplayNone);\n        this.parent.off(events.virtualScrollEditActionBegin, this.editActionBegin);\n        this.parent.off(events.getVirtualData, this.getVirtualInfiniteData);\n        this.parent.off(events.editReset, this.resetInfiniteEdit);\n        this.parent.off(events.virtualScrollEditSuccess, this.infiniteEditSuccess);\n        this.parent.off(events.refreshVirtualCache, this.refreshInfiniteCache);\n        this.parent.on(events.refreshInfiniteEditrowindex, this.refreshInfiniteEditrowindex);\n        this.parent.off(events.infiniteEditHandler, this.infiniteEditHandler);\n        this.parent.off(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin);\n        this.parent.off(events.modelChanged, this.modelChanged);\n        this.parent.off(events.refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData);\n        this.parent.off(events.destroy, this.destroy);\n        this.parent.off(events.contentReady, this.selectNewRow);\n        this.parent.off(events.captionActionComplete, this.captionActionComplete);\n        this.parent.off(events.setVirtualPageQuery, this.setGroupCollapsePageQuery);\n        this.parent.removeEventListener(events.actionBegin, this.actionBeginFunction);\n        this.parent.removeEventListener(events.actionComplete, this.actionCompleteFunction);\n        this.parent.removeEventListener(events.dataBound, this.dataBoundFunction);\n    };\n    InfiniteScroll.prototype.dataBound = function () {\n        if (this.groupCaptionAction === 'collapse') {\n            this.groupCaptionAction = 'refresh';\n            this.makeGroupCollapseRequest();\n        }\n        else if (this.groupCaptionAction === 'refresh') {\n            this.parent.hideSpinner();\n            this.groupCaptionAction = this.empty;\n        }\n    };\n    InfiniteScroll.prototype.setGroupCollapsePageQuery = function (args) {\n        var gObj = this.parent;\n        if (!gObj.infiniteScrollSettings.enableCache && this.isGroupCollapse) {\n            args.skipPage = true;\n            this.isGroupCollapse = false;\n            if (this.groupCaptionAction === 'collapse') {\n                var captionRow = gObj.getRowObjectFromUID(this.parentCapUid);\n                var rowObjs = gObj.getRowsObject();\n                var childCount = 0;\n                for (var i = rowObjs.length - 1; i >= 0; i--) {\n                    if (rowObjs[parseInt(i.toString(), 10)].indent === captionRow.indent) {\n                        break;\n                    }\n                    if (rowObjs[parseInt(i.toString(), 10)].isDataRow) {\n                        childCount++;\n                    }\n                }\n                var key = getGroupKeysAndFields(rowObjs.indexOf(captionRow), rowObjs);\n                var pred = generateExpandPredicates(key.fields, key.keys, this);\n                var predicateList = getPredicates(pred);\n                pred = predicateList[predicateList.length - 1];\n                for (var i = predicateList.length - 2; i >= 0; i--) {\n                    pred = pred.and(predicateList[parseInt(i.toString(), 10)]);\n                }\n                args.query.where(pred);\n                args.query.skip(childCount);\n                this.parentCapUid = this.empty;\n            }\n            else {\n                var rows = gObj.getRows();\n                var size = gObj.pageSettings.pageSize;\n                var skip = getRowIndexFromElement(rows[rows.length - 1]) + 1;\n                var additionalCnt = ((skip - (skip % size)) + size) - skip;\n                if ((skip % size) === 0) {\n                    additionalCnt = 0;\n                }\n                args.query.skip(skip);\n                args.query.take((gObj.infiniteScrollSettings.initialBlocks * gObj.pageSettings.pageSize) + additionalCnt);\n            }\n        }\n    };\n    InfiniteScroll.prototype.captionActionComplete = function (args) {\n        var gObj = this.parent;\n        if (!gObj.infiniteScrollSettings.enableCache && args.isCollapse) {\n            var contetRect = gObj.getContent().firstElementChild.getBoundingClientRect();\n            var tableReact = gObj.contentModule.getTable().getBoundingClientRect();\n            if (Math.round(tableReact.bottom - gObj.getRowHeight()) <= Math.round(contetRect.bottom)) {\n                this.parentCapUid = args.parentUid;\n                this.groupCaptionAction = 'collapse';\n                gObj.showSpinner();\n                var caption = gObj.getRowObjectFromUID(args.parentUid);\n                var childCount = this.getCaptionChildCount(caption);\n                if (!childCount) {\n                    this.groupCaptionAction = 'refresh';\n                    this.makeGroupCollapseRequest();\n                }\n                else {\n                    this.makeGroupCollapseRequest(args.parentUid);\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.makeGroupCollapseRequest = function (parentUid) {\n        var gObj = this.parent;\n        var captionRows = [].slice.call(gObj.getContentTable().querySelectorAll('tr'));\n        var rows = gObj.groupSettings.enableLazyLoading ? captionRows : gObj.getRows();\n        var index = !gObj.groupSettings.enableLazyLoading ? getRowIndexFromElement(rows[rows.length - 1]) :\n            gObj.contentModule['visibleRows'].length - 1;\n        var prevPage = this.parent.pageSettings.currentPage;\n        var nextPage = Math.ceil(index / this.parent.pageSettings.pageSize) + 1;\n        if ((prevPage >= this.maxPage) || (nextPage > this.maxPage)) {\n            gObj.hideSpinner();\n            return;\n        }\n        this.parent.pageSettings.currentPage = nextPage;\n        var scrollArg = {\n            requestType: 'infiniteScroll',\n            currentPage: this.parent.pageSettings.currentPage,\n            prevPage: prevPage,\n            startIndex: index + 1,\n            direction: 'down',\n            isCaptionCollapse: true,\n            parentUid: parentUid\n        };\n        this.isGroupCollapse = true;\n        this.parent.notify('model-changed', scrollArg);\n    };\n    InfiniteScroll.prototype.getCaptionChildCount = function (caption) {\n        var rowObj = this.parent.getRowsObject();\n        var index = rowObj.indexOf(caption);\n        var make = false;\n        for (var i = index; i < rowObj.length; i++) {\n            if ((rowObj[parseInt(i.toString(), 10)].indent === caption.indent || rowObj[parseInt(i.toString(), 10)].indent < caption.indent)\n                && rowObj[parseInt(i.toString(), 10)].data.key !== caption.data.key) {\n                break;\n            }\n            if (rowObj[parseInt(i.toString(), 10)].isCaptionRow && !this.childCheck(rowObj, rowObj[parseInt(i.toString(), 10)], i)) {\n                make = true;\n                break;\n            }\n        }\n        return make;\n    };\n    InfiniteScroll.prototype.childCheck = function (rowObj, row, index) {\n        var childCount = 0;\n        for (var i = index + 1; i < rowObj.length; i++) {\n            if (rowObj[parseInt(i.toString(), 10)].indent === row.indent) {\n                break;\n            }\n            if (rowObj[parseInt(i.toString(), 10)].indent === (row.indent + 1)\n                && rowObj[parseInt(i.toString(), 10)].parentUid === row.uid) {\n                childCount++;\n            }\n        }\n        return row.data.count === childCount;\n    };\n    InfiniteScroll.prototype.updateCurrentViewData = function () {\n        var gObj = this.parent;\n        if (gObj.groupSettings.columns.length) {\n            return;\n        }\n        var keys = Object.keys(this.infiniteCurrentViewData);\n        gObj.currentViewData = [];\n        var page = gObj.pageSettings.currentPage;\n        var isCache = gObj.infiniteScrollSettings.enableCache;\n        var blocks = gObj.infiniteScrollSettings.maxBlocks;\n        var isMiddlePage = isCache && (page > blocks || (this.isUpScroll && page > 1));\n        var start = isMiddlePage ? this.isUpScroll ? page : (page - blocks) + 1 : 1;\n        var end = isMiddlePage ? (start + blocks) - 1 : isCache ? blocks : keys.length;\n        for (var i = start; i <= end; i++) {\n            if (this.infiniteCurrentViewData[parseInt(i.toString(), 10)]) {\n                gObj.currentViewData = gObj.currentViewData.concat(this.infiniteCurrentViewData[parseInt(i.toString(), 10)]);\n            }\n        }\n    };\n    InfiniteScroll.prototype.refreshInfiniteCurrentViewData = function (e) {\n        if (e.args.action === 'add' && e.args.requestType === 'save') {\n            this.parent.pageSettings.currentPage = Math.ceil(e.args['index'] / this.parent.pageSettings.pageSize) ?\n                Math.ceil(e.args['index'] / this.parent.pageSettings.pageSize) : 1;\n        }\n        var page = this.parent.pageSettings.currentPage;\n        var size = this.parent.pageSettings.pageSize;\n        var blocks = this.parent.infiniteScrollSettings.initialBlocks;\n        var keys = Object.keys(this.infiniteCurrentViewData);\n        var cache = this.parent.infiniteScrollSettings.enableCache;\n        if (!this.parent.groupSettings.columns.length) {\n            var isAdd = e.args.requestType === 'save' && !(this.parent.sortSettings.columns.length\n                || this.parent.filterSettings.columns.length || this.parent.groupSettings.columns.length\n                || this.parent.searchSettings.key);\n            var isDelete = e.args.requestType === 'delete';\n            if (!cache && (isAdd || isDelete)) {\n                if (isAdd) {\n                    var indexCount = 0;\n                    for (var i = 1; i <= keys.length; i++) {\n                        indexCount += this.infiniteCurrentViewData[parseInt(i.toString(), 10)].length - 1;\n                        if (e.args.index <= indexCount) {\n                            this.resetCurrentViewData(i);\n                            this.infiniteCurrentViewData[parseInt(i.toString(), 10)]\n                                .splice(e.args.index, 0, e.args.data);\n                            break;\n                        }\n                    }\n                }\n                else {\n                    this.infiniteCurrentViewData[keys[keys.length - 1]].push(e.data[0]);\n                }\n            }\n            else {\n                if (blocks > 1 && e.data.length === (blocks * size)) {\n                    this.setInitialCache(e.data.slice(), {}, cache && e.args.requestType === 'delete', true);\n                }\n                else {\n                    this.infiniteCurrentViewData[parseInt(page.toString(), 10)] = e.data.slice();\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.resetCurrentViewData = function (startIndex) {\n        var keys = Object.keys(this.infiniteCurrentViewData);\n        for (var i = startIndex; i <= keys.length; i++) {\n            var lastViewData = this.infiniteCurrentViewData[parseInt(i.toString(), 10)][this\n                .infiniteCurrentViewData[parseInt(i.toString(), 10)].length - 1];\n            if (this.infiniteCurrentViewData[i + 1]) {\n                this.infiniteCurrentViewData[i + 1].splice(0, 0, lastViewData);\n            }\n            this.infiniteCurrentViewData[parseInt(i.toString(), 10)].pop();\n        }\n    };\n    InfiniteScroll.prototype.modelChanged = function (args) {\n        var rows = this.parent.getRows();\n        if (args.requestType === 'save' && args.index && args.data) {\n            this.addRowIndex = args.index;\n        }\n        if (rows && rows.length && args.requestType !== 'infiniteScroll' && (args.requestType === 'delete' || this.requestType === 'add')) {\n            this.firstIndex = getRowIndexFromElement(rows[0]);\n            this.firstBlock = Math.ceil((this.firstIndex + 1) / this.parent.pageSettings.pageSize);\n            this.lastIndex = getRowIndexFromElement(rows[rows.length - 1]);\n            if (args.requestType === 'delete') {\n                var rowObj = this.parent.getRowsObject();\n                args.startIndex = this.parent.infiniteScrollSettings.enableCache\n                    ? (this.firstBlock - 1) * this.parent.pageSettings.pageSize : rowObj[rowObj.length - 1].index;\n            }\n            else {\n                args.startIndex = this.firstIndex;\n            }\n            if (!this.parent.infiniteScrollSettings.enableCache\n                && this.parent.pageSettings.currentPage === this.maxPage && args.requestType === 'delete') {\n                this.isLastPage = true;\n                this.lastIndex = this.lastIndex - 1;\n            }\n        }\n    };\n    InfiniteScroll.prototype.infiniteAddActionBegin = function (args) {\n        if (this.isNormaledit) {\n            this.isAdd = true;\n            if (this.parent.infiniteScrollSettings.enableCache) {\n                if (!Object.keys(this.emptyRowData).length) {\n                    this.createEmptyRowdata();\n                }\n                if (this.parent.pageSettings.currentPage > 1) {\n                    args.startEdit = false;\n                    this.resetInfiniteBlocks({}, true);\n                    this.makeRequest({ currentPage: 1 });\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.infiniteEditHandler = function (args) {\n        if (!this.parent.infiniteScrollSettings.enableCache && (args.e.requestType === 'delete'\n            || (args.e.requestType === 'save' && this.requestType === 'add'))) {\n            var rowElms = this.parent.getRows();\n            var rows = this.parent.getRowsObject();\n            if (this.ensureRowAvailability(rows, args.result[0])) {\n                if (rowElms.length && !(this.addRowIndex && this.addRowIndex >= rowElms.length)) {\n                    this.resetRowIndex(rows, args.e, rowElms, this.requestType === 'add', true);\n                }\n                if (!this.isLastPage) {\n                    this.createRow(rows, args);\n                }\n                else {\n                    this.isLastPage = false;\n                    this.parent.pageSettings.currentPage = this.maxPage;\n                    if (this.parent.selectionModule.index < this.parent.frozenRows) {\n                        remove(rowElms[this.parent.frozenRows - 1]);\n                        this.createRow([rows[this.parent.frozenRows - 1]], args, false, true);\n                        setRowElements(this.parent);\n                    }\n                }\n            }\n            this.parent.hideSpinner();\n            this.parent.notify(events.refreshInfinitePersistSelection, {});\n            if (this.requestType === 'delete') {\n                this.parent.notify(events.deleteComplete, args.e);\n            }\n            else {\n                this.parent.notify(events.saveComplete, args.e);\n            }\n        }\n        this.parent.notify(events.freezeRender, { case: 'refreshHeight' });\n    };\n    InfiniteScroll.prototype.createRow = function (rows, args, isMovable, isFrozenRows, isFrozenRight) {\n        var row = !isFrozenRows ? this.generateRows(args.result, args.e) : rows;\n        var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n        this.parent.removeMaskRow();\n        if (args.e.requestType === 'save' && args.e.index && args.e.data) {\n            row[0].index = this.addRowIndex;\n            this.addRowIndex = null;\n            if (row[0].index >= rows.length) {\n                return;\n            }\n        }\n        var tbody;\n        tbody = this.parent.getContent().querySelector(literals.tbody);\n        if (this.parent.frozenRows) {\n            tbody = isFrozenRows && this.requestType !== 'add' || !isFrozenRows && this.requestType === 'add'\n                ? this.parent.getHeaderContent().querySelector(literals.tbody) : tbody;\n        }\n        var notifyArgs = {\n            rows: rows, cancel: false, args: args, isMovable: isMovable,\n            isFrozenRows: isFrozenRows, isFrozenRight: isFrozenRows, row: row\n        };\n        this.parent.notify(events.infiniteCrudCancel, notifyArgs);\n        if (!notifyArgs.cancel) {\n            for (var i = row.length - 1; i >= 0; i--) {\n                if (this.requestType === 'delete') {\n                    tbody.appendChild(rowRenderer.render(row[parseInt(i.toString(), 10)], this.parent.getColumns()));\n                }\n                else {\n                    tbody.insertBefore(rowRenderer.render(row[parseInt(i.toString(), 10)], this.parent.getColumns()), tbody.rows[(args.e.index)]);\n                }\n            }\n        }\n        if (!isFrozenRows && this.parent.frozenRows\n            && (this.parent.selectionModule.index < this.parent.frozenRows || this.requestType === 'add')) {\n            var rowElems = this.parent.getRows();\n            var index = (isMovable || isFrozenRight) && this.requestType === 'add'\n                ? this.parent.frozenRows : this.parent.frozenRows - 1;\n            remove(rowElems[parseInt(index.toString(), 10)]);\n            this.createRow([rows[this.parent.frozenRows - 1]], args, false, true, false);\n        }\n        if (!this.parent.infiniteScrollSettings.enableCache && !isFrozenRows) {\n            setRowElements(this.parent);\n            this.parent.contentModule.visibleRows = this.requestType === 'add'\n                ? row.concat(rows) : rows.concat(row);\n        }\n    };\n    InfiniteScroll.prototype.ensureRowAvailability = function (rows, data) {\n        var resume = true;\n        if (this.parent.frozenRows && !this.parent.infiniteScrollSettings.enableCache\n            && this.parent.sortSettings.columns && this.requestType === 'add') {\n            var key = this.parent.getPrimaryKeyFieldNames()[0];\n            for (var i = 0; i < rows.length; i++) {\n                if (rows[parseInt(i.toString(), 10)].data[\"\" + key] === data[\"\" + key]) {\n                    resume = false;\n                    break;\n                }\n            }\n        }\n        return resume;\n    };\n    InfiniteScroll.prototype.generateRows = function (data, args) {\n        return this.rowModelGenerator.generateRows(data, args);\n    };\n    InfiniteScroll.prototype.resetRowIndex = function (rows, args, rowElms, isAdd, isFrozen) {\n        var _this = this;\n        var keyField = this.parent.getPrimaryKeyFieldNames()[0];\n        var isRemove = !(rowElms.length % this.parent.pageSettings.pageSize);\n        if (isAdd) {\n            if (isRemove) {\n                if (isFrozen && !this.parent.groupSettings.columns.length) {\n                    this.swapCurrentViewData(1, true);\n                }\n                remove(rowElms[rows.length - 1]);\n                rowElms.splice(rows.length - 1, 1);\n                rows.splice(rows.length - 1, 1);\n            }\n        }\n        else {\n            rows.filter(function (e, index) {\n                if (e.data[\"\" + keyField] === args.data[0][\"\" + keyField]) {\n                    if (isFrozen && !_this.parent.groupSettings.columns.length) {\n                        var page = Math.ceil((index + 1) / _this.parent.pageSettings.pageSize);\n                        _this.resetInfiniteCurrentViewData(page, index);\n                    }\n                    rows.splice(index, 1);\n                    remove(rowElms[parseInt(index.toString(), 10)]);\n                    rowElms.splice(index, 1);\n                }\n            });\n        }\n        var startIndex = isAdd ? this.addRowIndex ? this.addRowIndex + 1 : 1 : 0;\n        resetRowIndex(this.parent, rows, rowElms, startIndex, this.addRowIndex ? this.addRowIndex : 0);\n    };\n    InfiniteScroll.prototype.resetInfiniteCurrentViewData = function (page, index) {\n        index = index - ((page - 1) * this.parent.pageSettings.pageSize);\n        this.infiniteCurrentViewData[parseInt(page.toString(), 10)].splice(index, 1);\n        this.swapCurrentViewData(page, false);\n    };\n    InfiniteScroll.prototype.swapCurrentViewData = function (page, isAdd) {\n        var keys = Object.keys(this.infiniteCurrentViewData);\n        var end = isAdd ? keys.length + 1 : keys.length;\n        for (var i = page; i < end; i++) {\n            if (this.infiniteCurrentViewData[i + 1]) {\n                var pageIndex = isAdd ? i : i + 1;\n                var index = isAdd ? this.infiniteCurrentViewData[parseInt(i.toString(), 10)].length - 1 : 0;\n                var data = this.infiniteCurrentViewData[parseInt(pageIndex.toString(), 10)].splice(index, 1);\n                if (isAdd) {\n                    this.infiniteCurrentViewData[i + 1] = data.concat(this.infiniteCurrentViewData[i + 1]);\n                    if ((i + 1) === end - 1) {\n                        this.infiniteCurrentViewData[i + 1].splice(this.infiniteCurrentViewData[i + 1].length - 1, 1);\n                    }\n                }\n                else {\n                    this.infiniteCurrentViewData[parseInt(i.toString(), 10)].push(data[0]);\n                }\n            }\n        }\n        this.updateCurrentViewData();\n    };\n    InfiniteScroll.prototype.setDisplayNone = function (args) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n            var keys = Object.keys(this.infiniteCache);\n            for (var i = 1; i <= keys.length; i++) {\n                var cache = this.infiniteCache[parseInt(i.toString(), 10)];\n                cache.filter(function (e) {\n                    e.cells[args.index].visible = args.visible === '';\n                });\n            }\n            this.resetContentModuleCache(this.infiniteCache);\n        }\n    };\n    InfiniteScroll.prototype.refreshInfiniteCache = function (args) {\n        this.getEditedRowObject().data = args.data;\n    };\n    InfiniteScroll.prototype.refreshInfiniteCacheRowVisibleLength = function (args, currentPage) {\n        var cPageRowArray = args[parseInt(currentPage.toString(), 10)];\n        if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {\n            var length_1 = 0;\n            var vRowLen = 0;\n            var hRowLen = 0;\n            for (var i = 0; i < cPageRowArray.length; i++) {\n                if (cPageRowArray[parseInt(i.toString(), 10)].visible\n                    || isNullOrUndefined(cPageRowArray[parseInt(i.toString(), 10)].visible)) {\n                    vRowLen++;\n                }\n                else {\n                    hRowLen++;\n                }\n            }\n            if (hRowLen > vRowLen) {\n                length_1 = hRowLen - vRowLen;\n                if (length_1 > vRowLen) {\n                    length_1 = vRowLen;\n                }\n            }\n            else {\n                length_1 = vRowLen - hRowLen;\n                if (length_1 > hRowLen) {\n                    length_1 = hRowLen;\n                }\n            }\n            if (length_1 === 0) {\n                length_1 = 1;\n            }\n            return length_1;\n        }\n        else {\n            return cPageRowArray.length;\n        }\n    };\n    InfiniteScroll.prototype.refreshInfiniteEditrowindex = function (args) {\n        this.editRowIndex = args.index;\n    };\n    InfiniteScroll.prototype.getEditedRowObject = function () {\n        var rowObjects = this.parent.getRowsObject();\n        var editedrow;\n        for (var i = 0; i < rowObjects.length; i++) {\n            if (rowObjects[parseInt(i.toString(), 10)].index === this.editRowIndex) {\n                editedrow = rowObjects[parseInt(i.toString(), 10)];\n            }\n        }\n        return editedrow;\n    };\n    InfiniteScroll.prototype.infiniteEditSuccess = function (args) {\n        if (this.isNormaledit) {\n            if (!this.isAdd && args.data) {\n                this.updateCurrentViewRecords(args.data);\n            }\n            this.isAdd = false;\n        }\n    };\n    InfiniteScroll.prototype.updateCurrentViewRecords = function (data) {\n        var index = getEditedDataIndex(this.parent, data);\n        if (!isNullOrUndefined(index)) {\n            this.parent.getCurrentViewRecords()[parseInt(index.toString(), 10)] = data;\n        }\n    };\n    InfiniteScroll.prototype.actionBegin = function (args) {\n        if (args.requestType === 'add' || args.requestType === 'delete') {\n            this.requestType = args.requestType;\n        }\n        else if (args.action === 'add' && args.requestType === 'save') {\n            this.requestType = args.action;\n        }\n        if (this.parent.isFrozenGrid() && !args.cancel && args.requestType === 'searching'\n            || args.requestType === 'sorting' || args.requestType === 'filtering') {\n            this.isInitialRender = true;\n        }\n    };\n    InfiniteScroll.prototype.actionComplete = function (args) {\n        if (args.requestType === 'delete' || args.requestType === 'save' || args.requestType === 'cancel') {\n            this.requestType = this.empty;\n            this.isCancel = args.requestType === 'cancel' || args.requestType === 'save';\n            this.isAdd = this.isEdit = false;\n            if (this.isNormaledit) {\n                this.editRowIndex = this.empty;\n                this.virtualInfiniteData = {};\n                this.parent.editModule.previousVirtualData = {};\n            }\n        }\n    };\n    InfiniteScroll.prototype.resetInfiniteEdit = function () {\n        if (this.parent.enableInfiniteScrolling && this.isNormaledit) {\n            if ((this.parent.editSettings.allowEditing && this.isEdit) || (this.parent.editSettings.allowAdding && this.isAdd)) {\n                this.parent.isEdit = true;\n            }\n        }\n    };\n    InfiniteScroll.prototype.getVirtualInfiniteData = function (data) {\n        if (this.parent.infiniteScrollSettings.enableCache && this.parent.isEdit && isNullOrUndefined(data['endEdit'])) {\n            this.parent.editModule.closeEdit();\n        }\n        else {\n            this.getVirtualInfiniteEditedData();\n            data.virtualData = this.virtualInfiniteData;\n            data.isAdd = this.isAdd;\n            data.isCancel = this.isCancel;\n        }\n    };\n    InfiniteScroll.prototype.editActionBegin = function (e) {\n        this.isEdit = true;\n        this.editRowIndex = e.index;\n        var rowObject = extend({}, this.getEditedRowObject().data);\n        e.data = Object.keys(this.virtualInfiniteData).length ? this.virtualInfiniteData : rowObject;\n    };\n    InfiniteScroll.prototype.dataSourceModified = function () {\n        this.resetInfiniteBlocks({ requestType: this.empty }, true);\n    };\n    InfiniteScroll.prototype.onDataReady = function (e) {\n        if (!isNullOrUndefined(e.count) && e.requestType !== 'infiniteScroll') {\n            this.maxPage = Math.ceil(e.count / this.parent.pageSettings.pageSize);\n        }\n    };\n    InfiniteScroll.prototype.ensureIntialCollapse = function (isExpand) {\n        this.isInitialCollapse = !isExpand;\n    };\n    InfiniteScroll.prototype.infiniteScrollHandler = function (e) {\n        this.restoreInfiniteEdit();\n        this.restoreInfiniteAdd();\n        var targetEle = e.target;\n        var isInfinite = targetEle.classList.contains(literals.content);\n        if (isInfinite && this.parent.enableInfiniteScrolling && !e.isLeft) {\n            var scrollEle = this.parent.getContent().firstElementChild;\n            var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n            this.prevScrollTop = scrollEle.scrollTop;\n            var rows = this.parent.groupSettings.enableLazyLoading ? captionRows : this.parent.getRows();\n            if (!rows.length) {\n                return;\n            }\n            var index = getRowIndexFromElement(rows[rows.length - 1]) + 1;\n            var prevPage = this.parent.pageSettings.currentPage;\n            var args = void 0;\n            var offset = targetEle.scrollHeight - targetEle.scrollTop;\n            var round = Math.round(targetEle.scrollHeight - targetEle.scrollTop);\n            var floor = offset < targetEle.clientHeight ? Math.ceil(offset) : Math.floor(offset);\n            if (floor > targetEle.clientHeight) {\n                floor = floor - 1;\n            }\n            var isBottom = (floor === targetEle.clientHeight || round === targetEle.clientHeight);\n            if (!isNullOrUndefined(this.groupCaptionAction)) {\n                return;\n            }\n            if (this.isScroll && isBottom && (this.parent.pageSettings.currentPage <= this.maxPage - 1 || this.enableContinuousScroll)) {\n                if (this.parent.infiniteScrollSettings.enableCache) {\n                    this.isUpScroll = false;\n                    this.isDownScroll = true;\n                }\n                var rows_1 = [].slice.call(scrollEle.querySelectorAll('.e-row:not(.e-addedrow)'));\n                var row = rows_1[rows_1.length - 1];\n                var rowIndex = !this.parent.groupSettings.enableLazyLoading ? getRowIndexFromElement(row) :\n                    this.parent.contentModule['visibleRows'].length - 1;\n                this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) + 1;\n                args = {\n                    requestType: 'infiniteScroll',\n                    currentPage: this.parent.pageSettings.currentPage,\n                    prevPage: prevPage,\n                    startIndex: index,\n                    direction: 'down'\n                };\n                this.makeRequest(args);\n            }\n            if (this.isScroll && this.parent.infiniteScrollSettings.enableCache && targetEle.scrollTop === 0\n                && this.parent.pageSettings.currentPage !== 1) {\n                if (this.parent.infiniteScrollSettings.enableCache) {\n                    this.isDownScroll = false;\n                    this.isUpScroll = true;\n                }\n                var row = [].slice.call(scrollEle.getElementsByClassName(literals.row));\n                var rowIndex = getRowIndexFromElement(row[this.parent.pageSettings.pageSize - 1]);\n                var startIndex = getRowIndexFromElement(row[0]) - this.parent.pageSettings.pageSize;\n                this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) - 1;\n                if (this.parent.pageSettings.currentPage) {\n                    args = {\n                        requestType: 'infiniteScroll',\n                        currentPage: this.parent.pageSettings.currentPage,\n                        prevPage: prevPage,\n                        startIndex: startIndex,\n                        direction: 'up'\n                    };\n                    this.makeRequest(args);\n                }\n            }\n            if (this.parent.infiniteScrollSettings.enableCache && !this.isScroll && isNullOrUndefined(args)) {\n                if (this.isDownScroll || this.isUpScroll) {\n                    scrollEle.scrollTop = this.top;\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.makeRequest = function (args) {\n        var _this = this;\n        if (this.parent.pageSettings.currentPage !== args.prevPage) {\n            var initBlocks = this.parent.infiniteScrollSettings.initialBlocks;\n            if (initBlocks < this.maxPage && this.parent.pageSettings.currentPage <= this.maxPage) {\n                this.isInfiniteScroll = true;\n                if (isNullOrUndefined(this.infiniteCache[args.currentPage])) {\n                    setTimeout(function () {\n                        _this.getVirtualInfiniteEditedData();\n                        _this.parent.notify('model-changed', args);\n                    }, 100);\n                }\n                else {\n                    setTimeout(function () {\n                        _this.getVirtualInfiniteEditedData();\n                        _this.parent.notify(events.refreshInfiniteModeBlocks, args);\n                    }, 100);\n                }\n            }\n            else {\n                this.parent.pageSettings.currentPage = this.maxPage;\n            }\n        }\n    };\n    InfiniteScroll.prototype.infinitePageQuery = function (query) {\n        if (this.initialRender) {\n            this.initialRender = false;\n            this.intialPageQuery(query);\n        }\n        else {\n            if ((this.requestType === 'delete' || this.requestType === 'add')) {\n                if (!this.isInfiniteScroll && !this.parent.groupSettings.enableLazyLoading) {\n                    this.editPageQuery(query);\n                }\n                else if (this.parent.groupSettings.enableLazyLoading && !this.parent.infiniteScrollSettings.enableCache) {\n                    if (this.parent.infiniteScrollSettings.initialBlocks < this.parent.pageSettings.currentPage) {\n                        query.page(1, this.parent.pageSettings.pageSize * this.parent.pageSettings.currentPage);\n                    }\n                    else {\n                        query.page(1, this.parent.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks);\n                    }\n                }\n                else {\n                    query.page(this.parent.pageSettings.currentPage, this.parent.pageSettings.pageSize);\n                }\n            }\n            else {\n                query.page(this.parent.pageSettings.currentPage, this.parent.pageSettings.pageSize);\n            }\n        }\n    };\n    InfiniteScroll.prototype.editPageQuery = function (query) {\n        var initialBlocks = this.parent.infiniteScrollSettings.initialBlocks;\n        var isCache = this.parent.infiniteScrollSettings.enableCache;\n        if (isCache) {\n            this.infiniteCache = {};\n            this.infiniteCurrentViewData = {};\n            query.skip(this.firstIndex);\n            query.take(initialBlocks * this.parent.pageSettings.pageSize);\n        }\n        else {\n            if (this.parent.editSettings.mode === 'Dialog') {\n                this.parent.clearSelection();\n            }\n            var index = this.requestType === 'delete' ? this.lastIndex : this.addRowIndex ? this.addRowIndex : this.firstIndex;\n            query.skip(index);\n            if (!isNullOrUndefined(this.parent.getDataModule().dataManager.dataSource.url) &&\n                this.parent.getDataModule().dataManager.dataSource.url !== '' && (this.requestType === 'delete' ||\n                this.requestType === 'add')) {\n                query.take(initialBlocks * this.parent.pageSettings.pageSize);\n            }\n            else {\n                query.take(1);\n            }\n        }\n    };\n    InfiniteScroll.prototype.intialPageQuery = function (query) {\n        if (this.parent.infiniteScrollSettings.enableCache\n            && this.parent.infiniteScrollSettings.initialBlocks > this.parent.infiniteScrollSettings.maxBlocks) {\n            this.parent.infiniteScrollSettings.initialBlocks = this.parent.infiniteScrollSettings.maxBlocks;\n        }\n        var pageSize = this.parent.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks;\n        query.page(1, pageSize);\n    };\n    InfiniteScroll.prototype.scrollToLastFocusedCell = function (e) {\n        var gObj = this.parent;\n        var rowIdx = this.lastFocusInfo.rowIdx + (e.keyArgs.action === literals.upArrow ? -1 : 1);\n        var cellIdx = this.lastFocusInfo.cellIdx;\n        var row = gObj.getRowByIndex(rowIdx);\n        if (!row) {\n            var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n            var page = Math.floor(rowIdx / this.parent.pageSettings.pageSize) + 1;\n            gObj.pageSettings.currentPage = page;\n            var cols = gObj.getColumns();\n            remove(gObj.getContent().querySelector('tbody'));\n            gObj.getContent().querySelector('table').appendChild(gObj.createElement('tbody', { attrs: { 'role': 'rowgroup' } }));\n            var focusRows = [];\n            // eslint-disable-next-line @typescript-eslint/tslint/config\n            for (var i = (page === 1 || this.maxPage === page) ? 0 : -1, k = 0; k < gObj.infiniteScrollSettings.maxBlocks; this.maxPage === page ? i-- : i++, k++) {\n                var rows = this.infiniteCache[page + i];\n                if (rows) {\n                    focusRows = focusRows.concat(rows);\n                    for (var j = 0; j < rows.length; j++) {\n                        gObj.getContent().querySelector('tbody').appendChild(rowRenderer.render(rows[parseInt(j.toString(), 10)], cols));\n                    }\n                }\n            }\n            gObj.notify(events.contentReady, { rows: focusRows, args: {} });\n            setRowElements(gObj);\n        }\n        row = gObj.getRowByIndex(rowIdx);\n        var target = row.cells[parseInt(cellIdx.toString(), 10)];\n        gObj.focusModule.isInfiniteScroll = true;\n        gObj.focusModule.onClick({ target: target }, true);\n        gObj.selectRow(rowIdx);\n        target.focus();\n        this.isFocusScroll = false;\n        e.cancel = true;\n    };\n    InfiniteScroll.prototype.setLastCellFocusInfo = function (e) {\n        var cell = ((e.byClick && e.clickArgs.target) || (e.byKey && e.keyArgs.target)\n            || (!this.isFocusScroll && e).target);\n        if (cell && cell.classList.contains('e-rowcell')) {\n            var cellIdx = parseInt(cell.getAttribute('data-colindex'), 10);\n            var rowIdx = parseInt(cell.parentElement.getAttribute('data-rowindex'), 10);\n            this.lastFocusInfo = { rowIdx: rowIdx, cellIdx: cellIdx };\n        }\n    };\n    InfiniteScroll.prototype.infiniteCellFocus = function (e) {\n        var gObj = this.parent;\n        var cache = gObj.infiniteScrollSettings.enableCache;\n        if (e.byKey) {\n            if (cache && this.isFocusScroll) {\n                this.scrollToLastFocusedCell(e);\n                return;\n            }\n            var cell = document.activeElement;\n            var rowIndex = getRowIndexFromElement(cell.parentElement);\n            this.cellIndex = parseInt(cell.getAttribute(literals.dataColIndex), 10);\n            var content = gObj.getContent().firstElementChild;\n            var totalRowsCount = (this.maxPage * gObj.pageSettings.pageSize) - 1;\n            var visibleRowCount = Math.floor(content.offsetHeight / this.parent.getRowHeight());\n            var contentRect = content.getBoundingClientRect();\n            if (!isNaN(rowIndex)) {\n                if (e.keyArgs.action === literals.downArrow || e.keyArgs.action === literals.enter) {\n                    this.rowIndex = rowIndex += 1;\n                    var row = gObj.getRowByIndex(rowIndex);\n                    var rowRect = row && row.getBoundingClientRect();\n                    if (cache) {\n                        rowIndex = cell.parentElement.rowIndex + 1;\n                    }\n                    if (this.isFocusScroll || (!row && rowIndex < totalRowsCount)\n                        || (rowRect && rowRect.bottom >= contentRect.bottom)) {\n                        if (!this.isFocusScroll) {\n                            this.pressedKey = e.keyArgs.action;\n                        }\n                        this.isFocusScroll = false;\n                        content.scrollTop = ((rowIndex - visibleRowCount) + 1) * this.parent.getRowHeight();\n                    }\n                    else if (!cache && row) {\n                        if (rowRect && (rowRect.bottom >= contentRect.bottom || rowRect.top < contentRect.top)) {\n                            row.cells[this.cellIndex].scrollIntoView();\n                        }\n                    }\n                }\n                else if (e.keyArgs.action === literals.upArrow || e.keyArgs.action === literals.shiftEnter) {\n                    this.rowIndex = rowIndex -= 1;\n                    var row = gObj.getRowByIndex(rowIndex);\n                    var rowRect = row && row.getBoundingClientRect();\n                    if (cache) {\n                        rowIndex = cell.parentElement.rowIndex - 1;\n                    }\n                    if (!row || rowRect.top <= contentRect.top) {\n                        this.pressedKey = e.keyArgs.action;\n                        content.scrollTop = rowIndex * this.parent.getRowHeight();\n                    }\n                }\n            }\n        }\n        else if (e.key === 'PageDown' || e.key === 'PageUp') {\n            this.pressedKey = e.key;\n        }\n        this.setLastCellFocusInfo(e);\n    };\n    InfiniteScroll.prototype.createEmptyRowdata = function () {\n        var _this = this;\n        this.parent.getColumns().filter(function (e) {\n            _this.emptyRowData[e.field] = _this.empty;\n        });\n    };\n    InfiniteScroll.prototype.getVirtualInfiniteEditedData = function () {\n        var editForm = this.parent.element.querySelector('.' + literals.editedRow);\n        var addForm = this.parent.element.querySelector('.' + literals.addedRow);\n        var gridForm = this.parent.element.querySelector('.e-gridform');\n        if (this.parent.infiniteScrollSettings.enableCache && (editForm || addForm)) {\n            var rowData = editForm ? extend({}, this.getEditedRowObject().data)\n                : extend({}, this.emptyRowData);\n            this.virtualInfiniteData = this.parent.editModule.getCurrentEditedData(gridForm, rowData);\n            var hiddenColumn = this.parent.getHiddenColumns();\n            for (var i = 0; i < hiddenColumn.length; i++) {\n                if (hiddenColumn[parseInt(i.toString(), 10)].defaultValue) {\n                    this.virtualInfiniteData[hiddenColumn[parseInt(i.toString(), 10)].field] =\n                        hiddenColumn[parseInt(i.toString(), 10)].defaultValue;\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.restoreInfiniteEdit = function () {\n        var content = this.parent.getContent().firstElementChild;\n        var frozenEdit = this.parent.frozenRows ? this.editRowIndex >= this.parent.frozenRows : true;\n        if (this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && frozenEdit) {\n            if (this.parent.editSettings.allowEditing && !isNullOrUndefined(this.editRowIndex)) {\n                var row = this.parent.getRowByIndex(this.editRowIndex);\n                if (Object.keys(this.virtualInfiniteData).length && row && !this.parent.getContent().querySelector('.' + literals.editedRow)) {\n                    var top_1 = row.getBoundingClientRect().top;\n                    if (top_1 < content.offsetHeight && top_1 > this.parent.getRowHeight()) {\n                        this.parent.isEdit = false;\n                        this.parent.editModule.startEdit(row);\n                    }\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.restoreInfiniteAdd = function () {\n        var content = this.parent.getContent().firstElementChild;\n        if (this.parent.getCurrentViewRecords().length && this.parent.getRowByIndex(0) && this.isNormaledit &&\n            this.parent.infiniteScrollSettings.enableCache && this.isAdd && !content.querySelector('.' + literals.addedRow)) {\n            var isTop = content.scrollTop < this.parent.getRowHeight();\n            if (isTop) {\n                this.parent.isEdit = false;\n                this.parent.addRecord();\n            }\n        }\n    };\n    InfiniteScroll.prototype.appendInfiniteRows = function (e) {\n        var scrollEle = this.parent.getContent().firstElementChild;\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n        if ((this.parent.isAngular || this.parent.isReact || this.parent.isVue || this.parent.isVue3) && isInfiniteScroll &&\n            !e.args.isFrozen && this.parent.infiniteScrollSettings.enableCache) {\n            var isChildGrid = this.parent.childGrid && this.parent.element.querySelectorAll('.e-childgrid').length ? true : false;\n            var rows = this.parent.getDataRows();\n            this.parent.refreshReactTemplateTD(rows, isChildGrid);\n        }\n        if ((isInfiniteScroll && !e.args.isFrozen) || !isInfiniteScroll) {\n            if (isInfiniteScroll && e.args.direction === 'up') {\n                e.tbody.insertBefore(e.frag, e.tbody.firstElementChild);\n            }\n            else {\n                e.tbody.appendChild(e.frag);\n            }\n        }\n        this.parent.contentModule.getTable().appendChild(e.tbody);\n        this.updateCurrentViewData();\n        if (this.isInitialRender && !e.args.isFrozen) {\n            this.isInitialRender = false;\n            this.parent.scrollModule.setHeight();\n        }\n        if (!e.args.isFrozen) {\n            this.rowTop = !this.rowTop ? this.parent.getRows()[0].getBoundingClientRect().top : this.rowTop;\n            if (isInfiniteScroll) {\n                if (this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n                    scrollEle.scrollTop = this.top;\n                }\n                setRowElements(this.parent);\n            }\n            this.restoreInfiniteAdd();\n            this.isScroll = true;\n        }\n        this.isInfiniteScroll = false;\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    InfiniteScroll.prototype.selectNewRow = function (args) {\n        var _this = this;\n        var gObj = this.parent;\n        var row = gObj.getRowByIndex(this.rowIndex);\n        var cache = gObj.infiniteScrollSettings.enableCache;\n        if (row && this.keys.some(function (value) { return value === _this.pressedKey; })) {\n            var content = gObj.getContent().firstElementChild;\n            var rowHeight = gObj.getRowHeight();\n            var target = row.cells[this.cellIndex];\n            if ((this.pressedKey === literals.downArrow || this.pressedKey === literals.enter)\n                || (cache && (this.pressedKey === literals.upArrow || this.pressedKey === literals.shiftEnter))) {\n                if (!cache && this.pressedKey !== literals.upArrow && this.pressedKey !== literals.shiftEnter) {\n                    content.scrollTop = content.scrollTop + rowHeight;\n                }\n                gObj.focusModule.isInfiniteScroll = true;\n                gObj.focusModule.onClick({ target: target }, true);\n                gObj.selectRow(this.rowIndex);\n            }\n        }\n        else if (this.lastFocusInfo && (this.pressedKey === literals.pageDown || this.pressedKey === literals.pageUp)) {\n            var idx = cache ? 0 : this.lastFocusInfo.rowIdx;\n            if (gObj.getRowByIndex(idx)) {\n                var target = gObj.getCellFromIndex(idx, this.lastFocusInfo.cellIdx);\n                if (target) {\n                    this.isFocusScroll = true;\n                    if (!cache) {\n                        gObj.focusModule.isInfiniteScroll = true;\n                        gObj.focusModule.onClick({ target: target }, true);\n                    }\n                    else {\n                        target.focus({ preventScroll: true });\n                    }\n                }\n            }\n        }\n        this.pressedKey = undefined;\n    };\n    InfiniteScroll.prototype.removeInfiniteCacheRows = function (e) {\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n        if (!e.args.isFrozen && isInfiniteScroll && this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n            var rows = [].slice.call(this.parent.getContentTable().getElementsByClassName(literals.row));\n            if (e.args.direction === 'down') {\n                if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n                    var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n                    this.removeCaptionRows(captionRows, e.args);\n                }\n                var addRowCount = this.parent.element.querySelector('.' + literals.addedRow) ? 0 : 1;\n                this.removeTopRows(rows, this.parent.pageSettings.pageSize - addRowCount);\n            }\n            if (e.args.direction === 'up') {\n                if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n                    var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n                    this.removeCaptionRows(captionRows, e.args);\n                }\n                else {\n                    this.removeBottomRows(rows, rows.length - 1, e.args);\n                }\n            }\n            this.isScroll = false;\n            this.top = this.calculateScrollTop(e.args);\n        }\n    };\n    InfiniteScroll.prototype.calculateScrollTop = function (args) {\n        var top = 0;\n        var scrollCnt = this.parent.getContent().firstElementChild;\n        if (args.direction === 'down') {\n            if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n                top = this.captionRowHeight();\n            }\n            var captionRows = [].slice.call(this.parent.getContent().firstElementChild.querySelectorAll('tr:not(.e-row)'));\n            var captionCount = 0;\n            if (this.isInitialCollapse && !isNullOrUndefined(captionRows)) {\n                captionCount = Math.round((captionRows.length - 1) / this.parent.groupSettings.columns.length);\n            }\n            var value = captionCount ? captionCount\n                : this.parent.pageSettings.pageSize * (this.parent.infiniteScrollSettings.maxBlocks - 1);\n            var currentViewRowCount = 0;\n            var i = 0;\n            while (currentViewRowCount < scrollCnt.clientHeight) {\n                i++;\n                currentViewRowCount = i * this.parent.getRowHeight();\n            }\n            i = i - 1;\n            top += (value - i) * this.parent.getRowHeight();\n        }\n        if (args.direction === 'up') {\n            if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n                var len = this.refreshInfiniteCacheRowVisibleLength(this.infiniteCache, this.parent.pageSettings.currentPage);\n                top = len * this.parent.getRowHeight();\n            }\n            else if (this.isInitialCollapse) {\n                var groupedData = this.infiniteCache[this.parent.pageSettings.currentPage];\n                var count = 0;\n                for (var i = 0; i < groupedData.length; i++) {\n                    if (groupedData[parseInt(i.toString(), 10)].isCaptionRow) {\n                        count++;\n                    }\n                }\n                top += Math.round(count / this.parent.groupSettings.columns.length) * this.parent.getRowHeight();\n            }\n            else {\n                top += (this.parent.pageSettings.pageSize * this.parent.getRowHeight() + getScrollBarWidth());\n            }\n        }\n        return top;\n    };\n    InfiniteScroll.prototype.captionRowHeight = function () {\n        var rows = [].slice.call(this.parent.getContent().querySelectorAll('tr:not(.e-row)'));\n        return rows.length * this.parent.getRowHeight();\n    };\n    InfiniteScroll.prototype.removeTopRows = function (rows, maxIndx) {\n        for (var i = 0; i <= maxIndx; i++) {\n            if (this.parent.frozenRows && this.parent.pageSettings.currentPage === this.parent.infiniteScrollSettings.maxBlocks + 1\n                && i > (maxIndx - this.parent.frozenRows)) {\n                continue;\n            }\n            remove(rows[parseInt(i.toString(), 10)]);\n        }\n    };\n    InfiniteScroll.prototype.removeBottomRows = function (rows, maxIndx, args) {\n        var cnt = 0;\n        var pageSize = this.parent.pageSettings.pageSize;\n        if (this.infiniteCache[args.prevPage].length < pageSize) {\n            cnt = this.parent.pageSettings.pageSize - this.infiniteCache[args.prevPage].length;\n        }\n        for (var i = maxIndx; cnt < pageSize; i--) {\n            cnt++;\n            remove(rows[parseInt(i.toString(), 10)]);\n        }\n    };\n    InfiniteScroll.prototype.removeCaptionRows = function (rows, args) {\n        var rowElements = [].slice.call(this.parent.getContent().getElementsByClassName(literals.row));\n        if (args.direction === 'down') {\n            var lastRow = rowElements[this.parent.pageSettings.pageSize - 1];\n            var lastRowIndex = getRowIndexFromElement(lastRow) - 1;\n            var k = 0;\n            for (var i = 0; k < lastRowIndex; i++) {\n                if (!rows[parseInt(i.toString(), 10)].classList.contains(literals.row)) {\n                    remove(rows[parseInt(i.toString(), 10)]);\n                }\n                else {\n                    k = getRowIndexFromElement(rows[parseInt(i.toString(), 10)]);\n                }\n            }\n        }\n        if (args.direction === 'up') {\n            var lastIndex = getRowIndexFromElement(rowElements[rowElements.length - 1]);\n            var page = Math.ceil(lastIndex / this.parent.pageSettings.pageSize);\n            var startIndex = 0;\n            for (var i = this.parent.pageSettings.currentPage + 1; i < page; i++) {\n                startIndex += this.infiniteCache[parseInt(i.toString(), 10)].length;\n            }\n            for (var i = startIndex; i < rows.length; i++) {\n                remove(rows[parseInt(i.toString(), 10)]);\n            }\n        }\n    };\n    InfiniteScroll.prototype.resetInfiniteBlocks = function (args, isDataModified) {\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling && args.requestType !== 'infiniteScroll';\n        if (!this.initialRender && !isNullOrUndefined(this.parent.infiniteScrollModule) && isInfiniteScroll) {\n            if (this.actions.some(function (value) { return value === args.requestType; }) || isDataModified || (args.requestType === 'save'\n                && (this.parent.sortSettings.columns.length || this.parent.filterSettings.columns.length\n                    || this.parent.groupSettings.columns.length || this.parent.searchSettings.key))) {\n                var scrollEle = this.parent.getContent().firstElementChild;\n                this.initialRender = true;\n                scrollEle.scrollTop = 0;\n                this.parent.pageSettings.currentPage = 1;\n                this.infiniteCache = {};\n                this.infiniteCurrentViewData = {};\n                this.resetContentModuleCache({});\n                this.isRemove = false;\n                this.top = 0;\n                this.isInitialCollapse = false;\n                this.parent.contentModule.isRemove = this.isRemove;\n                this.parent.contentModule.isAddRows = this.isRemove;\n                this.parent.contentModule.visibleRows = [];\n                this.parent.contentModule.visibleFrozenRows = [];\n            }\n        }\n    };\n    InfiniteScroll.prototype.setCache = function (e) {\n        if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {\n            var isEdit = e.args.requestType !== 'infiniteScroll'\n                && (this.requestType === 'delete' || this.requestType === 'add');\n            var currentPage = this.parent.pageSettings.currentPage;\n            if (!Object.keys(this.infiniteCache).length || isEdit) {\n                this.setInitialCache(e.modelData, e.args, isEdit);\n            }\n            if (isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage])) {\n                this.infiniteCache[this.parent.pageSettings.currentPage] = e.modelData;\n                this.resetContentModuleCache(this.infiniteCache);\n            }\n            if (e.isInfiniteScroll && !this.isRemove) {\n                this.isRemove = (currentPage - 1) % this.parent.infiniteScrollSettings.maxBlocks === 0;\n                this.parent.contentModule.isRemove = this.isRemove;\n            }\n        }\n    };\n    InfiniteScroll.prototype.setInitialCache = function (data, args, isEdit, isCurrentViewData) {\n        var k = !isEdit ? 1 : isNullOrUndefined(this.firstBlock) ? 1 : this.firstBlock;\n        for (var i = 1; i <= this.parent.infiniteScrollSettings.initialBlocks; i++) {\n            var startIndex = (i - 1) * this.parent.pageSettings.pageSize;\n            var endIndex = i * this.parent.pageSettings.pageSize;\n            if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !isCurrentViewData) {\n                this.setInitialGroupCache(data, k, startIndex, endIndex);\n            }\n            else {\n                if (isCurrentViewData) {\n                    this.infiniteCurrentViewData[parseInt(k.toString(), 10)] = data.slice(startIndex, endIndex);\n                }\n                else {\n                    this.infiniteCache[parseInt(k.toString(), 10)] = data.slice(startIndex, endIndex);\n                    this.resetContentModuleCache(this.infiniteCache);\n                }\n            }\n            k++;\n        }\n    };\n    InfiniteScroll.prototype.setInitialGroupCache = function (data, index, sIndex, eIndex) {\n        var pageData = [];\n        var startIndex = 0;\n        for (var i = 1; i <= Object.keys(this.infiniteCache).length; i++) {\n            startIndex += this.infiniteCache[parseInt(i.toString(), 10)].length;\n        }\n        var k = sIndex;\n        for (var i = startIndex; i < data.length && k < eIndex; i++) {\n            if (data[parseInt(i.toString(), 10)].index < eIndex || data[parseInt(i.toString(), 10)].isCaptionRow) {\n                k = data[parseInt(i.toString(), 10)].isCaptionRow ? k : data[parseInt(i.toString(), 10)].index;\n                pageData.push(data[parseInt(i.toString(), 10)]);\n            }\n            if (data[parseInt(i.toString(), 10)].index >= eIndex || data[parseInt(i.toString(), 10)].index === eIndex - 1) {\n                break;\n            }\n        }\n        this.infiniteCache[parseInt(index.toString(), 10)] = pageData;\n        this.resetContentModuleCache(this.infiniteCache);\n    };\n    InfiniteScroll.prototype.resetContentModuleCache = function (data) {\n        this.parent.contentModule\n            .infiniteCache = data;\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    InfiniteScroll.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    return InfiniteScroll;\n}());\nexport { InfiniteScroll };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}