{"ast":null,"code":"import { Rect } from '../primitives/rect';\nimport { Size } from '../primitives/size';\nimport { whiteSpaceToString, wordBreakToString, textAlignToString, bBoxText } from './base-util';\nimport { identityMatrix, transformPointByMatrix, rotateMatrix } from '../primitives/matrix';\nimport { createElement, Browser } from '@syncfusion/ej2-base';\n/**\n * Defines the functionalities that need to access DOM\n */\nexport function getChildNode(node) {\n  var child;\n  var collection = [];\n  if (Browser.info.name === 'msie' || Browser.info.name === 'edge') {\n    for (var i = 0; i < node.childNodes.length; i++) {\n      child = node.childNodes[parseInt(i.toString(), 10)];\n      if (child.nodeType === 1) {\n        collection.push(child);\n      }\n    }\n  } else {\n    collection = node.children;\n  }\n  return collection;\n}\nexport function translatePoints(element, points) {\n  var translatedPts = [];\n  for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n    var point = points_1[_i];\n    var pt1 = {\n      x: element.offsetX - element.actualSize.width * element.pivot.x + point.x,\n      y: element.offsetY - element.actualSize.height * element.pivot.y + point.y\n    };\n    var matrix = void 0;\n    var angle = element.rotateAngle + element.parentTransform;\n    if (angle) {\n      matrix = identityMatrix();\n      rotateMatrix(matrix, angle, element.offsetX, element.offsetY);\n    }\n    if (matrix) {\n      pt1 = transformPointByMatrix(matrix, pt1);\n    }\n    translatedPts.push(pt1);\n  }\n  return translatedPts;\n}\n/** @private */\nexport function measurePath(data) {\n  var path = 'pathTable';\n  // eslint-disable-next-line\n  if (!window[path]) {\n    // eslint-disable-next-line\n    window[path] = {};\n  }\n  if (data) {\n    var measureElement = 'measureElement';\n    // eslint-disable-next-line\n    window[measureElement].style.visibility = 'visible';\n    // eslint-disable-next-line\n    var svg = window[measureElement].children[2];\n    var element = getChildNode(svg)[0];\n    element.setAttribute('d', data);\n    //let bounds: SVGRect = element.getBBox();\n    var bounds = void 0;\n    // eslint-disable-next-line\n    if (window[path][data]) {\n      // eslint-disable-next-line\n      bounds = window[path][data];\n    } else {\n      // eslint-disable-next-line\n      window[path][data] = bounds = element.getBBox();\n      if ((bounds.x === 0 || bounds.y === 0) && (bounds.width === 0 || bounds.height === 0)) {\n        // eslint-disable-next-line\n        window[path][data] = bounds = getBBox(data);\n      }\n    }\n    var svgBounds = new Rect(bounds.x, bounds.y, bounds.width, bounds.height);\n    // eslint-disable-next-line\n    window[measureElement].style.visibility = 'hidden';\n    return svgBounds;\n  }\n  return new Rect(0, 0, 0, 0);\n}\n// tslint:disable-next-line\nfunction getBBox(path) {\n  var xmin = 0;\n  var xmax = 0;\n  var ymin = 0;\n  var ymax = 0;\n  // tslint:disable-next-line\n  var currentValue;\n  // tslint:disable-next-line\n  var currentpath = path;\n  currentpath = currentpath.replace(/[a-z].*/g, ' ').replace(/[\\sA-Z]+/gi, ' ').trim().split(' ');\n  for (var i = 0; i < currentpath.length; i++) {\n    if (currentpath[parseInt(i.toString(), 10)].length > 1) {\n      currentValue = currentpath[parseInt(i.toString(), 10)].split(',');\n      xmin = xmax = currentValue[0];\n      ymin = ymax = currentValue[1];\n    }\n  }\n  for (var i = 0; i < currentpath.length; i++) {\n    currentValue = currentpath[parseInt(i.toString(), 10)].split(',');\n    if (!currentValue[1]) {\n      currentValue[0] = xmin;\n      currentValue[1] = ymin;\n    }\n    xmin = Math.min(xmin, currentValue[0]);\n    xmax = Math.max(xmax, currentValue[0]);\n    ymin = Math.min(ymin, currentValue[1]);\n    ymax = Math.max(ymax, currentValue[1]);\n  }\n  return {\n    x: xmin,\n    y: ymin,\n    width: xmax - xmin,\n    height: ymax - ymin\n  };\n}\nfunction getTextOptions(element, maxWidth) {\n  var options = {\n    fill: element.style.fill,\n    stroke: element.style.strokeColor,\n    angle: element.rotateAngle + element.parentTransform,\n    pivotX: element.pivot.x,\n    pivotY: element.pivot.y,\n    strokeWidth: element.style.strokeWidth,\n    dashArray: element.style.strokeDashArray,\n    opacity: element.style.opacity,\n    visible: element.visible,\n    id: element.id,\n    width: maxWidth || element.actualSize.width,\n    height: element.actualSize.height,\n    x: element.offsetX - element.actualSize.width * element.pivot.x + 0.5,\n    y: element.offsetY - element.actualSize.height * element.pivot.y + 0.5\n  };\n  options.fontSize = element.style.fontSize;\n  options.fontFamily = element.style.fontFamily;\n  options.textOverflow = element.style.textOverflow;\n  options.textDecoration = element.style.textDecoration;\n  options.doWrap = element.doWrap;\n  options.whiteSpace = whiteSpaceToString(element.style.whiteSpace, element.style.textWrapping);\n  options.content = element.content;\n  options.textWrapping = element.style.textWrapping;\n  options.breakWord = wordBreakToString(element.style.textWrapping);\n  options.textAlign = textAlignToString(element.style.textAlign);\n  options.color = element.style.color;\n  options.italic = element.style.italic;\n  options.bold = element.style.bold;\n  options.dashArray = '';\n  options.strokeWidth = 0;\n  options.fill = '';\n  return options;\n}\nfunction wrapSvgText(text, textValue) {\n  var childNodes = [];\n  var k = 0;\n  var txtValue;\n  var bounds1;\n  var content = textValue || text.content;\n  if (text.whiteSpace !== 'nowrap' && text.whiteSpace !== 'pre') {\n    if (text.breakWord === 'breakall') {\n      txtValue = '';\n      txtValue += content[0];\n      for (k = 0; k < content.length; k++) {\n        bounds1 = bBoxText(txtValue, text);\n        if (bounds1 >= text.width && txtValue.length > 0) {\n          childNodes[childNodes.length] = {\n            text: txtValue,\n            x: 0,\n            dy: 0,\n            width: bounds1\n          };\n          txtValue = '';\n        } else {\n          txtValue = txtValue + (content[k + 1] || '');\n          // if (txtValue.indexOf('\\n') > -1) {\n          //     txtValue = txtValue.replace('\\n', '');\n          // }\n          var width = bBoxText(txtValue, text);\n          if (Math.ceil(width) + 2 >= text.width && txtValue.length > 0 || txtValue.indexOf('\\n') > -1) {\n            childNodes[childNodes.length] = {\n              text: txtValue,\n              x: 0,\n              dy: 0,\n              width: width\n            };\n            txtValue = '';\n          }\n          if (k === content.length - 1 && txtValue.length > 0) {\n            childNodes[childNodes.length] = {\n              text: txtValue,\n              x: 0,\n              dy: 0,\n              width: width\n            };\n            txtValue = '';\n          }\n        }\n      }\n    } else {\n      childNodes = wordWrapping(text, textValue);\n    }\n  } else {\n    childNodes[childNodes.length] = {\n      text: content,\n      x: 0,\n      dy: 0,\n      width: bBoxText(content, text)\n    };\n  }\n  return childNodes;\n}\nfunction wordWrapping(text, textValue) {\n  var childNodes = [];\n  var txtValue = '';\n  var j = 0;\n  var i = 0;\n  var wrap = text.whiteSpace !== 'nowrap' ? true : false;\n  var content = textValue || text.content;\n  var bounds1;\n  var eachLine = content.split('\\n');\n  var txt;\n  var words;\n  var newText;\n  var existingWidth;\n  var existingText;\n  for (j = 0; j < eachLine.length; j++) {\n    txt = '';\n    words = text.textWrapping !== 'NoWrap' ? eachLine[parseInt(j.toString(), 10)].split(' ') : eachLine;\n    for (i = 0; i < words.length; i++) {\n      bounds1 = bBoxText(words[parseInt(i.toString(), 10)], text);\n      if (bounds1 > text.width && words[parseInt(i.toString(), 10)].length > 0 && text.textWrapping !== 'NoWrap') {\n        if (eachLine.length > 1) {\n          words[parseInt(i.toString(), 10)] = words[parseInt(i.toString(), 10)] + '\\n';\n        }\n        text.content = words[parseInt(i.toString(), 10)];\n        childNodes = wrapText(text, txtValue, childNodes);\n      } else {\n        txtValue += ((i !== 0 || words.length === 1) && wrap && txtValue.length > 0 ? ' ' : '') + words[parseInt(i.toString(), 10)];\n        newText = txtValue + (words[i + 1] || '');\n        var width = bBoxText(newText, text);\n        if (eachLine.length > 1 && i === words.length - 1) {\n          txtValue = txtValue + '\\n';\n        }\n        if (Math.floor(width) > text.width - 2 && txtValue.length > 0) {\n          textValue = txtValue;\n          childNodes[childNodes.length] = {\n            text: txtValue.indexOf('\\n') === -1 ? txtValue + ' ' : textValue,\n            x: 0,\n            dy: 0,\n            width: newText === txtValue ? width : txtValue === existingText ? existingWidth : bBoxText(txtValue, text)\n          };\n          txtValue = '';\n        } else {\n          if (i === words.length - 1) {\n            childNodes[childNodes.length] = {\n              text: txtValue,\n              x: 0,\n              dy: 0,\n              width: width\n            };\n            txtValue = '';\n          }\n        }\n        existingText = newText;\n        existingWidth = width;\n      }\n    }\n  }\n  return childNodes;\n}\nfunction wrapText(txt, textValue, childNode) {\n  var k = 0;\n  var txtValue;\n  var bounds1;\n  var content = textValue || txt.content;\n  txtValue = '';\n  txtValue += content[0];\n  for (k = 0; k < content.length; k++) {\n    bounds1 = bBoxText(txtValue, txt);\n    if (bounds1 >= txt.width && txtValue.length > 0) {\n      childNode[childNode.length] = {\n        text: txtValue,\n        x: 0,\n        dy: 0,\n        width: bounds1\n      };\n      txtValue = '';\n    } else {\n      txtValue = txtValue + (content[k + 1] || '');\n      var width = bBoxText(txtValue, txt);\n      if (Math.ceil(width) + 2 >= txt.width && txtValue.length > 0 || txtValue.indexOf('\\n') > -1) {\n        txtValue = txtValue.slice(0, -1);\n        childNode[childNode.length] = {\n          text: txtValue,\n          x: 0,\n          dy: 0,\n          width: width\n        };\n        txtValue = content[k + 1] || '';\n      }\n      if (k === content.length - 1 && txtValue.length > 0) {\n        childNode[childNode.length] = {\n          text: txtValue,\n          x: 0,\n          dy: 0,\n          width: width\n        };\n        txtValue = '';\n      }\n    }\n  }\n  return childNode;\n}\nfunction wrapSvgTextAlign(text, childNodes) {\n  var wrapBounds = {\n    x: 0,\n    width: 0\n  };\n  var k = 0;\n  var txtWidth;\n  var width;\n  for (k = 0; k < childNodes.length; k++) {\n    txtWidth = childNodes[parseInt(k.toString(), 10)].width;\n    width = txtWidth;\n    if (text.textAlign === 'left') {\n      txtWidth = 0;\n    } else if (text.textAlign === 'center') {\n      if (txtWidth > text.width && (text.textOverflow === 'Ellipsis' || text.textOverflow === 'Clip')) {\n        txtWidth = 0;\n      } else {\n        txtWidth = -txtWidth / 2;\n      }\n    } else if (text.textAlign === 'right') {\n      txtWidth = -txtWidth;\n    } else {\n      txtWidth = childNodes.length > 1 ? 0 : -txtWidth / 2;\n    }\n    childNodes[parseInt(k.toString(), 10)].dy = text.fontSize * 1.2;\n    childNodes[parseInt(k.toString(), 10)].x = txtWidth;\n    if (!wrapBounds) {\n      wrapBounds = {\n        x: txtWidth,\n        width: width\n      };\n    } else {\n      wrapBounds.x = Math.min(wrapBounds.x, txtWidth);\n      wrapBounds.width = Math.max(wrapBounds.width, width);\n    }\n  }\n  return wrapBounds;\n}\n/** @private */\nexport function measureText(text, style, content, maxWidth, textValue) {\n  var bounds = new Size(0, 0);\n  var childNodes;\n  var wrapBounds;\n  var options = getTextOptions(text, maxWidth);\n  text.childNodes = childNodes = wrapSvgText(options, textValue);\n  text.wrapBounds = wrapBounds = wrapSvgTextAlign(options, childNodes);\n  bounds.width = wrapBounds.width;\n  if (text.wrapBounds.width >= maxWidth && options.textOverflow !== 'Wrap') {\n    bounds.width = maxWidth;\n  }\n  bounds.height = childNodes.length * text.style.fontSize * 1.2;\n  return bounds;\n}\n/** @private */\nexport function getDiagramElement(elementId, contentId) {\n  var diagramElement;\n  var element;\n  if (contentId && typeof document !== 'undefined') {\n    element = document.getElementById(contentId);\n  }\n  diagramElement = element ? element.querySelector('#' + elementId) : typeof document !== 'undefined' ? document.getElementById(elementId) : null;\n  return diagramElement;\n}\n/** @private */\nexport function createHtmlElement(elementType, attribute) {\n  var element = createElement(elementType);\n  setAttributeHtml(element, attribute);\n  return element;\n}\n/** @private */\nexport function setAttributeHtml(element, attributes) {\n  var keys = Object.keys(attributes);\n  for (var i = 0; i < keys.length; i++) {\n    element.setAttribute(keys[parseInt(i.toString(), 10)], attributes[keys[parseInt(i.toString(), 10)]]);\n  }\n}\n/**\n * @private\n */\nexport function getAdornerLayerSvg(diagramId, index) {\n  var adornerLayerSvg = null;\n  var diagramElement = getDiagramElement(diagramId + index + '_diagramAdornerLayer');\n  var elementcoll;\n  if (diagramElement) {\n    elementcoll = diagramElement.getElementsByClassName('e-adorner-layer' + index);\n    adornerLayerSvg = elementcoll[0];\n  }\n  return adornerLayerSvg;\n}\n/** @private */\nexport function getSelectorElement(diagramId, index) {\n  var adornerLayer = null;\n  var adornerSvg = getAdornerLayerSvg(diagramId, index);\n  if (adornerSvg) {\n    adornerLayer = adornerSvg.getElementById(diagramId + '_SelectorElement');\n  }\n  return adornerLayer;\n}\n/** @private */\nexport function createMeasureElements() {\n  var measureElement = 'measureElement';\n  // eslint-disable-next-line\n  if (!window[measureElement]) {\n    var divElement = createHtmlElement('div', {\n      id: 'measureElement',\n      style: 'visibility:hidden ; height: 0px ; width: 0px; overflow: hidden;'\n    });\n    var text = createHtmlElement('span', {\n      'style': 'display:inline-block ; line-height: normal'\n    });\n    divElement.appendChild(text);\n    var imageElement = void 0;\n    imageElement = createHtmlElement('img', {});\n    divElement.appendChild(imageElement);\n    if (typeof document !== 'undefined') {\n      var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n      svg.setAttribute('xlink', 'http://www.w3.org/1999/xlink');\n      divElement.appendChild(svg);\n      var element = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n      svg.appendChild(element);\n      var data = document.createTextNode('');\n      var tSpan = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      tSpan.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');\n      svg.appendChild(tSpan);\n      // eslint-disable-next-line\n      window[measureElement] = divElement;\n      // eslint-disable-next-line\n      window[measureElement].usageCount = 1;\n      document.body.appendChild(divElement);\n    }\n  } else {\n    // eslint-disable-next-line\n    window[measureElement].usageCount += 1;\n  }\n}\n/** @private */\nexport function measureImage(source, contentSize) {\n  var measureElement = 'measureElement';\n  // eslint-disable-next-line\n  window[measureElement].style.visibility = 'visible';\n  // eslint-disable-next-line\n  var imageElement = window[measureElement].children[1];\n  imageElement.setAttribute('src', source);\n  var bounds = imageElement.getBoundingClientRect();\n  var width = bounds.width;\n  var height = bounds.height;\n  contentSize = new Size(width, height);\n  // eslint-disable-next-line\n  window[measureElement].style.visibility = 'hidden';\n  return contentSize;\n}","map":{"version":3,"names":["Rect","Size","whiteSpaceToString","wordBreakToString","textAlignToString","bBoxText","identityMatrix","transformPointByMatrix","rotateMatrix","createElement","Browser","getChildNode","node","child","collection","info","name","i","childNodes","length","parseInt","toString","nodeType","push","children","translatePoints","element","points","translatedPts","_i","points_1","point","pt1","x","offsetX","actualSize","width","pivot","y","offsetY","height","matrix","angle","rotateAngle","parentTransform","measurePath","data","path","window","measureElement","style","visibility","svg","setAttribute","bounds","getBBox","svgBounds","xmin","xmax","ymin","ymax","currentValue","currentpath","replace","trim","split","Math","min","max","getTextOptions","maxWidth","options","fill","stroke","strokeColor","pivotX","pivotY","strokeWidth","dashArray","strokeDashArray","opacity","visible","id","fontSize","fontFamily","textOverflow","textDecoration","doWrap","whiteSpace","textWrapping","content","breakWord","textAlign","color","italic","bold","wrapSvgText","text","textValue","k","txtValue","bounds1","dy","ceil","indexOf","wordWrapping","j","wrap","eachLine","txt","words","newText","existingWidth","existingText","wrapText","floor","childNode","slice","wrapSvgTextAlign","wrapBounds","txtWidth","measureText","getDiagramElement","elementId","contentId","diagramElement","document","getElementById","querySelector","createHtmlElement","elementType","attribute","setAttributeHtml","attributes","keys","Object","getAdornerLayerSvg","diagramId","index","adornerLayerSvg","elementcoll","getElementsByClassName","getSelectorElement","adornerLayer","adornerSvg","createMeasureElements","divElement","appendChild","imageElement","createElementNS","createTextNode","tSpan","setAttributeNS","usageCount","body","measureImage","source","contentSize","getBoundingClientRect"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-drawings/src/drawing/utility/dom-util.js"],"sourcesContent":["import { Rect } from '../primitives/rect';\nimport { Size } from '../primitives/size';\nimport { whiteSpaceToString, wordBreakToString, textAlignToString, bBoxText } from './base-util';\nimport { identityMatrix, transformPointByMatrix, rotateMatrix } from '../primitives/matrix';\nimport { createElement, Browser } from '@syncfusion/ej2-base';\n/**\n * Defines the functionalities that need to access DOM\n */\nexport function getChildNode(node) {\n    var child;\n    var collection = [];\n    if (Browser.info.name === 'msie' || Browser.info.name === 'edge') {\n        for (var i = 0; i < node.childNodes.length; i++) {\n            child = node.childNodes[parseInt(i.toString(), 10)];\n            if (child.nodeType === 1) {\n                collection.push(child);\n            }\n        }\n    }\n    else {\n        collection = node.children;\n    }\n    return collection;\n}\nexport function translatePoints(element, points) {\n    var translatedPts = [];\n    for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n        var point = points_1[_i];\n        var pt1 = {\n            x: element.offsetX - element.actualSize.width * element.pivot.x + point.x,\n            y: element.offsetY - element.actualSize.height * element.pivot.y + point.y\n        };\n        var matrix = void 0;\n        var angle = element.rotateAngle + element.parentTransform;\n        if (angle) {\n            matrix = identityMatrix();\n            rotateMatrix(matrix, angle, element.offsetX, element.offsetY);\n        }\n        if (matrix) {\n            pt1 = transformPointByMatrix(matrix, pt1);\n        }\n        translatedPts.push(pt1);\n    }\n    return translatedPts;\n}\n/** @private */\nexport function measurePath(data) {\n    var path = 'pathTable';\n    // eslint-disable-next-line\n    if (!window[path]) {\n        // eslint-disable-next-line\n        window[path] = {};\n    }\n    if (data) {\n        var measureElement = 'measureElement';\n        // eslint-disable-next-line\n        window[measureElement].style.visibility = 'visible';\n        // eslint-disable-next-line\n        var svg = window[measureElement].children[2];\n        var element = getChildNode(svg)[0];\n        element.setAttribute('d', data);\n        //let bounds: SVGRect = element.getBBox();\n        var bounds = void 0;\n        // eslint-disable-next-line\n        if (window[path][data]) {\n            // eslint-disable-next-line\n            bounds = window[path][data];\n        }\n        else {\n            // eslint-disable-next-line\n            window[path][data] = bounds = element.getBBox();\n            if ((bounds.x === 0 || bounds.y === 0) && (bounds.width === 0 || bounds.height === 0)) {\n                // eslint-disable-next-line\n                window[path][data] = bounds = getBBox(data);\n            }\n        }\n        var svgBounds = new Rect(bounds.x, bounds.y, bounds.width, bounds.height);\n        // eslint-disable-next-line\n        window[measureElement].style.visibility = 'hidden';\n        return svgBounds;\n    }\n    return new Rect(0, 0, 0, 0);\n}\n// tslint:disable-next-line\nfunction getBBox(path) {\n    var xmin = 0;\n    var xmax = 0;\n    var ymin = 0;\n    var ymax = 0;\n    // tslint:disable-next-line\n    var currentValue;\n    // tslint:disable-next-line\n    var currentpath = path;\n    currentpath = currentpath.replace(/[a-z].*/g, ' ').replace(/[\\sA-Z]+/gi, ' ').trim().split(' ');\n    for (var i = 0; i < currentpath.length; i++) {\n        if (currentpath[parseInt(i.toString(), 10)].length > 1) {\n            currentValue = currentpath[parseInt(i.toString(), 10)].split(',');\n            xmin = xmax = currentValue[0];\n            ymin = ymax = currentValue[1];\n        }\n    }\n    for (var i = 0; i < currentpath.length; i++) {\n        currentValue = currentpath[parseInt(i.toString(), 10)].split(',');\n        if (!currentValue[1]) {\n            currentValue[0] = xmin;\n            currentValue[1] = ymin;\n        }\n        xmin = Math.min(xmin, currentValue[0]);\n        xmax = Math.max(xmax, currentValue[0]);\n        ymin = Math.min(ymin, currentValue[1]);\n        ymax = Math.max(ymax, currentValue[1]);\n    }\n    return { x: xmin, y: ymin, width: xmax - xmin, height: ymax - ymin };\n}\nfunction getTextOptions(element, maxWidth) {\n    var options = {\n        fill: element.style.fill, stroke: element.style.strokeColor, angle: element.rotateAngle + element.parentTransform,\n        pivotX: element.pivot.x, pivotY: element.pivot.y, strokeWidth: element.style.strokeWidth,\n        dashArray: element.style.strokeDashArray, opacity: element.style.opacity,\n        visible: element.visible, id: element.id,\n        width: maxWidth || element.actualSize.width, height: element.actualSize.height,\n        x: element.offsetX - element.actualSize.width * element.pivot.x + 0.5,\n        y: element.offsetY - element.actualSize.height * element.pivot.y + 0.5\n    };\n    options.fontSize = element.style.fontSize;\n    options.fontFamily = element.style.fontFamily;\n    options.textOverflow = element.style.textOverflow;\n    options.textDecoration = element.style.textDecoration;\n    options.doWrap = element.doWrap;\n    options.whiteSpace = whiteSpaceToString(element.style.whiteSpace, element.style.textWrapping);\n    options.content = element.content;\n    options.textWrapping = element.style.textWrapping;\n    options.breakWord = wordBreakToString(element.style.textWrapping);\n    options.textAlign = textAlignToString(element.style.textAlign);\n    options.color = element.style.color;\n    options.italic = element.style.italic;\n    options.bold = element.style.bold;\n    options.dashArray = '';\n    options.strokeWidth = 0;\n    options.fill = '';\n    return options;\n}\nfunction wrapSvgText(text, textValue) {\n    var childNodes = [];\n    var k = 0;\n    var txtValue;\n    var bounds1;\n    var content = textValue || text.content;\n    if (text.whiteSpace !== 'nowrap' && text.whiteSpace !== 'pre') {\n        if (text.breakWord === 'breakall') {\n            txtValue = '';\n            txtValue += content[0];\n            for (k = 0; k < content.length; k++) {\n                bounds1 = bBoxText(txtValue, text);\n                if (bounds1 >= text.width && txtValue.length > 0) {\n                    childNodes[childNodes.length] = { text: txtValue, x: 0, dy: 0, width: bounds1 };\n                    txtValue = '';\n                }\n                else {\n                    txtValue = txtValue + (content[k + 1] || '');\n                    // if (txtValue.indexOf('\\n') > -1) {\n                    //     txtValue = txtValue.replace('\\n', '');\n                    // }\n                    var width = bBoxText(txtValue, text);\n                    if ((Math.ceil(width) + 2 >= text.width && txtValue.length > 0) || (txtValue.indexOf('\\n') > -1)) {\n                        childNodes[childNodes.length] = { text: txtValue, x: 0, dy: 0, width: width };\n                        txtValue = '';\n                    }\n                    if (k === content.length - 1 && txtValue.length > 0) {\n                        childNodes[childNodes.length] = { text: txtValue, x: 0, dy: 0, width: width };\n                        txtValue = '';\n                    }\n                }\n            }\n        }\n        else {\n            childNodes = wordWrapping(text, textValue);\n        }\n    }\n    else {\n        childNodes[childNodes.length] = { text: content, x: 0, dy: 0, width: bBoxText(content, text) };\n    }\n    return childNodes;\n}\nfunction wordWrapping(text, textValue) {\n    var childNodes = [];\n    var txtValue = '';\n    var j = 0;\n    var i = 0;\n    var wrap = text.whiteSpace !== 'nowrap' ? true : false;\n    var content = textValue || text.content;\n    var bounds1;\n    var eachLine = content.split('\\n');\n    var txt;\n    var words;\n    var newText;\n    var existingWidth;\n    var existingText;\n    for (j = 0; j < eachLine.length; j++) {\n        txt = '';\n        words = text.textWrapping !== 'NoWrap' ? eachLine[parseInt(j.toString(), 10)].split(' ') : eachLine;\n        for (i = 0; i < words.length; i++) {\n            bounds1 = bBoxText(words[parseInt(i.toString(), 10)], text);\n            if (bounds1 > text.width && words[parseInt(i.toString(), 10)].length > 0 && text.textWrapping !== 'NoWrap') {\n                if (eachLine.length > 1) {\n                    words[parseInt(i.toString(), 10)] = words[parseInt(i.toString(), 10)] + '\\n';\n                }\n                text.content = words[parseInt(i.toString(), 10)];\n                childNodes = wrapText(text, txtValue, childNodes);\n            }\n            else {\n                txtValue += (((i !== 0 || words.length === 1) && wrap && txtValue.length > 0) ? ' ' : '') + words[parseInt(i.toString(), 10)];\n                newText = txtValue + (words[i + 1] || '');\n                var width = bBoxText(newText, text);\n                if (eachLine.length > 1 && i === words.length - 1) {\n                    txtValue = txtValue + '\\n';\n                }\n                if (Math.floor(width) > text.width - 2 && txtValue.length > 0) {\n                    textValue = txtValue;\n                    childNodes[childNodes.length] = {\n                        text: (txtValue.indexOf('\\n') === -1) ? txtValue + ' ' : textValue, x: 0, dy: 0,\n                        width: newText === txtValue ? width : (txtValue === existingText) ? existingWidth : bBoxText(txtValue, text)\n                    };\n                    txtValue = '';\n                }\n                else {\n                    if (i === words.length - 1) {\n                        childNodes[childNodes.length] = { text: txtValue, x: 0, dy: 0, width: width };\n                        txtValue = '';\n                    }\n                }\n                existingText = newText;\n                existingWidth = width;\n            }\n        }\n    }\n    return childNodes;\n}\nfunction wrapText(txt, textValue, childNode) {\n    var k = 0;\n    var txtValue;\n    var bounds1;\n    var content = textValue || txt.content;\n    txtValue = '';\n    txtValue += content[0];\n    for (k = 0; k < content.length; k++) {\n        bounds1 = bBoxText(txtValue, txt);\n        if (bounds1 >= txt.width && txtValue.length > 0) {\n            childNode[childNode.length] = { text: txtValue, x: 0, dy: 0, width: bounds1 };\n            txtValue = '';\n        }\n        else {\n            txtValue = txtValue + (content[k + 1] || '');\n            var width = bBoxText(txtValue, txt);\n            if ((Math.ceil(width) + 2 >= txt.width && txtValue.length > 0) || (txtValue.indexOf('\\n') > -1)) {\n                txtValue = txtValue.slice(0, -1);\n                childNode[childNode.length] = { text: txtValue, x: 0, dy: 0, width: width };\n                txtValue = content[k + 1] || '';\n            }\n            if (k === content.length - 1 && txtValue.length > 0) {\n                childNode[childNode.length] = { text: txtValue, x: 0, dy: 0, width: width };\n                txtValue = '';\n            }\n        }\n    }\n    return childNode;\n}\nfunction wrapSvgTextAlign(text, childNodes) {\n    var wrapBounds = { x: 0, width: 0 };\n    var k = 0;\n    var txtWidth;\n    var width;\n    for (k = 0; k < childNodes.length; k++) {\n        txtWidth = childNodes[parseInt(k.toString(), 10)].width;\n        width = txtWidth;\n        if (text.textAlign === 'left') {\n            txtWidth = 0;\n        }\n        else if (text.textAlign === 'center') {\n            if (txtWidth > text.width && (text.textOverflow === 'Ellipsis' || text.textOverflow === 'Clip')) {\n                txtWidth = 0;\n            }\n            else {\n                txtWidth = -txtWidth / 2;\n            }\n        }\n        else if (text.textAlign === 'right') {\n            txtWidth = -txtWidth;\n        }\n        else {\n            txtWidth = childNodes.length > 1 ? 0 : -txtWidth / 2;\n        }\n        childNodes[parseInt(k.toString(), 10)].dy = text.fontSize * 1.2;\n        childNodes[parseInt(k.toString(), 10)].x = txtWidth;\n        if (!wrapBounds) {\n            wrapBounds = {\n                x: txtWidth,\n                width: width\n            };\n        }\n        else {\n            wrapBounds.x = Math.min(wrapBounds.x, txtWidth);\n            wrapBounds.width = Math.max(wrapBounds.width, width);\n        }\n    }\n    return wrapBounds;\n}\n/** @private */\nexport function measureText(text, style, content, maxWidth, textValue) {\n    var bounds = new Size(0, 0);\n    var childNodes;\n    var wrapBounds;\n    var options = getTextOptions(text, maxWidth);\n    text.childNodes = childNodes = wrapSvgText(options, textValue);\n    text.wrapBounds = wrapBounds = wrapSvgTextAlign(options, childNodes);\n    bounds.width = wrapBounds.width;\n    if (text.wrapBounds.width >= maxWidth && options.textOverflow !== 'Wrap') {\n        bounds.width = maxWidth;\n    }\n    bounds.height = childNodes.length * text.style.fontSize * 1.2;\n    return bounds;\n}\n/** @private */\nexport function getDiagramElement(elementId, contentId) {\n    var diagramElement;\n    var element;\n    if (contentId && (typeof document !== 'undefined')) {\n        element = document.getElementById(contentId);\n    }\n    diagramElement = (element) ? element.querySelector('#' + elementId) : (typeof document !== 'undefined') ? document.getElementById(elementId) : null;\n    return diagramElement;\n}\n/** @private */\nexport function createHtmlElement(elementType, attribute) {\n    var element = createElement(elementType);\n    setAttributeHtml(element, attribute);\n    return element;\n}\n/** @private */\nexport function setAttributeHtml(element, attributes) {\n    var keys = Object.keys(attributes);\n    for (var i = 0; i < keys.length; i++) {\n        element.setAttribute(keys[parseInt(i.toString(), 10)], attributes[keys[parseInt(i.toString(), 10)]]);\n    }\n}\n/**\n * @private\n */\nexport function getAdornerLayerSvg(diagramId, index) {\n    var adornerLayerSvg = null;\n    var diagramElement = getDiagramElement(diagramId + index + '_diagramAdornerLayer');\n    var elementcoll;\n    if (diagramElement) {\n        elementcoll = diagramElement.getElementsByClassName('e-adorner-layer' + index);\n        adornerLayerSvg = elementcoll[0];\n    }\n    return adornerLayerSvg;\n}\n/** @private */\nexport function getSelectorElement(diagramId, index) {\n    var adornerLayer = null;\n    var adornerSvg = getAdornerLayerSvg(diagramId, index);\n    if (adornerSvg) {\n        adornerLayer = adornerSvg.getElementById(diagramId + '_SelectorElement');\n    }\n    return adornerLayer;\n}\n/** @private */\nexport function createMeasureElements() {\n    var measureElement = 'measureElement';\n    // eslint-disable-next-line\n    if (!window[measureElement]) {\n        var divElement = createHtmlElement('div', {\n            id: 'measureElement',\n            style: 'visibility:hidden ; height: 0px ; width: 0px; overflow: hidden;'\n        });\n        var text = createHtmlElement('span', { 'style': 'display:inline-block ; line-height: normal' });\n        divElement.appendChild(text);\n        var imageElement = void 0;\n        imageElement = createHtmlElement('img', {});\n        divElement.appendChild(imageElement);\n        if (typeof document !== 'undefined') {\n            var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n            svg.setAttribute('xlink', 'http://www.w3.org/1999/xlink');\n            divElement.appendChild(svg);\n            var element = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n            svg.appendChild(element);\n            var data = document.createTextNode('');\n            var tSpan = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n            tSpan.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');\n            svg.appendChild(tSpan);\n            // eslint-disable-next-line\n            window[measureElement] = divElement;\n            // eslint-disable-next-line\n            window[measureElement].usageCount = 1;\n            document.body.appendChild(divElement);\n        }\n    }\n    else {\n        // eslint-disable-next-line\n        window[measureElement].usageCount += 1;\n    }\n}\n/** @private */\nexport function measureImage(source, contentSize) {\n    var measureElement = 'measureElement';\n    // eslint-disable-next-line\n    window[measureElement].style.visibility = 'visible';\n    // eslint-disable-next-line\n    var imageElement = window[measureElement].children[1];\n    imageElement.setAttribute('src', source);\n    var bounds = imageElement.getBoundingClientRect();\n    var width = bounds.width;\n    var height = bounds.height;\n    contentSize = new Size(width, height);\n    // eslint-disable-next-line\n    window[measureElement].style.visibility = 'hidden';\n    return contentSize;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}