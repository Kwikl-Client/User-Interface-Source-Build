{"ast":null,"code":"import { _UnicodeLine } from './../../fonts/pdf-standard-font';\nimport { _ArabicShapeRenderer } from './../../graphics/rightToLeft/text-shape';\nimport { _Bidirectional } from './../../graphics/rightToLeft/bidirectional';\nimport { PdfTextDirection } from './../../enumerator';\nimport { _stringToUnicodeArray, _bytesToString } from './../../utils';\nvar _RtlRenderer = /** @class */function () {\n  function _RtlRenderer() {\n    this._openBracket = '(';\n    this._closeBracket = ')';\n  }\n  _RtlRenderer.prototype._layout = function (line, font, rtl, wordSpace, format) {\n    var result = [];\n    if (font !== null && typeof font !== 'undefined' && line !== null && typeof line !== 'undefined') {\n      if (font._isUnicode) {\n        result = this._customLayout(line, rtl, format, font, wordSpace);\n      } else {\n        result = [];\n        result[0] = line;\n      }\n    }\n    return result;\n  };\n  _RtlRenderer.prototype._splitLayout = function (line, font, rtl, wordSpace, format) {\n    var words = [];\n    if (font !== null && typeof font !== 'undefined' && line !== null && typeof line !== 'undefined') {\n      var system = false;\n      if (!system) {\n        words = this._customSplitLayout(line, font, rtl, wordSpace, format);\n      }\n    }\n    return words;\n  };\n  _RtlRenderer.prototype._getGlyphIndex = function (line, font, glyphs) {\n    glyphs = [];\n    if (font !== null && typeof font !== 'undefined' && line !== null && typeof line !== 'undefined') {\n      if (line.length === 0) {\n        return {\n          _result: false,\n          _glyphIndex: glyphs\n        };\n      }\n      var renderer = new _ArabicShapeRenderer();\n      var text = renderer._shape(line);\n      var internalFont = font._fontInternal;\n      var ttfReader = internalFont._ttfReader;\n      glyphs = [text.length];\n      var i = 0;\n      for (var k = 0, len = text.length; k < len; k++) {\n        var ch = text[Number.parseInt(k.toString(), 10)];\n        var glyphInfo = ttfReader._getGlyph(ch);\n        if (glyphInfo !== null && typeof glyphInfo !== 'undefined') {\n          glyphs[i++] = glyphInfo._index;\n        }\n      }\n    }\n    var unicodeLine = new _UnicodeLine();\n    unicodeLine._result = true;\n    unicodeLine._glyphIndex = glyphs;\n    return unicodeLine;\n  };\n  _RtlRenderer.prototype._customLayout = function (line, rtl, format, font, wordSpace) {\n    if (wordSpace === null || typeof wordSpace === 'undefined') {\n      var result = null;\n      if (line !== null && typeof line !== 'undefined') {\n        if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.none) {\n          var bidi = new _Bidirectional();\n          result = bidi._getLogicalToVisualString(line, rtl);\n        }\n      }\n      return result;\n    } else {\n      var layouted = '';\n      var result = [];\n      if (line !== null && typeof line !== 'undefined' && font !== null && typeof font !== 'undefined') {\n        if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.none) {\n          var renderer = new _ArabicShapeRenderer();\n          var txt = renderer._shape(line);\n          layouted = this._customLayout(txt, rtl, format);\n        }\n        if (wordSpace) {\n          var words = layouted.split('');\n          var count = words.length;\n          for (var i = 0; i < count; i++) {\n            words[Number.parseInt(i.toString(), 10)] = this._addCharacter(font, words[Number.parseInt(i.toString(), 10)]);\n          }\n          result = words;\n        } else {\n          result = [];\n          result[0] = this._addCharacter(font, layouted);\n        }\n      }\n      return result;\n    }\n  };\n  _RtlRenderer.prototype._addCharacter = function (font, glyphs) {\n    if (font !== null && typeof font !== 'undefined' && glyphs !== null && typeof glyphs !== 'undefined') {\n      var internalFont = font._fontInternal;\n      var ttfReader = internalFont._ttfReader;\n      font._setSymbols(glyphs);\n      glyphs = ttfReader._convertString(glyphs);\n      var bytes = _stringToUnicodeArray(glyphs);\n      glyphs = _bytesToString(bytes);\n    }\n    return glyphs;\n  };\n  _RtlRenderer.prototype._customSplitLayout = function (line, font, rtl, wordSpace, format) {\n    var words = [];\n    if (line !== null && typeof line !== 'undefined') {\n      var reversedLine = this._customLayout(line, rtl, format);\n      words = reversedLine.split('');\n    }\n    return words;\n  };\n  return _RtlRenderer;\n}();\nexport { _RtlRenderer };","map":{"version":3,"names":["_UnicodeLine","_ArabicShapeRenderer","_Bidirectional","PdfTextDirection","_stringToUnicodeArray","_bytesToString","_RtlRenderer","_openBracket","_closeBracket","prototype","_layout","line","font","rtl","wordSpace","format","result","_isUnicode","_customLayout","_splitLayout","words","system","_customSplitLayout","_getGlyphIndex","glyphs","length","_result","_glyphIndex","renderer","text","_shape","internalFont","_fontInternal","ttfReader","_ttfReader","i","k","len","ch","Number","parseInt","toString","glyphInfo","_getGlyph","_index","unicodeLine","textDirection","none","bidi","_getLogicalToVisualString","layouted","txt","split","count","_addCharacter","_setSymbols","_convertString","bytes","reversedLine"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/rightToLeft/text-renderer.js"],"sourcesContent":["import { _UnicodeLine } from './../../fonts/pdf-standard-font';\nimport { _ArabicShapeRenderer } from './../../graphics/rightToLeft/text-shape';\nimport { _Bidirectional } from './../../graphics/rightToLeft/bidirectional';\nimport { PdfTextDirection } from './../../enumerator';\nimport { _stringToUnicodeArray, _bytesToString } from './../../utils';\nvar _RtlRenderer = /** @class */ (function () {\n    function _RtlRenderer() {\n        this._openBracket = '(';\n        this._closeBracket = ')';\n    }\n    _RtlRenderer.prototype._layout = function (line, font, rtl, wordSpace, format) {\n        var result = [];\n        if (font !== null && typeof font !== 'undefined' && line !== null && typeof line !== 'undefined') {\n            if (font._isUnicode) {\n                result = this._customLayout(line, rtl, format, font, wordSpace);\n            }\n            else {\n                result = [];\n                result[0] = line;\n            }\n        }\n        return result;\n    };\n    _RtlRenderer.prototype._splitLayout = function (line, font, rtl, wordSpace, format) {\n        var words = [];\n        if (font !== null && typeof font !== 'undefined' && line !== null && typeof line !== 'undefined') {\n            var system = false;\n            if (!system) {\n                words = this._customSplitLayout(line, font, rtl, wordSpace, format);\n            }\n        }\n        return words;\n    };\n    _RtlRenderer.prototype._getGlyphIndex = function (line, font, glyphs) {\n        glyphs = [];\n        if (font !== null && typeof font !== 'undefined' && line !== null && typeof line !== 'undefined') {\n            if (line.length === 0) {\n                return { _result: false, _glyphIndex: glyphs };\n            }\n            var renderer = new _ArabicShapeRenderer();\n            var text = renderer._shape(line);\n            var internalFont = font._fontInternal;\n            var ttfReader = internalFont._ttfReader;\n            glyphs = [text.length];\n            var i = 0;\n            for (var k = 0, len = text.length; k < len; k++) {\n                var ch = text[Number.parseInt(k.toString(), 10)];\n                var glyphInfo = ttfReader._getGlyph(ch);\n                if (glyphInfo !== null && typeof glyphInfo !== 'undefined') {\n                    glyphs[i++] = (glyphInfo)._index;\n                }\n            }\n        }\n        var unicodeLine = new _UnicodeLine();\n        unicodeLine._result = true;\n        unicodeLine._glyphIndex = glyphs;\n        return unicodeLine;\n    };\n    _RtlRenderer.prototype._customLayout = function (line, rtl, format, font, wordSpace) {\n        if (wordSpace === null || typeof wordSpace === 'undefined') {\n            var result = null;\n            if (line !== null && typeof line !== 'undefined') {\n                if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.none) {\n                    var bidi = new _Bidirectional();\n                    result = bidi._getLogicalToVisualString(line, rtl);\n                }\n            }\n            return result;\n        }\n        else {\n            var layouted = '';\n            var result = [];\n            if (line !== null && typeof line !== 'undefined' && font !== null && typeof font !== 'undefined') {\n                if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.none) {\n                    var renderer = new _ArabicShapeRenderer();\n                    var txt = renderer._shape(line);\n                    layouted = this._customLayout(txt, rtl, format);\n                }\n                if (wordSpace) {\n                    var words = layouted.split('');\n                    var count = words.length;\n                    for (var i = 0; i < count; i++) {\n                        words[Number.parseInt(i.toString(), 10)] = this._addCharacter(font, words[Number.parseInt(i.toString(), 10)]);\n                    }\n                    result = words;\n                }\n                else {\n                    result = [];\n                    result[0] = this._addCharacter(font, layouted);\n                }\n            }\n            return result;\n        }\n    };\n    _RtlRenderer.prototype._addCharacter = function (font, glyphs) {\n        if (font !== null && typeof font !== 'undefined' && glyphs !== null && typeof glyphs !== 'undefined') {\n            var internalFont = font._fontInternal;\n            var ttfReader = internalFont._ttfReader;\n            font._setSymbols(glyphs);\n            glyphs = ttfReader._convertString(glyphs);\n            var bytes = _stringToUnicodeArray(glyphs);\n            glyphs = _bytesToString(bytes);\n        }\n        return glyphs;\n    };\n    _RtlRenderer.prototype._customSplitLayout = function (line, font, rtl, wordSpace, format) {\n        var words = [];\n        if (line !== null && typeof line !== 'undefined') {\n            var reversedLine = this._customLayout(line, rtl, format);\n            words = reversedLine.split('');\n        }\n        return words;\n    };\n    return _RtlRenderer;\n}());\nexport { _RtlRenderer };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}