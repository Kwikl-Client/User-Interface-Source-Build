{"ast":null,"code":"/**\n * Navigation module\n */\nvar Navigation = /** @class */function () {\n  /**\n   * @param viewer\n   * @param viewerBase\n   * @param viewer\n   * @param viewerBase\n   * @private\n   */\n  function Navigation(viewer, viewerBase) {\n    this.pdfViewer = viewer;\n    this.pdfViewerBase = viewerBase;\n  }\n  /**\n   * Navigate to Next page of the PDF document\n   *\n   * @returns void\n   */\n  Navigation.prototype.goToNextPage = function () {\n    this.pageNumber = this.pdfViewerBase.currentPageNumber;\n    this.pageNumber++;\n    if (this.pageNumber <= this.pdfViewerBase.pageCount) {\n      this.pdfViewerBase.updateScrollTop(this.pageNumber - 1);\n    }\n  };\n  /**\n   * Navigate to Previous page of the PDF document\n   *\n   * @returns void\n   */\n  Navigation.prototype.goToPreviousPage = function () {\n    this.pageNumber = this.pdfViewerBase.currentPageNumber;\n    this.pageNumber--;\n    if (this.pageNumber > 0) {\n      this.pdfViewerBase.updateScrollTop(this.pageNumber - 1);\n    }\n  };\n  /**\n   * Navigate to given Page number\n   * Note : In case if we have provided incorrect page number as argument it will retain the existing page\n   *\n   * @param  {number} pageNumber - Defines the page number to navigate\n   * @returns void\n   */\n  Navigation.prototype.goToPage = function (pageNumber) {\n    if (pageNumber > 0 && pageNumber <= this.pdfViewerBase.pageCount && this.pdfViewerBase.currentPageNumber !== pageNumber) {\n      this.pdfViewerBase.updateScrollTop(pageNumber - 1);\n    }\n    if (this.pdfViewer.magnificationModule) {\n      this.pdfViewer.magnificationModule.resizeCanvas(pageNumber);\n    }\n    var textLayer = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + (pageNumber - 1));\n    if (textLayer) {\n      textLayer.style.display = 'block';\n    }\n  };\n  /**\n   * Navigate to First page of the PDF document\n   *\n   * @returns void\n   */\n  Navigation.prototype.goToFirstPage = function () {\n    this.pageNumber = 0;\n    this.pdfViewerBase.updateScrollTop(this.pageNumber);\n  };\n  /**\n   * Navigate to Last page of the PDF document\n   *\n   * @returns void\n   */\n  Navigation.prototype.goToLastPage = function () {\n    this.pageNumber = this.pdfViewerBase.pageCount - 1;\n    this.pdfViewerBase.updateScrollTop(this.pageNumber);\n  };\n  /**\n   * @private\n   */\n  Navigation.prototype.destroy = function () {\n    this.pageNumber = 0;\n  };\n  /**\n   * @private\n   */\n  Navigation.prototype.getModuleName = function () {\n    return 'Navigation';\n  };\n  return Navigation;\n}();\nexport { Navigation };","map":{"version":3,"names":["Navigation","viewer","viewerBase","pdfViewer","pdfViewerBase","prototype","goToNextPage","pageNumber","currentPageNumber","pageCount","updateScrollTop","goToPreviousPage","goToPage","magnificationModule","resizeCanvas","textLayer","document","getElementById","element","id","style","display","goToFirstPage","goToLastPage","destroy","getModuleName"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/navigation/page-navigation.js"],"sourcesContent":["/**\n * Navigation module\n */\nvar Navigation = /** @class */ (function () {\n    /**\n     * @param viewer\n     * @param viewerBase\n     * @param viewer\n     * @param viewerBase\n     * @private\n     */\n    function Navigation(viewer, viewerBase) {\n        this.pdfViewer = viewer;\n        this.pdfViewerBase = viewerBase;\n    }\n    /**\n     * Navigate to Next page of the PDF document\n     *\n     * @returns void\n     */\n    Navigation.prototype.goToNextPage = function () {\n        this.pageNumber = this.pdfViewerBase.currentPageNumber;\n        this.pageNumber++;\n        if (this.pageNumber <= this.pdfViewerBase.pageCount) {\n            this.pdfViewerBase.updateScrollTop(this.pageNumber - 1);\n        }\n    };\n    /**\n     * Navigate to Previous page of the PDF document\n     *\n     * @returns void\n     */\n    Navigation.prototype.goToPreviousPage = function () {\n        this.pageNumber = this.pdfViewerBase.currentPageNumber;\n        this.pageNumber--;\n        if (this.pageNumber > 0) {\n            this.pdfViewerBase.updateScrollTop(this.pageNumber - 1);\n        }\n    };\n    /**\n     * Navigate to given Page number\n     * Note : In case if we have provided incorrect page number as argument it will retain the existing page\n     *\n     * @param  {number} pageNumber - Defines the page number to navigate\n     * @returns void\n     */\n    Navigation.prototype.goToPage = function (pageNumber) {\n        if (pageNumber > 0 && pageNumber <= this.pdfViewerBase.pageCount && this.pdfViewerBase.currentPageNumber !== pageNumber) {\n            this.pdfViewerBase.updateScrollTop(pageNumber - 1);\n        }\n        if (this.pdfViewer.magnificationModule) {\n            this.pdfViewer.magnificationModule.resizeCanvas(pageNumber);\n        }\n        var textLayer = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + (pageNumber - 1));\n        if (textLayer) {\n            textLayer.style.display = 'block';\n        }\n    };\n    /**\n     * Navigate to First page of the PDF document\n     *\n     * @returns void\n     */\n    Navigation.prototype.goToFirstPage = function () {\n        this.pageNumber = 0;\n        this.pdfViewerBase.updateScrollTop(this.pageNumber);\n    };\n    /**\n     * Navigate to Last page of the PDF document\n     *\n     * @returns void\n     */\n    Navigation.prototype.goToLastPage = function () {\n        this.pageNumber = this.pdfViewerBase.pageCount - 1;\n        this.pdfViewerBase.updateScrollTop(this.pageNumber);\n    };\n    /**\n     * @private\n     */\n    Navigation.prototype.destroy = function () {\n        this.pageNumber = 0;\n    };\n    /**\n     * @private\n     */\n    Navigation.prototype.getModuleName = function () {\n        return 'Navigation';\n    };\n    return Navigation;\n}());\nexport { Navigation };\n"],"mappings":"AAAA;AACA;AACA;AACA,IAAIA,UAAU,GAAG,aAAe,YAAY;EACxC;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,UAAUA,CAACC,MAAM,EAAEC,UAAU,EAAE;IACpC,IAAI,CAACC,SAAS,GAAGF,MAAM;IACvB,IAAI,CAACG,aAAa,GAAGF,UAAU;EACnC;EACA;AACJ;AACA;AACA;AACA;EACIF,UAAU,CAACK,SAAS,CAACC,YAAY,GAAG,YAAY;IAC5C,IAAI,CAACC,UAAU,GAAG,IAAI,CAACH,aAAa,CAACI,iBAAiB;IACtD,IAAI,CAACD,UAAU,EAAE;IACjB,IAAI,IAAI,CAACA,UAAU,IAAI,IAAI,CAACH,aAAa,CAACK,SAAS,EAAE;MACjD,IAAI,CAACL,aAAa,CAACM,eAAe,CAAC,IAAI,CAACH,UAAU,GAAG,CAAC,CAAC;IAC3D;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIP,UAAU,CAACK,SAAS,CAACM,gBAAgB,GAAG,YAAY;IAChD,IAAI,CAACJ,UAAU,GAAG,IAAI,CAACH,aAAa,CAACI,iBAAiB;IACtD,IAAI,CAACD,UAAU,EAAE;IACjB,IAAI,IAAI,CAACA,UAAU,GAAG,CAAC,EAAE;MACrB,IAAI,CAACH,aAAa,CAACM,eAAe,CAAC,IAAI,CAACH,UAAU,GAAG,CAAC,CAAC;IAC3D;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIP,UAAU,CAACK,SAAS,CAACO,QAAQ,GAAG,UAAUL,UAAU,EAAE;IAClD,IAAIA,UAAU,GAAG,CAAC,IAAIA,UAAU,IAAI,IAAI,CAACH,aAAa,CAACK,SAAS,IAAI,IAAI,CAACL,aAAa,CAACI,iBAAiB,KAAKD,UAAU,EAAE;MACrH,IAAI,CAACH,aAAa,CAACM,eAAe,CAACH,UAAU,GAAG,CAAC,CAAC;IACtD;IACA,IAAI,IAAI,CAACJ,SAAS,CAACU,mBAAmB,EAAE;MACpC,IAAI,CAACV,SAAS,CAACU,mBAAmB,CAACC,YAAY,CAACP,UAAU,CAAC;IAC/D;IACA,IAAIQ,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,IAAI,CAACd,SAAS,CAACe,OAAO,CAACC,EAAE,GAAG,aAAa,IAAIZ,UAAU,GAAG,CAAC,CAAC,CAAC;IACrG,IAAIQ,SAAS,EAAE;MACXA,SAAS,CAACK,KAAK,CAACC,OAAO,GAAG,OAAO;IACrC;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIrB,UAAU,CAACK,SAAS,CAACiB,aAAa,GAAG,YAAY;IAC7C,IAAI,CAACf,UAAU,GAAG,CAAC;IACnB,IAAI,CAACH,aAAa,CAACM,eAAe,CAAC,IAAI,CAACH,UAAU,CAAC;EACvD,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIP,UAAU,CAACK,SAAS,CAACkB,YAAY,GAAG,YAAY;IAC5C,IAAI,CAAChB,UAAU,GAAG,IAAI,CAACH,aAAa,CAACK,SAAS,GAAG,CAAC;IAClD,IAAI,CAACL,aAAa,CAACM,eAAe,CAAC,IAAI,CAACH,UAAU,CAAC;EACvD,CAAC;EACD;AACJ;AACA;EACIP,UAAU,CAACK,SAAS,CAACmB,OAAO,GAAG,YAAY;IACvC,IAAI,CAACjB,UAAU,GAAG,CAAC;EACvB,CAAC;EACD;AACJ;AACA;EACIP,UAAU,CAACK,SAAS,CAACoB,aAAa,GAAG,YAAY;IAC7C,OAAO,YAAY;EACvB,CAAC;EACD,OAAOzB,UAAU;AACrB,CAAC,CAAC,CAAE;AACJ,SAASA,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}