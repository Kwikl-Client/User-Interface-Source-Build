{"ast":null,"code":"/**\n * `Selection` module is used to handle RTE Selections.\n */\nimport { NodeSelection } from './../../selection/index';\nimport { NodeCutter } from './nodecutter';\nimport { InsertMethods } from './insert-methods';\nimport { IsFormatted } from './isformatted';\nimport { isIDevice, setEditFrameFocus } from '../../common/util';\nimport { isNullOrUndefined as isNOU, Browser, closest, detach } from '@syncfusion/ej2-base';\nimport { DOMNode } from './dom-node';\nvar SelectionCommands = /** @class */function () {\n  function SelectionCommands() {}\n  /**\n   * applyFormat method\n   *\n   * @param {Document} docElement - specifies the document\n   * @param {string} format - specifies the string value\n   * @param {Node} endNode - specifies the end node\n   * @param {string} enterAction - specifies the enter key action\n   * @param {string} value - specifies the string value\n   * @param {string} selector - specifies the string\n   * @param {FormatPainterValue} painterValues specifies the element created and last child\n   * @returns {void}\n   * @hidden\n    */\n  SelectionCommands.applyFormat = function (docElement, format, endNode, enterAction, value, selector, painterValues) {\n    this.enterAction = enterAction;\n    var validFormats = ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'uppercase', 'lowercase', 'fontcolor', 'fontname', 'fontsize', 'backgroundcolor'];\n    if (validFormats.indexOf(format) > -1 || value === 'formatPainter') {\n      if (format === 'backgroundcolor' && value === '') {\n        value = 'transparent';\n      }\n      var domSelection = new NodeSelection();\n      var domNode = new DOMNode(endNode, docElement);\n      var nodeCutter = new NodeCutter();\n      var isFormatted = new IsFormatted();\n      var range = domSelection.getRange(docElement);\n      if (Browser.userAgent.indexOf('Firefox') !== -1 && range.startContainer === range.endContainer && !isNOU(endNode) && range.startContainer === endNode) {\n        var startChildNodes = range.startContainer.childNodes;\n        var startNode = startChildNodes[range.startOffset > 0 ? range.startOffset - 1 : range.startOffset] || range.startContainer;\n        var endNode_1 = range.endContainer.childNodes[range.endOffset > 0 ? range.endOffset - 1 : range.endOffset] || range.endContainer;\n        var lastSelectionNode = endNode_1.lastChild.nodeName === 'BR' ? isNOU(endNode_1.lastChild.previousSibling) ? endNode_1 : endNode_1.lastChild.previousSibling : endNode_1.firstChild;\n        while (!isNOU(lastSelectionNode) && lastSelectionNode.nodeName !== '#text' && lastSelectionNode.nodeName !== 'IMG' && lastSelectionNode.nodeName !== 'BR' && lastSelectionNode.nodeName !== 'HR') {\n          lastSelectionNode = lastSelectionNode.lastChild;\n        }\n        ;\n        domSelection.setSelectionText(docElement, startNode, lastSelectionNode, 0, 0);\n        range = domSelection.getRange(docElement);\n      }\n      var save = domSelection.save(range, docElement);\n      var nodes = range.collapsed ? domSelection.getSelectionNodeCollection(range) : domSelection.getSelectionNodeCollectionBr(range);\n      var isCollapsed = false;\n      var isFormat = false;\n      var isCursor = false;\n      var preventRestore = false;\n      var isFontStyle = ['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1;\n      if (range.collapsed) {\n        var currentFormatNode = isFormatted.getFormattedNode(range.startContainer, format, endNode);\n        var currentSelector = !isNOU(currentFormatNode) ? currentFormatNode.getAttribute('style') === null ? currentFormatNode.nodeName : currentFormatNode.nodeName + '[style=\\'' + currentFormatNode.getAttribute('style') + '\\']' : null;\n        if (nodes.length > 0) {\n          isCollapsed = true;\n          range = nodeCutter.GetCursorRange(docElement, range, nodes[0]);\n        } else if (range.startContainer.nodeType === 3 && (range.startContainer.parentElement.childElementCount > 0 && range.startOffset > 0 && range.startContainer.parentElement.firstElementChild.tagName.toLowerCase() !== 'br' || !isNOU(currentFormatNode) && currentFormatNode === range.startContainer.parentElement.closest(currentSelector) && range.startContainer.parentElement.closest(currentSelector).textContent.replace(\n        // eslint-disable-next-line\n        new RegExp(String.fromCharCode(8203), 'g'), '').trim().length !== 0)) {\n          isCollapsed = true;\n          range = nodeCutter.GetCursorRange(docElement, range, range.startContainer);\n          nodes.push(range.startContainer);\n        } else {\n          var cursorNode = this.insertCursorNode(docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode);\n          domSelection.endContainer = domSelection.startContainer = domSelection.getNodeArray(cursorNode, true);\n          var childNodes = cursorNode.nodeName === 'BR' && cursorNode.parentNode.childNodes;\n          if (!isNOU(childNodes) && childNodes.length === 1 && childNodes[0].nodeName === 'BR' && nodes.length === 0) {\n            domSelection.setSelectionText(docElement, range.startContainer, range.endContainer, 0, 0);\n            preventRestore = true;\n          } else {\n            domSelection.endOffset = domSelection.startOffset = 1;\n          }\n          if (cursorNode.nodeName === 'BR' && cursorNode.parentNode.textContent.length === 0) {\n            preventRestore = true;\n          }\n        }\n      }\n      isCursor = range.collapsed;\n      var isSubSup = false;\n      for (var index = 0; index < nodes.length; index++) {\n        var formatNode = isFormatted.getFormattedNode(nodes[index], format, endNode);\n        if (formatNode === null) {\n          if (format === 'subscript') {\n            formatNode = isFormatted.getFormattedNode(nodes[index], 'superscript', endNode);\n            isSubSup = formatNode === null ? false : true;\n          } else if (format === 'superscript') {\n            formatNode = isFormatted.getFormattedNode(nodes[index], 'subscript', endNode);\n            isSubSup = formatNode === null ? false : true;\n          }\n        }\n        if (index === 0 && formatNode === null) {\n          isFormat = true;\n        }\n        if (formatNode !== null && (!isFormat || isFontStyle)) {\n          nodes[index] = this.removeFormat(nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode);\n        } else {\n          nodes[index] = this.insertFormat(docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, painterValues, domNode, endNode);\n        }\n        domSelection = this.applySelection(nodes, domSelection, nodeCutter, index, isCollapsed);\n      }\n      if (isIDevice()) {\n        setEditFrameFocus(endNode, selector);\n      }\n      if (!preventRestore) {\n        save.restore();\n      }\n      if (isSubSup) {\n        this.applyFormat(docElement, format, endNode, enterAction);\n      }\n    }\n  };\n  SelectionCommands.insertCursorNode = function (docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode) {\n    var cursorNodes = domSelection.getNodeCollection(range);\n    var domNode = new DOMNode(endNode, docElement);\n    var cursorFormat = cursorNodes.length > 0 ? cursorNodes.length > 1 && range.startContainer === range.endContainer ? this.getCursorFormat(isFormatted, cursorNodes, format, endNode) : isFormatted.getFormattedNode(cursorNodes[0], format, endNode) : null;\n    var cursorNode = null;\n    if (cursorFormat) {\n      cursorNode = cursorNodes[0];\n      if (cursorFormat.firstChild.textContent.charCodeAt(0) === 8203 && cursorFormat.firstChild.nodeType === 3) {\n        // eslint-disable-next-line\n        var regEx = new RegExp(String.fromCharCode(8203), 'g');\n        var emptySpaceNode = void 0;\n        if (cursorFormat.firstChild === cursorNode) {\n          cursorNode.textContent = cursorFormat.parentElement && (domNode.isBlockNode(cursorFormat.parentElement) && cursorFormat.parentElement.textContent.length <= 1 ? cursorFormat.parentElement.childElementCount > 1 : cursorFormat.childElementCount === 0) && (cursorFormat.parentElement.textContent.length > 1 || cursorFormat.parentElement.firstChild && cursorFormat.parentElement.firstChild.nodeType === 1) ? cursorNode.textContent : cursorNode.textContent.replace(regEx, '');\n          emptySpaceNode = cursorNode;\n        } else {\n          cursorFormat.firstChild.textContent = cursorFormat.firstChild.textContent.replace(regEx, '');\n          emptySpaceNode = cursorFormat.firstChild;\n        }\n        var pointer = void 0;\n        if (emptySpaceNode.textContent.length === 0) {\n          if (!isNOU(emptySpaceNode.previousSibling)) {\n            cursorNode = emptySpaceNode.previousSibling;\n            pointer = emptySpaceNode.textContent.length - 1;\n            domSelection.setCursorPoint(docElement, emptySpaceNode, pointer);\n          } else if (!isNOU(emptySpaceNode.parentElement) && emptySpaceNode.parentElement.textContent.length === 0) {\n            var brElem = document.createElement('BR');\n            emptySpaceNode.parentElement.appendChild(brElem);\n            detach(emptySpaceNode);\n            cursorNode = brElem;\n            domSelection.setCursorPoint(docElement, cursorNode.parentElement, 0);\n          }\n        }\n      }\n      if (['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1) {\n        if (format === 'fontcolor') {\n          cursorFormat.style.color = value;\n        } else if (format === 'fontname') {\n          cursorFormat.style.fontFamily = value;\n        } else if (format === 'fontsize') {\n          cursorFormat.style.fontSize = value;\n        } else {\n          cursorFormat.style.backgroundColor = value;\n        }\n        cursorNode = cursorFormat;\n      } else {\n        InsertMethods.unwrap(cursorFormat);\n      }\n    } else {\n      if (cursorNodes.length > 1 && range.startOffset > 0 && cursorNodes[0].firstElementChild && cursorNodes[0].firstElementChild.tagName.toLowerCase() === 'br') {\n        cursorNodes[0].innerHTML = '';\n      }\n      if (cursorNodes.length === 1 && range.startOffset === 0 && (cursorNodes[0].nodeName === 'BR' || (isNOU(cursorNodes[0].nextSibling) ? false : cursorNodes[0].nextSibling.nodeName === 'BR'))) {\n        detach(cursorNodes[0].nodeName === '#text' ? cursorNodes[0].nextSibling : cursorNodes[0]);\n      }\n      cursorNode = this.getInsertNode(docElement, range, format, value).firstChild;\n    }\n    return cursorNode;\n  };\n  SelectionCommands.getCursorFormat = function (isFormatted, cursorNodes, format, endNode) {\n    var currentNode;\n    for (var index = 0; index < cursorNodes.length; index++) {\n      currentNode = cursorNodes[index].lastElementChild ? cursorNodes[index].lastElementChild : cursorNodes[index];\n    }\n    return isFormatted.getFormattedNode(currentNode, format, endNode);\n  };\n  SelectionCommands.removeFormat = function (nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode) {\n    var splitNode = null;\n    var startText = range.startContainer.nodeName === '#text' ? range.startContainer.textContent.substring(range.startOffset, range.startContainer.textContent.length) : range.startContainer.textContent;\n    var nodeText = nodes[index].textContent;\n    if (!(range.startContainer === range.endContainer && range.startOffset === 0 && range.endOffset === range.startContainer.length)) {\n      var nodeIndex = [];\n      var cloneNode = nodes[index];\n      do {\n        nodeIndex.push(domSelection.getIndex(cloneNode));\n        cloneNode = cloneNode.parentNode;\n      } while (cloneNode && cloneNode !== formatNode);\n      if (nodes[index].nodeName !== 'BR') {\n        cloneNode = splitNode = isCursor && formatNode.textContent.length - 1 === range.startOffset ? nodeCutter.SplitNode(range, formatNode, true) : nodeCutter.GetSpliceNode(range, formatNode);\n      }\n      if (!isCursor) {\n        while (cloneNode && cloneNode.childNodes.length > 0 && nodeIndex.length - 1 >= 0 && cloneNode.childNodes.length > nodeIndex[nodeIndex.length - 1]) {\n          cloneNode = cloneNode.childNodes[nodeIndex[nodeIndex.length - 1]];\n          nodeIndex.pop();\n        }\n        if (nodes[index].nodeName !== 'BR') {\n          if (cloneNode.nodeType === 3 && !(isCursor && cloneNode.nodeValue === '')) {\n            nodes[index] = cloneNode;\n          } else {\n            var divNode = document.createElement('div');\n            divNode.innerHTML = '&#8203;';\n            if (cloneNode.nodeType !== 3) {\n              cloneNode.insertBefore(divNode.firstChild, cloneNode.firstChild);\n              nodes[index] = cloneNode.firstChild;\n            } else {\n              cloneNode.parentNode.insertBefore(divNode.firstChild, cloneNode);\n              nodes[index] = cloneNode.previousSibling;\n              cloneNode.parentNode.removeChild(cloneNode);\n            }\n          }\n        }\n      } else {\n        var lastNode = splitNode;\n        for (; lastNode.firstChild !== null && lastNode.firstChild.nodeType !== 3; null) {\n          lastNode = lastNode.firstChild;\n        }\n        lastNode.innerHTML = '&#8203;';\n        nodes[index] = lastNode.firstChild;\n      }\n    } else if (isFontStyle && !nodes[index].contains(formatNode) && nodes[index].nodeType === 3 && nodes[index].textContent !== formatNode.textContent) {\n      // If the selection is within the format node .\n      var isFullNodeSelected = nodes[index].textContent === nodes[index].wholeText;\n      var nodeTraverse = nodes[index];\n      var styleElement = this.GetFormatNode(format, value);\n      // while loop and traverse back until text content does not match with parent text content\n      while (nodeTraverse && nodeTraverse.textContent === nodeTraverse.parentElement.textContent) {\n        nodeTraverse = nodeTraverse.parentElement;\n      }\n      if (isFullNodeSelected && formatNode.textContent !== nodeTraverse.textContent) {\n        var nodeArray = [];\n        var priorityNode = this.getPriorityFormatNode(nodeTraverse, endNode);\n        if (priorityNode && priorityNode.textContent === nodeTraverse.textContent) {\n          nodeTraverse = priorityNode;\n        }\n        nodeArray.push(nodeTraverse);\n        this.applyStyles(nodeArray, 0, styleElement);\n        return nodes[index];\n      }\n    }\n    var fontStyle;\n    if (format === 'backgroundcolor') {\n      fontStyle = formatNode.style.fontSize;\n    }\n    var bgStyle;\n    if (format === 'fontsize') {\n      var bg = closest(nodes[index].parentElement, 'span[style*=' + 'background-color' + ']');\n      if (!isNOU(bg)) {\n        bgStyle = bg.style.backgroundColor;\n      }\n    }\n    var formatNodeStyles = formatNode.getAttribute('style');\n    var formatNodeTagName = formatNode.tagName;\n    var child;\n    if (formatNodeTagName === 'A' && format === 'underline') {\n      formatNode.style.textDecoration = 'none';\n      child = [formatNode];\n    } else {\n      child = InsertMethods.unwrap(formatNode);\n      var liElement = nodes[index].parentElement;\n      if (!isNOU(liElement) && liElement.tagName.toLowerCase() !== 'li') {\n        liElement = closest(liElement, 'li');\n      }\n      if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.trim() === nodes[index].textContent.trim()) {\n        if (format === 'bold') {\n          liElement.style.fontWeight = 'normal';\n        } else if (format === \"italic\") {\n          liElement.style.fontStyle = 'normal';\n        }\n      }\n    }\n    if (child[0] && !isFontStyle) {\n      var nodeTraverse = child[index] ? child[index] : child[0];\n      var textNode = nodeTraverse;\n      for (; nodeTraverse && nodeTraverse.parentElement && nodeTraverse.parentElement !== endNode;\n      // eslint-disable-next-line\n      nodeTraverse = nodeTraverse) {\n        var nodeTraverseCondition = void 0;\n        if (formatNode.nodeName === 'SPAN') {\n          nodeTraverseCondition = nodeTraverse.parentElement.tagName.toLocaleLowerCase() === formatNode.tagName.toLocaleLowerCase() && nodeTraverse.parentElement.getAttribute('style') === formatNodeStyles;\n        } else {\n          nodeTraverseCondition = nodeTraverse.parentElement.tagName.toLocaleLowerCase() === formatNode.tagName.toLocaleLowerCase();\n        }\n        if (nodeTraverse.parentElement && nodeTraverseCondition && (nodeTraverse.parentElement.childElementCount > 1 || range.startOffset > 1)) {\n          if (textNode.parentElement && textNode.parentElement.tagName.toLocaleLowerCase() === formatNode.tagName.toLocaleLowerCase()) {\n            if (range.startOffset === range.endOffset && textNode.nodeType !== 1 && !isNOU(textNode.textContent) && textNode.parentElement.childElementCount > 1) {\n              range.setStart(textNode, 0);\n              range.setEnd(textNode, textNode.textContent.length);\n              nodeCutter.SplitNode(range, textNode.parentElement, false);\n            }\n          }\n          if (nodeTraverse.parentElement.tagName.toLocaleLowerCase() === 'span') {\n            if (formatNode.style.textDecoration === 'underline' && nodeTraverse.parentElement.style.textDecoration !== 'underline') {\n              nodeTraverse = nodeTraverse.parentElement;\n              continue;\n            }\n          }\n          InsertMethods.unwrap(nodeTraverse.parentElement);\n          nodeTraverse = !isNOU(nodeTraverse.parentElement) && !domNode.isBlockNode(nodeTraverse.parentElement) ? textNode : nodeTraverse.parentElement;\n        } else {\n          nodeTraverse = nodeTraverse.parentElement;\n        }\n      }\n    }\n    if (child.length > 0 && isFontStyle) {\n      for (var num = 0; num < child.length; num++) {\n        if (child[num].nodeType !== 3 || child[num].textContent && child[num].textContent.trim().length > 0) {\n          child[num] = InsertMethods.Wrap(child[num], this.GetFormatNode(format, value, formatNodeTagName, formatNodeStyles));\n          var liElement = nodes[index].parentElement;\n          if (!isNOU(liElement) && liElement.tagName.toLowerCase() !== 'li') {\n            liElement = closest(liElement, 'li');\n          }\n          if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.trim() === nodes[index].textContent.trim()) {\n            if (format === 'fontname') {\n              liElement.style.fontFamily = value;\n            }\n          }\n          if (child[num].textContent === startText) {\n            if (num === 0) {\n              range.setStartBefore(child[num]);\n            } else if (num === child.length - 1) {\n              range.setEndAfter(child[num]);\n            }\n          }\n        }\n      }\n      var currentNodeElem = nodes[index].parentElement;\n      if (!isNOU(fontStyle) && fontStyle !== '') {\n        currentNodeElem.style.fontSize = fontStyle;\n      }\n      if (!isNOU(bgStyle) && bgStyle !== '') {\n        currentNodeElem.style.backgroundColor = bgStyle;\n      }\n      if (format === 'backgroundcolor' && !isNOU(fontStyle) && fontStyle !== '' && currentNodeElem.parentElement.innerHTML === currentNodeElem.outerHTML) {\n        var curParentElem = currentNodeElem.parentElement;\n        curParentElem.parentElement.insertBefore(currentNodeElem, curParentElem);\n        detach(curParentElem);\n      }\n      if (format === 'fontsize' || format === 'fontcolor') {\n        var liElement = nodes[index].parentElement;\n        var parentElement = nodes[index].parentElement;\n        while (!isNOU(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n          parentElement = parentElement.parentElement;\n          liElement = parentElement;\n        }\n        var num = index;\n        var liChildContent = '';\n        while (num >= 0 && !isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.replace('/\\u200B/g', '').trim().includes(nodes[num].textContent.trim())) {\n          liChildContent = ' ' + nodes[num].textContent.trim() + liChildContent;\n          num--;\n        }\n        var isNestedList = false;\n        var nestedListCount = 0;\n        var isNestedListItem = false;\n        if (!isNOU(liElement) && liElement.childNodes) {\n          for (var num_1 = 0; num_1 < liElement.childNodes.length; num_1++) {\n            if (liElement.childNodes[num_1].nodeName === ('OL' || 'UL')) {\n              nestedListCount++;\n              isNestedList = true;\n            }\n          }\n        }\n        if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.split('\\u200B').join('').trim() === liChildContent.split('\\u200B').join('').trim()) {\n          if (format === 'fontsize') {\n            liElement.style.fontSize = value;\n          } else {\n            liElement.style.color = value;\n            liElement.style.textDecoration = 'inherit';\n          }\n        } else if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && isNestedList) {\n          if (isNestedList && nestedListCount > 0) {\n            for (var num_2 = 0; num_2 < liElement.childNodes.length; num_2++) {\n              if (nodes[index].textContent === liElement.childNodes[num_2].textContent && nodes[index].textContent === nodeText && liElement.textContent.replace('/\\u200B/g', '').trim().includes(liChildContent.split('\\u200B').join('').trim())) {\n                isNestedListItem = true;\n              }\n            }\n          }\n          if (isNestedListItem) {\n            for (var num_3 = 0; num_3 < liElement.childNodes.length; num_3++) {\n              if (liElement.childNodes[num_3].nodeName === ('OL' || 'UL')) {\n                liElement.childNodes[num_3].style.fontSize = 'initial';\n              }\n            }\n            if (format === 'fontsize') {\n              liElement.style.fontSize = value;\n            } else {\n              liElement.style.color = value;\n              liElement.style.textDecoration = 'inherit';\n            }\n          }\n        }\n      }\n    }\n    return nodes[index];\n  };\n  SelectionCommands.insertFormat = function (docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, painterValues, domNode, endNode) {\n    if (!isCursor) {\n      if (formatNode === null && isFormat || isFontStyle) {\n        if (nodes[index].nodeName !== 'BR') {\n          nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n          nodes[index].textContent = nodeCutter.TrimLineBreak(nodes[index].textContent);\n        }\n        if (format === 'uppercase' || format === 'lowercase') {\n          nodes[index].textContent = format === 'uppercase' ? nodes[index].textContent.toLocaleUpperCase() : nodes[index].textContent.toLocaleLowerCase();\n        } else if (!(isFontStyle === true && value === '')) {\n          var element = this.GetFormatNode(format, value);\n          if (value === 'formatPainter' || isFontStyle) {\n            var liElement = nodes[index].parentElement;\n            var parentElement = nodes[index].parentElement;\n            while (!isNOU(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n              parentElement = parentElement.parentElement;\n              liElement = parentElement;\n            }\n            if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.trim() === nodes[index].textContent.trim()) {\n              if (format === 'fontsize') {\n                liElement.style.fontSize = value;\n              } else if (format === 'fontcolor') {\n                liElement.style.color = value;\n                liElement.style.textDecoration = 'inherit';\n              } else if (format === 'fontname') {\n                liElement.style.fontFamily = value;\n              }\n            }\n            if (value === 'formatPainter') {\n              return this.insertFormatPainterElem(nodes, index, range, nodeCutter, painterValues, domNode);\n            }\n            var currentNode = nodes[index];\n            var priorityNode = this.getPriorityFormatNode(currentNode, endNode);\n            // 1. Checking is there any priority node present in the selection range. (Use case for nested styles);\n            // 2  Or font style is applied. (Use case not a nested style)\n            if (!isNOU(priorityNode) || isFontStyle) {\n              var currentFormatNode = isNOU(priorityNode) ? currentNode : priorityNode;\n              currentFormatNode = !isNOU(priorityNode) && priorityNode.style.fontSize !== '' ? currentFormatNode.firstChild : currentFormatNode;\n              if (isNOU(priorityNode) || format === 'fontsize') {\n                while (currentFormatNode) {\n                  var isSameTextContent = currentFormatNode.parentElement.textContent.trim() === nodes[index].textContent.trim();\n                  var parent_1 = currentFormatNode.parentElement;\n                  if (!domNode.isBlockNode(parent_1) && isSameTextContent && !(parent_1.nodeName === 'SPAN' && parent_1.classList.contains('e-img-inner'))) {\n                    currentFormatNode = parent_1;\n                  } else {\n                    break;\n                  }\n                }\n              }\n              var nodeList = [];\n              // Since color is different for different themnes, we need to wrap the fontColor over the text node.\n              if (format === 'fontcolor') {\n                var closestAnchor = closest(nodes[index].parentElement, 'A');\n                if (!isNOU(closestAnchor) && closestAnchor.firstChild.textContent.trim() === nodes[index].textContent.trim()) {\n                  currentFormatNode = nodes[index];\n                }\n              }\n              if (nodes[index].textContent.trim() !== currentFormatNode.textContent.trim()) {\n                currentFormatNode = nodes[index];\n              }\n              nodeList[0] = currentFormatNode;\n              this.applyStyles(nodeList, 0, element);\n            } else {\n              nodes[index] = this.applyStyles(nodes, index, element);\n            }\n          } else {\n            nodes[index] = this.applyStyles(nodes, index, element);\n            var liElement = nodes[index].parentElement;\n            if (!isNOU(liElement) && liElement.tagName.toLowerCase() !== 'li') {\n              liElement = closest(liElement, 'li');\n            }\n            if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.trim() === nodes[index].textContent.trim()) {\n              if (format === 'bold') {\n                liElement.style.fontWeight = 'bold';\n              } else if (format === \"italic\") {\n                liElement.style.fontStyle = 'italic';\n              }\n            }\n          }\n        }\n      } else {\n        nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n      }\n    } else {\n      if (format !== 'uppercase' && format !== 'lowercase') {\n        var element = this.getInsertNode(docElement, range, format, value);\n        nodes[index] = element.firstChild;\n        nodeCutter.position = 1;\n      } else {\n        nodeCutter.position = range.startOffset;\n      }\n    }\n    return nodes[index];\n  };\n  SelectionCommands.applyStyles = function (nodes, index, element) {\n    if (!(nodes[index].nodeName === 'BR' && this.enterAction === 'BR')) {\n      nodes[index] = index === nodes.length - 1 || nodes[index].nodeName === 'BR' ? InsertMethods.Wrap(nodes[index], element) : InsertMethods.WrapBefore(nodes[index], element, true);\n      nodes[index] = this.getChildNode(nodes[index], element);\n    }\n    return nodes[index];\n  };\n  SelectionCommands.getPriorityFormatNode = function (node, endNode) {\n    var isFormatted = new IsFormatted();\n    var fontSizeNode = isFormatted.getFormattedNode(node, 'fontsize', endNode);\n    var fontColorNode;\n    var backgroundColorNode;\n    var fontNameNode;\n    if (isNOU(fontSizeNode)) {\n      backgroundColorNode = isFormatted.getFormattedNode(node, 'backgroundcolor', endNode);\n      if (isNOU(backgroundColorNode)) {\n        fontNameNode = isFormatted.getFormattedNode(node, 'fontname', endNode);\n        if (isNOU(fontNameNode)) {\n          fontColorNode = isFormatted.getFormattedNode(node, 'fontcolor', endNode);\n          if (isNOU(fontColorNode)) {\n            return null;\n          } else {\n            return fontColorNode;\n          }\n        } else {\n          return fontNameNode;\n        }\n      } else {\n        return backgroundColorNode;\n      }\n    } else {\n      return fontSizeNode;\n    }\n  };\n  SelectionCommands.getInsertNode = function (docElement, range, format, value) {\n    var element = this.GetFormatNode(format, value);\n    element.innerHTML = '&#8203;';\n    if (Browser.isIE) {\n      var frag = docElement.createDocumentFragment();\n      frag.appendChild(element);\n      range.insertNode(frag);\n    } else {\n      range.insertNode(element);\n    }\n    return element;\n  };\n  SelectionCommands.getChildNode = function (node, element) {\n    if (node === undefined || node === null) {\n      element.innerHTML = '&#8203;';\n      node = element.firstChild;\n    }\n    return node;\n  };\n  SelectionCommands.applySelection = function (nodes, domSelection, nodeCutter, index, isCollapsed) {\n    if (nodes.length === 1 && !isCollapsed) {\n      domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n      domSelection.endContainer = domSelection.startContainer;\n      domSelection.startOffset = 0;\n      domSelection.endOffset = nodes[index].textContent.length;\n    } else if (nodes.length === 1 && isCollapsed) {\n      domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n      domSelection.endContainer = domSelection.startContainer;\n      domSelection.startOffset = nodeCutter.position;\n      domSelection.endOffset = nodeCutter.position;\n    } else if (index === 0) {\n      domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n      domSelection.startOffset = 0;\n    } else if (index === nodes.length - 1) {\n      domSelection.endContainer = domSelection.getNodeArray(nodes[index], false);\n      domSelection.endOffset = nodes[index].textContent.length;\n    }\n    return domSelection;\n  };\n  SelectionCommands.GetFormatNode = function (format, value, tagName, styles) {\n    var node;\n    switch (format) {\n      case 'bold':\n        return document.createElement('strong');\n      case 'italic':\n        return document.createElement('em');\n      case 'underline':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.textDecoration = 'underline';\n        return node;\n      case 'strikethrough':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.textDecoration = 'line-through';\n        return node;\n      case 'superscript':\n        return document.createElement('sup');\n      case 'subscript':\n        return document.createElement('sub');\n      case 'fontcolor':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.color = value;\n        node.style.textDecoration = 'inherit';\n        return node;\n      case 'fontname':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.fontFamily = value;\n        return node;\n      case 'fontsize':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.fontSize = value;\n        return node;\n      default:\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.backgroundColor = value;\n        return node;\n    }\n  };\n  SelectionCommands.updateStyles = function (ele, tag, styles) {\n    if (styles !== null && tag === 'SPAN') {\n      ele.setAttribute('style', styles);\n    }\n  };\n  // Below function is used to insert the element created by the format painter plugin.\n  SelectionCommands.insertFormatPainterElem = function (nodes, index, range, nodeCutter, painterValues, domNode) {\n    var parent = !domNode.isBlockNode(nodes[index].parentElement) ? nodes[index].parentElement : nodes[index];\n    if (!domNode.isBlockNode(parent)) {\n      while (parent.textContent.trim() === parent.parentElement.textContent.trim() && !domNode.isBlockNode(parent.parentElement)) {\n        parent = parent.parentElement;\n      }\n    }\n    // The below code is used to remove the already present inline style from the text node.\n    if (!isNOU(parent) && parent.nodeType === 1 && !(parent.classList.contains('e-rte-img-caption') || parent.classList.contains('e-img-inner'))) {\n      this.formatPainterCleanup(index, nodes, parent, range, nodeCutter, domNode);\n    }\n    var elem = painterValues.element;\n    // The below code is used to apply the inline format copied.\n    if (!isNOU(elem)) {\n      // Step 1: Cloning the element that is created by format painter.\n      // Step 2: Finding the last child of the nested elememt using the paintervalues.lastchild nodename\n      // Step 3: Assigning the nodes[index] text content to the last child element.\n      // Step 4: Wrapping the cloned element with the nodes[index]\n      var clonedElement = elem.cloneNode(true);\n      var elemList = clonedElement.querySelectorAll(painterValues.lastChild.nodeName);\n      var lastElement = void 0;\n      if (elemList.length > 0) {\n        lastElement = elemList[elemList.length - 1];\n      } else {\n        if (!isNOU(clonedElement) && clonedElement.nodeName === painterValues.lastChild.nodeName) {\n          lastElement = clonedElement;\n        }\n      }\n      lastElement.textContent = nodes[index].textContent;\n      var lastChild = lastElement.childNodes[0];\n      nodes[index] = InsertMethods.Wrap(nodes[index], clonedElement);\n      nodes[index].textContent = '';\n      nodes[index] = lastChild;\n    }\n    return nodes[index];\n  };\n  SelectionCommands.formatPainterCleanup = function (index, nodes, parent, range, nodeCutter, domNode) {\n    var INVALID_TAGS = ['A', 'AUDIO', 'IMG', 'VIDEO', 'IFRAME'];\n    if (index === 0 && parent.textContent.trim() !== nodes[index].textContent.trim()) {\n      nodeCutter.SplitNode(range, parent, true);\n      var childELemList = nodes[index].parentElement.childNodes;\n      for (var i = 0; i < childELemList.length; i++) {\n        if (childELemList[i].textContent.trim() === nodes[i].textContent.trim()) {\n          parent.parentNode.insertBefore(childELemList[i], parent);\n          break;\n        }\n      }\n      var blockChildNodes = parent.parentElement.childNodes;\n      for (var k = 0; k < blockChildNodes.length; k++) {\n        if (blockChildNodes[k].textContent.trim() === '' || blockChildNodes[k].textContent.length === 0) {\n          detach(blockChildNodes[k]);\n        }\n      }\n    } else if (parent.textContent.trim() !== nodes[index].textContent.trim()) {\n      parent.parentElement.insertBefore(nodes[index], parent);\n    } else {\n      while (!isNOU(parent) && parent.nodeType !== 3 && !domNode.isBlockNode(parent)) {\n        var temp = void 0;\n        for (var i = 0; i < parent.childNodes.length; i++) {\n          var currentChild = parent.childNodes[i];\n          if (currentChild.textContent.trim().length !== 0 && currentChild.nodeType !== 3) {\n            temp = parent.childNodes[i];\n          }\n        }\n        if (INVALID_TAGS.indexOf(parent.tagName) === -1) {\n          InsertMethods.unwrap(parent);\n        }\n        parent = temp;\n      }\n    }\n  };\n  SelectionCommands.enterAction = 'P';\n  return SelectionCommands;\n}();\nexport { SelectionCommands };","map":{"version":3,"names":["NodeSelection","NodeCutter","InsertMethods","IsFormatted","isIDevice","setEditFrameFocus","isNullOrUndefined","isNOU","Browser","closest","detach","DOMNode","SelectionCommands","applyFormat","docElement","format","endNode","enterAction","value","selector","painterValues","validFormats","indexOf","domSelection","domNode","nodeCutter","isFormatted","range","getRange","userAgent","startContainer","endContainer","startChildNodes","childNodes","startNode","startOffset","endNode_1","endOffset","lastSelectionNode","lastChild","nodeName","previousSibling","firstChild","setSelectionText","save","nodes","collapsed","getSelectionNodeCollection","getSelectionNodeCollectionBr","isCollapsed","isFormat","isCursor","preventRestore","isFontStyle","currentFormatNode","getFormattedNode","currentSelector","getAttribute","length","GetCursorRange","nodeType","parentElement","childElementCount","firstElementChild","tagName","toLowerCase","textContent","replace","RegExp","String","fromCharCode","trim","push","cursorNode","insertCursorNode","getNodeArray","parentNode","isSubSup","index","formatNode","removeFormat","insertFormat","applySelection","restore","cursorNodes","getNodeCollection","cursorFormat","getCursorFormat","charCodeAt","regEx","emptySpaceNode","isBlockNode","pointer","setCursorPoint","brElem","document","createElement","appendChild","style","color","fontFamily","fontSize","backgroundColor","unwrap","innerHTML","nextSibling","getInsertNode","currentNode","lastElementChild","splitNode","startText","substring","nodeText","nodeIndex","cloneNode","getIndex","SplitNode","GetSpliceNode","pop","nodeValue","divNode","insertBefore","removeChild","lastNode","contains","isFullNodeSelected","wholeText","nodeTraverse","styleElement","GetFormatNode","nodeArray","priorityNode","getPriorityFormatNode","applyStyles","fontStyle","bgStyle","bg","formatNodeStyles","formatNodeTagName","child","textDecoration","liElement","fontWeight","textNode","nodeTraverseCondition","toLocaleLowerCase","setStart","setEnd","num","Wrap","setStartBefore","setEndAfter","currentNodeElem","outerHTML","curParentElem","liChildContent","includes","isNestedList","nestedListCount","isNestedListItem","num_1","split","join","num_2","num_3","TrimLineBreak","toLocaleUpperCase","element","insertFormatPainterElem","isSameTextContent","parent_1","classList","nodeList","closestAnchor","position","WrapBefore","getChildNode","node","fontSizeNode","fontColorNode","backgroundColorNode","fontNameNode","isIE","frag","createDocumentFragment","insertNode","undefined","styles","updateStyles","ele","tag","setAttribute","parent","formatPainterCleanup","elem","clonedElement","elemList","querySelectorAll","lastElement","INVALID_TAGS","childELemList","i","blockChildNodes","k","temp","currentChild"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/selection-commands.js"],"sourcesContent":["/**\n * `Selection` module is used to handle RTE Selections.\n */\nimport { NodeSelection } from './../../selection/index';\nimport { NodeCutter } from './nodecutter';\nimport { InsertMethods } from './insert-methods';\nimport { IsFormatted } from './isformatted';\nimport { isIDevice, setEditFrameFocus } from '../../common/util';\nimport { isNullOrUndefined as isNOU, Browser, closest, detach } from '@syncfusion/ej2-base';\nimport { DOMNode } from './dom-node';\nvar SelectionCommands = /** @class */ (function () {\n    function SelectionCommands() {\n    }\n    /**\n     * applyFormat method\n     *\n     * @param {Document} docElement - specifies the document\n     * @param {string} format - specifies the string value\n     * @param {Node} endNode - specifies the end node\n     * @param {string} enterAction - specifies the enter key action\n     * @param {string} value - specifies the string value\n     * @param {string} selector - specifies the string\n     * @param {FormatPainterValue} painterValues specifies the element created and last child\n     * @returns {void}\n     * @hidden\n\n     */\n    SelectionCommands.applyFormat = function (docElement, format, endNode, enterAction, value, selector, painterValues) {\n        this.enterAction = enterAction;\n        var validFormats = ['bold', 'italic', 'underline', 'strikethrough', 'superscript',\n            'subscript', 'uppercase', 'lowercase', 'fontcolor', 'fontname', 'fontsize', 'backgroundcolor'];\n        if (validFormats.indexOf(format) > -1 || value === 'formatPainter') {\n            if (format === 'backgroundcolor' && value === '') {\n                value = 'transparent';\n            }\n            var domSelection = new NodeSelection();\n            var domNode = new DOMNode(endNode, docElement);\n            var nodeCutter = new NodeCutter();\n            var isFormatted = new IsFormatted();\n            var range = domSelection.getRange(docElement);\n            if (Browser.userAgent.indexOf('Firefox') !== -1 && range.startContainer === range.endContainer && !isNOU(endNode) && range.startContainer === endNode) {\n                var startChildNodes = range.startContainer.childNodes;\n                var startNode = ((startChildNodes[(range.startOffset > 0) ? (range.startOffset - 1) :\n                    range.startOffset]) || range.startContainer);\n                var endNode_1 = (range.endContainer.childNodes[(range.endOffset > 0) ? (range.endOffset - 1) :\n                    range.endOffset] || range.endContainer);\n                var lastSelectionNode = (endNode_1.lastChild.nodeName === 'BR' ? (isNOU(endNode_1.lastChild.previousSibling) ? endNode_1\n                    : endNode_1.lastChild.previousSibling) : endNode_1.firstChild);\n                while (!isNOU(lastSelectionNode) && lastSelectionNode.nodeName !== '#text' && lastSelectionNode.nodeName !== 'IMG' &&\n                    lastSelectionNode.nodeName !== 'BR' && lastSelectionNode.nodeName !== 'HR') {\n                    lastSelectionNode = lastSelectionNode.lastChild;\n                }\n                ;\n                domSelection.setSelectionText(docElement, startNode, lastSelectionNode, 0, 0);\n                range = domSelection.getRange(docElement);\n            }\n            var save = domSelection.save(range, docElement);\n            var nodes = range.collapsed ? domSelection.getSelectionNodeCollection(range) :\n                domSelection.getSelectionNodeCollectionBr(range);\n            var isCollapsed = false;\n            var isFormat = false;\n            var isCursor = false;\n            var preventRestore = false;\n            var isFontStyle = (['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1);\n            if (range.collapsed) {\n                var currentFormatNode = isFormatted.getFormattedNode(range.startContainer, format, endNode);\n                var currentSelector = !isNOU(currentFormatNode) ?\n                    (currentFormatNode.getAttribute('style') === null ? currentFormatNode.nodeName :\n                        currentFormatNode.nodeName + '[style=\\'' + currentFormatNode.getAttribute('style') + '\\']') : null;\n                if (nodes.length > 0) {\n                    isCollapsed = true;\n                    range = nodeCutter.GetCursorRange(docElement, range, nodes[0]);\n                }\n                else if (range.startContainer.nodeType === 3 && ((range.startContainer.parentElement.childElementCount > 0 &&\n                    range.startOffset > 0 && range.startContainer.parentElement.firstElementChild.tagName.toLowerCase() !== 'br') ||\n                    !isNOU(currentFormatNode) && currentFormatNode ===\n                        (range.startContainer.parentElement.closest(currentSelector)) &&\n                        ((range.startContainer.parentElement.closest(currentSelector)).textContent.replace(\n                        // eslint-disable-next-line\n                        new RegExp(String.fromCharCode(8203), 'g'), '').trim().length !== 0))) {\n                    isCollapsed = true;\n                    range = nodeCutter.GetCursorRange(docElement, range, range.startContainer);\n                    nodes.push(range.startContainer);\n                }\n                else {\n                    var cursorNode = this.insertCursorNode(docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode);\n                    domSelection.endContainer = domSelection.startContainer = domSelection.getNodeArray(cursorNode, true);\n                    var childNodes = cursorNode.nodeName === 'BR' && cursorNode.parentNode.childNodes;\n                    if (!isNOU(childNodes) && childNodes.length === 1 && childNodes[0].nodeName === 'BR' && nodes.length === 0) {\n                        domSelection.setSelectionText(docElement, range.startContainer, range.endContainer, 0, 0);\n                        preventRestore = true;\n                    }\n                    else {\n                        domSelection.endOffset = domSelection.startOffset = 1;\n                    }\n                    if (cursorNode.nodeName === 'BR' && cursorNode.parentNode.textContent.length === 0) {\n                        preventRestore = true;\n                    }\n                }\n            }\n            isCursor = range.collapsed;\n            var isSubSup = false;\n            for (var index = 0; index < nodes.length; index++) {\n                var formatNode = isFormatted.getFormattedNode(nodes[index], format, endNode);\n                if (formatNode === null) {\n                    if (format === 'subscript') {\n                        formatNode = isFormatted.getFormattedNode(nodes[index], 'superscript', endNode);\n                        isSubSup = formatNode === null ? false : true;\n                    }\n                    else if (format === 'superscript') {\n                        formatNode = isFormatted.getFormattedNode(nodes[index], 'subscript', endNode);\n                        isSubSup = formatNode === null ? false : true;\n                    }\n                }\n                if (index === 0 && formatNode === null) {\n                    isFormat = true;\n                }\n                if (formatNode !== null && (!isFormat || isFontStyle)) {\n                    nodes[index] = this.removeFormat(nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode);\n                }\n                else {\n                    nodes[index] = this.insertFormat(docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, painterValues, domNode, endNode);\n                }\n                domSelection = this.applySelection(nodes, domSelection, nodeCutter, index, isCollapsed);\n            }\n            if (isIDevice()) {\n                setEditFrameFocus(endNode, selector);\n            }\n            if (!preventRestore) {\n                save.restore();\n            }\n            if (isSubSup) {\n                this.applyFormat(docElement, format, endNode, enterAction);\n            }\n        }\n    };\n    SelectionCommands.insertCursorNode = function (docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode) {\n        var cursorNodes = domSelection.getNodeCollection(range);\n        var domNode = new DOMNode(endNode, docElement);\n        var cursorFormat = (cursorNodes.length > 0) ?\n            (cursorNodes.length > 1 && range.startContainer === range.endContainer) ?\n                this.getCursorFormat(isFormatted, cursorNodes, format, endNode) :\n                isFormatted.getFormattedNode(cursorNodes[0], format, endNode) : null;\n        var cursorNode = null;\n        if (cursorFormat) {\n            cursorNode = cursorNodes[0];\n            if (cursorFormat.firstChild.textContent.charCodeAt(0) === 8203 && cursorFormat.firstChild.nodeType === 3) {\n                // eslint-disable-next-line\n                var regEx = new RegExp(String.fromCharCode(8203), 'g');\n                var emptySpaceNode = void 0;\n                if (cursorFormat.firstChild === cursorNode) {\n                    cursorNode.textContent = (cursorFormat.parentElement && (domNode.isBlockNode(cursorFormat.parentElement) &&\n                        cursorFormat.parentElement.textContent.length <= 1 ? cursorFormat.parentElement.childElementCount > 1 :\n                        cursorFormat.childElementCount === 0) &&\n                        (cursorFormat.parentElement.textContent.length > 1 ||\n                            cursorFormat.parentElement.firstChild && cursorFormat.parentElement.firstChild.nodeType === 1) ?\n                        cursorNode.textContent : cursorNode.textContent.replace(regEx, ''));\n                    emptySpaceNode = cursorNode;\n                }\n                else {\n                    cursorFormat.firstChild.textContent = cursorFormat.firstChild.textContent.replace(regEx, '');\n                    emptySpaceNode = cursorFormat.firstChild;\n                }\n                var pointer = void 0;\n                if (emptySpaceNode.textContent.length === 0) {\n                    if (!isNOU(emptySpaceNode.previousSibling)) {\n                        cursorNode = emptySpaceNode.previousSibling;\n                        pointer = emptySpaceNode.textContent.length - 1;\n                        domSelection.setCursorPoint(docElement, emptySpaceNode, pointer);\n                    }\n                    else if (!isNOU(emptySpaceNode.parentElement) && emptySpaceNode.parentElement.textContent.length === 0) {\n                        var brElem = document.createElement('BR');\n                        emptySpaceNode.parentElement.appendChild(brElem);\n                        detach(emptySpaceNode);\n                        cursorNode = brElem;\n                        domSelection.setCursorPoint(docElement, cursorNode.parentElement, 0);\n                    }\n                }\n            }\n            if ((['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1)) {\n                if (format === 'fontcolor') {\n                    cursorFormat.style.color = value;\n                }\n                else if (format === 'fontname') {\n                    cursorFormat.style.fontFamily = value;\n                }\n                else if (format === 'fontsize') {\n                    cursorFormat.style.fontSize = value;\n                }\n                else {\n                    cursorFormat.style.backgroundColor = value;\n                }\n                cursorNode = cursorFormat;\n            }\n            else {\n                InsertMethods.unwrap(cursorFormat);\n            }\n        }\n        else {\n            if (cursorNodes.length > 1 && range.startOffset > 0 && (cursorNodes[0].firstElementChild &&\n                cursorNodes[0].firstElementChild.tagName.toLowerCase() === 'br')) {\n                cursorNodes[0].innerHTML = '';\n            }\n            if (cursorNodes.length === 1 && range.startOffset === 0 && (cursorNodes[0].nodeName === 'BR' || (isNOU(cursorNodes[0].nextSibling) ? false : cursorNodes[0].nextSibling.nodeName === 'BR'))) {\n                detach(cursorNodes[0].nodeName === '#text' ? cursorNodes[0].nextSibling : cursorNodes[0]);\n            }\n            cursorNode = this.getInsertNode(docElement, range, format, value).firstChild;\n        }\n        return cursorNode;\n    };\n    SelectionCommands.getCursorFormat = function (isFormatted, cursorNodes, format, endNode) {\n        var currentNode;\n        for (var index = 0; index < cursorNodes.length; index++) {\n            currentNode = cursorNodes[index].lastElementChild ?\n                cursorNodes[index].lastElementChild : cursorNodes[index];\n        }\n        return isFormatted.getFormattedNode(currentNode, format, endNode);\n    };\n    SelectionCommands.removeFormat = function (nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode) {\n        var splitNode = null;\n        var startText = range.startContainer.nodeName === '#text' ?\n            range.startContainer.textContent.substring(range.startOffset, range.startContainer.textContent.length) :\n            range.startContainer.textContent;\n        var nodeText = nodes[index].textContent;\n        if (!(range.startContainer === range.endContainer && range.startOffset === 0\n            && range.endOffset === range.startContainer.length)) {\n            var nodeIndex = [];\n            var cloneNode = nodes[index];\n            do {\n                nodeIndex.push(domSelection.getIndex(cloneNode));\n                cloneNode = cloneNode.parentNode;\n            } while (cloneNode && (cloneNode !== formatNode));\n            if (nodes[index].nodeName !== 'BR') {\n                cloneNode = splitNode = (isCursor && (formatNode.textContent.length - 1) === range.startOffset) ?\n                    nodeCutter.SplitNode(range, formatNode, true)\n                    : nodeCutter.GetSpliceNode(range, formatNode);\n            }\n            if (!isCursor) {\n                while (cloneNode && cloneNode.childNodes.length > 0 && ((nodeIndex.length - 1) >= 0)\n                    && (cloneNode.childNodes.length > nodeIndex[nodeIndex.length - 1])) {\n                    cloneNode = cloneNode.childNodes[nodeIndex[nodeIndex.length - 1]];\n                    nodeIndex.pop();\n                }\n                if (nodes[index].nodeName !== 'BR') {\n                    if (cloneNode.nodeType === 3 && !(isCursor && cloneNode.nodeValue === '')) {\n                        nodes[index] = cloneNode;\n                    }\n                    else {\n                        var divNode = document.createElement('div');\n                        divNode.innerHTML = '&#8203;';\n                        if (cloneNode.nodeType !== 3) {\n                            cloneNode.insertBefore(divNode.firstChild, cloneNode.firstChild);\n                            nodes[index] = cloneNode.firstChild;\n                        }\n                        else {\n                            cloneNode.parentNode.insertBefore(divNode.firstChild, cloneNode);\n                            nodes[index] = cloneNode.previousSibling;\n                            cloneNode.parentNode.removeChild(cloneNode);\n                        }\n                    }\n                }\n            }\n            else {\n                var lastNode = splitNode;\n                for (; lastNode.firstChild !== null && lastNode.firstChild.nodeType !== 3; null) {\n                    lastNode = lastNode.firstChild;\n                }\n                lastNode.innerHTML = '&#8203;';\n                nodes[index] = lastNode.firstChild;\n            }\n        }\n        else if (isFontStyle && !nodes[index].contains(formatNode) && nodes[index].nodeType === 3 &&\n            nodes[index].textContent !== formatNode.textContent) {\n            // If the selection is within the format node .\n            var isFullNodeSelected = nodes[index].textContent === nodes[index].wholeText;\n            var nodeTraverse = nodes[index];\n            var styleElement = this.GetFormatNode(format, value);\n            // while loop and traverse back until text content does not match with parent text content\n            while (nodeTraverse && nodeTraverse.textContent === nodeTraverse.parentElement.textContent) {\n                nodeTraverse = nodeTraverse.parentElement;\n            }\n            if (isFullNodeSelected && formatNode.textContent !== nodeTraverse.textContent) {\n                var nodeArray = [];\n                var priorityNode = this.getPriorityFormatNode(nodeTraverse, endNode);\n                if (priorityNode && priorityNode.textContent === nodeTraverse.textContent) {\n                    nodeTraverse = priorityNode;\n                }\n                nodeArray.push(nodeTraverse);\n                this.applyStyles(nodeArray, 0, styleElement);\n                return nodes[index];\n            }\n        }\n        var fontStyle;\n        if (format === 'backgroundcolor') {\n            fontStyle = formatNode.style.fontSize;\n        }\n        var bgStyle;\n        if (format === 'fontsize') {\n            var bg = closest(nodes[index].parentElement, 'span[style*=' + 'background-color' + ']');\n            if (!isNOU(bg)) {\n                bgStyle = bg.style.backgroundColor;\n            }\n        }\n        var formatNodeStyles = formatNode.getAttribute('style');\n        var formatNodeTagName = formatNode.tagName;\n        var child;\n        if (formatNodeTagName === 'A' && format === 'underline') {\n            formatNode.style.textDecoration = 'none';\n            child = [formatNode];\n        }\n        else {\n            child = InsertMethods.unwrap(formatNode);\n            var liElement = nodes[index].parentElement;\n            if (!isNOU(liElement) && liElement.tagName.toLowerCase() !== 'li') {\n                liElement = closest(liElement, 'li');\n            }\n            if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' &&\n                liElement.textContent.trim() === nodes[index].textContent.trim()) {\n                if (format === 'bold') {\n                    liElement.style.fontWeight = 'normal';\n                }\n                else if (format === \"italic\") {\n                    liElement.style.fontStyle = 'normal';\n                }\n            }\n        }\n        if (child[0] && !isFontStyle) {\n            var nodeTraverse = child[index] ? child[index] : child[0];\n            var textNode = nodeTraverse;\n            for (; nodeTraverse && nodeTraverse.parentElement && nodeTraverse.parentElement !== endNode; \n            // eslint-disable-next-line\n            nodeTraverse = nodeTraverse) {\n                var nodeTraverseCondition = void 0;\n                if (formatNode.nodeName === 'SPAN') {\n                    nodeTraverseCondition = nodeTraverse.parentElement.tagName.toLocaleLowerCase()\n                        === formatNode.tagName.toLocaleLowerCase() && nodeTraverse.parentElement.getAttribute('style') === formatNodeStyles;\n                }\n                else {\n                    nodeTraverseCondition = nodeTraverse.parentElement.tagName.toLocaleLowerCase()\n                        === formatNode.tagName.toLocaleLowerCase();\n                }\n                if (nodeTraverse.parentElement && nodeTraverseCondition &&\n                    (nodeTraverse.parentElement.childElementCount > 1 || range.startOffset > 1)) {\n                    if (textNode.parentElement && textNode.parentElement.tagName.toLocaleLowerCase()\n                        === formatNode.tagName.toLocaleLowerCase()) {\n                        if ((range.startOffset === range.endOffset) && textNode.nodeType !== 1 &&\n                            !isNOU(textNode.textContent) && textNode.parentElement.childElementCount > 1) {\n                            range.setStart(textNode, 0);\n                            range.setEnd(textNode, textNode.textContent.length);\n                            nodeCutter.SplitNode(range, textNode.parentElement, false);\n                        }\n                    }\n                    if (nodeTraverse.parentElement.tagName.toLocaleLowerCase() === 'span') {\n                        if (formatNode.style.textDecoration === 'underline' &&\n                            nodeTraverse.parentElement.style.textDecoration !== 'underline') {\n                            nodeTraverse = nodeTraverse.parentElement;\n                            continue;\n                        }\n                    }\n                    InsertMethods.unwrap(nodeTraverse.parentElement);\n                    nodeTraverse = !isNOU(nodeTraverse.parentElement) && !domNode.isBlockNode(nodeTraverse.parentElement) ? textNode :\n                        nodeTraverse.parentElement;\n                }\n                else {\n                    nodeTraverse = nodeTraverse.parentElement;\n                }\n            }\n        }\n        if (child.length > 0 && isFontStyle) {\n            for (var num = 0; num < child.length; num++) {\n                if (child[num].nodeType !== 3 || (child[num].textContent &&\n                    child[num].textContent.trim().length > 0)) {\n                    child[num] = InsertMethods.Wrap(child[num], this.GetFormatNode(format, value, formatNodeTagName, formatNodeStyles));\n                    var liElement = nodes[index].parentElement;\n                    if (!isNOU(liElement) && liElement.tagName.toLowerCase() !== 'li') {\n                        liElement = closest(liElement, 'li');\n                    }\n                    if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' &&\n                        liElement.textContent.trim() === nodes[index].textContent.trim()) {\n                        if (format === 'fontname') {\n                            liElement.style.fontFamily = value;\n                        }\n                    }\n                    if (child[num].textContent === startText) {\n                        if (num === 0) {\n                            range.setStartBefore(child[num]);\n                        }\n                        else if (num === child.length - 1) {\n                            range.setEndAfter(child[num]);\n                        }\n                    }\n                }\n            }\n            var currentNodeElem = nodes[index].parentElement;\n            if (!isNOU(fontStyle) && fontStyle !== '') {\n                currentNodeElem.style.fontSize = fontStyle;\n            }\n            if (!isNOU(bgStyle) && bgStyle !== '') {\n                currentNodeElem.style.backgroundColor = bgStyle;\n            }\n            if ((format === 'backgroundcolor' && !isNOU(fontStyle) && fontStyle !== '') &&\n                currentNodeElem.parentElement.innerHTML === currentNodeElem.outerHTML) {\n                var curParentElem = currentNodeElem.parentElement;\n                curParentElem.parentElement.insertBefore(currentNodeElem, curParentElem);\n                detach(curParentElem);\n            }\n            if (format === 'fontsize' || format === 'fontcolor') {\n                var liElement = nodes[index].parentElement;\n                var parentElement = nodes[index].parentElement;\n                while (!isNOU(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n                    parentElement = parentElement.parentElement;\n                    liElement = parentElement;\n                }\n                var num = index;\n                var liChildContent = '';\n                while (num >= 0 && !isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.replace('/\\u200B/g', '').trim().includes(nodes[num].textContent.trim())) {\n                    liChildContent = ' ' + nodes[num].textContent.trim() + liChildContent;\n                    num--;\n                }\n                var isNestedList = false;\n                var nestedListCount = 0;\n                var isNestedListItem = false;\n                if (!isNOU(liElement) && liElement.childNodes) {\n                    for (var num_1 = 0; num_1 < liElement.childNodes.length; num_1++) {\n                        if (liElement.childNodes[num_1].nodeName === ('OL' || 'UL')) {\n                            nestedListCount++;\n                            isNestedList = true;\n                        }\n                    }\n                }\n                if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' &&\n                    liElement.textContent.split('\\u200B').join('').trim() === liChildContent.split('\\u200B').join('').trim()) {\n                    if (format === 'fontsize') {\n                        liElement.style.fontSize = value;\n                    }\n                    else {\n                        liElement.style.color = value;\n                        liElement.style.textDecoration = 'inherit';\n                    }\n                }\n                else if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && isNestedList) {\n                    if (isNestedList && nestedListCount > 0) {\n                        for (var num_2 = 0; num_2 < liElement.childNodes.length; num_2++) {\n                            if (nodes[index].textContent === liElement.childNodes[num_2].textContent && nodes[index].textContent === nodeText && liElement.textContent.replace('/\\u200B/g', '').trim().includes(liChildContent.split('\\u200B').join('').trim())) {\n                                isNestedListItem = true;\n                            }\n                        }\n                    }\n                    if (isNestedListItem) {\n                        for (var num_3 = 0; num_3 < liElement.childNodes.length; num_3++) {\n                            if (liElement.childNodes[num_3].nodeName === ('OL' || 'UL')) {\n                                liElement.childNodes[num_3].style.fontSize = 'initial';\n                            }\n                        }\n                        if (format === 'fontsize') {\n                            liElement.style.fontSize = value;\n                        }\n                        else {\n                            liElement.style.color = value;\n                            liElement.style.textDecoration = 'inherit';\n                        }\n                    }\n                }\n            }\n        }\n        return nodes[index];\n    };\n    SelectionCommands.insertFormat = function (docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, painterValues, domNode, endNode) {\n        if (!isCursor) {\n            if ((formatNode === null && isFormat) || isFontStyle) {\n                if (nodes[index].nodeName !== 'BR') {\n                    nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n                    nodes[index].textContent = nodeCutter.TrimLineBreak(nodes[index].textContent);\n                }\n                if (format === 'uppercase' || format === 'lowercase') {\n                    nodes[index].textContent = (format === 'uppercase') ? nodes[index].textContent.toLocaleUpperCase()\n                        : nodes[index].textContent.toLocaleLowerCase();\n                }\n                else if (!(isFontStyle === true && value === '')) {\n                    var element = this.GetFormatNode(format, value);\n                    if (value === 'formatPainter' || isFontStyle) {\n                        var liElement = nodes[index].parentElement;\n                        var parentElement = nodes[index].parentElement;\n                        while (!isNOU(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n                            parentElement = parentElement.parentElement;\n                            liElement = parentElement;\n                        }\n                        if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' &&\n                            liElement.textContent.trim() === nodes[index].textContent.trim()) {\n                            if (format === 'fontsize') {\n                                liElement.style.fontSize = value;\n                            }\n                            else if (format === 'fontcolor') {\n                                liElement.style.color = value;\n                                liElement.style.textDecoration = 'inherit';\n                            }\n                            else if (format === 'fontname') {\n                                liElement.style.fontFamily = value;\n                            }\n                        }\n                        if (value === 'formatPainter') {\n                            return this.insertFormatPainterElem(nodes, index, range, nodeCutter, painterValues, domNode);\n                        }\n                        var currentNode = nodes[index];\n                        var priorityNode = this.getPriorityFormatNode(currentNode, endNode);\n                        // 1. Checking is there any priority node present in the selection range. (Use case for nested styles);\n                        // 2  Or font style is applied. (Use case not a nested style)\n                        if (!isNOU(priorityNode) || isFontStyle) {\n                            var currentFormatNode = isNOU(priorityNode) ? currentNode : priorityNode;\n                            currentFormatNode = !isNOU(priorityNode) && priorityNode.style.fontSize !== '' ?\n                                currentFormatNode.firstChild : currentFormatNode;\n                            if (isNOU(priorityNode) || format === 'fontsize') {\n                                while (currentFormatNode) {\n                                    var isSameTextContent = currentFormatNode.parentElement.textContent.trim()\n                                        === nodes[index].textContent.trim();\n                                    var parent_1 = currentFormatNode.parentElement;\n                                    if (!domNode.isBlockNode(parent_1) && isSameTextContent &&\n                                        !(parent_1.nodeName === 'SPAN' && parent_1.classList.contains('e-img-inner'))) {\n                                        currentFormatNode = parent_1;\n                                    }\n                                    else {\n                                        break;\n                                    }\n                                }\n                            }\n                            var nodeList = [];\n                            // Since color is different for different themnes, we need to wrap the fontColor over the text node.\n                            if (format === 'fontcolor') {\n                                var closestAnchor = closest(nodes[index].parentElement, 'A');\n                                if (!isNOU(closestAnchor) && closestAnchor.firstChild.textContent.trim()\n                                    === nodes[index].textContent.trim()) {\n                                    currentFormatNode = nodes[index];\n                                }\n                            }\n                            if (nodes[index].textContent.trim() !== currentFormatNode.textContent.trim()) {\n                                currentFormatNode = nodes[index];\n                            }\n                            nodeList[0] = currentFormatNode;\n                            this.applyStyles(nodeList, 0, element);\n                        }\n                        else {\n                            nodes[index] = this.applyStyles(nodes, index, element);\n                        }\n                    }\n                    else {\n                        nodes[index] = this.applyStyles(nodes, index, element);\n                        var liElement = nodes[index].parentElement;\n                        if (!isNOU(liElement) && liElement.tagName.toLowerCase() !== 'li') {\n                            liElement = closest(liElement, 'li');\n                        }\n                        if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' &&\n                            liElement.textContent.trim() === nodes[index].textContent.trim()) {\n                            if (format === 'bold') {\n                                liElement.style.fontWeight = 'bold';\n                            }\n                            else if (format === \"italic\") {\n                                liElement.style.fontStyle = 'italic';\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n            }\n        }\n        else {\n            if (format !== 'uppercase' && format !== 'lowercase') {\n                var element = this.getInsertNode(docElement, range, format, value);\n                nodes[index] = element.firstChild;\n                nodeCutter.position = 1;\n            }\n            else {\n                nodeCutter.position = range.startOffset;\n            }\n        }\n        return nodes[index];\n    };\n    SelectionCommands.applyStyles = function (nodes, index, element) {\n        if (!(nodes[index].nodeName === 'BR' && this.enterAction === 'BR')) {\n            nodes[index] = (index === (nodes.length - 1)) || nodes[index].nodeName === 'BR' ?\n                InsertMethods.Wrap(nodes[index], element)\n                : InsertMethods.WrapBefore(nodes[index], element, true);\n            nodes[index] = this.getChildNode(nodes[index], element);\n        }\n        return nodes[index];\n    };\n    SelectionCommands.getPriorityFormatNode = function (node, endNode) {\n        var isFormatted = new IsFormatted();\n        var fontSizeNode = isFormatted.getFormattedNode(node, 'fontsize', endNode);\n        var fontColorNode;\n        var backgroundColorNode;\n        var fontNameNode;\n        if (isNOU(fontSizeNode)) {\n            backgroundColorNode = isFormatted.getFormattedNode(node, 'backgroundcolor', endNode);\n            if (isNOU(backgroundColorNode)) {\n                fontNameNode = isFormatted.getFormattedNode(node, 'fontname', endNode);\n                if (isNOU(fontNameNode)) {\n                    fontColorNode = isFormatted.getFormattedNode(node, 'fontcolor', endNode);\n                    if (isNOU(fontColorNode)) {\n                        return null;\n                    }\n                    else {\n                        return fontColorNode;\n                    }\n                }\n                else {\n                    return fontNameNode;\n                }\n            }\n            else {\n                return backgroundColorNode;\n            }\n        }\n        else {\n            return fontSizeNode;\n        }\n    };\n    SelectionCommands.getInsertNode = function (docElement, range, format, value) {\n        var element = this.GetFormatNode(format, value);\n        element.innerHTML = '&#8203;';\n        if (Browser.isIE) {\n            var frag = docElement.createDocumentFragment();\n            frag.appendChild(element);\n            range.insertNode(frag);\n        }\n        else {\n            range.insertNode(element);\n        }\n        return element;\n    };\n    SelectionCommands.getChildNode = function (node, element) {\n        if (node === undefined || node === null) {\n            element.innerHTML = '&#8203;';\n            node = element.firstChild;\n        }\n        return node;\n    };\n    SelectionCommands.applySelection = function (nodes, domSelection, nodeCutter, index, isCollapsed) {\n        if (nodes.length === 1 && !isCollapsed) {\n            domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n            domSelection.endContainer = domSelection.startContainer;\n            domSelection.startOffset = 0;\n            domSelection.endOffset = nodes[index].textContent.length;\n        }\n        else if (nodes.length === 1 && isCollapsed) {\n            domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n            domSelection.endContainer = domSelection.startContainer;\n            domSelection.startOffset = nodeCutter.position;\n            domSelection.endOffset = nodeCutter.position;\n        }\n        else if (index === 0) {\n            domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n            domSelection.startOffset = 0;\n        }\n        else if (index === nodes.length - 1) {\n            domSelection.endContainer = domSelection.getNodeArray(nodes[index], false);\n            domSelection.endOffset = nodes[index].textContent.length;\n        }\n        return domSelection;\n    };\n    SelectionCommands.GetFormatNode = function (format, value, tagName, styles) {\n        var node;\n        switch (format) {\n            case 'bold':\n                return document.createElement('strong');\n            case 'italic':\n                return document.createElement('em');\n            case 'underline':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.textDecoration = 'underline';\n                return node;\n            case 'strikethrough':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.textDecoration = 'line-through';\n                return node;\n            case 'superscript':\n                return document.createElement('sup');\n            case 'subscript':\n                return document.createElement('sub');\n            case 'fontcolor':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.color = value;\n                node.style.textDecoration = 'inherit';\n                return node;\n            case 'fontname':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.fontFamily = value;\n                return node;\n            case 'fontsize':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.fontSize = value;\n                return node;\n            default:\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.backgroundColor = value;\n                return node;\n        }\n    };\n    SelectionCommands.updateStyles = function (ele, tag, styles) {\n        if (styles !== null && tag === 'SPAN') {\n            ele.setAttribute('style', styles);\n        }\n    };\n    // Below function is used to insert the element created by the format painter plugin.\n    SelectionCommands.insertFormatPainterElem = function (nodes, index, range, nodeCutter, painterValues, domNode) {\n        var parent = !domNode.isBlockNode(nodes[index].parentElement) ?\n            nodes[index].parentElement : nodes[index];\n        if (!domNode.isBlockNode(parent)) {\n            while (parent.textContent.trim() === parent.parentElement.textContent.trim() && !domNode.isBlockNode(parent.parentElement)) {\n                parent = parent.parentElement;\n            }\n        }\n        // The below code is used to remove the already present inline style from the text node.\n        if (!isNOU(parent) && parent.nodeType === 1 && !(parent.classList.contains('e-rte-img-caption') || parent.classList.contains('e-img-inner'))) {\n            this.formatPainterCleanup(index, nodes, parent, range, nodeCutter, domNode);\n        }\n        var elem = painterValues.element;\n        // The below code is used to apply the inline format copied.\n        if (!isNOU(elem)) {\n            // Step 1: Cloning the element that is created by format painter.\n            // Step 2: Finding the last child of the nested elememt using the paintervalues.lastchild nodename\n            // Step 3: Assigning the nodes[index] text content to the last child element.\n            // Step 4: Wrapping the cloned element with the nodes[index]\n            var clonedElement = elem.cloneNode(true);\n            var elemList = clonedElement.querySelectorAll(painterValues.lastChild.nodeName);\n            var lastElement = void 0;\n            if (elemList.length > 0) {\n                lastElement = elemList[elemList.length - 1];\n            }\n            else {\n                if (!isNOU(clonedElement) && clonedElement.nodeName === painterValues.lastChild.nodeName) {\n                    lastElement = clonedElement;\n                }\n            }\n            lastElement.textContent = nodes[index].textContent;\n            var lastChild = lastElement.childNodes[0];\n            nodes[index] = InsertMethods.Wrap(nodes[index], clonedElement);\n            nodes[index].textContent = '';\n            nodes[index] = lastChild;\n        }\n        return nodes[index];\n    };\n    SelectionCommands.formatPainterCleanup = function (index, nodes, parent, range, nodeCutter, domNode) {\n        var INVALID_TAGS = ['A', 'AUDIO', 'IMG', 'VIDEO', 'IFRAME'];\n        if (index === 0 && parent.textContent.trim() !== nodes[index].textContent.trim()) {\n            nodeCutter.SplitNode(range, parent, true);\n            var childELemList = nodes[index].parentElement.childNodes;\n            for (var i = 0; i < childELemList.length; i++) {\n                if (childELemList[i].textContent.trim() === nodes[i].textContent.trim()) {\n                    parent.parentNode.insertBefore(childELemList[i], parent);\n                    break;\n                }\n            }\n            var blockChildNodes = parent.parentElement.childNodes;\n            for (var k = 0; k < blockChildNodes.length; k++) {\n                if (blockChildNodes[k].textContent.trim() === '' || blockChildNodes[k].textContent.length === 0) {\n                    detach(blockChildNodes[k]);\n                }\n            }\n        }\n        else if (parent.textContent.trim() !== nodes[index].textContent.trim()) {\n            parent.parentElement.insertBefore(nodes[index], parent);\n        }\n        else {\n            while (!isNOU(parent) && parent.nodeType !== 3 && !domNode.isBlockNode(parent)) {\n                var temp = void 0;\n                for (var i = 0; i < parent.childNodes.length; i++) {\n                    var currentChild = parent.childNodes[i];\n                    if (currentChild.textContent.trim().length !== 0 && currentChild.nodeType !== 3) {\n                        temp = parent.childNodes[i];\n                    }\n                }\n                if (INVALID_TAGS.indexOf(parent.tagName) === -1) {\n                    InsertMethods.unwrap(parent);\n                }\n                parent = temp;\n            }\n        }\n    };\n    SelectionCommands.enterAction = 'P';\n    return SelectionCommands;\n}());\nexport { SelectionCommands };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}