{"ast":null,"code":"import { RotateTransform, ElementAction } from '../../enum/enum';\nimport { Size } from '../../primitives/size';\nimport { Rect } from '../../primitives/rect';\nimport { getBounds } from '../../utility/base-util';\n/**\n * DiagramElement module defines the basic unit of diagram\n */\nvar DrawingElement = /** @class */function () {\n  function DrawingElement() {\n    /**\n     * Sets/Gets the reference point of the element\n     * ```html\n     * <div id='diagram'></div>\n     * ```\n     * ```typescript\n     * let stackPanel: StackPanel = new StackPanel();\n     * stackPanel.offsetX = 300; stackPanel.offsetY = 200;\n     * stackPanel.width = 100; stackPanel.height = 100;\n     * stackPanel.style.fill = 'red';\n     * stackPanel.pivot = { x: 0.5, y: 0.5 };\n     * let diagram: Diagram = new Diagram({\n     * ...\n     * basicElements: [stackPanel],\n     * ...\n     * });\n     * diagram.appendTo('#diagram');\n     * ```\n     */\n    this.pivot = {\n      x: 0.5,\n      y: 0.5\n    };\n    this.rotateValue = {\n      x: 0,\n      y: 0,\n      angle: 0\n    };\n    /**\n     * Sets or gets whether the content of the element needs to be measured\n     */\n    this.isDirt = true;\n    /**\n     * Sets/Gets the x-coordinate of the element\n     */\n    this.offsetX = 0;\n    /**\n     * Sets/Gets the y-coordinate of the element\n     */\n    this.offsetY = 0;\n    /**\n     * Set the corner of the element\n     */\n    this.cornerRadius = 0;\n    /**\n     * Sets/Gets the minimum height of the element\n     */\n    this.minHeight = undefined;\n    /**\n     * Sets/Gets the minimum width of the element\n     */\n    this.minWidth = undefined;\n    /**\n     * Sets/Gets the maximum width of the element\n     */\n    this.maxWidth = undefined;\n    /**\n     * Sets/Gets the maximum height of the element\n     */\n    this.maxHeight = undefined;\n    /**\n     * Sets/Gets the width of the element\n     */\n    this.width = undefined;\n    /**\n     * Sets/Gets the height of the element\n     */\n    this.height = undefined;\n    /**\n     * Sets/Gets how the element has to be horizontally arranged with respect to its immediate parent\n     * * Stretch - Stretches the diagram element throughout its immediate parent\n     * * Left - Aligns the diagram element at the left of its immediate parent\n     * * Right - Aligns the diagram element at the right of its immediate parent\n     * * Center - Aligns the diagram element at the center of its immediate parent\n     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n     */\n    this.horizontalAlignment = 'Auto';\n    /**\n     * Sets/Gets how the element has to be vertically arranged with respect to its immediate parent\n     * * Stretch - Stretches the diagram element throughout its immediate parent\n     * * Top - Aligns the diagram element at the top of its immediate parent\n     * * Bottom - Aligns the diagram element at the bottom of its immediate parent\n     * * Center - Aligns the diagram element at the center of its immediate parent\n     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n     */\n    this.verticalAlignment = 'Auto';\n    /**\n     * Sets or gets whether the content of the element to be visible\n     */\n    this.visible = true;\n    /**\n     * Sets/Gets the rotate angle of the element\n     */\n    this.rotateAngle = 0;\n    /**\n     * Sets/Gets the margin of the element\n     */\n    this.margin = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /**\n     * Sets whether the element has to be aligned with respect to a point/with respect to its immediate parent\n     * * Point - Diagram elements will be aligned with respect to a point\n     * * Object - Diagram elements will be aligned with respect to its immediate parent\n     */\n    this.relativeMode = 'Point';\n    /**\n     * Sets whether the element has to be transformed based on its parent or not\n     * * Self - Sets the transform type as Self\n     * * Parent - Sets the transform type as Parent\n     */\n    /** @private */\n    this.transform = RotateTransform.Self | RotateTransform.Parent;\n    /**\n     * Sets the style of the element\n     */\n    this.style = {\n      fill: 'white',\n      strokeColor: 'black',\n      opacity: 1,\n      strokeWidth: 1\n    };\n    /**\n     * Gets the minimum size that is required by the element\n     */\n    this.desiredSize = new Size();\n    /**\n     * Gets the size that the element will be rendered\n     */\n    this.actualSize = new Size();\n    /**\n     * Gets the rotate angle that is set to the immediate parent of the element\n     */\n    this.parentTransform = 0;\n    /** @private */\n    this.preventContainer = false;\n    /**\n     * Gets/Sets the boundary of the element\n     */\n    this.bounds = new Rect(0, 0, 0, 0);\n    /**\n     * Defines whether the element has to be measured or not\n     */\n    this.staticSize = false;\n    /**\n     * check whether the element is rect or not\n     */\n    /** @private */\n    this.isRectElement = false;\n    /** @private */\n    this.isCalculateDesiredSize = true;\n    /**\n     * Defines whether the element is group or port\n     */\n    /** @private */\n    this.elementActions = ElementAction.None;\n    //private variables\n    this.position = undefined;\n    this.unitMode = undefined;\n    /**   @private  */\n    this.float = false;\n    this.floatingBounds = undefined;\n  }\n  // public constructor() {\n  //     this.id = randomId();\n  // }\n  /**\n   * Sets the offset of the element with respect to its parent\n   * @param x\n   * @param y\n   * @param mode\n   */\n  DrawingElement.prototype.setOffsetWithRespectToBounds = function (x, y, mode) {\n    this.unitMode = mode;\n    this.position = {\n      x: x,\n      y: y\n    };\n  };\n  /**\n   * Gets the position of the element with respect to its parent\n   * @param size\n   */\n  DrawingElement.prototype.getAbsolutePosition = function (size) {\n    if (this.position !== undefined) {\n      if (this.unitMode === 'Absolute') {\n        return this.position;\n      } else {\n        return {\n          x: this.position.x * size.width,\n          y: this.position.y * size.height\n        };\n      }\n    }\n    return undefined;\n  };\n  Object.defineProperty(DrawingElement.prototype, \"outerBounds\", {\n    get: function () {\n      return this.floatingBounds || this.bounds;\n    },\n    /**\n     * used to set the outer bounds value\n     * @private\n     */\n    set: function (bounds) {\n      this.floatingBounds = bounds;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Measures the minimum space that the element requires\n   * @param availableSize\n   */\n  DrawingElement.prototype.measure = function (availableSize) {\n    var width = this.width !== undefined ? this.width : (availableSize.width || 0) - this.margin.left - this.margin.right;\n    var height = this.height !== undefined ? this.height : (availableSize.height || 0) - this.margin.top - this.margin.bottom;\n    this.desiredSize = new Size(width, height);\n    if (this.isCalculateDesiredSize) {\n      this.desiredSize = this.validateDesiredSize(this.desiredSize, availableSize);\n    }\n    return this.desiredSize;\n  };\n  /**\n   * Arranges the element\n   * @param desiredSize\n   */\n  DrawingElement.prototype.arrange = function (desiredSize) {\n    this.actualSize = desiredSize;\n    this.updateBounds();\n    return this.actualSize;\n  };\n  /**\n   * Updates the bounds of the element\n   */\n  DrawingElement.prototype.updateBounds = function () {\n    this.bounds = getBounds(this);\n  };\n  /**\n   * Validates the size of the element with respect to its minimum and maximum size\n   * @param desiredSize\n   * @param availableSize\n   */\n  DrawingElement.prototype.validateDesiredSize = function (desiredSize, availableSize) {\n    //Empty canvas\n    if (this.isRectElement && !this.width && !this.minWidth && !this.maxWidth) {\n      desiredSize.width = 50;\n    }\n    if (this.isRectElement && !this.height && !this.minHeight && !this.maxHeight) {\n      desiredSize.height = 50;\n    }\n    if (desiredSize === undefined || this.width !== undefined && this.height !== undefined) {\n      desiredSize = desiredSize || new Size();\n      desiredSize.width = this.width === undefined ? (availableSize.width || 0) - this.margin.left - this.margin.right : this.width;\n      desiredSize.height = this.height === undefined ? (availableSize.height || 0) - this.margin.top - this.margin.bottom : this.height;\n    }\n    //Considering min values\n    if (this.minWidth !== undefined) {\n      desiredSize.width = Math.max(desiredSize.width, this.minWidth);\n    }\n    if (this.minHeight !== undefined) {\n      desiredSize.height = Math.max(desiredSize.height, this.minHeight);\n    }\n    //Considering max values\n    if (this.maxWidth !== undefined) {\n      desiredSize.width = Math.min(desiredSize.width, this.maxWidth);\n    }\n    if (this.maxHeight !== undefined) {\n      desiredSize.height = Math.min(desiredSize.height, this.maxHeight);\n    }\n    return desiredSize;\n  };\n  return DrawingElement;\n}();\nexport { DrawingElement };","map":{"version":3,"names":["RotateTransform","ElementAction","Size","Rect","getBounds","DrawingElement","pivot","x","y","rotateValue","angle","isDirt","offsetX","offsetY","cornerRadius","minHeight","undefined","minWidth","maxWidth","maxHeight","width","height","horizontalAlignment","verticalAlignment","visible","rotateAngle","margin","left","right","top","bottom","relativeMode","transform","Self","Parent","style","fill","strokeColor","opacity","strokeWidth","desiredSize","actualSize","parentTransform","preventContainer","bounds","staticSize","isRectElement","isCalculateDesiredSize","elementActions","None","position","unitMode","float","floatingBounds","prototype","setOffsetWithRespectToBounds","mode","getAbsolutePosition","size","Object","defineProperty","get","set","enumerable","configurable","measure","availableSize","validateDesiredSize","arrange","updateBounds","Math","max","min"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-drawings/src/drawing/core/elements/drawing-element.js"],"sourcesContent":["import { RotateTransform, ElementAction } from '../../enum/enum';\nimport { Size } from '../../primitives/size';\nimport { Rect } from '../../primitives/rect';\nimport { getBounds } from '../../utility/base-util';\n/**\n * DiagramElement module defines the basic unit of diagram\n */\nvar DrawingElement = /** @class */ (function () {\n    function DrawingElement() {\n        /**\n         * Sets/Gets the reference point of the element\n         * ```html\n         * <div id='diagram'></div>\n         * ```\n         * ```typescript\n         * let stackPanel: StackPanel = new StackPanel();\n         * stackPanel.offsetX = 300; stackPanel.offsetY = 200;\n         * stackPanel.width = 100; stackPanel.height = 100;\n         * stackPanel.style.fill = 'red';\n         * stackPanel.pivot = { x: 0.5, y: 0.5 };\n         * let diagram: Diagram = new Diagram({\n         * ...\n         * basicElements: [stackPanel],\n         * ...\n         * });\n         * diagram.appendTo('#diagram');\n         * ```\n         */\n        this.pivot = { x: 0.5, y: 0.5 };\n        this.rotateValue = { x: 0, y: 0, angle: 0 };\n        /**\n         * Sets or gets whether the content of the element needs to be measured\n         */\n        this.isDirt = true;\n        /**\n         * Sets/Gets the x-coordinate of the element\n         */\n        this.offsetX = 0;\n        /**\n         * Sets/Gets the y-coordinate of the element\n         */\n        this.offsetY = 0;\n        /**\n         * Set the corner of the element\n         */\n        this.cornerRadius = 0;\n        /**\n         * Sets/Gets the minimum height of the element\n         */\n        this.minHeight = undefined;\n        /**\n         * Sets/Gets the minimum width of the element\n         */\n        this.minWidth = undefined;\n        /**\n         * Sets/Gets the maximum width of the element\n         */\n        this.maxWidth = undefined;\n        /**\n         * Sets/Gets the maximum height of the element\n         */\n        this.maxHeight = undefined;\n        /**\n         * Sets/Gets the width of the element\n         */\n        this.width = undefined;\n        /**\n         * Sets/Gets the height of the element\n         */\n        this.height = undefined;\n        /**\n         * Sets/Gets how the element has to be horizontally arranged with respect to its immediate parent\n         * * Stretch - Stretches the diagram element throughout its immediate parent\n         * * Left - Aligns the diagram element at the left of its immediate parent\n         * * Right - Aligns the diagram element at the right of its immediate parent\n         * * Center - Aligns the diagram element at the center of its immediate parent\n         * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n         */\n        this.horizontalAlignment = 'Auto';\n        /**\n         * Sets/Gets how the element has to be vertically arranged with respect to its immediate parent\n         * * Stretch - Stretches the diagram element throughout its immediate parent\n         * * Top - Aligns the diagram element at the top of its immediate parent\n         * * Bottom - Aligns the diagram element at the bottom of its immediate parent\n         * * Center - Aligns the diagram element at the center of its immediate parent\n         * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n         */\n        this.verticalAlignment = 'Auto';\n        /**\n         * Sets or gets whether the content of the element to be visible\n         */\n        this.visible = true;\n        /**\n         * Sets/Gets the rotate angle of the element\n         */\n        this.rotateAngle = 0;\n        /**\n         * Sets/Gets the margin of the element\n         */\n        this.margin = { left: 0, right: 0, top: 0, bottom: 0 };\n        /**\n         * Sets whether the element has to be aligned with respect to a point/with respect to its immediate parent\n         * * Point - Diagram elements will be aligned with respect to a point\n         * * Object - Diagram elements will be aligned with respect to its immediate parent\n         */\n        this.relativeMode = 'Point';\n        /**\n         * Sets whether the element has to be transformed based on its parent or not\n         * * Self - Sets the transform type as Self\n         * * Parent - Sets the transform type as Parent\n         */\n        /** @private */\n        this.transform = RotateTransform.Self | RotateTransform.Parent;\n        /**\n         * Sets the style of the element\n         */\n        this.style = { fill: 'white', strokeColor: 'black', opacity: 1, strokeWidth: 1 };\n        /**\n         * Gets the minimum size that is required by the element\n         */\n        this.desiredSize = new Size();\n        /**\n         * Gets the size that the element will be rendered\n         */\n        this.actualSize = new Size();\n        /**\n         * Gets the rotate angle that is set to the immediate parent of the element\n         */\n        this.parentTransform = 0;\n        /** @private */\n        this.preventContainer = false;\n        /**\n         * Gets/Sets the boundary of the element\n         */\n        this.bounds = new Rect(0, 0, 0, 0);\n        /**\n         * Defines whether the element has to be measured or not\n         */\n        this.staticSize = false;\n        /**\n         * check whether the element is rect or not\n         */\n        /** @private */\n        this.isRectElement = false;\n        /** @private */\n        this.isCalculateDesiredSize = true;\n        /**\n         * Defines whether the element is group or port\n         */\n        /** @private */\n        this.elementActions = ElementAction.None;\n        //private variables\n        this.position = undefined;\n        this.unitMode = undefined;\n        /**   @private  */\n        this.float = false;\n        this.floatingBounds = undefined;\n    }\n    // public constructor() {\n    //     this.id = randomId();\n    // }\n    /**\n     * Sets the offset of the element with respect to its parent\n     * @param x\n     * @param y\n     * @param mode\n     */\n    DrawingElement.prototype.setOffsetWithRespectToBounds = function (x, y, mode) {\n        this.unitMode = mode;\n        this.position = { x: x, y: y };\n    };\n    /**\n     * Gets the position of the element with respect to its parent\n     * @param size\n     */\n    DrawingElement.prototype.getAbsolutePosition = function (size) {\n        if (this.position !== undefined) {\n            if (this.unitMode === 'Absolute') {\n                return this.position;\n            }\n            else {\n                return {\n                    x: this.position.x * size.width, y: this.position.y * size.height\n                };\n            }\n        }\n        return undefined;\n    };\n    Object.defineProperty(DrawingElement.prototype, \"outerBounds\", {\n        get: function () {\n            return this.floatingBounds || this.bounds;\n        },\n        /**\n         * used to set the outer bounds value\n         * @private\n         */\n        set: function (bounds) {\n            this.floatingBounds = bounds;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Measures the minimum space that the element requires\n     * @param availableSize\n     */\n    DrawingElement.prototype.measure = function (availableSize) {\n        var width = this.width !== undefined ? this.width : (availableSize.width || 0) - this.margin.left - this.margin.right;\n        var height = this.height !== undefined ? this.height : (availableSize.height || 0) - this.margin.top - this.margin.bottom;\n        this.desiredSize = new Size(width, height);\n        if (this.isCalculateDesiredSize) {\n            this.desiredSize = this.validateDesiredSize(this.desiredSize, availableSize);\n        }\n        return this.desiredSize;\n    };\n    /**\n     * Arranges the element\n     * @param desiredSize\n     */\n    DrawingElement.prototype.arrange = function (desiredSize) {\n        this.actualSize = desiredSize;\n        this.updateBounds();\n        return this.actualSize;\n    };\n    /**\n     * Updates the bounds of the element\n     */\n    DrawingElement.prototype.updateBounds = function () {\n        this.bounds = getBounds(this);\n    };\n    /**\n     * Validates the size of the element with respect to its minimum and maximum size\n     * @param desiredSize\n     * @param availableSize\n     */\n    DrawingElement.prototype.validateDesiredSize = function (desiredSize, availableSize) {\n        //Empty canvas\n        if (this.isRectElement && !this.width && !this.minWidth && !this.maxWidth) {\n            desiredSize.width = 50;\n        }\n        if (this.isRectElement && !this.height && !this.minHeight && !this.maxHeight) {\n            desiredSize.height = 50;\n        }\n        if (desiredSize === undefined || this.width !== undefined &&\n            this.height !== undefined) {\n            desiredSize = desiredSize || new Size();\n            desiredSize.width = this.width === undefined ? (availableSize.width || 0)\n                - this.margin.left - this.margin.right : this.width;\n            desiredSize.height = this.height === undefined ? (availableSize.height || 0)\n                - this.margin.top - this.margin.bottom : this.height;\n        }\n        //Considering min values\n        if (this.minWidth !== undefined) {\n            desiredSize.width = Math.max(desiredSize.width, this.minWidth);\n        }\n        if (this.minHeight !== undefined) {\n            desiredSize.height = Math.max(desiredSize.height, this.minHeight);\n        }\n        //Considering max values\n        if (this.maxWidth !== undefined) {\n            desiredSize.width = Math.min(desiredSize.width, this.maxWidth);\n        }\n        if (this.maxHeight !== undefined) {\n            desiredSize.height = Math.min(desiredSize.height, this.maxHeight);\n        }\n        return desiredSize;\n    };\n    return DrawingElement;\n}());\nexport { DrawingElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}