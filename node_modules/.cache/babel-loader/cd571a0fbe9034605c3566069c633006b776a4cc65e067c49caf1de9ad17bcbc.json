{"ast":null,"code":"import { PdfPage } from './../pdf-page';\nimport { _PdfStreamWriter } from './pdf-stream-writer';\nimport { _floatToString, _addProcSet, _reverseMapBlendMode, _mapBlendMode, _getNewGuidString, _getBezierArc, _numberToString, _bytesToString, _stringToUnicodeArray } from './../utils';\nimport { _PdfDictionary, _PdfReference, _PdfName } from './../pdf-primitives';\nimport { PdfTrueTypeFont } from './../fonts/pdf-standard-font';\nimport { _PdfStringLayouter, _LineType, _StringTokenizer } from './../fonts/string-layouter';\nimport { PdfTextAlignment, PdfTextDirection, PdfSubSuperScript, PdfBlendMode, PdfLineJoin, PdfLineCap, PdfDashStyle, PdfFillMode } from './../enumerator';\nimport { PdfVerticalAlignment } from './../fonts/pdf-string-format';\nimport { PdfTemplate } from './pdf-template';\nimport { _PdfPath, _PathPointType } from './pdf-path';\nimport { _UnicodeTrueTypeFont } from '../fonts/unicode-true-type-font';\nimport { _RtlRenderer } from './../graphics/rightToLeft/text-renderer';\nimport { PdfImage } from './images/pdf-image';\n/**\n * Represents a graphics from a PDF page.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Access first page\n * let page: PdfPage = document.getPage(0);\n * // Gets the graphics of the PDF page\n * let graphics: PdfGraphics = page.graphics;\n * //Create a new pen.\n * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n * //Draw line on the page graphics.\n * graphics.drawLine(pen, 10, 10, 100, 100);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfGraphics = /** @class */function () {\n  function PdfGraphics(size, content, xref, source) {\n    this._pendingResource = []; // eslint-disable-line\n    this._hasResourceReference = false;\n    if (source instanceof PdfPage) {\n      this._source = source._pageDictionary;\n      this._page = source;\n    } else if (source instanceof PdfTemplate) {\n      this._source = source._content.dictionary;\n      this._template = source;\n    }\n    if (this._source && this._source.has('Resources')) {\n      var obj = this._source.getRaw('Resources'); // eslint-disable-line\n      if (obj instanceof _PdfReference) {\n        this._hasResourceReference = true;\n        this._resourceObject = xref._fetch(obj);\n      } else if (obj instanceof _PdfDictionary) {\n        this._resourceObject = obj;\n      }\n    } else {\n      this._resourceObject = new _PdfDictionary();\n      this._source.update('Resources', this._resourceObject);\n    }\n    this._crossReference = xref;\n    this._sw = new _PdfStreamWriter(content);\n    this._size = size;\n    _addProcSet('PDF', this._resourceObject);\n    this._initialize();\n  }\n  Object.defineProperty(PdfGraphics.prototype, \"_matrix\", {\n    get: function () {\n      if (typeof this._m === 'undefined') {\n        this._m = new _PdfTransformationMatrix();\n      }\n      return this._m;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"_resources\", {\n    get: function () {\n      var _this = this;\n      if (typeof this._resourceMap === 'undefined') {\n        this._resourceMap = new Map();\n        if (this._resourceObject.has('Font')) {\n          var fonts = this._resourceObject.get('Font');\n          if (fonts && fonts.size > 0) {\n            fonts.forEach(function (key, value) {\n              if (value !== null && typeof value !== 'undefined' && value instanceof _PdfReference) {\n                _this._resourceMap.set(value, _PdfName.get(key));\n              }\n            });\n          }\n        }\n        if (this._resourceObject.has('XObject')) {\n          var other = this._resourceObject.get('XObject');\n          if (other && other.size > 0) {\n            other.forEach(function (key, value) {\n              if (value !== null && typeof value !== 'undefined' && value instanceof _PdfReference) {\n                _this._resourceMap.set(value, _PdfName.get(key));\n              }\n            });\n          }\n        }\n        if (this._resourceObject.has('ExtGState')) {\n          var state = this._resourceObject.get('ExtGState');\n          if (state && state.size > 0) {\n            if (!this._transparencies) {\n              this._transparencies = new Map();\n            }\n            state.forEach(function (key, value) {\n              if (value !== null && typeof value !== 'undefined' && value instanceof _PdfReference) {\n                _this._setTransparencyData(value, _PdfName.get(key));\n              }\n            });\n          }\n        }\n      }\n      return this._resourceMap;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Save the current graphics state.\n   *\n   * @returns {PdfGraphicsState} graphics state.\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access first page\n   * let page: PdfPage = document.getPage(0);\n   * // Gets the graphics of the PDF page\n   * let graphics: PdfGraphics = page.graphics;\n   * // Create a new font\n   * let font: PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n   * // Save the graphics\n   * let state: PdfGraphicsState = graphics.save();\n   * //Set graphics translate transform.\n   * graphics.translateTransform(100, 100);\n   * //Draws the String.\n   * graphics.drawString(\"Hello world!\", font, [10, 20, 100, 200], undefined, new PdfBrush([0, 0, 255]));\n   * //Restore the graphics.\n   * graphics.restore(state);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfGraphics.prototype.save = function () {\n    var state = new PdfGraphicsState(this, this._matrix);\n    state._textRenderingMode = this._textRenderingMode;\n    state._charSpacing = this._characterSpacing;\n    state._textScaling = this._textScaling;\n    state._wordSpacing = this._wordSpacing;\n    state._currentBrush = this._currentBrush;\n    state._currentPen = this._currentPen;\n    state._currentFont = this._currentFont;\n    this._graphicsState.push(state);\n    this._sw._saveGraphicsState();\n    return state;\n  };\n  /**\n   * Restore the graphics state.\n   *\n   * @param {PdfGraphicsState} state graphics state.\n   * @returns {void} restore of the graphics state.\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access first page\n   * let page: PdfPage = document.getPage(0);\n   * // Gets the graphics of the PDF page\n   * let graphics: PdfGraphics = page.graphics;\n   * // Create a new font\n   * let font: PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n   * // Save the graphics\n   * let state: PdfGraphicsState = graphics.save();\n   * //Set graphics translate transform.\n   * graphics.translateTransform(100, 100);\n   * //Draws the String.\n   * graphics.drawString(\"Hello world!\", font, [10, 20, 100, 200], undefined, new PdfBrush([0, 0, 255]));\n   * //Restore the graphics.\n   * graphics.restore(state);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfGraphics.prototype.restore = function (state) {\n    if (this._graphicsState.length > 0) {\n      if (typeof state === 'undefined') {\n        this._doRestore();\n      } else {\n        if (this._graphicsState.length > 0 && this._graphicsState.indexOf(state) !== -1) {\n          while (this._graphicsState.length > 0) {\n            if (this._doRestore() === state) {\n              break;\n            }\n          }\n        }\n      }\n    }\n  };\n  PdfGraphics.prototype._doRestore = function () {\n    var state = this._graphicsState.pop();\n    this._m = state._transformationMatrix;\n    this._currentBrush = state._currentBrush;\n    this._currentPen = state._currentPen;\n    this._currentFont = state._currentFont;\n    this._characterSpacing = state._charSpacing;\n    this._wordSpacing = state._wordSpacing;\n    this._textScaling = state._textScaling;\n    this._textRenderingMode = state._textRenderingMode;\n    this._sw._restoreGraphicsState();\n    return state;\n  };\n  PdfGraphics.prototype.drawRectangle = function (x, y, width, height, first, second) {\n    var pen;\n    var brush;\n    if (first instanceof PdfPen) {\n      pen = first;\n      if (second) {\n        brush = second;\n      }\n    } else {\n      brush = first;\n    }\n    this._stateControl(pen, brush);\n    this._sw._appendRectangle(x, y, width, height);\n    this._drawGraphicsPath(pen, brush);\n  };\n  PdfGraphics.prototype.drawPolygon = function (points, first, second) {\n    if (points.length > 0) {\n      var pen = void 0;\n      var brush = void 0;\n      if (first instanceof PdfPen) {\n        pen = first;\n        if (second) {\n          brush = second;\n        }\n      } else {\n        brush = first;\n      }\n      this._stateControl(pen, brush);\n      this._sw._beginPath(points[0][0], points[0][1]);\n      for (var i = 1; i < points.length; i++) {\n        this._sw._appendLineSegment(points[Number.parseInt(i.toString(), 10)][0], points[Number.parseInt(i.toString(), 10)][1]);\n      }\n      this._drawGraphicsPath(pen, brush, PdfFillMode.winding, true);\n    }\n  };\n  PdfGraphics.prototype.drawEllipse = function (x, y, width, height, first, second) {\n    var pen;\n    var brush;\n    if (first instanceof PdfPen) {\n      pen = first;\n      if (second) {\n        brush = second;\n      }\n    } else {\n      brush = first;\n    }\n    this._stateControl(pen, brush);\n    this._constructArcPath(x, y, x + width, y + height, 0, 360);\n    this._drawGraphicsPath(pen, brush, PdfFillMode.winding, true);\n  };\n  /**\n   * Draw arc on the page graphics.\n   *\n   * @param {number} x value.\n   * @param {number} y value.\n   * @param {number} width value.\n   * @param {number} height value.\n   * @param {number} startAngle value.\n   * @param {number} sweepAngle value.\n   * @param {PdfPen} pen value.\n   * @returns {void} draw a arc.\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access first page\n   * let page: PdfPage = document.getPage(0);\n   * // Gets the graphics of the PDF page\n   * let graphics: PdfGraphics = page.graphics;\n   * //Create a new pen.\n   * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n   * //Draw arc on the page graphics.\n   * graphics.drawArc(10, 20, 100, 200, 20, 30, pen);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfGraphics.prototype.drawArc = function (x, y, width, height, startAngle, sweepAngle, pen) {\n    if (sweepAngle !== 0) {\n      this._stateControl(pen);\n      this._constructArcPath(x, y, x + width, y + height, startAngle, sweepAngle);\n      this._drawGraphicsPath(pen, null, PdfFillMode.winding, false);\n    }\n  };\n  PdfGraphics.prototype.drawImage = function (arg1, arg2, arg3, arg4, arg5) {\n    if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n      var size = arg1.physicalDimension;\n      this.drawImage(arg1, arg2, arg3, size[0], size[1]);\n    } else {\n      arg1._save();\n      var matrix = new _PdfTransformationMatrix();\n      this._getTranslateTransform(arg2, arg3 + arg5, matrix);\n      this._getScaleTransform(arg4, arg5, matrix);\n      this._sw._write('q');\n      this._sw._modifyCtm(matrix);\n      var sourceDictionary = void 0;\n      var keyName = void 0;\n      var isNew = true;\n      if (this._resourceObject.has('XObject')) {\n        var obj = this._resourceObject.getRaw('XObject'); // eslint-disable-line\n        if (obj instanceof _PdfDictionary) {\n          sourceDictionary = obj;\n        }\n        if (sourceDictionary) {\n          isNew = false;\n        }\n      }\n      if (isNew) {\n        sourceDictionary = new _PdfDictionary(this._crossReference);\n        this._resourceObject.update('XObject', sourceDictionary);\n      }\n      if (typeof keyName === 'undefined') {\n        keyName = _PdfName.get(_getNewGuidString());\n      }\n      if (this._crossReference) {\n        this._updateImageResource(arg1, keyName, sourceDictionary, this._crossReference);\n        this._source.update('Resources', this._resourceObject);\n        this._source._updated = true;\n      } else {\n        this._pendingResource.push({\n          'resource': arg1,\n          'key': keyName,\n          'source': sourceDictionary\n        });\n      }\n      this._sw._executeObject(keyName);\n      this._sw._write('Q');\n      this._sw._write('\\r\\n');\n      _addProcSet('ImageB', this._resourceObject);\n      _addProcSet('ImageC', this._resourceObject);\n      _addProcSet('ImageI', this._resourceObject);\n      _addProcSet('Text', this._resourceObject);\n    }\n  };\n  PdfGraphics.prototype._processResources = function (crossReference) {\n    if (this._pendingResource.length > 0) {\n      for (var i = 0; i < this._pendingResource.length; i++) {\n        var entry = this._pendingResource[Number.parseInt(i.toString(), 10)]; // eslint-disable-line\n        if (entry.resource instanceof PdfImage) {\n          this._updateImageResource(entry.resource, entry.key, entry.source, crossReference);\n        }\n        this._source.update('Resources', this._resourceObject);\n        this._source._updated = true;\n      }\n      this._pendingResource = [];\n    }\n  };\n  PdfGraphics.prototype._updateImageResource = function (image, keyName, source, crossReference) {\n    var ref;\n    if (image._reference) {\n      ref = image._reference;\n    } else {\n      ref = crossReference._getNextReference();\n      image._reference = ref;\n    }\n    if (!crossReference._cacheMap.has(ref)) {\n      if (image && image._imageStream && image._imageStream.dictionary) {\n        crossReference._cacheMap.set(ref, image._imageStream);\n        image._imageStream.dictionary._updated = true;\n      }\n    }\n    source.update(keyName.name, ref);\n    this._resources.set(ref, keyName);\n    this._resourceObject._updated = true;\n  };\n  PdfGraphics.prototype._drawTemplate = function (template, bounds) {\n    var _this = this;\n    var scaleX = template && template._size[0] > 0 ? bounds.width / template._size[0] : 1;\n    var scaleY = template && template._size[1] > 0 ? bounds.height / template._size[1] : 1;\n    var needScale = !(scaleX === 1 && scaleY === 1);\n    var cropBox;\n    var mediaBox;\n    if (this._page) {\n      cropBox = this._page.cropBox;\n      mediaBox = this._page.mediaBox;\n      if (this._page._pageDictionary.has('CropBox') && this._page._pageDictionary.has('MediaBox')) {\n        if (cropBox[0] > 0 && cropBox[1] > 0 && mediaBox[0] < 0 && mediaBox[1] < 0) {\n          this.translateTransform(cropBox[0], -cropBox[1]);\n          bounds.x = -cropBox[0];\n          bounds.y = cropBox[1];\n        }\n      }\n    }\n    var state = this.save();\n    var matrix = new _PdfTransformationMatrix();\n    if (this._page) {\n      var needTransform = this._page._pageDictionary.has('CropBox') && this._page._pageDictionary.has('MediaBox') && cropBox && mediaBox && cropBox[0] === mediaBox[0] && cropBox[1] === mediaBox[1] && cropBox[2] === mediaBox[2] && cropBox[3] === mediaBox[3] || this._page._pageDictionary.has('MediaBox') && mediaBox && mediaBox[3] === 0;\n      matrix._translate(bounds.x, -(bounds.y + (this._page._origin[0] >= 0 || needTransform ? bounds.height : 0)));\n    } else {\n      matrix._translate(bounds.x, -(bounds.y + bounds.height));\n    }\n    if (needScale) {\n      if (template._isAnnotationTemplate && template._needScale) {\n        var scaleApplied = false;\n        if (template._content && template._content.dictionary) {\n          var dictionary = template._content.dictionary;\n          if (dictionary.has('Matrix') && dictionary.has('BBox')) {\n            var templateMatrix = dictionary.getArray('Matrix');\n            var templateBox = dictionary.getArray('BBox');\n            if (templateMatrix && templateBox && templateMatrix.length > 5 && templateBox.length > 3) {\n              var templateScaleX = Number.parseFloat(_numberToString(-templateMatrix[1]));\n              var templateScaleY = Number.parseFloat(_numberToString(templateMatrix[2]));\n              var roundScaleX = Number.parseFloat(_numberToString(scaleX));\n              var roundScaleY = Number.parseFloat(_numberToString(scaleY));\n              if (roundScaleX === templateScaleX && roundScaleY === templateScaleY && templateBox[2] === template._size[0] && templateBox[3] === template._size[1]) {\n                matrix = new _PdfTransformationMatrix();\n                matrix._translate(bounds.x - templateMatrix[4], bounds.y + templateMatrix[5]);\n                matrix._scale(1, 1);\n                scaleApplied = true;\n              }\n            }\n          }\n        }\n        if (!scaleApplied) {\n          matrix._scale(scaleX, scaleY);\n        }\n      } else {\n        matrix._scale(scaleX, scaleY);\n      }\n    }\n    this._sw._modifyCtm(matrix);\n    var sourceDictionary;\n    var isReference = false;\n    var keyName;\n    var isNew = true;\n    var ref;\n    if (this._resourceObject.has('XObject')) {\n      var obj = this._resourceObject.getRaw('XObject'); // eslint-disable-line\n      if (obj instanceof _PdfReference) {\n        isReference = true;\n        sourceDictionary = this._crossReference._fetch(obj);\n      } else if (obj instanceof _PdfDictionary) {\n        sourceDictionary = obj;\n      }\n      if (sourceDictionary) {\n        isNew = false;\n        this._resources.forEach(function (value, key) {\n          if (key && key instanceof _PdfReference) {\n            var base = _this._crossReference._fetch(key);\n            if (base && template && base === template._content) {\n              keyName = value;\n              ref = key;\n            }\n          }\n        });\n      }\n    }\n    if (isNew) {\n      sourceDictionary = new _PdfDictionary(this._crossReference);\n      this._resourceObject.update('XObject', sourceDictionary);\n    }\n    if (typeof keyName === 'undefined') {\n      keyName = _PdfName.get(_getNewGuidString());\n      if (template && template._content.reference) {\n        ref = template._content.reference;\n      } else {\n        ref = this._crossReference._getNextReference();\n      }\n      if (!this._crossReference._cacheMap.has(ref)) {\n        if (template && template._content) {\n          this._crossReference._cacheMap.set(ref, template._content);\n        }\n      }\n      sourceDictionary.update(keyName.name, ref);\n      this._resources.set(ref, keyName);\n      this._resourceObject._updated = true;\n    }\n    if (isReference) {\n      this._resourceObject._updated = true;\n    }\n    if (this._hasResourceReference) {\n      this._source._updated = true;\n    }\n    this._sw._executeObject(keyName);\n    this.restore(state);\n    _addProcSet('ImageB', this._resourceObject);\n    _addProcSet('ImageC', this._resourceObject);\n    _addProcSet('ImageI', this._resourceObject);\n    _addProcSet('Text', this._resourceObject);\n  };\n  PdfGraphics.prototype._drawPath = function (path, pen, brush) {\n    if (pen || brush) {\n      this._stateControl(pen, brush, null);\n      this._buildUpPath(path._points, path._pathTypes);\n      this._drawGraphicsPath(pen, brush, path._fillMode, false);\n    }\n  };\n  /**\n   * Draw rounded rectangle on the page graphics.\n   *\n   * @param {number} x value.\n   * @param {number} y value.\n   * @param {number} width value.\n   * @param {number} height value.\n   * @param {number} radius value.\n   * @param {PdfPen} pen value.\n   * @param {PdfBrush} brush value.\n   * @returns {void} draw a rounded rectangle.\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access first page\n   * let page: PdfPage = document.getPage(0);\n   * // Gets the graphics of the PDF page\n   * let graphics: PdfGraphics = page.graphics;\n   * //Create a new pen.\n   * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n   * //Create a new brush.\n   * let brush: PdfBrush = new PdfBrush([0, 0, 255]);\n   * //Draw rounded rectangle on the page graphics.\n   * graphics.drawRoundedRectangle(10, 20, 100, 200, 5, pen, brush);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfGraphics.prototype.drawRoundedRectangle = function (x, y, width, height, radius, pen, brush) {\n    if (pen === null) {\n      throw new Error('pen');\n    }\n    if (brush === null) {\n      throw new Error('brush');\n    }\n    var bounds = [x, y, width, height];\n    var diameter = radius * 2;\n    var size = [diameter, diameter];\n    var arc = [bounds[0], bounds[1], size[0], size[1]];\n    var path = new _PdfPath();\n    if (radius === 0) {\n      path._addRectangle(bounds[0], bounds[1], bounds[2], bounds[3]);\n      this._drawPath(path, pen, brush);\n    } else {\n      path._isRoundedRectangle = true;\n      path._addArc(arc[0], arc[1], arc[2], arc[3], 180, 90);\n      arc[0] = bounds[0] + bounds[2] - diameter;\n      path._addArc(arc[0], arc[1], arc[2], arc[3], 270, 90);\n      arc[1] = bounds[1] + bounds[3] - diameter;\n      path._addArc(arc[0], arc[1], arc[2], arc[3], 0, 90);\n      arc[0] = bounds[0];\n      path._addArc(arc[0], arc[1], arc[2], arc[3], 90, 90);\n      path._closeFigure();\n      this._drawPath(path, pen, brush);\n    }\n  };\n  PdfGraphics.prototype._constructArcPath = function (x1, y1, x2, y2, start, sweep) {\n    var points = _getBezierArc(x1, y1, x2, y2, start, sweep);\n    if (points.length === 8) {\n      return;\n    }\n    var point = [points[0], points[1], points[2], points[3], points[4], points[5], points[6], points[7]];\n    this._sw._beginPath(point[0], point[1]);\n    for (var i = 0; i < points.length; i = i + 8) {\n      point = [points[Number.parseInt(i.toString(), 10)], points[i + 1], points[i + 2], points[i + 3], points[i + 4], points[i + 5], points[i + 6], points[i + 7]];\n      this._sw._appendBezierSegment(point[2], point[3], point[4], point[5], point[6], point[7]);\n    }\n  };\n  PdfGraphics.prototype._writePen = function (pen) {\n    var lineWidth = pen._width;\n    var pattern = pen._dashPattern;\n    for (var i = 0; i < pattern.length; ++i) {\n      pattern[i] *= pen._width; // eslint-disable-line\n    }\n    this._sw._setLineDashPattern(pattern, pen._dashOffset * lineWidth);\n    this._sw._setLineWidth(pen._width);\n    this._sw._setLineJoin(pen._lineJoin);\n    this._sw._setLineCap(pen._lineCap);\n    if (pen._miterLimit > 0) {\n      this._sw._setMiterLimit(pen._miterLimit);\n    }\n    this._sw._setColor(pen._color, true);\n  };\n  /**\n   * Draw text on the page graphics.\n   *\n   * @param {string} value draw string.\n   * @param {PdfFont} font value.\n   * @param {number[]} bounds value.\n   * @param {PdfPen} pen value.\n   * @param {PdfBrush} brush value.\n   * @param {PdfStringFormat} format value.\n   * @returns {void} draw a string.\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access first page\n   * let page: PdfPage = document.getPage(0);\n   * // Gets the graphics of the PDF page\n   * let graphics: PdfGraphics = page.graphics;\n   * // Create a new pen.\n   * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n   * // Create a new font.\n   * let font: PdfStandardFont = new PdfStandardFont(PdfFontFamily.symbol, 10);\n   * // Create a new string format\n   * let format: PdfStringFormat = new PdfStringFormat();\n   * format.alignment = PdfTextAlignment.center;\n   * // Draw text on the page graphics.\n   * graphics.drawString('Hello World', font, [10, 20, 100, 200], pen, new PdfBrush([0, 0, 255]), format);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfGraphics.prototype.drawString = function (value, font, bounds, pen, brush, format) {\n    var layouter = new _PdfStringLayouter();\n    var result = layouter._layout(value, font, format, [bounds[2], bounds[3]]);\n    if (!result._empty) {\n      var rect = this._checkCorrectLayoutRectangle(result._actualSize, bounds[0], bounds[1], format);\n      if (bounds[2] <= 0) {\n        bounds[0] = rect[0];\n        bounds[2] = rect[2];\n      }\n      if (bounds[3] <= 0) {\n        bounds[1] = rect[1];\n        bounds[3] = rect[3];\n      }\n      this._drawStringLayoutResult(result, font, pen, brush, bounds, format);\n    }\n    _addProcSet('Text', this._resourceObject);\n  };\n  PdfGraphics.prototype._buildUpPath = function (points, types) {\n    for (var i = 0; i < points.length; i++) {\n      var point = points[Number.parseInt(i.toString(), 10)];\n      var type = types[Number.parseInt(i.toString(), 10)];\n      switch (type & 0xf) {\n        case _PathPointType.start:\n          this._sw._beginPath(point[0], point[1]);\n          break;\n        case _PathPointType.bezier:\n          var result = this._getBezierPoint(points, types, i); // eslint-disable-line\n          i = result.index;\n          var first = result.point; // eslint-disable-line\n          result = this._getBezierPoint(points, types, i);\n          i = result.index;\n          var second = result.point; // eslint-disable-line\n          this._sw._appendBezierSegment(point[0], point[1], first[0], first[1], second[0], second[1]);\n          break;\n        case _PathPointType.line:\n          this._sw._appendLineSegment(point[0], point[1]);\n          break;\n        default:\n          throw new Error('Incorrect path formation.');\n      }\n      type = types[Number.parseInt(i.toString(), 10)];\n      if ((type & _PathPointType.closePath) === _PathPointType.closePath) {\n        this._sw._closePath();\n      }\n    }\n  };\n  PdfGraphics.prototype._getBezierPoint = function (points, types, index) {\n    if (types[Number.parseInt(index.toString(), 10)] !== _PathPointType.bezier) {\n      throw new Error('Malforming path.');\n    }\n    index++;\n    return {\n      'index': index,\n      'point': points[Number.parseInt(index.toString(), 10)]\n    };\n  };\n  PdfGraphics.prototype._initialize = function () {\n    this._mediaBoxUpperRightBound = 0;\n    this._characterSpacing = -1;\n    this._wordSpacing = -1;\n    this._textScaling = -100;\n    this._textRenderingMode = -1;\n    this._graphicsState = [];\n    this._clipBounds = [0, 0, this._size[0], this._size[1]];\n    this._colorSpaceInitialized = false;\n    this._startCutIndex = -1;\n  };\n  PdfGraphics.prototype._initializeCurrentColorSpace = function () {\n    if (!this._colorSpaceInitialized) {\n      this._sw._setColorSpace('DeviceRGB', true);\n      this._sw._setColorSpace('DeviceRGB', false);\n      this._colorSpaceInitialized = true;\n    }\n  };\n  PdfGraphics.prototype._brushControl = function (brush) {\n    this._sw._setColor(brush._color, false);\n    this._currentBrush = brush;\n  };\n  PdfGraphics.prototype._penControl = function (pen) {\n    this._currentPen = pen;\n    this._writePen(pen);\n    this._currentPen = pen;\n  };\n  PdfGraphics.prototype._fontControl = function (font, format) {\n    var _this = this;\n    var size = font._metrics._getSize(format);\n    this._currentFont = font;\n    var fontDict;\n    var isReference = false;\n    var keyName;\n    var isNew = true;\n    var ref;\n    if (this._resourceObject.has('Font')) {\n      var obj = this._resourceObject.getRaw('Font'); // eslint-disable-line\n      if (obj !== null && typeof obj !== 'undefined') {\n        if (obj instanceof _PdfReference) {\n          isReference = true;\n          fontDict = this._crossReference._fetch(obj);\n        } else if (obj instanceof _PdfDictionary) {\n          fontDict = obj;\n        }\n      }\n      if (typeof fontDict !== 'undefined' && fontDict !== null) {\n        isNew = false;\n        this._resources.forEach(function (value, key) {\n          if (key !== null && typeof key !== 'undefined') {\n            var dictionary = _this._crossReference._fetch(key);\n            if (dictionary && dictionary === font._dictionary) {\n              keyName = value;\n              ref = key;\n            }\n          }\n        });\n      }\n    }\n    if (isNew) {\n      fontDict = new _PdfDictionary(this._crossReference);\n      this._resourceObject.update('Font', fontDict);\n    }\n    if (typeof keyName === 'undefined') {\n      keyName = _PdfName.get(_getNewGuidString());\n      if (!ref) {\n        ref = this._crossReference._getNextReference();\n      }\n      if (font._dictionary) {\n        this._crossReference._cacheMap.set(ref, font._dictionary);\n        fontDict.update(keyName.name, ref);\n        this._resources.set(ref, keyName);\n      } else if (font instanceof PdfTrueTypeFont) {\n        var internal = font._fontInternal;\n        if (internal && internal._fontDictionary) {\n          this._crossReference._cacheMap.set(ref, internal._fontDictionary);\n        }\n        fontDict.update(keyName.name, ref);\n        this._resources.set(ref, keyName);\n      }\n    }\n    if (isReference) {\n      this._resourceObject._updated = true;\n    }\n    if (this._hasResourceReference) {\n      this._source._updated = true;\n    }\n    this._sw._setFont(keyName.name, size);\n  };\n  PdfGraphics.prototype._stateControl = function (pen, brush, font, format) {\n    if (pen || brush) {\n      this._initializeCurrentColorSpace();\n    }\n    if (pen) {\n      this._penControl(pen);\n    }\n    if (brush) {\n      this._brushControl(brush);\n    }\n    if (font) {\n      this._fontControl(font, format);\n    }\n  };\n  PdfGraphics.prototype._drawStringLayoutResult = function (result, font, pen, brush, layoutRectangle, format) {\n    if (!result._empty) {\n      var allowPartialLines = format && typeof format.lineLimit !== 'undefined' && !format.lineLimit;\n      var shouldClip = typeof format === 'undefined' || format && typeof format.noClip !== 'undefined' && !format.noClip;\n      var clipRegion = allowPartialLines && shouldClip;\n      var state = void 0;\n      if (clipRegion) {\n        state = this.save();\n        var clipBounds = [layoutRectangle[0], layoutRectangle[1], result._actualSize[0], result._actualSize[1]];\n        if (layoutRectangle[2] > 0) {\n          clipBounds[2] = layoutRectangle[2];\n        }\n        if (format.lineAlignment === PdfVerticalAlignment.middle) {\n          clipBounds[1] += (layoutRectangle[3] - clipBounds[3]) / 2;\n        } else if (format.lineAlignment === PdfVerticalAlignment.bottom) {\n          clipBounds[1] += layoutRectangle[3] - clipBounds[3];\n        }\n        this.setClip(clipBounds);\n      }\n      this._applyStringSettings(font, pen, brush, format);\n      var textScaling = typeof format !== 'undefined' && format !== null ? format.horizontalScalingFactor : 100.0;\n      if (textScaling !== this._textScaling) {\n        this._sw._setTextScaling(textScaling);\n        this._textScaling = textScaling;\n      }\n      var verticalAlignShift = this._getTextVerticalAlignShift(result._actualSize[1], layoutRectangle[3], format);\n      var height = typeof format === 'undefined' || format === null || format.lineSpacing === 0 ? font._metrics._getHeight(format) : format.lineSpacing + font._metrics._getHeight(format);\n      var script = format !== null && typeof format !== 'undefined' && format.subSuperScript === PdfSubSuperScript.subScript;\n      var shift = 0;\n      shift = script ? height - (font.height + font._metrics._getDescent(format)) : height - font._metrics._getAscent(format);\n      if (format && format.lineAlignment === PdfVerticalAlignment.bottom) {\n        if (layoutRectangle[3] - result._actualSize[1] !== 0 && layoutRectangle[3] - result._actualSize[1] < font._metrics._size / 2 - 1) {\n          if (Number.parseFloat(_numberToString(layoutRectangle[3])) <= Number.parseFloat(_numberToString(font._metrics._getHeight(format)))) {\n            shift = -(height / font._metrics._size);\n          }\n        }\n      }\n      var matrix = new _PdfTransformationMatrix();\n      matrix._translate(layoutRectangle[0], -(layoutRectangle[1] + font._metrics._getHeight(format)) - (font._metrics._getDescent(format) > 0 ? -font._metrics._getDescent(format) : font._metrics._getDescent(format)) - verticalAlignShift);\n      this._sw._modifyTM(matrix);\n      if (layoutRectangle[3] < font._metrics._size) {\n        if (result._actualSize[1] - layoutRectangle[3] < font._metrics._size / 2 - 1) {\n          verticalAlignShift = 0;\n        }\n      }\n      if (verticalAlignShift !== 0) {\n        if (format !== null && format.lineAlignment === PdfVerticalAlignment.bottom) {\n          if (layoutRectangle[3] - result._actualSize[1] !== 0 && layoutRectangle[3] - result._actualSize[1] > font._metrics._size / 2 - 1) {\n            verticalAlignShift -= (shift - (height - font._metrics._size)) / 2;\n          }\n        }\n      }\n      this._drawLayoutResult(result, font, format, layoutRectangle);\n      if (verticalAlignShift !== 0) {\n        this._sw._startNextLine(0, -(verticalAlignShift - result._lineHeight));\n      }\n      _addProcSet('Text', this._resourceObject);\n      this._sw._endText();\n      this._underlineStrikeoutText(brush, result, font, layoutRectangle, format);\n      if (clipRegion) {\n        this.restore(state);\n      }\n    }\n  };\n  PdfGraphics.prototype._getNextPage = function () {\n    var page;\n    var pageCount = this._crossReference._document.pageCount;\n    if (this._page._pageIndex < pageCount - 2) {\n      page = this._crossReference._document.getPage(this._page._pageIndex + 1);\n    }\n    return page;\n  };\n  PdfGraphics.prototype._applyStringSettings = function (font, pen, brush, format) {\n    var tm = _TextRenderingMode.fill;\n    if (pen != null && brush != null) {\n      tm = _TextRenderingMode.fillStroke;\n    } else if (pen) {\n      tm = _TextRenderingMode.stroke;\n    } else if (brush) {\n      tm = _TextRenderingMode.fill;\n    }\n    if (format && format.clipPath) {\n      tm |= _TextRenderingMode.clipFlag;\n    }\n    this._sw._beginText();\n    this._stateControl(pen, brush, font, format);\n    if (tm !== this._textRenderingMode) {\n      this._sw._setTextRenderingMode(tm);\n      this._textRenderingMode = tm;\n    }\n    var cs = typeof format !== 'undefined' && format !== null ? format.characterSpacing : 0;\n    if (cs !== this._characterSpacing) {\n      this._sw._setCharacterSpacing(cs);\n      this._characterSpacing = cs;\n    }\n    var ws = typeof format !== 'undefined' && format !== null ? format.wordSpacing : 0;\n    if (ws !== this._wordSpacing) {\n      this._sw._setWordSpacing(ws);\n      this._wordSpacing = ws;\n    }\n  };\n  PdfGraphics.prototype._drawLayoutResult = function (result, font, format, layoutRectangle) {\n    var height = typeof format === 'undefined' || format === null || format.lineSpacing === 0 ? font._metrics._getHeight(format) : format.lineSpacing + font._metrics._getHeight(format);\n    var lines = result._lines;\n    var ttfFont = font;\n    var unicode = ttfFont !== null && ttfFont.isUnicode;\n    for (var i = 0, len = lines.length; i < len && i !== this._startCutIndex; i++) {\n      var lineInfo = lines[Number.parseInt(i.toString(), 10)];\n      var lineWidth = lineInfo._width;\n      var hAlignShift = this._getHorizontalAlignShift(lineWidth, layoutRectangle[2], format) + this._getLineIndent(lineInfo, format, layoutRectangle[2], i === 0);\n      if (hAlignShift !== 0) {\n        this._sw._startNextLine(hAlignShift, 0);\n      }\n      if (unicode) {\n        this._drawUnicodeLine(lineInfo, layoutRectangle[2], font, format);\n      } else {\n        this._drawAsciiLine(lineInfo, layoutRectangle[2], format, font);\n      }\n      if (i + 1 !== len) {\n        var vAlignShift = this._getTextVerticalAlignShift(result._actualSize[1], layoutRectangle[3], format);\n        var matrix = new _PdfTransformationMatrix();\n        var baseline = -(layoutRectangle[1] + font._metrics._getHeight(format)) - font._metrics._getDescent(format) - vAlignShift - height * (i + 1);\n        matrix._translate(layoutRectangle[0], baseline);\n        this._sw._modifyTM(matrix);\n      }\n    }\n  };\n  PdfGraphics.prototype._drawUnicodeLine = function (lineInfo, width, font, format) {\n    var line = lineInfo._text;\n    var rtl = format !== null && typeof format !== 'undefined' && format.rightToLeft;\n    var useWordSpace = format !== null && typeof format !== 'undefined' && (format.wordSpacing !== 0 || format.alignment === PdfTextAlignment.justify);\n    var ttfFont = font;\n    var wordSpacing = this._justifyLine(lineInfo, width, format, ttfFont);\n    var rtlRender = new _RtlRenderer();\n    if (rtl || format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.none) {\n      var blocks = [];\n      var rightAlign = format !== null && typeof format !== 'undefined' && format.alignment === PdfTextAlignment.right;\n      if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.none) {\n        blocks = rtlRender._layout(line, ttfFont, format.textDirection === PdfTextDirection.rightToLeft ? true : false, useWordSpace, format);\n      } else {\n        blocks = rtlRender._layout(line, ttfFont, rightAlign, useWordSpace, format);\n      }\n      var words = [];\n      if (blocks.length > 1) {\n        if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.none) {\n          words = rtlRender._splitLayout(line, ttfFont, format.textDirection === PdfTextDirection.rightToLeft ? true : false, useWordSpace, format);\n        }\n      } else {\n        words = [line];\n      }\n      this._drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);\n    } else {\n      if (useWordSpace) {\n        var result = this._breakUnicodeLine(line, ttfFont, null);\n        var blocks = result.tokens;\n        var words = result.words;\n        this._drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);\n      } else {\n        var token = this._convertToUnicode(line, ttfFont);\n        this._sw._showNextLineText(token, true);\n      }\n    }\n  };\n  PdfGraphics.prototype._drawUnicodeBlocks = function (blocks, words, font, format, wordSpacing) {\n    if (blocks !== null && typeof blocks !== 'undefined' && blocks.length > 0 && words !== null && typeof words !== 'undefined' && words.length > 0 && font !== null && typeof font !== 'undefined') {\n      this._sw._startNextLine();\n      var x = 0;\n      var xShift = 0;\n      var firstLineIndent = 0;\n      var paragraphIndent = 0;\n      try {\n        if (format !== null && typeof format !== 'undefined') {\n          firstLineIndent = format.firstLineIndent;\n          paragraphIndent = format.paragraphIndent;\n          format.firstLineIndent = 0;\n          format.paragraphIndent = 0;\n        }\n        var spaceWidth = font._getCharacterWidth(_StringTokenizer._whiteSpace, format) + wordSpacing;\n        var characterSpacing = format != null ? format.characterSpacing : 0;\n        var wordSpace = format !== null && typeof format !== 'undefined' && wordSpacing === 0 ? format.wordSpacing : 0;\n        spaceWidth += characterSpacing + wordSpace;\n        for (var i = 0; i < blocks.length; i++) {\n          var token = blocks[i]; //eslint-disable-line\n          var word = words[i]; //eslint-disable-line\n          var tokenWidth = 0;\n          if (x !== 0) {\n            this._sw._startNextLine(x, 0);\n          }\n          if (word.length > 0) {\n            tokenWidth += font.measureString(word, format)[0];\n            tokenWidth += characterSpacing;\n            this._sw._showText(token);\n          }\n          if (i !== blocks.length - 1) {\n            x = tokenWidth + spaceWidth;\n            xShift += x;\n          }\n        }\n        if (xShift > 0) {\n          this._sw._startNextLine(-xShift, 0);\n        }\n      } finally {\n        if (format !== null && typeof format !== 'undefined') {\n          format.firstLineIndent = firstLineIndent;\n          format.paragraphIndent = paragraphIndent;\n        }\n      }\n    }\n  };\n  PdfGraphics.prototype._breakUnicodeLine = function (line, ttfFont, words) {\n    var tokens = [];\n    if (line !== null && typeof line !== 'undefined' && line.length > 0) {\n      words = line.split(null);\n      for (var i = 0; i < words.length; i++) {\n        var word = words[i]; //eslint-disable-line\n        var token = this._convertToUnicode(word, ttfFont);\n        tokens[Number.parseInt(i.toString(), 10)] = token;\n      }\n    }\n    return {\n      tokens: tokens,\n      words: words\n    };\n  };\n  PdfGraphics.prototype._convertToUnicode = function (text, ttfFont) {\n    var token = null;\n    if (text !== null && typeof text !== 'undefined' && ttfFont !== null && typeof ttfFont !== 'undefined' && ttfFont._fontInternal instanceof _UnicodeTrueTypeFont) {\n      var ttfReader = ttfFont._fontInternal._ttfReader;\n      ttfFont._setSymbols(text);\n      token = ttfReader._convertString(text);\n      var bytes = _stringToUnicodeArray(token);\n      token = _bytesToString(bytes);\n    }\n    return token;\n  };\n  PdfGraphics.prototype._getTextVerticalAlignShift = function (textHeight, boundsHeight, format) {\n    var shift = 0;\n    if (boundsHeight >= 0 && typeof format !== 'undefined' && format !== null && format.lineAlignment !== PdfVerticalAlignment.top) {\n      switch (format.lineAlignment) {\n        case PdfVerticalAlignment.middle:\n          shift = (boundsHeight - textHeight) / 2;\n          break;\n        case PdfVerticalAlignment.bottom:\n          shift = boundsHeight - textHeight;\n          break;\n      }\n    }\n    return shift;\n  };\n  PdfGraphics.prototype._getHorizontalAlignShift = function (lineWidth, boundsWidth, format) {\n    var shift = 0;\n    if (boundsWidth >= 0 && typeof format !== 'undefined' && format !== null && format.alignment !== PdfTextAlignment.left) {\n      switch (format.alignment) {\n        case PdfTextAlignment.center:\n          shift = (boundsWidth - lineWidth) / 2;\n          break;\n        case PdfTextAlignment.right:\n          shift = boundsWidth - lineWidth;\n          break;\n      }\n    }\n    return shift;\n  };\n  PdfGraphics.prototype._getLineIndent = function (lineInfo, format, width, firstLine) {\n    var lineIndent = 0;\n    var firstParagraphLine = (lineInfo._lineType & _LineType.firstParagraphLine) > 0;\n    if (format && firstParagraphLine) {\n      lineIndent = firstLine ? format.firstLineIndent : format.paragraphIndent;\n      lineIndent = width > 0 ? Math.min(width, lineIndent) : lineIndent;\n    }\n    return lineIndent;\n  };\n  PdfGraphics.prototype._drawAsciiLine = function (lineInfo, width, format, font) {\n    this._justifyLine(lineInfo, width, format, font);\n    var value = '';\n    if (lineInfo._text.indexOf('(') !== -1 || lineInfo._text.indexOf(')') !== -1) {\n      for (var i = 0; i < lineInfo._text.length; i++) {\n        if (lineInfo._text[Number.parseInt(i.toString(), 10)] === '(') {\n          value += '\\\\\\('; // eslint-disable-line\n        } else if (lineInfo._text[Number.parseInt(i.toString(), 10)] === ')') {\n          value += '\\\\\\)'; // eslint-disable-line\n        } else {\n          value += lineInfo._text[Number.parseInt(i.toString(), 10)];\n        }\n      }\n    }\n    if (value === '') {\n      value = lineInfo._text;\n    }\n    this._sw._showNextLineText('(' + value + ')');\n  };\n  PdfGraphics.prototype._justifyLine = function (lineInfo, boundsWidth, format, font) {\n    var line = lineInfo._text;\n    var lineWidth = lineInfo._width;\n    var shouldJustify = this._shouldJustify(lineInfo, boundsWidth, format, font);\n    var hasWordSpacing = format && format.wordSpacing !== 0;\n    var whitespacesCount = font._getCharacterCount(line, [' ', '\\t']);\n    var wordSpace = 0;\n    if (shouldJustify) {\n      if (hasWordSpacing) {\n        lineWidth -= whitespacesCount * format.wordSpacing;\n      }\n      wordSpace = (boundsWidth - lineWidth) / whitespacesCount;\n      this._sw._setWordSpacing(wordSpace);\n    } else if (format && format.alignment === PdfTextAlignment.justify) {\n      this._sw._setWordSpacing(0);\n    }\n    return wordSpace;\n  };\n  PdfGraphics.prototype._shouldJustify = function (lineInfo, boundsWidth, format, font) {\n    var line = lineInfo._text;\n    var lineWidth = lineInfo._width;\n    var justifyStyle = format && format.alignment === PdfTextAlignment.justify;\n    var goodWidth = boundsWidth >= 0 && lineWidth < boundsWidth;\n    var whitespacesCount = font._getCharacterCount(line, [' ', '\\t']);\n    var hasSpaces = whitespacesCount > 0 && line[0] !== ' ';\n    var goodLineBreakStyle = (lineInfo._lineType & _LineType.layoutBreak) > 0;\n    return justifyStyle && goodWidth && hasSpaces && (goodLineBreakStyle || format.alignment === PdfTextAlignment.justify);\n  };\n  PdfGraphics.prototype._underlineStrikeoutText = function (brush, result, font, layoutRectangle, format) {\n    if (font.isUnderline || font.isStrikeout) {\n      var linePen = this._createUnderlineStrikeoutPen(brush, font);\n      if (typeof linePen !== 'undefined' && linePen !== null) {\n        var shift = this._getTextVerticalAlignShift(result._actualSize[1], layoutRectangle[3], format);\n        var underlineYOffset = layoutRectangle[1] + shift + font._metrics._getAscent(format) + 1.5 * linePen._width;\n        var strikeoutYOffset = layoutRectangle[1] + shift + font._metrics._getHeight(format) / 2 + 1.5 * linePen._width;\n        var lines = result._lines;\n        for (var i = 0; i < result._lineCount; i++) {\n          var lineInfo = lines[Number.parseInt(i.toString(), 10)];\n          var lineWidth = lineInfo._width;\n          var hShift = this._getHorizontalAlignShift(lineWidth, layoutRectangle[2], format);\n          var lineIndent = this._getLineIndent(lineInfo, format, layoutRectangle[2], i === 0);\n          var x1 = layoutRectangle[0] + hShift;\n          var x2 = !this._shouldJustify(lineInfo, layoutRectangle[2], format, font) ? x1 + lineWidth - lineIndent : x1 + layoutRectangle[2] - lineIndent;\n          if (font.isUnderline) {\n            this.drawLine(linePen, x1, underlineYOffset, x2, underlineYOffset);\n            underlineYOffset += result._lineHeight;\n          }\n          if (font.isStrikeout) {\n            this.drawLine(linePen, x1, strikeoutYOffset, x2, strikeoutYOffset);\n            strikeoutYOffset += result._lineHeight;\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Draw line on the page graphics.\n   *\n   * @param {PdfPen} pen pen value.\n   * @param {number} x1 value.\n   * @param {number} y1 value.\n   * @param {number} x2 value.\n   * @param {number} y2 value.\n   * @returns {void} draw a line.\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access first page\n   * let page: PdfPage = document.getPage(0);\n   * // Gets the graphics of the PDF page\n   * let graphics: PdfGraphics = page.graphics;\n   * //Create a new pen.\n   * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n   * //Draw line on the page graphics.\n   * graphics.drawLine(pen, 10, 10, 100, 100);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfGraphics.prototype.drawLine = function (pen, x1, y1, x2, y2) {\n    this._stateControl(pen);\n    this._sw._beginPath(x1, y1);\n    this._sw._appendLineSegment(x2, y2);\n    this._sw._strokePath();\n    _addProcSet('PDF', this._resourceObject);\n  };\n  PdfGraphics.prototype._createUnderlineStrikeoutPen = function (brush, font) {\n    return new PdfPen(brush._color, font._metrics._size / 20);\n  };\n  PdfGraphics.prototype._checkCorrectLayoutRectangle = function (textSize, x, y, format) {\n    var layoutedRectangle = [x, y, textSize[0], textSize[0]];\n    if (format) {\n      switch (format.alignment) {\n        case PdfTextAlignment.center:\n          layoutedRectangle[0] = layoutedRectangle[0] - layoutedRectangle[2] / 2;\n          break;\n        case PdfTextAlignment.right:\n          layoutedRectangle[0] = layoutedRectangle[0] - layoutedRectangle[2];\n          break;\n      }\n      switch (format.lineAlignment) {\n        case PdfVerticalAlignment.middle:\n          layoutedRectangle[1] = layoutedRectangle[1] - layoutedRectangle[3] / 2;\n          break;\n        case PdfVerticalAlignment.bottom:\n          layoutedRectangle[1] = layoutedRectangle[1] - layoutedRectangle[3];\n          break;\n      }\n    }\n    return layoutedRectangle;\n  };\n  PdfGraphics.prototype._drawGraphicsPath = function (pen, brush, fillMode, needClosing) {\n    if (typeof fillMode === 'undefined') {\n      fillMode = PdfFillMode.winding;\n    }\n    var isBrush = typeof brush !== 'undefined' && brush !== null;\n    var isPen = typeof pen !== 'undefined' && pen !== null;\n    var isEvenOdd = fillMode === PdfFillMode.alternate;\n    if (isPen && isBrush) {\n      if (needClosing) {\n        this._sw._closeFillStrokePath(isEvenOdd);\n      } else {\n        this._sw._fillStrokePath(isEvenOdd);\n      }\n    } else if (!isPen && !isBrush) {\n      this._sw._endPath();\n    } else if (isPen) {\n      if (needClosing) {\n        this._sw._closeStrokePath();\n      } else {\n        this._sw._strokePath();\n      }\n    } else {\n      if (needClosing) {\n        this._sw._closeFillPath(isEvenOdd);\n      } else {\n        this._sw._fillPath(isEvenOdd);\n      }\n    }\n  };\n  PdfGraphics.prototype._initializeCoordinates = function (page) {\n    var cbox;\n    if (page) {\n      var location_1 = [0, 0];\n      var needTransformation = false;\n      if (page._pageDictionary.has('CropBox') && page._pageDictionary.has('MediaBox')) {\n        cbox = page._pageDictionary.getArray('CropBox');\n        var mbox = page._pageDictionary.getArray('MediaBox');\n        if (cbox[0] === mbox[0] && cbox[1] === mbox[1] && cbox[2] === mbox[2] && cbox[3] === mbox[3]) {\n          needTransformation = true;\n        }\n        if (cbox[0] > 0 && cbox[3] > 0 && mbox[0] < 0 && mbox[1] < 0) {\n          this.translateTransform(cbox[0], -cbox[3]);\n          location_1[0] = -cbox[0];\n          location_1[1] = cbox[3];\n        } else if (!page._pageDictionary.has('CropBox')) {\n          needTransformation = true;\n        }\n        if (needTransformation) {\n          this._sw._writeComment('Change co-ordinate system to left/top.');\n          if (this._cropBox) {\n            this.translateTransform(this._cropBox[0], -this._cropBox[3]);\n          } else {\n            if (-page._origin[1] < this._mediaBoxUpperRightBound || this._mediaBoxUpperRightBound === 0) {\n              this.translateTransform(0, -this._size[1]);\n            } else {\n              this.translateTransform(0, -this._mediaBoxUpperRightBound);\n            }\n          }\n        }\n      }\n    } else {\n      this._sw._writeComment('Change co-ordinate system to left/top.');\n      if (this._mediaBoxUpperRightBound !== -this._size[1]) {\n        if (this._cropBox) {\n          cbox = this._cropBox;\n          if (cbox[0] > 0 || cbox[1] > 0 || this._size[0] === cbox[2] || this._size[1] === cbox[3]) {\n            this.translateTransform(cbox[0], -cbox[3]);\n          } else {\n            if (this._mediaBoxUpperRightBound === this._size[1] || this._mediaBoxUpperRightBound === 0) {\n              this.translateTransform(0, -this._size[1]);\n            } else {\n              this.translateTransform(0, -this._mediaBoxUpperRightBound);\n            }\n          }\n        } else {\n          if (this._mediaBoxUpperRightBound === this._size[1] || this._mediaBoxUpperRightBound === 0) {\n            this.translateTransform(0, -this._size[1]);\n          } else {\n            this.translateTransform(0, -this._mediaBoxUpperRightBound);\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Represents a scale transform of the graphics.\n   *\n   * @param {number} scaleX Scale factor in the x direction.\n   * @param {number} scaleY Scale factor in the y direction.\n   * @returns {void} scale transform.\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access first page\n   * let page: PdfPage = document.getPage(0);\n   * // Gets the graphics of the PDF page\n   * let graphics: PdfGraphics = page.graphics;\n   * // Create a new font\n   * let font: PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n   * // Save the graphics\n   * let state: PdfGraphicsState = graphics.save();\n   * //Set graphics scale transform.\n   * graphics.scaleTransform(0.5, 0.5);\n   * //Draws the String.\n   * graphics.drawString(\"Hello world!\", font, [10, 20, 100, 200], undefined, new PdfBrush([0, 0, 255]));\n   * //Restore the graphics.\n   * graphics.restore(state);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfGraphics.prototype.scaleTransform = function (scaleX, scaleY) {\n    var matrix = new _PdfTransformationMatrix();\n    matrix._scale(scaleX, scaleY);\n    this._sw._modifyCtm(matrix);\n    this._matrix._multiply(matrix);\n  };\n  /**\n   * Represents a translate transform of the graphics.\n   *\n   * @param {number} x x-coordinate of the translation.\n   * @param {number} y y-coordinate of the translation.\n   * @returns {void} translate transform.\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access first page\n   * let page: PdfPage = document.getPage(0);\n   * // Gets the graphics of the PDF page\n   * let graphics: PdfGraphics = page.graphics;\n   * // Create a new font\n   * let font: PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n   * // Save the graphics\n   * let state: PdfGraphicsState = graphics.save();\n   * //Set graphics translate transform.\n   * graphics.translateTransform(100, 100);\n   * //Draws the String.\n   * graphics.drawString(\"Hello world!\", font, [10, 20, 100, 200], undefined, new PdfBrush([0, 0, 255]));\n   * //Restore the graphics.\n   * graphics.restore(state);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfGraphics.prototype.translateTransform = function (x, y) {\n    var matrix = new _PdfTransformationMatrix();\n    matrix._translate(x, -y);\n    this._sw._modifyCtm(matrix);\n    this._matrix._multiply(matrix);\n  };\n  /**\n   * Represents a rotate transform of the graphics.\n   *\n   * @param {number} angle Angle of rotation in degrees\n   * @returns {void} rotate transform.\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access first page\n   * let page: PdfPage = document.getPage(0);\n   * // Gets the graphics of the PDF page\n   * let graphics: PdfGraphics = page.graphics;\n   * // Create a new font\n   * let font: PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n   * // Save the graphics\n   * let state: PdfGraphicsState = graphics.save();\n   * //Set graphics rotate transform.\n   * graphics.rotateTransform(-90);\n   * //Draws the String.\n   * graphics.drawString(\"Hello world!\", font, [10, 20, 100, 200], undefined, new PdfBrush([0, 0, 255]));\n   * //Restore the graphics.\n   * graphics.restore(state);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfGraphics.prototype.rotateTransform = function (angle) {\n    var matrix = new _PdfTransformationMatrix();\n    matrix._rotate(-angle);\n    this._sw._modifyCtm(matrix);\n    this._matrix._multiply(matrix);\n  };\n  /**\n   * Represents a clipping region of this graphics.\n   *\n   * @param {number[]} bounds Rectangle structure that represents the new clip region.\n   * @param {PdfFillMode} mode Member of the PdfFillMode enumeration that specifies the filling operation to use.\n   * @returns {void} clipping region.\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access first page\n   * let page: PdfPage = document.getPage(0);\n   * // Gets the graphics of the PDF page\n   * let graphics: PdfGraphics = page.graphics;\n   * // Create a new font\n   * let font: PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n   * //Set clip.\n   * graphics.setClip([0, 0, 50, 12], PdfFillMode.alternate);\n   * //Draws the String.\n   * graphics.drawString(\"Hello world!\", font, [0, 0, 100, 200], undefined, new PdfBrush([0, 0, 255]));\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfGraphics.prototype.setClip = function (bounds, mode) {\n    if (typeof mode === 'undefined') {\n      mode = PdfFillMode.winding;\n    }\n    this._sw._appendRectangle(bounds[0], bounds[1], bounds[2], bounds[3]);\n    this._sw._clipPath(mode === PdfFillMode.alternate);\n  };\n  /**\n   * Represents a transparency of this graphics.\n   *\n   * @param {number} stroke transparency value.\n   * @param {number} fill transparency value.\n   * @param {PdfBlendMode} mode blend mode.\n   * @returns {void} transparency of this graphics.\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access first page\n   * let page: PdfPage = document.getPage(0);\n   * // Gets the graphics of the PDF page\n   * let graphics: PdfGraphics = page.graphics;\n   * // Create a new font\n   * let font: PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n   * //Set transparency.\n   * graphics.setTransparency(0.5, 0.5, PdfBlendMode.multiply);\n   * //Draws the String.\n   * graphics.drawString(\"Hello world!\", font, [0, 0, 100, 200], undefined, new PdfBrush([0, 0, 255]));\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfGraphics.prototype.setTransparency = function (stroke, fill, mode) {\n    if (typeof fill === 'undefined') {\n      fill = stroke;\n    }\n    if (typeof mode === 'undefined') {\n      mode = PdfBlendMode.normal;\n    }\n    if (typeof this._transparencies === 'undefined') {\n      this._transparencies = new Map();\n    }\n    var transparencyKey = 'CA:' + stroke.toString() + '_ca:' + fill.toString() + '_BM:' + mode.toString();\n    var transparencyData;\n    if (this._transparencies.size > 0) {\n      this._transparencies.forEach(function (value, key) {\n        if (value === transparencyKey) {\n          transparencyData = key;\n        }\n      });\n    }\n    if (!transparencyData) {\n      transparencyData = new _TransparencyData();\n      var transparencyDict = new _PdfDictionary();\n      transparencyDict.update('CA', stroke);\n      transparencyDict.update('ca', fill);\n      transparencyDict.update('BM', _reverseMapBlendMode(mode));\n      var ref = this._crossReference._getNextReference();\n      this._crossReference._cacheMap.set(ref, transparencyDict);\n      transparencyData._dictionary = transparencyDict;\n      transparencyData._key = transparencyKey;\n      transparencyData._name = _PdfName.get(_getNewGuidString());\n      transparencyData._reference = ref;\n      var dictionary = void 0;\n      var isReference = false;\n      if (this._resourceObject.has('ExtGState')) {\n        var obj = this._resourceObject.getRaw('ExtGState'); // eslint-disable-line\n        if (obj !== null && typeof obj !== 'undefined') {\n          if (obj instanceof _PdfReference) {\n            isReference = true;\n            dictionary = this._crossReference._fetch(obj);\n          } else if (obj instanceof _PdfDictionary) {\n            dictionary = obj;\n          }\n        }\n      } else {\n        dictionary = new _PdfDictionary(this._crossReference);\n        this._resourceObject.update('ExtGState', dictionary);\n      }\n      dictionary.update(transparencyData._name.name, ref);\n      if (isReference) {\n        this._resourceObject._updated = true;\n      }\n      if (this._hasResourceReference) {\n        this._source._updated = true;\n      }\n    }\n    this._sw._setGraphicsState(transparencyData._name);\n  };\n  PdfGraphics.prototype._setTransparencyData = function (ref, name) {\n    this._resourceMap.set(ref, name);\n    var dictionary = this._crossReference._fetch(ref);\n    var stroke = 0;\n    var fill = 0;\n    var mode = 0;\n    if (dictionary.has('CA')) {\n      stroke = dictionary.get('CA');\n    }\n    if (dictionary.has('ca')) {\n      fill = dictionary.get('ca');\n    }\n    if (dictionary.has('ca')) {\n      fill = dictionary.get('ca');\n    }\n    if (dictionary.has('BM')) {\n      mode = _mapBlendMode(dictionary.get('BM'));\n    }\n    var tkey = 'CA:' + stroke.toString() + '_ca:' + fill.toString() + '_BM:' + mode.toString();\n    var tdata = new _TransparencyData();\n    tdata._dictionary = dictionary;\n    tdata._key = tkey;\n    tdata._name = name;\n    tdata._reference = ref;\n    this._transparencies.set(tdata, tkey);\n  };\n  PdfGraphics.prototype._getTranslateTransform = function (x, y, input) {\n    input._translate(x, -y);\n    return input;\n  };\n  PdfGraphics.prototype._getScaleTransform = function (x, y, input) {\n    if (input === null || typeof input === 'undefined') {\n      input = new _PdfTransformationMatrix();\n    }\n    input._scale(x, y);\n    return input;\n  };\n  return PdfGraphics;\n}();\nexport { PdfGraphics };\nvar _PdfTransformationMatrix = /** @class */function () {\n  function _PdfTransformationMatrix() {\n    this._matrix = new _Matrix(1, 0, 0, 1, 0, 0);\n  }\n  _PdfTransformationMatrix.prototype._translate = function (x, y) {\n    this._matrix._translate(x, y);\n  };\n  _PdfTransformationMatrix.prototype._scale = function (x, y) {\n    this._matrix._elements[0] = x;\n    this._matrix._elements[3] = y;\n  };\n  _PdfTransformationMatrix.prototype._rotate = function (angle) {\n    angle = angle * Math.PI / 180;\n    this._matrix._elements[0] = Math.cos(angle);\n    this._matrix._elements[1] = Math.sin(angle);\n    this._matrix._elements[2] = -Math.sin(angle);\n    this._matrix._elements[3] = Math.cos(angle);\n  };\n  _PdfTransformationMatrix.prototype._multiply = function (matrix) {\n    this._matrix._multiply(matrix._matrix);\n  };\n  _PdfTransformationMatrix.prototype._toString = function () {\n    var builder = '';\n    for (var i = 0, len = this._matrix._elements.length; i < len; i++) {\n      builder += _floatToString(this._matrix._elements[Number.parseInt(i.toString(), 10)]) + ' ';\n    }\n    return builder;\n  };\n  return _PdfTransformationMatrix;\n}();\nexport { _PdfTransformationMatrix };\nvar _Matrix = /** @class */function () {\n  function _Matrix(arg1, arg2, arg3, arg4, arg5, arg6) {\n    if (typeof arg1 === 'undefined') {\n      this._elements = [];\n    } else if (typeof arg1 === 'number') {\n      this._elements = [arg1, arg2, arg3, arg4, arg5, arg6];\n    } else {\n      this._elements = arg1;\n    }\n  }\n  Object.defineProperty(_Matrix.prototype, \"_offsetX\", {\n    get: function () {\n      return this._elements[4];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(_Matrix.prototype, \"_offsetY\", {\n    get: function () {\n      return this._elements[5];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  _Matrix.prototype._clone = function () {\n    return new _Matrix(this._elements.slice());\n  };\n  _Matrix.prototype._translate = function (x, y) {\n    this._elements[4] = x;\n    this._elements[5] = y;\n  };\n  _Matrix.prototype._transform = function (points) {\n    var x = points[0];\n    var y = points[1];\n    var x2 = x * this._elements[0] + y * this._elements[2] + this._offsetX;\n    var y2 = x * this._elements[1] + y * this._elements[3] + this._offsetY;\n    return [x2, y2];\n  };\n  _Matrix.prototype._multiply = function (matrix) {\n    this._elements = [this._elements[0] * matrix._elements[0] + this._elements[1] * matrix._elements[2], this._elements[0] * matrix._elements[1] + this._elements[1] * matrix._elements[3], this._elements[2] * matrix._elements[0] + this._elements[3] * matrix._elements[2], this._elements[2] * matrix._elements[1] + this._elements[3] * matrix._elements[3], this._offsetX * matrix._elements[0] + this._offsetY * matrix._elements[2] + matrix._offsetX, this._offsetX * matrix._elements[1] + this._offsetY * matrix._elements[3] + matrix._offsetY];\n  };\n  return _Matrix;\n}();\nexport { _Matrix };\n/**\n * Represents a state of the graphics from a PDF page.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Access first page\n * let page: PdfPage = document.getPage(0);\n * // Gets the graphics of the PDF page\n * let graphics: PdfGraphics = page.graphics;\n * // Create a new font\n * let font: PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // Save the graphics\n * let state: PdfGraphicsState = graphics.save();\n * //Set graphics translate transform.\n * graphics.translateTransform(100, 100);\n * //Draws the String.\n * graphics.drawString(\"Hello world!\", font, [10, 20, 100, 200], undefined, new PdfBrush([0, 0, 255]));\n * //Restore the graphics.\n * graphics.restore(state);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfGraphicsState = /** @class */function () {\n  /**\n   * Initializes a new instance of the `PdfGraphicsState` class.\n   *\n   * @private\n   * @param {PdfGraphics} graphics Graphics.\n   * @param {_PdfTransformationMatrix} matrix Matrix.\n   *\n   */\n  function PdfGraphicsState(graphics, matrix) {\n    if (graphics) {\n      this._g = graphics;\n      this._transformationMatrix = matrix;\n    }\n    this._charSpacing = 0;\n    this._wordSpacing = 0;\n    this._textScaling = 100;\n    this._textRenderingMode = _TextRenderingMode.fill;\n  }\n  return PdfGraphicsState;\n}();\nexport { PdfGraphicsState };\nvar _TransparencyData = /** @class */function () {\n  function _TransparencyData() {}\n  return _TransparencyData;\n}();\nexport var _TextRenderingMode;\n(function (_TextRenderingMode) {\n  _TextRenderingMode[_TextRenderingMode[\"fill\"] = 0] = \"fill\";\n  _TextRenderingMode[_TextRenderingMode[\"stroke\"] = 1] = \"stroke\";\n  _TextRenderingMode[_TextRenderingMode[\"fillStroke\"] = 2] = \"fillStroke\";\n  _TextRenderingMode[_TextRenderingMode[\"none\"] = 3] = \"none\";\n  _TextRenderingMode[_TextRenderingMode[\"clipFlag\"] = 4] = \"clipFlag\";\n  _TextRenderingMode[_TextRenderingMode[\"clipFill\"] = 4] = \"clipFill\";\n  _TextRenderingMode[_TextRenderingMode[\"clipStroke\"] = 5] = \"clipStroke\";\n  _TextRenderingMode[_TextRenderingMode[\"clipFillStroke\"] = 6] = \"clipFillStroke\";\n  _TextRenderingMode[_TextRenderingMode[\"clip\"] = 7] = \"clip\";\n})(_TextRenderingMode || (_TextRenderingMode = {}));\n/**\n * Represents a brush for the PDF page.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Access first page\n * let page: PdfPage = document.getPage(0);\n * // Gets the graphics of the PDF page\n * let graphics: PdfGraphics = page.graphics;\n * // Create a new brush\n * let brush: PdfBrush = new PdfBrush([0, 255, 255]);\n * // Draw a rectangle using brush\n * graphics.drawRectangle(10, 10, 100, 100, brush);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfBrush = /** @class */function () {\n  /**\n   * Initializes a new instance of the `PdfBrush` class.\n   *\n   * @param {number[]} color Color.\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access first page\n   * let page: PdfPage = document.getPage(0);\n   * // Gets the graphics of the PDF page\n   * let graphics: PdfGraphics = page.graphics;\n   * // Create a new brush\n   * let brush: PdfBrush = new PdfBrush([0, 255, 255]);\n   * // Draw a rectangle using brush\n   * graphics.drawRectangle(10, 10, 100, 100, brush);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  function PdfBrush(color) {\n    this._color = typeof color !== 'undefined' ? color : [0, 0, 0];\n  }\n  return PdfBrush;\n}();\nexport { PdfBrush };\n/**\n * Represents a pen for the PDF page.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Access first page\n * let page: PdfPage = document.getPage(0);\n * // Gets the graphics of the PDF page\n * let graphics: PdfGraphics = page.graphics;\n * // Create a new pen\n * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n * // Draw a rectangle using pen\n * graphics.drawRectangle(150, 50, 50, 50, pen);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfPen = /** @class */function () {\n  /**\n   * Initializes a new instance of the `PdfPen` class.\n   *\n   * @param {number[]} color Color.\n   * @param {number} width Width.\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access first page\n   * let page: PdfPage = document.getPage(0);\n   * // Gets the graphics of the PDF page\n   * let graphics: PdfGraphics = page.graphics;\n   * // Create a new pen\n   * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n   * // Draw a rectangle using pen\n   * graphics.drawRectangle(150, 50, 50, 50, pen);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  function PdfPen(color, width) {\n    this._color = color;\n    this._width = width;\n    this._dashOffset = 0;\n    this._dashPattern = [];\n    this._dashStyle = PdfDashStyle.solid;\n    this._miterLimit = 0;\n    this._lineCap = PdfLineCap.flat;\n    this._lineJoin = PdfLineJoin.miter;\n  }\n  return PdfPen;\n}();\nexport { PdfPen };\nvar _PdfUnitConvertor = /** @class */function () {\n  function _PdfUnitConvertor() {\n    this._horizontalResolution = 96;\n    this._proportions = this._updateProportions(this._horizontalResolution);\n  }\n  _PdfUnitConvertor.prototype._updateProportions = function (pixel) {\n    return [pixel / 2.54, pixel / 6.0, 1, pixel / 72.0, pixel, pixel / 300.0, pixel / 25.4];\n  };\n  _PdfUnitConvertor.prototype._convertUnits = function (value, from, to) {\n    return this._convertFromPixels(this._convertToPixels(value, from), to);\n  };\n  _PdfUnitConvertor.prototype._convertFromPixels = function (value, to) {\n    var index = to;\n    return value / this._proportions[Number.parseInt(index.toString(), 10)];\n  };\n  _PdfUnitConvertor.prototype._convertToPixels = function (value, from) {\n    var index = from;\n    return value * this._proportions[Number.parseInt(index.toString(), 10)];\n  };\n  return _PdfUnitConvertor;\n}();\nexport { _PdfUnitConvertor };","map":{"version":3,"names":["PdfPage","_PdfStreamWriter","_floatToString","_addProcSet","_reverseMapBlendMode","_mapBlendMode","_getNewGuidString","_getBezierArc","_numberToString","_bytesToString","_stringToUnicodeArray","_PdfDictionary","_PdfReference","_PdfName","PdfTrueTypeFont","_PdfStringLayouter","_LineType","_StringTokenizer","PdfTextAlignment","PdfTextDirection","PdfSubSuperScript","PdfBlendMode","PdfLineJoin","PdfLineCap","PdfDashStyle","PdfFillMode","PdfVerticalAlignment","PdfTemplate","_PdfPath","_PathPointType","_UnicodeTrueTypeFont","_RtlRenderer","PdfImage","PdfGraphics","size","content","xref","source","_pendingResource","_hasResourceReference","_source","_pageDictionary","_page","_content","dictionary","_template","has","obj","getRaw","_resourceObject","_fetch","update","_crossReference","_sw","_size","_initialize","Object","defineProperty","prototype","get","_m","_PdfTransformationMatrix","enumerable","configurable","_this","_resourceMap","Map","fonts","forEach","key","value","set","other","state","_transparencies","_setTransparencyData","save","PdfGraphicsState","_matrix","_textRenderingMode","_charSpacing","_characterSpacing","_textScaling","_wordSpacing","_currentBrush","_currentPen","_currentFont","_graphicsState","push","_saveGraphicsState","restore","length","_doRestore","indexOf","pop","_transformationMatrix","_restoreGraphicsState","drawRectangle","x","y","width","height","first","second","pen","brush","PdfPen","_stateControl","_appendRectangle","_drawGraphicsPath","drawPolygon","points","_beginPath","i","_appendLineSegment","Number","parseInt","toString","winding","drawEllipse","_constructArcPath","drawArc","startAngle","sweepAngle","drawImage","arg1","arg2","arg3","arg4","arg5","physicalDimension","_save","matrix","_getTranslateTransform","_getScaleTransform","_write","_modifyCtm","sourceDictionary","keyName","isNew","_updateImageResource","_updated","_executeObject","_processResources","crossReference","entry","resource","image","ref","_reference","_getNextReference","_cacheMap","_imageStream","name","_resources","_drawTemplate","template","bounds","scaleX","scaleY","needScale","cropBox","mediaBox","translateTransform","needTransform","_translate","_origin","_isAnnotationTemplate","_needScale","scaleApplied","templateMatrix","getArray","templateBox","templateScaleX","parseFloat","templateScaleY","roundScaleX","roundScaleY","_scale","isReference","base","reference","_drawPath","path","_buildUpPath","_points","_pathTypes","_fillMode","drawRoundedRectangle","radius","Error","diameter","arc","_addRectangle","_isRoundedRectangle","_addArc","_closeFigure","x1","y1","x2","y2","start","sweep","point","_appendBezierSegment","_writePen","lineWidth","_width","pattern","_dashPattern","_setLineDashPattern","_dashOffset","_setLineWidth","_setLineJoin","_lineJoin","_setLineCap","_lineCap","_miterLimit","_setMiterLimit","_setColor","_color","drawString","font","format","layouter","result","_layout","_empty","rect","_checkCorrectLayoutRectangle","_actualSize","_drawStringLayoutResult","types","type","bezier","_getBezierPoint","index","line","closePath","_closePath","_mediaBoxUpperRightBound","_clipBounds","_colorSpaceInitialized","_startCutIndex","_initializeCurrentColorSpace","_setColorSpace","_brushControl","_penControl","_fontControl","_metrics","_getSize","fontDict","_dictionary","internal","_fontInternal","_fontDictionary","_setFont","layoutRectangle","allowPartialLines","lineLimit","shouldClip","noClip","clipRegion","clipBounds","lineAlignment","middle","bottom","setClip","_applyStringSettings","textScaling","horizontalScalingFactor","_setTextScaling","verticalAlignShift","_getTextVerticalAlignShift","lineSpacing","_getHeight","script","subSuperScript","subScript","shift","_getDescent","_getAscent","_modifyTM","_drawLayoutResult","_startNextLine","_lineHeight","_endText","_underlineStrikeoutText","_getNextPage","page","pageCount","_document","_pageIndex","getPage","tm","_TextRenderingMode","fill","fillStroke","stroke","clipPath","clipFlag","_beginText","_setTextRenderingMode","cs","characterSpacing","_setCharacterSpacing","ws","wordSpacing","_setWordSpacing","lines","_lines","ttfFont","unicode","isUnicode","len","lineInfo","hAlignShift","_getHorizontalAlignShift","_getLineIndent","_drawUnicodeLine","_drawAsciiLine","vAlignShift","baseline","_text","rtl","rightToLeft","useWordSpace","alignment","justify","_justifyLine","rtlRender","textDirection","none","blocks","rightAlign","right","words","_splitLayout","_drawUnicodeBlocks","_breakUnicodeLine","tokens","token","_convertToUnicode","_showNextLineText","xShift","firstLineIndent","paragraphIndent","spaceWidth","_getCharacterWidth","_whiteSpace","wordSpace","word","tokenWidth","measureString","_showText","split","text","ttfReader","_ttfReader","_setSymbols","_convertString","bytes","textHeight","boundsHeight","top","boundsWidth","left","center","firstLine","lineIndent","firstParagraphLine","_lineType","Math","min","shouldJustify","_shouldJustify","hasWordSpacing","whitespacesCount","_getCharacterCount","justifyStyle","goodWidth","hasSpaces","goodLineBreakStyle","layoutBreak","isUnderline","isStrikeout","linePen","_createUnderlineStrikeoutPen","underlineYOffset","strikeoutYOffset","_lineCount","hShift","drawLine","_strokePath","textSize","layoutedRectangle","fillMode","needClosing","isBrush","isPen","isEvenOdd","alternate","_closeFillStrokePath","_fillStrokePath","_endPath","_closeStrokePath","_closeFillPath","_fillPath","_initializeCoordinates","cbox","location_1","needTransformation","mbox","_writeComment","_cropBox","scaleTransform","_multiply","rotateTransform","angle","_rotate","mode","_clipPath","setTransparency","normal","transparencyKey","transparencyData","_TransparencyData","transparencyDict","_key","_name","_setGraphicsState","tkey","tdata","input","_Matrix","_elements","PI","cos","sin","_toString","builder","arg6","_clone","slice","_transform","_offsetX","_offsetY","graphics","_g","PdfBrush","color","_dashStyle","solid","flat","miter","_PdfUnitConvertor","_horizontalResolution","_proportions","_updateProportions","pixel","_convertUnits","from","to","_convertFromPixels","_convertToPixels"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/pdf-graphics.js"],"sourcesContent":["import { PdfPage } from './../pdf-page';\nimport { _PdfStreamWriter } from './pdf-stream-writer';\nimport { _floatToString, _addProcSet, _reverseMapBlendMode, _mapBlendMode, _getNewGuidString, _getBezierArc, _numberToString, _bytesToString, _stringToUnicodeArray } from './../utils';\nimport { _PdfDictionary, _PdfReference, _PdfName } from './../pdf-primitives';\nimport { PdfTrueTypeFont } from './../fonts/pdf-standard-font';\nimport { _PdfStringLayouter, _LineType, _StringTokenizer } from './../fonts/string-layouter';\nimport { PdfTextAlignment, PdfTextDirection, PdfSubSuperScript, PdfBlendMode, PdfLineJoin, PdfLineCap, PdfDashStyle, PdfFillMode } from './../enumerator';\nimport { PdfVerticalAlignment } from './../fonts/pdf-string-format';\nimport { PdfTemplate } from './pdf-template';\nimport { _PdfPath, _PathPointType } from './pdf-path';\nimport { _UnicodeTrueTypeFont } from '../fonts/unicode-true-type-font';\nimport { _RtlRenderer } from './../graphics/rightToLeft/text-renderer';\nimport { PdfImage } from './images/pdf-image';\n/**\n * Represents a graphics from a PDF page.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Access first page\n * let page: PdfPage = document.getPage(0);\n * // Gets the graphics of the PDF page\n * let graphics: PdfGraphics = page.graphics;\n * //Create a new pen.\n * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n * //Draw line on the page graphics.\n * graphics.drawLine(pen, 10, 10, 100, 100);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfGraphics = /** @class */ (function () {\n    function PdfGraphics(size, content, xref, source) {\n        this._pendingResource = []; // eslint-disable-line\n        this._hasResourceReference = false;\n        if (source instanceof PdfPage) {\n            this._source = source._pageDictionary;\n            this._page = source;\n        }\n        else if (source instanceof PdfTemplate) {\n            this._source = source._content.dictionary;\n            this._template = source;\n        }\n        if (this._source && this._source.has('Resources')) {\n            var obj = this._source.getRaw('Resources'); // eslint-disable-line\n            if (obj instanceof _PdfReference) {\n                this._hasResourceReference = true;\n                this._resourceObject = xref._fetch(obj);\n            }\n            else if (obj instanceof _PdfDictionary) {\n                this._resourceObject = obj;\n            }\n        }\n        else {\n            this._resourceObject = new _PdfDictionary();\n            this._source.update('Resources', this._resourceObject);\n        }\n        this._crossReference = xref;\n        this._sw = new _PdfStreamWriter(content);\n        this._size = size;\n        _addProcSet('PDF', this._resourceObject);\n        this._initialize();\n    }\n    Object.defineProperty(PdfGraphics.prototype, \"_matrix\", {\n        get: function () {\n            if (typeof this._m === 'undefined') {\n                this._m = new _PdfTransformationMatrix();\n            }\n            return this._m;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"_resources\", {\n        get: function () {\n            var _this = this;\n            if (typeof this._resourceMap === 'undefined') {\n                this._resourceMap = new Map();\n                if (this._resourceObject.has('Font')) {\n                    var fonts = this._resourceObject.get('Font');\n                    if (fonts && fonts.size > 0) {\n                        fonts.forEach(function (key, value) {\n                            if (value !== null && typeof value !== 'undefined' && value instanceof _PdfReference) {\n                                _this._resourceMap.set(value, _PdfName.get(key));\n                            }\n                        });\n                    }\n                }\n                if (this._resourceObject.has('XObject')) {\n                    var other = this._resourceObject.get('XObject');\n                    if (other && other.size > 0) {\n                        other.forEach(function (key, value) {\n                            if (value !== null && typeof value !== 'undefined' && value instanceof _PdfReference) {\n                                _this._resourceMap.set(value, _PdfName.get(key));\n                            }\n                        });\n                    }\n                }\n                if (this._resourceObject.has('ExtGState')) {\n                    var state = this._resourceObject.get('ExtGState');\n                    if (state && state.size > 0) {\n                        if (!this._transparencies) {\n                            this._transparencies = new Map();\n                        }\n                        state.forEach(function (key, value) {\n                            if (value !== null && typeof value !== 'undefined' && value instanceof _PdfReference) {\n                                _this._setTransparencyData(value, _PdfName.get(key));\n                            }\n                        });\n                    }\n                }\n            }\n            return this._resourceMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Save the current graphics state.\n     *\n     * @returns {PdfGraphicsState} graphics state.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create a new font\n     * let font: PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // Save the graphics\n     * let state: PdfGraphicsState = graphics.save();\n     * //Set graphics translate transform.\n     * graphics.translateTransform(100, 100);\n     * //Draws the String.\n     * graphics.drawString(\"Hello world!\", font, [10, 20, 100, 200], undefined, new PdfBrush([0, 0, 255]));\n     * //Restore the graphics.\n     * graphics.restore(state);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfGraphics.prototype.save = function () {\n        var state = new PdfGraphicsState(this, this._matrix);\n        state._textRenderingMode = this._textRenderingMode;\n        state._charSpacing = this._characterSpacing;\n        state._textScaling = this._textScaling;\n        state._wordSpacing = this._wordSpacing;\n        state._currentBrush = this._currentBrush;\n        state._currentPen = this._currentPen;\n        state._currentFont = this._currentFont;\n        this._graphicsState.push(state);\n        this._sw._saveGraphicsState();\n        return state;\n    };\n    /**\n     * Restore the graphics state.\n     *\n     * @param {PdfGraphicsState} state graphics state.\n     * @returns {void} restore of the graphics state.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create a new font\n     * let font: PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // Save the graphics\n     * let state: PdfGraphicsState = graphics.save();\n     * //Set graphics translate transform.\n     * graphics.translateTransform(100, 100);\n     * //Draws the String.\n     * graphics.drawString(\"Hello world!\", font, [10, 20, 100, 200], undefined, new PdfBrush([0, 0, 255]));\n     * //Restore the graphics.\n     * graphics.restore(state);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfGraphics.prototype.restore = function (state) {\n        if (this._graphicsState.length > 0) {\n            if (typeof state === 'undefined') {\n                this._doRestore();\n            }\n            else {\n                if (this._graphicsState.length > 0 && this._graphicsState.indexOf(state) !== -1) {\n                    while (this._graphicsState.length > 0) {\n                        if (this._doRestore() === state) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    PdfGraphics.prototype._doRestore = function () {\n        var state = this._graphicsState.pop();\n        this._m = state._transformationMatrix;\n        this._currentBrush = state._currentBrush;\n        this._currentPen = state._currentPen;\n        this._currentFont = state._currentFont;\n        this._characterSpacing = state._charSpacing;\n        this._wordSpacing = state._wordSpacing;\n        this._textScaling = state._textScaling;\n        this._textRenderingMode = state._textRenderingMode;\n        this._sw._restoreGraphicsState();\n        return state;\n    };\n    PdfGraphics.prototype.drawRectangle = function (x, y, width, height, first, second) {\n        var pen;\n        var brush;\n        if (first instanceof PdfPen) {\n            pen = first;\n            if (second) {\n                brush = second;\n            }\n        }\n        else {\n            brush = first;\n        }\n        this._stateControl(pen, brush);\n        this._sw._appendRectangle(x, y, width, height);\n        this._drawGraphicsPath(pen, brush);\n    };\n    PdfGraphics.prototype.drawPolygon = function (points, first, second) {\n        if (points.length > 0) {\n            var pen = void 0;\n            var brush = void 0;\n            if (first instanceof PdfPen) {\n                pen = first;\n                if (second) {\n                    brush = second;\n                }\n            }\n            else {\n                brush = first;\n            }\n            this._stateControl(pen, brush);\n            this._sw._beginPath(points[0][0], points[0][1]);\n            for (var i = 1; i < points.length; i++) {\n                this._sw._appendLineSegment(points[Number.parseInt(i.toString(), 10)][0], points[Number.parseInt(i.toString(), 10)][1]);\n            }\n            this._drawGraphicsPath(pen, brush, PdfFillMode.winding, true);\n        }\n    };\n    PdfGraphics.prototype.drawEllipse = function (x, y, width, height, first, second) {\n        var pen;\n        var brush;\n        if (first instanceof PdfPen) {\n            pen = first;\n            if (second) {\n                brush = second;\n            }\n        }\n        else {\n            brush = first;\n        }\n        this._stateControl(pen, brush);\n        this._constructArcPath(x, y, x + width, y + height, 0, 360);\n        this._drawGraphicsPath(pen, brush, PdfFillMode.winding, true);\n    };\n    /**\n     * Draw arc on the page graphics.\n     *\n     * @param {number} x value.\n     * @param {number} y value.\n     * @param {number} width value.\n     * @param {number} height value.\n     * @param {number} startAngle value.\n     * @param {number} sweepAngle value.\n     * @param {PdfPen} pen value.\n     * @returns {void} draw a arc.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * //Create a new pen.\n     * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n     * //Draw arc on the page graphics.\n     * graphics.drawArc(10, 20, 100, 200, 20, 30, pen);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfGraphics.prototype.drawArc = function (x, y, width, height, startAngle, sweepAngle, pen) {\n        if (sweepAngle !== 0) {\n            this._stateControl(pen);\n            this._constructArcPath(x, y, x + width, y + height, startAngle, sweepAngle);\n            this._drawGraphicsPath(pen, null, PdfFillMode.winding, false);\n        }\n    };\n    PdfGraphics.prototype.drawImage = function (arg1, arg2, arg3, arg4, arg5) {\n        if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n            var size = arg1.physicalDimension;\n            this.drawImage(arg1, arg2, arg3, size[0], size[1]);\n        }\n        else {\n            arg1._save();\n            var matrix = new _PdfTransformationMatrix();\n            this._getTranslateTransform(arg2, (arg3 + arg5), matrix);\n            this._getScaleTransform(arg4, arg5, matrix);\n            this._sw._write('q');\n            this._sw._modifyCtm(matrix);\n            var sourceDictionary = void 0;\n            var keyName = void 0;\n            var isNew = true;\n            if (this._resourceObject.has('XObject')) {\n                var obj = this._resourceObject.getRaw('XObject'); // eslint-disable-line\n                if (obj instanceof _PdfDictionary) {\n                    sourceDictionary = obj;\n                }\n                if (sourceDictionary) {\n                    isNew = false;\n                }\n            }\n            if (isNew) {\n                sourceDictionary = new _PdfDictionary(this._crossReference);\n                this._resourceObject.update('XObject', sourceDictionary);\n            }\n            if (typeof keyName === 'undefined') {\n                keyName = _PdfName.get(_getNewGuidString());\n            }\n            if (this._crossReference) {\n                this._updateImageResource(arg1, keyName, sourceDictionary, this._crossReference);\n                this._source.update('Resources', this._resourceObject);\n                this._source._updated = true;\n            }\n            else {\n                this._pendingResource.push({ 'resource': arg1, 'key': keyName, 'source': sourceDictionary });\n            }\n            this._sw._executeObject(keyName);\n            this._sw._write('Q');\n            this._sw._write('\\r\\n');\n            _addProcSet('ImageB', this._resourceObject);\n            _addProcSet('ImageC', this._resourceObject);\n            _addProcSet('ImageI', this._resourceObject);\n            _addProcSet('Text', this._resourceObject);\n        }\n    };\n    PdfGraphics.prototype._processResources = function (crossReference) {\n        if (this._pendingResource.length > 0) {\n            for (var i = 0; i < this._pendingResource.length; i++) {\n                var entry = this._pendingResource[Number.parseInt(i.toString(), 10)]; // eslint-disable-line\n                if (entry.resource instanceof PdfImage) {\n                    this._updateImageResource(entry.resource, entry.key, entry.source, crossReference);\n                }\n                this._source.update('Resources', this._resourceObject);\n                this._source._updated = true;\n            }\n            this._pendingResource = [];\n        }\n    };\n    PdfGraphics.prototype._updateImageResource = function (image, keyName, source, crossReference) {\n        var ref;\n        if (image._reference) {\n            ref = image._reference;\n        }\n        else {\n            ref = crossReference._getNextReference();\n            image._reference = ref;\n        }\n        if (!crossReference._cacheMap.has(ref)) {\n            if (image && image._imageStream && image._imageStream.dictionary) {\n                crossReference._cacheMap.set(ref, image._imageStream);\n                image._imageStream.dictionary._updated = true;\n            }\n        }\n        source.update(keyName.name, ref);\n        this._resources.set(ref, keyName);\n        this._resourceObject._updated = true;\n    };\n    PdfGraphics.prototype._drawTemplate = function (template, bounds) {\n        var _this = this;\n        var scaleX = (template && template._size[0] > 0) ? bounds.width / template._size[0] : 1;\n        var scaleY = (template && template._size[1] > 0) ? bounds.height / template._size[1] : 1;\n        var needScale = !(scaleX === 1 && scaleY === 1);\n        var cropBox;\n        var mediaBox;\n        if (this._page) {\n            cropBox = this._page.cropBox;\n            mediaBox = this._page.mediaBox;\n            if (this._page._pageDictionary.has('CropBox') && this._page._pageDictionary.has('MediaBox')) {\n                if (cropBox[0] > 0 && cropBox[1] > 0 && mediaBox[0] < 0 && mediaBox[1] < 0) {\n                    this.translateTransform(cropBox[0], -cropBox[1]);\n                    bounds.x = -cropBox[0];\n                    bounds.y = cropBox[1];\n                }\n            }\n        }\n        var state = this.save();\n        var matrix = new _PdfTransformationMatrix();\n        if (this._page) {\n            var needTransform = (this._page._pageDictionary.has('CropBox') &&\n                this._page._pageDictionary.has('MediaBox') && cropBox && mediaBox &&\n                cropBox[0] === mediaBox[0] && cropBox[1] === mediaBox[1] && cropBox[2] === mediaBox[2] && cropBox[3] === mediaBox[3]) ||\n                (this._page._pageDictionary.has('MediaBox') && mediaBox && mediaBox[3] === 0);\n            matrix._translate(bounds.x, -(bounds.y + ((this._page._origin[0] >= 0 || needTransform) ? bounds.height : 0)));\n        }\n        else {\n            matrix._translate(bounds.x, -(bounds.y + bounds.height));\n        }\n        if (needScale) {\n            if (template._isAnnotationTemplate && template._needScale) {\n                var scaleApplied = false;\n                if (template._content && template._content.dictionary) {\n                    var dictionary = template._content.dictionary;\n                    if (dictionary.has('Matrix') && dictionary.has('BBox')) {\n                        var templateMatrix = dictionary.getArray('Matrix');\n                        var templateBox = dictionary.getArray('BBox');\n                        if (templateMatrix && templateBox && templateMatrix.length > 5 && templateBox.length > 3) {\n                            var templateScaleX = Number.parseFloat(_numberToString(-templateMatrix[1]));\n                            var templateScaleY = Number.parseFloat(_numberToString(templateMatrix[2]));\n                            var roundScaleX = Number.parseFloat(_numberToString(scaleX));\n                            var roundScaleY = Number.parseFloat(_numberToString(scaleY));\n                            if (roundScaleX === templateScaleX &&\n                                roundScaleY === templateScaleY &&\n                                templateBox[2] === template._size[0] &&\n                                templateBox[3] === template._size[1]) {\n                                matrix = new _PdfTransformationMatrix();\n                                matrix._translate(bounds.x - templateMatrix[4], bounds.y + templateMatrix[5]);\n                                matrix._scale(1, 1);\n                                scaleApplied = true;\n                            }\n                        }\n                    }\n                }\n                if (!scaleApplied) {\n                    matrix._scale(scaleX, scaleY);\n                }\n            }\n            else {\n                matrix._scale(scaleX, scaleY);\n            }\n        }\n        this._sw._modifyCtm(matrix);\n        var sourceDictionary;\n        var isReference = false;\n        var keyName;\n        var isNew = true;\n        var ref;\n        if (this._resourceObject.has('XObject')) {\n            var obj = this._resourceObject.getRaw('XObject'); // eslint-disable-line\n            if (obj instanceof _PdfReference) {\n                isReference = true;\n                sourceDictionary = this._crossReference._fetch(obj);\n            }\n            else if (obj instanceof _PdfDictionary) {\n                sourceDictionary = obj;\n            }\n            if (sourceDictionary) {\n                isNew = false;\n                this._resources.forEach(function (value, key) {\n                    if (key && key instanceof _PdfReference) {\n                        var base = _this._crossReference._fetch(key);\n                        if (base && template && base === template._content) {\n                            keyName = value;\n                            ref = key;\n                        }\n                    }\n                });\n            }\n        }\n        if (isNew) {\n            sourceDictionary = new _PdfDictionary(this._crossReference);\n            this._resourceObject.update('XObject', sourceDictionary);\n        }\n        if (typeof keyName === 'undefined') {\n            keyName = _PdfName.get(_getNewGuidString());\n            if (template && template._content.reference) {\n                ref = template._content.reference;\n            }\n            else {\n                ref = this._crossReference._getNextReference();\n            }\n            if (!this._crossReference._cacheMap.has(ref)) {\n                if (template && template._content) {\n                    this._crossReference._cacheMap.set(ref, template._content);\n                }\n            }\n            sourceDictionary.update(keyName.name, ref);\n            this._resources.set(ref, keyName);\n            this._resourceObject._updated = true;\n        }\n        if (isReference) {\n            this._resourceObject._updated = true;\n        }\n        if (this._hasResourceReference) {\n            this._source._updated = true;\n        }\n        this._sw._executeObject(keyName);\n        this.restore(state);\n        _addProcSet('ImageB', this._resourceObject);\n        _addProcSet('ImageC', this._resourceObject);\n        _addProcSet('ImageI', this._resourceObject);\n        _addProcSet('Text', this._resourceObject);\n    };\n    PdfGraphics.prototype._drawPath = function (path, pen, brush) {\n        if (pen || brush) {\n            this._stateControl(pen, brush, null);\n            this._buildUpPath(path._points, path._pathTypes);\n            this._drawGraphicsPath(pen, brush, path._fillMode, false);\n        }\n    };\n    /**\n     * Draw rounded rectangle on the page graphics.\n     *\n     * @param {number} x value.\n     * @param {number} y value.\n     * @param {number} width value.\n     * @param {number} height value.\n     * @param {number} radius value.\n     * @param {PdfPen} pen value.\n     * @param {PdfBrush} brush value.\n     * @returns {void} draw a rounded rectangle.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * //Create a new pen.\n     * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n     * //Create a new brush.\n     * let brush: PdfBrush = new PdfBrush([0, 0, 255]);\n     * //Draw rounded rectangle on the page graphics.\n     * graphics.drawRoundedRectangle(10, 20, 100, 200, 5, pen, brush);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfGraphics.prototype.drawRoundedRectangle = function (x, y, width, height, radius, pen, brush) {\n        if (pen === null) {\n            throw new Error('pen');\n        }\n        if (brush === null) {\n            throw new Error('brush');\n        }\n        var bounds = [x, y, width, height];\n        var diameter = radius * 2;\n        var size = [diameter, diameter];\n        var arc = [bounds[0], bounds[1], size[0], size[1]];\n        var path = new _PdfPath();\n        if (radius === 0) {\n            path._addRectangle(bounds[0], bounds[1], bounds[2], bounds[3]);\n            this._drawPath(path, pen, brush);\n        }\n        else {\n            path._isRoundedRectangle = true;\n            path._addArc(arc[0], arc[1], arc[2], arc[3], 180, 90);\n            arc[0] = (bounds[0] + bounds[2]) - diameter;\n            path._addArc(arc[0], arc[1], arc[2], arc[3], 270, 90);\n            arc[1] = (bounds[1] + bounds[3]) - diameter;\n            path._addArc(arc[0], arc[1], arc[2], arc[3], 0, 90);\n            arc[0] = bounds[0];\n            path._addArc(arc[0], arc[1], arc[2], arc[3], 90, 90);\n            path._closeFigure();\n            this._drawPath(path, pen, brush);\n        }\n    };\n    PdfGraphics.prototype._constructArcPath = function (x1, y1, x2, y2, start, sweep) {\n        var points = _getBezierArc(x1, y1, x2, y2, start, sweep);\n        if (points.length === 8) {\n            return;\n        }\n        var point = [points[0], points[1], points[2], points[3], points[4], points[5], points[6], points[7]];\n        this._sw._beginPath(point[0], point[1]);\n        for (var i = 0; i < points.length; i = i + 8) {\n            point = [points[Number.parseInt(i.toString(), 10)],\n                points[i + 1],\n                points[i + 2],\n                points[i + 3],\n                points[i + 4],\n                points[i + 5],\n                points[i + 6],\n                points[i + 7]];\n            this._sw._appendBezierSegment(point[2], point[3], point[4], point[5], point[6], point[7]);\n        }\n    };\n    PdfGraphics.prototype._writePen = function (pen) {\n        var lineWidth = pen._width;\n        var pattern = pen._dashPattern;\n        for (var i = 0; i < pattern.length; ++i) {\n            pattern[i] *= pen._width; // eslint-disable-line\n        }\n        this._sw._setLineDashPattern(pattern, pen._dashOffset * lineWidth);\n        this._sw._setLineWidth(pen._width);\n        this._sw._setLineJoin(pen._lineJoin);\n        this._sw._setLineCap(pen._lineCap);\n        if (pen._miterLimit > 0) {\n            this._sw._setMiterLimit(pen._miterLimit);\n        }\n        this._sw._setColor(pen._color, true);\n    };\n    /**\n     * Draw text on the page graphics.\n     *\n     * @param {string} value draw string.\n     * @param {PdfFont} font value.\n     * @param {number[]} bounds value.\n     * @param {PdfPen} pen value.\n     * @param {PdfBrush} brush value.\n     * @param {PdfStringFormat} format value.\n     * @returns {void} draw a string.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create a new pen.\n     * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n     * // Create a new font.\n     * let font: PdfStandardFont = new PdfStandardFont(PdfFontFamily.symbol, 10);\n     * // Create a new string format\n     * let format: PdfStringFormat = new PdfStringFormat();\n     * format.alignment = PdfTextAlignment.center;\n     * // Draw text on the page graphics.\n     * graphics.drawString('Hello World', font, [10, 20, 100, 200], pen, new PdfBrush([0, 0, 255]), format);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfGraphics.prototype.drawString = function (value, font, bounds, pen, brush, format) {\n        var layouter = new _PdfStringLayouter();\n        var result = layouter._layout(value, font, format, [bounds[2], bounds[3]]);\n        if (!result._empty) {\n            var rect = this._checkCorrectLayoutRectangle(result._actualSize, bounds[0], bounds[1], format);\n            if (bounds[2] <= 0) {\n                bounds[0] = rect[0];\n                bounds[2] = rect[2];\n            }\n            if (bounds[3] <= 0) {\n                bounds[1] = rect[1];\n                bounds[3] = rect[3];\n            }\n            this._drawStringLayoutResult(result, font, pen, brush, bounds, format);\n        }\n        _addProcSet('Text', this._resourceObject);\n    };\n    PdfGraphics.prototype._buildUpPath = function (points, types) {\n        for (var i = 0; i < points.length; i++) {\n            var point = points[Number.parseInt(i.toString(), 10)];\n            var type = types[Number.parseInt(i.toString(), 10)];\n            switch (type & 0xf) {\n                case _PathPointType.start:\n                    this._sw._beginPath(point[0], point[1]);\n                    break;\n                case _PathPointType.bezier:\n                    var result = this._getBezierPoint(points, types, i); // eslint-disable-line\n                    i = result.index;\n                    var first = result.point; // eslint-disable-line\n                    result = this._getBezierPoint(points, types, i);\n                    i = result.index;\n                    var second = result.point; // eslint-disable-line\n                    this._sw._appendBezierSegment(point[0], point[1], first[0], first[1], second[0], second[1]);\n                    break;\n                case _PathPointType.line:\n                    this._sw._appendLineSegment(point[0], point[1]);\n                    break;\n                default:\n                    throw new Error('Incorrect path formation.');\n            }\n            type = types[Number.parseInt(i.toString(), 10)];\n            if ((type & _PathPointType.closePath) === _PathPointType.closePath) {\n                this._sw._closePath();\n            }\n        }\n    };\n    PdfGraphics.prototype._getBezierPoint = function (points, types, index) {\n        if (types[Number.parseInt(index.toString(), 10)] !== _PathPointType.bezier) {\n            throw new Error('Malforming path.');\n        }\n        index++;\n        return { 'index': index, 'point': points[Number.parseInt(index.toString(), 10)] };\n    };\n    PdfGraphics.prototype._initialize = function () {\n        this._mediaBoxUpperRightBound = 0;\n        this._characterSpacing = -1;\n        this._wordSpacing = -1;\n        this._textScaling = -100;\n        this._textRenderingMode = -1;\n        this._graphicsState = [];\n        this._clipBounds = [0, 0, this._size[0], this._size[1]];\n        this._colorSpaceInitialized = false;\n        this._startCutIndex = -1;\n    };\n    PdfGraphics.prototype._initializeCurrentColorSpace = function () {\n        if (!this._colorSpaceInitialized) {\n            this._sw._setColorSpace('DeviceRGB', true);\n            this._sw._setColorSpace('DeviceRGB', false);\n            this._colorSpaceInitialized = true;\n        }\n    };\n    PdfGraphics.prototype._brushControl = function (brush) {\n        this._sw._setColor(brush._color, false);\n        this._currentBrush = brush;\n    };\n    PdfGraphics.prototype._penControl = function (pen) {\n        this._currentPen = pen;\n        this._writePen(pen);\n        this._currentPen = pen;\n    };\n    PdfGraphics.prototype._fontControl = function (font, format) {\n        var _this = this;\n        var size = font._metrics._getSize(format);\n        this._currentFont = font;\n        var fontDict;\n        var isReference = false;\n        var keyName;\n        var isNew = true;\n        var ref;\n        if (this._resourceObject.has('Font')) {\n            var obj = this._resourceObject.getRaw('Font'); // eslint-disable-line\n            if (obj !== null && typeof obj !== 'undefined') {\n                if (obj instanceof _PdfReference) {\n                    isReference = true;\n                    fontDict = this._crossReference._fetch(obj);\n                }\n                else if (obj instanceof _PdfDictionary) {\n                    fontDict = obj;\n                }\n            }\n            if (typeof fontDict !== 'undefined' && fontDict !== null) {\n                isNew = false;\n                this._resources.forEach(function (value, key) {\n                    if (key !== null && typeof key !== 'undefined') {\n                        var dictionary = _this._crossReference._fetch(key);\n                        if (dictionary && dictionary === font._dictionary) {\n                            keyName = value;\n                            ref = key;\n                        }\n                    }\n                });\n            }\n        }\n        if (isNew) {\n            fontDict = new _PdfDictionary(this._crossReference);\n            this._resourceObject.update('Font', fontDict);\n        }\n        if (typeof keyName === 'undefined') {\n            keyName = _PdfName.get(_getNewGuidString());\n            if (!ref) {\n                ref = this._crossReference._getNextReference();\n            }\n            if (font._dictionary) {\n                this._crossReference._cacheMap.set(ref, font._dictionary);\n                fontDict.update(keyName.name, ref);\n                this._resources.set(ref, keyName);\n            }\n            else if (font instanceof PdfTrueTypeFont) {\n                var internal = font._fontInternal;\n                if (internal && internal._fontDictionary) {\n                    this._crossReference._cacheMap.set(ref, internal._fontDictionary);\n                }\n                fontDict.update(keyName.name, ref);\n                this._resources.set(ref, keyName);\n            }\n        }\n        if (isReference) {\n            this._resourceObject._updated = true;\n        }\n        if (this._hasResourceReference) {\n            this._source._updated = true;\n        }\n        this._sw._setFont(keyName.name, size);\n    };\n    PdfGraphics.prototype._stateControl = function (pen, brush, font, format) {\n        if (pen || brush) {\n            this._initializeCurrentColorSpace();\n        }\n        if (pen) {\n            this._penControl(pen);\n        }\n        if (brush) {\n            this._brushControl(brush);\n        }\n        if (font) {\n            this._fontControl(font, format);\n        }\n    };\n    PdfGraphics.prototype._drawStringLayoutResult = function (result, font, pen, brush, layoutRectangle, format) {\n        if (!result._empty) {\n            var allowPartialLines = (format && typeof format.lineLimit !== 'undefined' && !format.lineLimit);\n            var shouldClip = (typeof format === 'undefined' || (format && typeof format.noClip !== 'undefined'\n                && !format.noClip));\n            var clipRegion = allowPartialLines && shouldClip;\n            var state = void 0;\n            if (clipRegion) {\n                state = this.save();\n                var clipBounds = [layoutRectangle[0], layoutRectangle[1], result._actualSize[0], result._actualSize[1]];\n                if (layoutRectangle[2] > 0) {\n                    clipBounds[2] = layoutRectangle[2];\n                }\n                if (format.lineAlignment === PdfVerticalAlignment.middle) {\n                    clipBounds[1] += (layoutRectangle[3] - clipBounds[3]) / 2;\n                }\n                else if (format.lineAlignment === PdfVerticalAlignment.bottom) {\n                    clipBounds[1] += (layoutRectangle[3] - clipBounds[3]);\n                }\n                this.setClip(clipBounds);\n            }\n            this._applyStringSettings(font, pen, brush, format);\n            var textScaling = (typeof format !== 'undefined' && format !== null) ? format.horizontalScalingFactor : 100.0;\n            if (textScaling !== this._textScaling) {\n                this._sw._setTextScaling(textScaling);\n                this._textScaling = textScaling;\n            }\n            var verticalAlignShift = this._getTextVerticalAlignShift(result._actualSize[1], layoutRectangle[3], format);\n            var height = (typeof format === 'undefined' || format === null || format.lineSpacing === 0) ?\n                font._metrics._getHeight(format) :\n                format.lineSpacing + font._metrics._getHeight(format);\n            var script = (format !== null && typeof format !== 'undefined' &&\n                format.subSuperScript === PdfSubSuperScript.subScript);\n            var shift = 0;\n            shift = (script) ? height - (font.height + font._metrics._getDescent(format)) : (height - font._metrics._getAscent(format));\n            if (format && format.lineAlignment === PdfVerticalAlignment.bottom) {\n                if (layoutRectangle[3] - result._actualSize[1] !== 0 &&\n                    (layoutRectangle[3] - result._actualSize[1]) < (font._metrics._size / 2) - 1) {\n                    if (Number.parseFloat(_numberToString(layoutRectangle[3])) <=\n                        Number.parseFloat(_numberToString(font._metrics._getHeight(format)))) {\n                        shift = -(height / font._metrics._size);\n                    }\n                }\n            }\n            var matrix = new _PdfTransformationMatrix();\n            matrix._translate(layoutRectangle[0], (-(layoutRectangle[1] + font._metrics._getHeight(format)) -\n                (font._metrics._getDescent(format) > 0 ? -font._metrics._getDescent(format) : font._metrics._getDescent(format))) -\n                verticalAlignShift);\n            this._sw._modifyTM(matrix);\n            if (layoutRectangle[3] < font._metrics._size) {\n                if ((result._actualSize[1] - layoutRectangle[3]) < (font._metrics._size / 2) - 1) {\n                    verticalAlignShift = 0;\n                }\n            }\n            if (verticalAlignShift !== 0) {\n                if (format !== null && format.lineAlignment === PdfVerticalAlignment.bottom) {\n                    if (layoutRectangle[3] - result._actualSize[1] !== 0 &&\n                        (layoutRectangle[3] - result._actualSize[1]) > (font._metrics._size / 2) - 1) {\n                        verticalAlignShift -= (shift - (height - font._metrics._size)) / 2;\n                    }\n                }\n            }\n            this._drawLayoutResult(result, font, format, layoutRectangle);\n            if (verticalAlignShift !== 0) {\n                this._sw._startNextLine(0, -(verticalAlignShift - result._lineHeight));\n            }\n            _addProcSet('Text', this._resourceObject);\n            this._sw._endText();\n            this._underlineStrikeoutText(brush, result, font, layoutRectangle, format);\n            if (clipRegion) {\n                this.restore(state);\n            }\n        }\n    };\n    PdfGraphics.prototype._getNextPage = function () {\n        var page;\n        var pageCount = this._crossReference._document.pageCount;\n        if (this._page._pageIndex < pageCount - 2) {\n            page = this._crossReference._document.getPage(this._page._pageIndex + 1);\n        }\n        return page;\n    };\n    PdfGraphics.prototype._applyStringSettings = function (font, pen, brush, format) {\n        var tm = _TextRenderingMode.fill;\n        if (pen != null && brush != null) {\n            tm = _TextRenderingMode.fillStroke;\n        }\n        else if (pen) {\n            tm = _TextRenderingMode.stroke;\n        }\n        else if (brush) {\n            tm = _TextRenderingMode.fill;\n        }\n        if (format && format.clipPath) {\n            tm |= _TextRenderingMode.clipFlag;\n        }\n        this._sw._beginText();\n        this._stateControl(pen, brush, font, format);\n        if (tm !== this._textRenderingMode) {\n            this._sw._setTextRenderingMode(tm);\n            this._textRenderingMode = tm;\n        }\n        var cs = (typeof format !== 'undefined' && format !== null) ? format.characterSpacing : 0;\n        if (cs !== this._characterSpacing) {\n            this._sw._setCharacterSpacing(cs);\n            this._characterSpacing = cs;\n        }\n        var ws = (typeof format !== 'undefined' && format !== null) ? format.wordSpacing : 0;\n        if (ws !== this._wordSpacing) {\n            this._sw._setWordSpacing(ws);\n            this._wordSpacing = ws;\n        }\n    };\n    PdfGraphics.prototype._drawLayoutResult = function (result, font, format, layoutRectangle) {\n        var height = (typeof format === 'undefined' || format === null || format.lineSpacing === 0) ?\n            font._metrics._getHeight(format) :\n            format.lineSpacing + font._metrics._getHeight(format);\n        var lines = result._lines;\n        var ttfFont = font;\n        var unicode = (ttfFont !== null && ttfFont.isUnicode);\n        for (var i = 0, len = lines.length; (i < len && i !== this._startCutIndex); i++) {\n            var lineInfo = lines[Number.parseInt(i.toString(), 10)];\n            var lineWidth = lineInfo._width;\n            var hAlignShift = this._getHorizontalAlignShift(lineWidth, layoutRectangle[2], format) +\n                this._getLineIndent(lineInfo, format, layoutRectangle[2], (i === 0));\n            if (hAlignShift !== 0) {\n                this._sw._startNextLine(hAlignShift, 0);\n            }\n            if (unicode) {\n                this._drawUnicodeLine(lineInfo, layoutRectangle[2], font, format);\n            }\n            else {\n                this._drawAsciiLine(lineInfo, layoutRectangle[2], format, font);\n            }\n            if ((i + 1 !== len)) {\n                var vAlignShift = this._getTextVerticalAlignShift(result._actualSize[1], layoutRectangle[3], format);\n                var matrix = new _PdfTransformationMatrix();\n                var baseline = ((-(layoutRectangle[1] + font._metrics._getHeight(format)) -\n                    font._metrics._getDescent(format)) -\n                    vAlignShift) -\n                    (height * (i + 1));\n                matrix._translate(layoutRectangle[0], baseline);\n                this._sw._modifyTM(matrix);\n            }\n        }\n    };\n    PdfGraphics.prototype._drawUnicodeLine = function (lineInfo, width, font, format) {\n        var line = lineInfo._text;\n        var rtl = (format !== null && typeof format !== 'undefined' && format.rightToLeft);\n        var useWordSpace = (format !== null && typeof format !== 'undefined' && (format.wordSpacing !== 0 ||\n            format.alignment === PdfTextAlignment.justify));\n        var ttfFont = font;\n        var wordSpacing = this._justifyLine(lineInfo, width, format, ttfFont);\n        var rtlRender = new _RtlRenderer();\n        if (rtl || (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.none)) {\n            var blocks = [];\n            var rightAlign = (format !== null && typeof format !== 'undefined' && format.alignment === PdfTextAlignment.right);\n            if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.none) {\n                blocks = rtlRender._layout(line, ttfFont, (format.textDirection === PdfTextDirection.rightToLeft) ? true : false, useWordSpace, format);\n            }\n            else {\n                blocks = rtlRender._layout(line, ttfFont, rightAlign, useWordSpace, format);\n            }\n            var words = [];\n            if (blocks.length > 1) {\n                if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.none) {\n                    words = rtlRender._splitLayout(line, ttfFont, (format.textDirection === PdfTextDirection.rightToLeft) ? true : false, useWordSpace, format);\n                }\n            }\n            else {\n                words = [line];\n            }\n            this._drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);\n        }\n        else {\n            if (useWordSpace) {\n                var result = this._breakUnicodeLine(line, ttfFont, null);\n                var blocks = result.tokens;\n                var words = result.words;\n                this._drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);\n            }\n            else {\n                var token = this._convertToUnicode(line, ttfFont);\n                this._sw._showNextLineText(token, true);\n            }\n        }\n    };\n    PdfGraphics.prototype._drawUnicodeBlocks = function (blocks, words, font, format, wordSpacing) {\n        if (blocks !== null && typeof blocks !== 'undefined' && blocks.length > 0 && words !== null && typeof words !== 'undefined' &&\n            words.length > 0 && font !== null && typeof font !== 'undefined') {\n            this._sw._startNextLine();\n            var x = 0;\n            var xShift = 0;\n            var firstLineIndent = 0;\n            var paragraphIndent = 0;\n            try {\n                if (format !== null && typeof format !== 'undefined') {\n                    firstLineIndent = format.firstLineIndent;\n                    paragraphIndent = format.paragraphIndent;\n                    format.firstLineIndent = 0;\n                    format.paragraphIndent = 0;\n                }\n                var spaceWidth = font._getCharacterWidth(_StringTokenizer._whiteSpace, format) + wordSpacing;\n                var characterSpacing = (format != null) ? format.characterSpacing : 0;\n                var wordSpace = (format !== null && typeof format !== 'undefined' && wordSpacing === 0) ? format.wordSpacing : 0;\n                spaceWidth += characterSpacing + wordSpace;\n                for (var i = 0; i < blocks.length; i++) {\n                    var token = blocks[i]; //eslint-disable-line\n                    var word = words[i]; //eslint-disable-line\n                    var tokenWidth = 0;\n                    if (x !== 0) {\n                        this._sw._startNextLine(x, 0);\n                    }\n                    if (word.length > 0) {\n                        tokenWidth += font.measureString(word, format)[0];\n                        tokenWidth += characterSpacing;\n                        this._sw._showText(token);\n                    }\n                    if (i !== blocks.length - 1) {\n                        x = tokenWidth + spaceWidth;\n                        xShift += x;\n                    }\n                }\n                if (xShift > 0) {\n                    this._sw._startNextLine(-xShift, 0);\n                }\n            }\n            finally {\n                if (format !== null && typeof format !== 'undefined') {\n                    format.firstLineIndent = firstLineIndent;\n                    format.paragraphIndent = paragraphIndent;\n                }\n            }\n        }\n    };\n    PdfGraphics.prototype._breakUnicodeLine = function (line, ttfFont, words) {\n        var tokens = [];\n        if (line !== null && typeof line !== 'undefined' && line.length > 0) {\n            words = line.split(null);\n            for (var i = 0; i < words.length; i++) {\n                var word = words[i]; //eslint-disable-line\n                var token = this._convertToUnicode(word, ttfFont);\n                tokens[Number.parseInt(i.toString(), 10)] = token;\n            }\n        }\n        return { tokens: tokens, words: words };\n    };\n    PdfGraphics.prototype._convertToUnicode = function (text, ttfFont) {\n        var token = null;\n        if (text !== null && typeof text !== 'undefined' && ttfFont !== null && typeof ttfFont !== 'undefined' &&\n            ttfFont._fontInternal instanceof _UnicodeTrueTypeFont) {\n            var ttfReader = ttfFont._fontInternal._ttfReader;\n            ttfFont._setSymbols(text);\n            token = ttfReader._convertString(text);\n            var bytes = _stringToUnicodeArray(token);\n            token = _bytesToString(bytes);\n        }\n        return token;\n    };\n    PdfGraphics.prototype._getTextVerticalAlignShift = function (textHeight, boundsHeight, format) {\n        var shift = 0;\n        if (boundsHeight >= 0 && (typeof format !== 'undefined' && format !== null) && format.lineAlignment !== PdfVerticalAlignment.top) {\n            switch (format.lineAlignment) {\n                case PdfVerticalAlignment.middle:\n                    shift = (boundsHeight - textHeight) / 2;\n                    break;\n                case PdfVerticalAlignment.bottom:\n                    shift = boundsHeight - textHeight;\n                    break;\n            }\n        }\n        return shift;\n    };\n    PdfGraphics.prototype._getHorizontalAlignShift = function (lineWidth, boundsWidth, format) {\n        var shift = 0;\n        if (boundsWidth >= 0 && (typeof format !== 'undefined' && format !== null) && format.alignment !== PdfTextAlignment.left) {\n            switch (format.alignment) {\n                case PdfTextAlignment.center:\n                    shift = (boundsWidth - lineWidth) / 2;\n                    break;\n                case PdfTextAlignment.right:\n                    shift = boundsWidth - lineWidth;\n                    break;\n            }\n        }\n        return shift;\n    };\n    PdfGraphics.prototype._getLineIndent = function (lineInfo, format, width, firstLine) {\n        var lineIndent = 0;\n        var firstParagraphLine = ((lineInfo._lineType & _LineType.firstParagraphLine) > 0);\n        if (format && firstParagraphLine) {\n            lineIndent = (firstLine) ? format.firstLineIndent : format.paragraphIndent;\n            lineIndent = (width > 0) ? Math.min(width, lineIndent) : lineIndent;\n        }\n        return lineIndent;\n    };\n    PdfGraphics.prototype._drawAsciiLine = function (lineInfo, width, format, font) {\n        this._justifyLine(lineInfo, width, format, font);\n        var value = '';\n        if (lineInfo._text.indexOf('(') !== -1 || lineInfo._text.indexOf(')') !== -1) {\n            for (var i = 0; i < lineInfo._text.length; i++) {\n                if (lineInfo._text[Number.parseInt(i.toString(), 10)] === '(') {\n                    value += '\\\\\\('; // eslint-disable-line\n                }\n                else if (lineInfo._text[Number.parseInt(i.toString(), 10)] === ')') {\n                    value += '\\\\\\)'; // eslint-disable-line\n                }\n                else {\n                    value += lineInfo._text[Number.parseInt(i.toString(), 10)];\n                }\n            }\n        }\n        if (value === '') {\n            value = lineInfo._text;\n        }\n        this._sw._showNextLineText('(' + value + ')');\n    };\n    PdfGraphics.prototype._justifyLine = function (lineInfo, boundsWidth, format, font) {\n        var line = lineInfo._text;\n        var lineWidth = lineInfo._width;\n        var shouldJustify = this._shouldJustify(lineInfo, boundsWidth, format, font);\n        var hasWordSpacing = (format && format.wordSpacing !== 0);\n        var whitespacesCount = font._getCharacterCount(line, [' ', '\\t']);\n        var wordSpace = 0;\n        if (shouldJustify) {\n            if (hasWordSpacing) {\n                lineWidth -= (whitespacesCount * format.wordSpacing);\n            }\n            wordSpace = (boundsWidth - lineWidth) / whitespacesCount;\n            this._sw._setWordSpacing(wordSpace);\n        }\n        else if (format && format.alignment === PdfTextAlignment.justify) {\n            this._sw._setWordSpacing(0);\n        }\n        return wordSpace;\n    };\n    PdfGraphics.prototype._shouldJustify = function (lineInfo, boundsWidth, format, font) {\n        var line = lineInfo._text;\n        var lineWidth = lineInfo._width;\n        var justifyStyle = (format && format.alignment === PdfTextAlignment.justify);\n        var goodWidth = (boundsWidth >= 0 && lineWidth < boundsWidth);\n        var whitespacesCount = font._getCharacterCount(line, [' ', '\\t']);\n        var hasSpaces = (whitespacesCount > 0 && line[0] !== ' ');\n        var goodLineBreakStyle = ((lineInfo._lineType & _LineType.layoutBreak) > 0);\n        return (justifyStyle && goodWidth && hasSpaces && (goodLineBreakStyle || format.alignment === PdfTextAlignment.justify));\n    };\n    PdfGraphics.prototype._underlineStrikeoutText = function (brush, result, font, layoutRectangle, format) {\n        if (font.isUnderline || font.isStrikeout) {\n            var linePen = this._createUnderlineStrikeoutPen(brush, font);\n            if (typeof linePen !== 'undefined' && linePen !== null) {\n                var shift = this._getTextVerticalAlignShift(result._actualSize[1], layoutRectangle[3], format);\n                var underlineYOffset = layoutRectangle[1] + shift + font._metrics._getAscent(format) + 1.5 * linePen._width;\n                var strikeoutYOffset = layoutRectangle[1] + shift + font._metrics._getHeight(format) / 2 + 1.5 * linePen._width;\n                var lines = result._lines;\n                for (var i = 0; i < result._lineCount; i++) {\n                    var lineInfo = lines[Number.parseInt(i.toString(), 10)];\n                    var lineWidth = lineInfo._width;\n                    var hShift = this._getHorizontalAlignShift(lineWidth, layoutRectangle[2], format);\n                    var lineIndent = this._getLineIndent(lineInfo, format, layoutRectangle[2], (i === 0));\n                    var x1 = layoutRectangle[0] + hShift;\n                    var x2 = (!this._shouldJustify(lineInfo, layoutRectangle[2], format, font)) ?\n                        x1 + lineWidth - lineIndent :\n                        x1 + layoutRectangle[2] - lineIndent;\n                    if (font.isUnderline) {\n                        this.drawLine(linePen, x1, underlineYOffset, x2, underlineYOffset);\n                        underlineYOffset += result._lineHeight;\n                    }\n                    if (font.isStrikeout) {\n                        this.drawLine(linePen, x1, strikeoutYOffset, x2, strikeoutYOffset);\n                        strikeoutYOffset += result._lineHeight;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Draw line on the page graphics.\n     *\n     * @param {PdfPen} pen pen value.\n     * @param {number} x1 value.\n     * @param {number} y1 value.\n     * @param {number} x2 value.\n     * @param {number} y2 value.\n     * @returns {void} draw a line.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * //Create a new pen.\n     * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n     * //Draw line on the page graphics.\n     * graphics.drawLine(pen, 10, 10, 100, 100);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfGraphics.prototype.drawLine = function (pen, x1, y1, x2, y2) {\n        this._stateControl(pen);\n        this._sw._beginPath(x1, y1);\n        this._sw._appendLineSegment(x2, y2);\n        this._sw._strokePath();\n        _addProcSet('PDF', this._resourceObject);\n    };\n    PdfGraphics.prototype._createUnderlineStrikeoutPen = function (brush, font) {\n        return new PdfPen(brush._color, font._metrics._size / 20);\n    };\n    PdfGraphics.prototype._checkCorrectLayoutRectangle = function (textSize, x, y, format) {\n        var layoutedRectangle = [x, y, textSize[0], textSize[0]];\n        if (format) {\n            switch (format.alignment) {\n                case PdfTextAlignment.center:\n                    layoutedRectangle[0] = layoutedRectangle[0] - layoutedRectangle[2] / 2;\n                    break;\n                case PdfTextAlignment.right:\n                    layoutedRectangle[0] = layoutedRectangle[0] - layoutedRectangle[2];\n                    break;\n            }\n            switch (format.lineAlignment) {\n                case PdfVerticalAlignment.middle:\n                    layoutedRectangle[1] = layoutedRectangle[1] - layoutedRectangle[3] / 2;\n                    break;\n                case PdfVerticalAlignment.bottom:\n                    layoutedRectangle[1] = layoutedRectangle[1] - layoutedRectangle[3];\n                    break;\n            }\n        }\n        return layoutedRectangle;\n    };\n    PdfGraphics.prototype._drawGraphicsPath = function (pen, brush, fillMode, needClosing) {\n        if (typeof fillMode === 'undefined') {\n            fillMode = PdfFillMode.winding;\n        }\n        var isBrush = (typeof brush !== 'undefined' && brush !== null);\n        var isPen = (typeof pen !== 'undefined' && pen !== null);\n        var isEvenOdd = fillMode === PdfFillMode.alternate;\n        if (isPen && isBrush) {\n            if (needClosing) {\n                this._sw._closeFillStrokePath(isEvenOdd);\n            }\n            else {\n                this._sw._fillStrokePath(isEvenOdd);\n            }\n        }\n        else if (!isPen && !isBrush) {\n            this._sw._endPath();\n        }\n        else if (isPen) {\n            if (needClosing) {\n                this._sw._closeStrokePath();\n            }\n            else {\n                this._sw._strokePath();\n            }\n        }\n        else {\n            if (needClosing) {\n                this._sw._closeFillPath(isEvenOdd);\n            }\n            else {\n                this._sw._fillPath(isEvenOdd);\n            }\n        }\n    };\n    PdfGraphics.prototype._initializeCoordinates = function (page) {\n        var cbox;\n        if (page) {\n            var location_1 = [0, 0];\n            var needTransformation = false;\n            if (page._pageDictionary.has('CropBox') && page._pageDictionary.has('MediaBox')) {\n                cbox = page._pageDictionary.getArray('CropBox');\n                var mbox = page._pageDictionary.getArray('MediaBox');\n                if (cbox[0] === mbox[0] && cbox[1] === mbox[1] && cbox[2] === mbox[2] && cbox[3] === mbox[3]) {\n                    needTransformation = true;\n                }\n                if (cbox[0] > 0 && cbox[3] > 0 && mbox[0] < 0 && mbox[1] < 0) {\n                    this.translateTransform(cbox[0], -cbox[3]);\n                    location_1[0] = -cbox[0];\n                    location_1[1] = cbox[3];\n                }\n                else if (!page._pageDictionary.has('CropBox')) {\n                    needTransformation = true;\n                }\n                if (needTransformation) {\n                    this._sw._writeComment('Change co-ordinate system to left/top.');\n                    if (this._cropBox) {\n                        this.translateTransform(this._cropBox[0], -this._cropBox[3]);\n                    }\n                    else {\n                        if (-(page._origin[1]) < this._mediaBoxUpperRightBound || this._mediaBoxUpperRightBound === 0) {\n                            this.translateTransform(0, -this._size[1]);\n                        }\n                        else {\n                            this.translateTransform(0, -this._mediaBoxUpperRightBound);\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            this._sw._writeComment('Change co-ordinate system to left/top.');\n            if (this._mediaBoxUpperRightBound !== (-this._size[1])) {\n                if (this._cropBox) {\n                    cbox = this._cropBox;\n                    if (cbox[0] > 0 || cbox[1] > 0 || this._size[0] === cbox[2] || this._size[1] === cbox[3]) {\n                        this.translateTransform(cbox[0], -cbox[3]);\n                    }\n                    else {\n                        if (this._mediaBoxUpperRightBound === this._size[1] || this._mediaBoxUpperRightBound === 0) {\n                            this.translateTransform(0, -this._size[1]);\n                        }\n                        else {\n                            this.translateTransform(0, -this._mediaBoxUpperRightBound);\n                        }\n                    }\n                }\n                else {\n                    if (this._mediaBoxUpperRightBound === this._size[1] || this._mediaBoxUpperRightBound === 0) {\n                        this.translateTransform(0, -this._size[1]);\n                    }\n                    else {\n                        this.translateTransform(0, -this._mediaBoxUpperRightBound);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Represents a scale transform of the graphics.\n     *\n     * @param {number} scaleX Scale factor in the x direction.\n     * @param {number} scaleY Scale factor in the y direction.\n     * @returns {void} scale transform.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create a new font\n     * let font: PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // Save the graphics\n     * let state: PdfGraphicsState = graphics.save();\n     * //Set graphics scale transform.\n     * graphics.scaleTransform(0.5, 0.5);\n     * //Draws the String.\n     * graphics.drawString(\"Hello world!\", font, [10, 20, 100, 200], undefined, new PdfBrush([0, 0, 255]));\n     * //Restore the graphics.\n     * graphics.restore(state);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfGraphics.prototype.scaleTransform = function (scaleX, scaleY) {\n        var matrix = new _PdfTransformationMatrix();\n        matrix._scale(scaleX, scaleY);\n        this._sw._modifyCtm(matrix);\n        this._matrix._multiply(matrix);\n    };\n    /**\n     * Represents a translate transform of the graphics.\n     *\n     * @param {number} x x-coordinate of the translation.\n     * @param {number} y y-coordinate of the translation.\n     * @returns {void} translate transform.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create a new font\n     * let font: PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // Save the graphics\n     * let state: PdfGraphicsState = graphics.save();\n     * //Set graphics translate transform.\n     * graphics.translateTransform(100, 100);\n     * //Draws the String.\n     * graphics.drawString(\"Hello world!\", font, [10, 20, 100, 200], undefined, new PdfBrush([0, 0, 255]));\n     * //Restore the graphics.\n     * graphics.restore(state);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfGraphics.prototype.translateTransform = function (x, y) {\n        var matrix = new _PdfTransformationMatrix();\n        matrix._translate(x, -y);\n        this._sw._modifyCtm(matrix);\n        this._matrix._multiply(matrix);\n    };\n    /**\n     * Represents a rotate transform of the graphics.\n     *\n     * @param {number} angle Angle of rotation in degrees\n     * @returns {void} rotate transform.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create a new font\n     * let font: PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // Save the graphics\n     * let state: PdfGraphicsState = graphics.save();\n     * //Set graphics rotate transform.\n     * graphics.rotateTransform(-90);\n     * //Draws the String.\n     * graphics.drawString(\"Hello world!\", font, [10, 20, 100, 200], undefined, new PdfBrush([0, 0, 255]));\n     * //Restore the graphics.\n     * graphics.restore(state);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfGraphics.prototype.rotateTransform = function (angle) {\n        var matrix = new _PdfTransformationMatrix();\n        matrix._rotate(-angle);\n        this._sw._modifyCtm(matrix);\n        this._matrix._multiply(matrix);\n    };\n    /**\n     * Represents a clipping region of this graphics.\n     *\n     * @param {number[]} bounds Rectangle structure that represents the new clip region.\n     * @param {PdfFillMode} mode Member of the PdfFillMode enumeration that specifies the filling operation to use.\n     * @returns {void} clipping region.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create a new font\n     * let font: PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * //Set clip.\n     * graphics.setClip([0, 0, 50, 12], PdfFillMode.alternate);\n     * //Draws the String.\n     * graphics.drawString(\"Hello world!\", font, [0, 0, 100, 200], undefined, new PdfBrush([0, 0, 255]));\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfGraphics.prototype.setClip = function (bounds, mode) {\n        if (typeof mode === 'undefined') {\n            mode = PdfFillMode.winding;\n        }\n        this._sw._appendRectangle(bounds[0], bounds[1], bounds[2], bounds[3]);\n        this._sw._clipPath(mode === PdfFillMode.alternate);\n    };\n    /**\n     * Represents a transparency of this graphics.\n     *\n     * @param {number} stroke transparency value.\n     * @param {number} fill transparency value.\n     * @param {PdfBlendMode} mode blend mode.\n     * @returns {void} transparency of this graphics.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create a new font\n     * let font: PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * //Set transparency.\n     * graphics.setTransparency(0.5, 0.5, PdfBlendMode.multiply);\n     * //Draws the String.\n     * graphics.drawString(\"Hello world!\", font, [0, 0, 100, 200], undefined, new PdfBrush([0, 0, 255]));\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfGraphics.prototype.setTransparency = function (stroke, fill, mode) {\n        if (typeof fill === 'undefined') {\n            fill = stroke;\n        }\n        if (typeof mode === 'undefined') {\n            mode = PdfBlendMode.normal;\n        }\n        if (typeof this._transparencies === 'undefined') {\n            this._transparencies = new Map();\n        }\n        var transparencyKey = 'CA:' + stroke.toString() + '_ca:' + fill.toString() + '_BM:' + mode.toString();\n        var transparencyData;\n        if (this._transparencies.size > 0) {\n            this._transparencies.forEach(function (value, key) {\n                if (value === transparencyKey) {\n                    transparencyData = key;\n                }\n            });\n        }\n        if (!transparencyData) {\n            transparencyData = new _TransparencyData();\n            var transparencyDict = new _PdfDictionary();\n            transparencyDict.update('CA', stroke);\n            transparencyDict.update('ca', fill);\n            transparencyDict.update('BM', _reverseMapBlendMode(mode));\n            var ref = this._crossReference._getNextReference();\n            this._crossReference._cacheMap.set(ref, transparencyDict);\n            transparencyData._dictionary = transparencyDict;\n            transparencyData._key = transparencyKey;\n            transparencyData._name = _PdfName.get(_getNewGuidString());\n            transparencyData._reference = ref;\n            var dictionary = void 0;\n            var isReference = false;\n            if (this._resourceObject.has('ExtGState')) {\n                var obj = this._resourceObject.getRaw('ExtGState'); // eslint-disable-line\n                if (obj !== null && typeof obj !== 'undefined') {\n                    if (obj instanceof _PdfReference) {\n                        isReference = true;\n                        dictionary = this._crossReference._fetch(obj);\n                    }\n                    else if (obj instanceof _PdfDictionary) {\n                        dictionary = obj;\n                    }\n                }\n            }\n            else {\n                dictionary = new _PdfDictionary(this._crossReference);\n                this._resourceObject.update('ExtGState', dictionary);\n            }\n            dictionary.update(transparencyData._name.name, ref);\n            if (isReference) {\n                this._resourceObject._updated = true;\n            }\n            if (this._hasResourceReference) {\n                this._source._updated = true;\n            }\n        }\n        this._sw._setGraphicsState(transparencyData._name);\n    };\n    PdfGraphics.prototype._setTransparencyData = function (ref, name) {\n        this._resourceMap.set(ref, name);\n        var dictionary = this._crossReference._fetch(ref);\n        var stroke = 0;\n        var fill = 0;\n        var mode = 0;\n        if (dictionary.has('CA')) {\n            stroke = dictionary.get('CA');\n        }\n        if (dictionary.has('ca')) {\n            fill = dictionary.get('ca');\n        }\n        if (dictionary.has('ca')) {\n            fill = dictionary.get('ca');\n        }\n        if (dictionary.has('BM')) {\n            mode = _mapBlendMode(dictionary.get('BM'));\n        }\n        var tkey = 'CA:' + stroke.toString() + '_ca:' + fill.toString() + '_BM:' + mode.toString();\n        var tdata = new _TransparencyData();\n        tdata._dictionary = dictionary;\n        tdata._key = tkey;\n        tdata._name = name;\n        tdata._reference = ref;\n        this._transparencies.set(tdata, tkey);\n    };\n    PdfGraphics.prototype._getTranslateTransform = function (x, y, input) {\n        input._translate(x, -y);\n        return input;\n    };\n    PdfGraphics.prototype._getScaleTransform = function (x, y, input) {\n        if (input === null || typeof input === 'undefined') {\n            input = new _PdfTransformationMatrix();\n        }\n        input._scale(x, y);\n        return input;\n    };\n    return PdfGraphics;\n}());\nexport { PdfGraphics };\nvar _PdfTransformationMatrix = /** @class */ (function () {\n    function _PdfTransformationMatrix() {\n        this._matrix = new _Matrix(1, 0, 0, 1, 0, 0);\n    }\n    _PdfTransformationMatrix.prototype._translate = function (x, y) {\n        this._matrix._translate(x, y);\n    };\n    _PdfTransformationMatrix.prototype._scale = function (x, y) {\n        this._matrix._elements[0] = x;\n        this._matrix._elements[3] = y;\n    };\n    _PdfTransformationMatrix.prototype._rotate = function (angle) {\n        angle = (angle * Math.PI) / 180;\n        this._matrix._elements[0] = Math.cos(angle);\n        this._matrix._elements[1] = Math.sin(angle);\n        this._matrix._elements[2] = -Math.sin(angle);\n        this._matrix._elements[3] = Math.cos(angle);\n    };\n    _PdfTransformationMatrix.prototype._multiply = function (matrix) {\n        this._matrix._multiply(matrix._matrix);\n    };\n    _PdfTransformationMatrix.prototype._toString = function () {\n        var builder = '';\n        for (var i = 0, len = this._matrix._elements.length; i < len; i++) {\n            builder += _floatToString(this._matrix._elements[Number.parseInt(i.toString(), 10)]) + ' ';\n        }\n        return builder;\n    };\n    return _PdfTransformationMatrix;\n}());\nexport { _PdfTransformationMatrix };\nvar _Matrix = /** @class */ (function () {\n    function _Matrix(arg1, arg2, arg3, arg4, arg5, arg6) {\n        if (typeof arg1 === 'undefined') {\n            this._elements = [];\n        }\n        else if (typeof arg1 === 'number') {\n            this._elements = [arg1, arg2, arg3, arg4, arg5, arg6];\n        }\n        else {\n            this._elements = arg1;\n        }\n    }\n    Object.defineProperty(_Matrix.prototype, \"_offsetX\", {\n        get: function () {\n            return this._elements[4];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(_Matrix.prototype, \"_offsetY\", {\n        get: function () {\n            return this._elements[5];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    _Matrix.prototype._clone = function () {\n        return new _Matrix(this._elements.slice());\n    };\n    _Matrix.prototype._translate = function (x, y) {\n        this._elements[4] = x;\n        this._elements[5] = y;\n    };\n    _Matrix.prototype._transform = function (points) {\n        var x = points[0];\n        var y = points[1];\n        var x2 = x * this._elements[0] + y * this._elements[2] + this._offsetX;\n        var y2 = x * this._elements[1] + y * this._elements[3] + this._offsetY;\n        return [x2, y2];\n    };\n    _Matrix.prototype._multiply = function (matrix) {\n        this._elements = [(this._elements[0] * matrix._elements[0] + this._elements[1] * matrix._elements[2]),\n            (this._elements[0] * matrix._elements[1] + this._elements[1] * matrix._elements[3]),\n            (this._elements[2] * matrix._elements[0] + this._elements[3] * matrix._elements[2]),\n            (this._elements[2] * matrix._elements[1] + this._elements[3] * matrix._elements[3]),\n            (this._offsetX * matrix._elements[0] + this._offsetY * matrix._elements[2] + matrix._offsetX),\n            (this._offsetX * matrix._elements[1] + this._offsetY * matrix._elements[3] + matrix._offsetY)];\n    };\n    return _Matrix;\n}());\nexport { _Matrix };\n/**\n * Represents a state of the graphics from a PDF page.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Access first page\n * let page: PdfPage = document.getPage(0);\n * // Gets the graphics of the PDF page\n * let graphics: PdfGraphics = page.graphics;\n * // Create a new font\n * let font: PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // Save the graphics\n * let state: PdfGraphicsState = graphics.save();\n * //Set graphics translate transform.\n * graphics.translateTransform(100, 100);\n * //Draws the String.\n * graphics.drawString(\"Hello world!\", font, [10, 20, 100, 200], undefined, new PdfBrush([0, 0, 255]));\n * //Restore the graphics.\n * graphics.restore(state);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfGraphicsState = /** @class */ (function () {\n    /**\n     * Initializes a new instance of the `PdfGraphicsState` class.\n     *\n     * @private\n     * @param {PdfGraphics} graphics Graphics.\n     * @param {_PdfTransformationMatrix} matrix Matrix.\n     *\n     */\n    function PdfGraphicsState(graphics, matrix) {\n        if (graphics) {\n            this._g = graphics;\n            this._transformationMatrix = matrix;\n        }\n        this._charSpacing = 0;\n        this._wordSpacing = 0;\n        this._textScaling = 100;\n        this._textRenderingMode = _TextRenderingMode.fill;\n    }\n    return PdfGraphicsState;\n}());\nexport { PdfGraphicsState };\nvar _TransparencyData = /** @class */ (function () {\n    function _TransparencyData() {\n    }\n    return _TransparencyData;\n}());\nexport var _TextRenderingMode;\n(function (_TextRenderingMode) {\n    _TextRenderingMode[_TextRenderingMode[\"fill\"] = 0] = \"fill\";\n    _TextRenderingMode[_TextRenderingMode[\"stroke\"] = 1] = \"stroke\";\n    _TextRenderingMode[_TextRenderingMode[\"fillStroke\"] = 2] = \"fillStroke\";\n    _TextRenderingMode[_TextRenderingMode[\"none\"] = 3] = \"none\";\n    _TextRenderingMode[_TextRenderingMode[\"clipFlag\"] = 4] = \"clipFlag\";\n    _TextRenderingMode[_TextRenderingMode[\"clipFill\"] = 4] = \"clipFill\";\n    _TextRenderingMode[_TextRenderingMode[\"clipStroke\"] = 5] = \"clipStroke\";\n    _TextRenderingMode[_TextRenderingMode[\"clipFillStroke\"] = 6] = \"clipFillStroke\";\n    _TextRenderingMode[_TextRenderingMode[\"clip\"] = 7] = \"clip\";\n})(_TextRenderingMode || (_TextRenderingMode = {}));\n/**\n * Represents a brush for the PDF page.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Access first page\n * let page: PdfPage = document.getPage(0);\n * // Gets the graphics of the PDF page\n * let graphics: PdfGraphics = page.graphics;\n * // Create a new brush\n * let brush: PdfBrush = new PdfBrush([0, 255, 255]);\n * // Draw a rectangle using brush\n * graphics.drawRectangle(10, 10, 100, 100, brush);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfBrush = /** @class */ (function () {\n    /**\n     * Initializes a new instance of the `PdfBrush` class.\n     *\n     * @param {number[]} color Color.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create a new brush\n     * let brush: PdfBrush = new PdfBrush([0, 255, 255]);\n     * // Draw a rectangle using brush\n     * graphics.drawRectangle(10, 10, 100, 100, brush);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    function PdfBrush(color) {\n        this._color = typeof color !== 'undefined' ? color : [0, 0, 0];\n    }\n    return PdfBrush;\n}());\nexport { PdfBrush };\n/**\n * Represents a pen for the PDF page.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Access first page\n * let page: PdfPage = document.getPage(0);\n * // Gets the graphics of the PDF page\n * let graphics: PdfGraphics = page.graphics;\n * // Create a new pen\n * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n * // Draw a rectangle using pen\n * graphics.drawRectangle(150, 50, 50, 50, pen);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfPen = /** @class */ (function () {\n    /**\n     * Initializes a new instance of the `PdfPen` class.\n     *\n     * @param {number[]} color Color.\n     * @param {number} width Width.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the graphics of the PDF page\n     * let graphics: PdfGraphics = page.graphics;\n     * // Create a new pen\n     * let pen: PdfPen = new PdfPen([0, 0, 0], 1);\n     * // Draw a rectangle using pen\n     * graphics.drawRectangle(150, 50, 50, 50, pen);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    function PdfPen(color, width) {\n        this._color = color;\n        this._width = width;\n        this._dashOffset = 0;\n        this._dashPattern = [];\n        this._dashStyle = PdfDashStyle.solid;\n        this._miterLimit = 0;\n        this._lineCap = PdfLineCap.flat;\n        this._lineJoin = PdfLineJoin.miter;\n    }\n    return PdfPen;\n}());\nexport { PdfPen };\nvar _PdfUnitConvertor = /** @class */ (function () {\n    function _PdfUnitConvertor() {\n        this._horizontalResolution = 96;\n        this._proportions = this._updateProportions(this._horizontalResolution);\n    }\n    _PdfUnitConvertor.prototype._updateProportions = function (pixel) {\n        return [pixel / 2.54, pixel / 6.0, 1, pixel / 72.0, pixel, pixel / 300.0, pixel / 25.4];\n    };\n    _PdfUnitConvertor.prototype._convertUnits = function (value, from, to) {\n        return this._convertFromPixels(this._convertToPixels(value, from), to);\n    };\n    _PdfUnitConvertor.prototype._convertFromPixels = function (value, to) {\n        var index = to;\n        return (value / this._proportions[Number.parseInt(index.toString(), 10)]);\n    };\n    _PdfUnitConvertor.prototype._convertToPixels = function (value, from) {\n        var index = from;\n        return (value * this._proportions[Number.parseInt(index.toString(), 10)]);\n    };\n    return _PdfUnitConvertor;\n}());\nexport { _PdfUnitConvertor };\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,eAAe;AACvC,SAASC,gBAAgB,QAAQ,qBAAqB;AACtD,SAASC,cAAc,EAAEC,WAAW,EAAEC,oBAAoB,EAAEC,aAAa,EAAEC,iBAAiB,EAAEC,aAAa,EAAEC,eAAe,EAAEC,cAAc,EAAEC,qBAAqB,QAAQ,YAAY;AACvL,SAASC,cAAc,EAAEC,aAAa,EAAEC,QAAQ,QAAQ,qBAAqB;AAC7E,SAASC,eAAe,QAAQ,8BAA8B;AAC9D,SAASC,kBAAkB,EAAEC,SAAS,EAAEC,gBAAgB,QAAQ,4BAA4B;AAC5F,SAASC,gBAAgB,EAAEC,gBAAgB,EAAEC,iBAAiB,EAAEC,YAAY,EAAEC,WAAW,EAAEC,UAAU,EAAEC,YAAY,EAAEC,WAAW,QAAQ,iBAAiB;AACzJ,SAASC,oBAAoB,QAAQ,8BAA8B;AACnE,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,QAAQ,EAAEC,cAAc,QAAQ,YAAY;AACrD,SAASC,oBAAoB,QAAQ,iCAAiC;AACtE,SAASC,YAAY,QAAQ,yCAAyC;AACtE,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,WAAW,GAAG,aAAe,YAAY;EACzC,SAASA,WAAWA,CAACC,IAAI,EAAEC,OAAO,EAAEC,IAAI,EAAEC,MAAM,EAAE;IAC9C,IAAI,CAACC,gBAAgB,GAAG,EAAE,CAAC,CAAC;IAC5B,IAAI,CAACC,qBAAqB,GAAG,KAAK;IAClC,IAAIF,MAAM,YAAYrC,OAAO,EAAE;MAC3B,IAAI,CAACwC,OAAO,GAAGH,MAAM,CAACI,eAAe;MACrC,IAAI,CAACC,KAAK,GAAGL,MAAM;IACvB,CAAC,MACI,IAAIA,MAAM,YAAYV,WAAW,EAAE;MACpC,IAAI,CAACa,OAAO,GAAGH,MAAM,CAACM,QAAQ,CAACC,UAAU;MACzC,IAAI,CAACC,SAAS,GAAGR,MAAM;IAC3B;IACA,IAAI,IAAI,CAACG,OAAO,IAAI,IAAI,CAACA,OAAO,CAACM,GAAG,CAAC,WAAW,CAAC,EAAE;MAC/C,IAAIC,GAAG,GAAG,IAAI,CAACP,OAAO,CAACQ,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;MAC5C,IAAID,GAAG,YAAYnC,aAAa,EAAE;QAC9B,IAAI,CAAC2B,qBAAqB,GAAG,IAAI;QACjC,IAAI,CAACU,eAAe,GAAGb,IAAI,CAACc,MAAM,CAACH,GAAG,CAAC;MAC3C,CAAC,MACI,IAAIA,GAAG,YAAYpC,cAAc,EAAE;QACpC,IAAI,CAACsC,eAAe,GAAGF,GAAG;MAC9B;IACJ,CAAC,MACI;MACD,IAAI,CAACE,eAAe,GAAG,IAAItC,cAAc,CAAC,CAAC;MAC3C,IAAI,CAAC6B,OAAO,CAACW,MAAM,CAAC,WAAW,EAAE,IAAI,CAACF,eAAe,CAAC;IAC1D;IACA,IAAI,CAACG,eAAe,GAAGhB,IAAI;IAC3B,IAAI,CAACiB,GAAG,GAAG,IAAIpD,gBAAgB,CAACkC,OAAO,CAAC;IACxC,IAAI,CAACmB,KAAK,GAAGpB,IAAI;IACjB/B,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC8C,eAAe,CAAC;IACxC,IAAI,CAACM,WAAW,CAAC,CAAC;EACtB;EACAC,MAAM,CAACC,cAAc,CAACxB,WAAW,CAACyB,SAAS,EAAE,SAAS,EAAE;IACpDC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI,OAAO,IAAI,CAACC,EAAE,KAAK,WAAW,EAAE;QAChC,IAAI,CAACA,EAAE,GAAG,IAAIC,wBAAwB,CAAC,CAAC;MAC5C;MACA,OAAO,IAAI,CAACD,EAAE;IAClB,CAAC;IACDE,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFP,MAAM,CAACC,cAAc,CAACxB,WAAW,CAACyB,SAAS,EAAE,YAAY,EAAE;IACvDC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAIK,KAAK,GAAG,IAAI;MAChB,IAAI,OAAO,IAAI,CAACC,YAAY,KAAK,WAAW,EAAE;QAC1C,IAAI,CAACA,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;QAC7B,IAAI,IAAI,CAACjB,eAAe,CAACH,GAAG,CAAC,MAAM,CAAC,EAAE;UAClC,IAAIqB,KAAK,GAAG,IAAI,CAAClB,eAAe,CAACU,GAAG,CAAC,MAAM,CAAC;UAC5C,IAAIQ,KAAK,IAAIA,KAAK,CAACjC,IAAI,GAAG,CAAC,EAAE;YACzBiC,KAAK,CAACC,OAAO,CAAC,UAAUC,GAAG,EAAEC,KAAK,EAAE;cAChC,IAAIA,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,WAAW,IAAIA,KAAK,YAAY1D,aAAa,EAAE;gBAClFoD,KAAK,CAACC,YAAY,CAACM,GAAG,CAACD,KAAK,EAAEzD,QAAQ,CAAC8C,GAAG,CAACU,GAAG,CAAC,CAAC;cACpD;YACJ,CAAC,CAAC;UACN;QACJ;QACA,IAAI,IAAI,CAACpB,eAAe,CAACH,GAAG,CAAC,SAAS,CAAC,EAAE;UACrC,IAAI0B,KAAK,GAAG,IAAI,CAACvB,eAAe,CAACU,GAAG,CAAC,SAAS,CAAC;UAC/C,IAAIa,KAAK,IAAIA,KAAK,CAACtC,IAAI,GAAG,CAAC,EAAE;YACzBsC,KAAK,CAACJ,OAAO,CAAC,UAAUC,GAAG,EAAEC,KAAK,EAAE;cAChC,IAAIA,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,WAAW,IAAIA,KAAK,YAAY1D,aAAa,EAAE;gBAClFoD,KAAK,CAACC,YAAY,CAACM,GAAG,CAACD,KAAK,EAAEzD,QAAQ,CAAC8C,GAAG,CAACU,GAAG,CAAC,CAAC;cACpD;YACJ,CAAC,CAAC;UACN;QACJ;QACA,IAAI,IAAI,CAACpB,eAAe,CAACH,GAAG,CAAC,WAAW,CAAC,EAAE;UACvC,IAAI2B,KAAK,GAAG,IAAI,CAACxB,eAAe,CAACU,GAAG,CAAC,WAAW,CAAC;UACjD,IAAIc,KAAK,IAAIA,KAAK,CAACvC,IAAI,GAAG,CAAC,EAAE;YACzB,IAAI,CAAC,IAAI,CAACwC,eAAe,EAAE;cACvB,IAAI,CAACA,eAAe,GAAG,IAAIR,GAAG,CAAC,CAAC;YACpC;YACAO,KAAK,CAACL,OAAO,CAAC,UAAUC,GAAG,EAAEC,KAAK,EAAE;cAChC,IAAIA,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,WAAW,IAAIA,KAAK,YAAY1D,aAAa,EAAE;gBAClFoD,KAAK,CAACW,oBAAoB,CAACL,KAAK,EAAEzD,QAAQ,CAAC8C,GAAG,CAACU,GAAG,CAAC,CAAC;cACxD;YACJ,CAAC,CAAC;UACN;QACJ;MACJ;MACA,OAAO,IAAI,CAACJ,YAAY;IAC5B,CAAC;IACDH,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI9B,WAAW,CAACyB,SAAS,CAACkB,IAAI,GAAG,YAAY;IACrC,IAAIH,KAAK,GAAG,IAAII,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAACC,OAAO,CAAC;IACpDL,KAAK,CAACM,kBAAkB,GAAG,IAAI,CAACA,kBAAkB;IAClDN,KAAK,CAACO,YAAY,GAAG,IAAI,CAACC,iBAAiB;IAC3CR,KAAK,CAACS,YAAY,GAAG,IAAI,CAACA,YAAY;IACtCT,KAAK,CAACU,YAAY,GAAG,IAAI,CAACA,YAAY;IACtCV,KAAK,CAACW,aAAa,GAAG,IAAI,CAACA,aAAa;IACxCX,KAAK,CAACY,WAAW,GAAG,IAAI,CAACA,WAAW;IACpCZ,KAAK,CAACa,YAAY,GAAG,IAAI,CAACA,YAAY;IACtC,IAAI,CAACC,cAAc,CAACC,IAAI,CAACf,KAAK,CAAC;IAC/B,IAAI,CAACpB,GAAG,CAACoC,kBAAkB,CAAC,CAAC;IAC7B,OAAOhB,KAAK;EAChB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIxC,WAAW,CAACyB,SAAS,CAACgC,OAAO,GAAG,UAAUjB,KAAK,EAAE;IAC7C,IAAI,IAAI,CAACc,cAAc,CAACI,MAAM,GAAG,CAAC,EAAE;MAChC,IAAI,OAAOlB,KAAK,KAAK,WAAW,EAAE;QAC9B,IAAI,CAACmB,UAAU,CAAC,CAAC;MACrB,CAAC,MACI;QACD,IAAI,IAAI,CAACL,cAAc,CAACI,MAAM,GAAG,CAAC,IAAI,IAAI,CAACJ,cAAc,CAACM,OAAO,CAACpB,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;UAC7E,OAAO,IAAI,CAACc,cAAc,CAACI,MAAM,GAAG,CAAC,EAAE;YACnC,IAAI,IAAI,CAACC,UAAU,CAAC,CAAC,KAAKnB,KAAK,EAAE;cAC7B;YACJ;UACJ;QACJ;MACJ;IACJ;EACJ,CAAC;EACDxC,WAAW,CAACyB,SAAS,CAACkC,UAAU,GAAG,YAAY;IAC3C,IAAInB,KAAK,GAAG,IAAI,CAACc,cAAc,CAACO,GAAG,CAAC,CAAC;IACrC,IAAI,CAAClC,EAAE,GAAGa,KAAK,CAACsB,qBAAqB;IACrC,IAAI,CAACX,aAAa,GAAGX,KAAK,CAACW,aAAa;IACxC,IAAI,CAACC,WAAW,GAAGZ,KAAK,CAACY,WAAW;IACpC,IAAI,CAACC,YAAY,GAAGb,KAAK,CAACa,YAAY;IACtC,IAAI,CAACL,iBAAiB,GAAGR,KAAK,CAACO,YAAY;IAC3C,IAAI,CAACG,YAAY,GAAGV,KAAK,CAACU,YAAY;IACtC,IAAI,CAACD,YAAY,GAAGT,KAAK,CAACS,YAAY;IACtC,IAAI,CAACH,kBAAkB,GAAGN,KAAK,CAACM,kBAAkB;IAClD,IAAI,CAAC1B,GAAG,CAAC2C,qBAAqB,CAAC,CAAC;IAChC,OAAOvB,KAAK;EAChB,CAAC;EACDxC,WAAW,CAACyB,SAAS,CAACuC,aAAa,GAAG,UAAUC,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAE;IAChF,IAAIC,GAAG;IACP,IAAIC,KAAK;IACT,IAAIH,KAAK,YAAYI,MAAM,EAAE;MACzBF,GAAG,GAAGF,KAAK;MACX,IAAIC,MAAM,EAAE;QACRE,KAAK,GAAGF,MAAM;MAClB;IACJ,CAAC,MACI;MACDE,KAAK,GAAGH,KAAK;IACjB;IACA,IAAI,CAACK,aAAa,CAACH,GAAG,EAAEC,KAAK,CAAC;IAC9B,IAAI,CAACpD,GAAG,CAACuD,gBAAgB,CAACV,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,MAAM,CAAC;IAC9C,IAAI,CAACQ,iBAAiB,CAACL,GAAG,EAAEC,KAAK,CAAC;EACtC,CAAC;EACDxE,WAAW,CAACyB,SAAS,CAACoD,WAAW,GAAG,UAAUC,MAAM,EAAET,KAAK,EAAEC,MAAM,EAAE;IACjE,IAAIQ,MAAM,CAACpB,MAAM,GAAG,CAAC,EAAE;MACnB,IAAIa,GAAG,GAAG,KAAK,CAAC;MAChB,IAAIC,KAAK,GAAG,KAAK,CAAC;MAClB,IAAIH,KAAK,YAAYI,MAAM,EAAE;QACzBF,GAAG,GAAGF,KAAK;QACX,IAAIC,MAAM,EAAE;UACRE,KAAK,GAAGF,MAAM;QAClB;MACJ,CAAC,MACI;QACDE,KAAK,GAAGH,KAAK;MACjB;MACA,IAAI,CAACK,aAAa,CAACH,GAAG,EAAEC,KAAK,CAAC;MAC9B,IAAI,CAACpD,GAAG,CAAC2D,UAAU,CAACD,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC/C,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,CAACpB,MAAM,EAAEsB,CAAC,EAAE,EAAE;QACpC,IAAI,CAAC5D,GAAG,CAAC6D,kBAAkB,CAACH,MAAM,CAACI,MAAM,CAACC,QAAQ,CAACH,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEN,MAAM,CAACI,MAAM,CAACC,QAAQ,CAACH,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC3H;MACA,IAAI,CAACR,iBAAiB,CAACL,GAAG,EAAEC,KAAK,EAAEhF,WAAW,CAAC6F,OAAO,EAAE,IAAI,CAAC;IACjE;EACJ,CAAC;EACDrF,WAAW,CAACyB,SAAS,CAAC6D,WAAW,GAAG,UAAUrB,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAE;IAC9E,IAAIC,GAAG;IACP,IAAIC,KAAK;IACT,IAAIH,KAAK,YAAYI,MAAM,EAAE;MACzBF,GAAG,GAAGF,KAAK;MACX,IAAIC,MAAM,EAAE;QACRE,KAAK,GAAGF,MAAM;MAClB;IACJ,CAAC,MACI;MACDE,KAAK,GAAGH,KAAK;IACjB;IACA,IAAI,CAACK,aAAa,CAACH,GAAG,EAAEC,KAAK,CAAC;IAC9B,IAAI,CAACe,iBAAiB,CAACtB,CAAC,EAAEC,CAAC,EAAED,CAAC,GAAGE,KAAK,EAAED,CAAC,GAAGE,MAAM,EAAE,CAAC,EAAE,GAAG,CAAC;IAC3D,IAAI,CAACQ,iBAAiB,CAACL,GAAG,EAAEC,KAAK,EAAEhF,WAAW,CAAC6F,OAAO,EAAE,IAAI,CAAC;EACjE,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIrF,WAAW,CAACyB,SAAS,CAAC+D,OAAO,GAAG,UAAUvB,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAEqB,UAAU,EAAEC,UAAU,EAAEnB,GAAG,EAAE;IACxF,IAAImB,UAAU,KAAK,CAAC,EAAE;MAClB,IAAI,CAAChB,aAAa,CAACH,GAAG,CAAC;MACvB,IAAI,CAACgB,iBAAiB,CAACtB,CAAC,EAAEC,CAAC,EAAED,CAAC,GAAGE,KAAK,EAAED,CAAC,GAAGE,MAAM,EAAEqB,UAAU,EAAEC,UAAU,CAAC;MAC3E,IAAI,CAACd,iBAAiB,CAACL,GAAG,EAAE,IAAI,EAAE/E,WAAW,CAAC6F,OAAO,EAAE,KAAK,CAAC;IACjE;EACJ,CAAC;EACDrF,WAAW,CAACyB,SAAS,CAACkE,SAAS,GAAG,UAAUC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAE;IACtE,IAAI,OAAOH,IAAI,KAAK,QAAQ,IAAI,OAAOC,IAAI,KAAK,QAAQ,IAAI,OAAOC,IAAI,KAAK,WAAW,EAAE;MACrF,IAAI9F,IAAI,GAAG2F,IAAI,CAACK,iBAAiB;MACjC,IAAI,CAACN,SAAS,CAACC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAE7F,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;IACtD,CAAC,MACI;MACD2F,IAAI,CAACM,KAAK,CAAC,CAAC;MACZ,IAAIC,MAAM,GAAG,IAAIvE,wBAAwB,CAAC,CAAC;MAC3C,IAAI,CAACwE,sBAAsB,CAACP,IAAI,EAAGC,IAAI,GAAGE,IAAI,EAAGG,MAAM,CAAC;MACxD,IAAI,CAACE,kBAAkB,CAACN,IAAI,EAAEC,IAAI,EAAEG,MAAM,CAAC;MAC3C,IAAI,CAAC/E,GAAG,CAACkF,MAAM,CAAC,GAAG,CAAC;MACpB,IAAI,CAAClF,GAAG,CAACmF,UAAU,CAACJ,MAAM,CAAC;MAC3B,IAAIK,gBAAgB,GAAG,KAAK,CAAC;MAC7B,IAAIC,OAAO,GAAG,KAAK,CAAC;MACpB,IAAIC,KAAK,GAAG,IAAI;MAChB,IAAI,IAAI,CAAC1F,eAAe,CAACH,GAAG,CAAC,SAAS,CAAC,EAAE;QACrC,IAAIC,GAAG,GAAG,IAAI,CAACE,eAAe,CAACD,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;QAClD,IAAID,GAAG,YAAYpC,cAAc,EAAE;UAC/B8H,gBAAgB,GAAG1F,GAAG;QAC1B;QACA,IAAI0F,gBAAgB,EAAE;UAClBE,KAAK,GAAG,KAAK;QACjB;MACJ;MACA,IAAIA,KAAK,EAAE;QACPF,gBAAgB,GAAG,IAAI9H,cAAc,CAAC,IAAI,CAACyC,eAAe,CAAC;QAC3D,IAAI,CAACH,eAAe,CAACE,MAAM,CAAC,SAAS,EAAEsF,gBAAgB,CAAC;MAC5D;MACA,IAAI,OAAOC,OAAO,KAAK,WAAW,EAAE;QAChCA,OAAO,GAAG7H,QAAQ,CAAC8C,GAAG,CAACrD,iBAAiB,CAAC,CAAC,CAAC;MAC/C;MACA,IAAI,IAAI,CAAC8C,eAAe,EAAE;QACtB,IAAI,CAACwF,oBAAoB,CAACf,IAAI,EAAEa,OAAO,EAAED,gBAAgB,EAAE,IAAI,CAACrF,eAAe,CAAC;QAChF,IAAI,CAACZ,OAAO,CAACW,MAAM,CAAC,WAAW,EAAE,IAAI,CAACF,eAAe,CAAC;QACtD,IAAI,CAACT,OAAO,CAACqG,QAAQ,GAAG,IAAI;MAChC,CAAC,MACI;QACD,IAAI,CAACvG,gBAAgB,CAACkD,IAAI,CAAC;UAAE,UAAU,EAAEqC,IAAI;UAAE,KAAK,EAAEa,OAAO;UAAE,QAAQ,EAAED;QAAiB,CAAC,CAAC;MAChG;MACA,IAAI,CAACpF,GAAG,CAACyF,cAAc,CAACJ,OAAO,CAAC;MAChC,IAAI,CAACrF,GAAG,CAACkF,MAAM,CAAC,GAAG,CAAC;MACpB,IAAI,CAAClF,GAAG,CAACkF,MAAM,CAAC,MAAM,CAAC;MACvBpI,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC8C,eAAe,CAAC;MAC3C9C,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC8C,eAAe,CAAC;MAC3C9C,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC8C,eAAe,CAAC;MAC3C9C,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC8C,eAAe,CAAC;IAC7C;EACJ,CAAC;EACDhB,WAAW,CAACyB,SAAS,CAACqF,iBAAiB,GAAG,UAAUC,cAAc,EAAE;IAChE,IAAI,IAAI,CAAC1G,gBAAgB,CAACqD,MAAM,GAAG,CAAC,EAAE;MAClC,KAAK,IAAIsB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC3E,gBAAgB,CAACqD,MAAM,EAAEsB,CAAC,EAAE,EAAE;QACnD,IAAIgC,KAAK,GAAG,IAAI,CAAC3G,gBAAgB,CAAC6E,MAAM,CAACC,QAAQ,CAACH,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QACtE,IAAI4B,KAAK,CAACC,QAAQ,YAAYlH,QAAQ,EAAE;UACpC,IAAI,CAAC4G,oBAAoB,CAACK,KAAK,CAACC,QAAQ,EAAED,KAAK,CAAC5E,GAAG,EAAE4E,KAAK,CAAC5G,MAAM,EAAE2G,cAAc,CAAC;QACtF;QACA,IAAI,CAACxG,OAAO,CAACW,MAAM,CAAC,WAAW,EAAE,IAAI,CAACF,eAAe,CAAC;QACtD,IAAI,CAACT,OAAO,CAACqG,QAAQ,GAAG,IAAI;MAChC;MACA,IAAI,CAACvG,gBAAgB,GAAG,EAAE;IAC9B;EACJ,CAAC;EACDL,WAAW,CAACyB,SAAS,CAACkF,oBAAoB,GAAG,UAAUO,KAAK,EAAET,OAAO,EAAErG,MAAM,EAAE2G,cAAc,EAAE;IAC3F,IAAII,GAAG;IACP,IAAID,KAAK,CAACE,UAAU,EAAE;MAClBD,GAAG,GAAGD,KAAK,CAACE,UAAU;IAC1B,CAAC,MACI;MACDD,GAAG,GAAGJ,cAAc,CAACM,iBAAiB,CAAC,CAAC;MACxCH,KAAK,CAACE,UAAU,GAAGD,GAAG;IAC1B;IACA,IAAI,CAACJ,cAAc,CAACO,SAAS,CAACzG,GAAG,CAACsG,GAAG,CAAC,EAAE;MACpC,IAAID,KAAK,IAAIA,KAAK,CAACK,YAAY,IAAIL,KAAK,CAACK,YAAY,CAAC5G,UAAU,EAAE;QAC9DoG,cAAc,CAACO,SAAS,CAAChF,GAAG,CAAC6E,GAAG,EAAED,KAAK,CAACK,YAAY,CAAC;QACrDL,KAAK,CAACK,YAAY,CAAC5G,UAAU,CAACiG,QAAQ,GAAG,IAAI;MACjD;IACJ;IACAxG,MAAM,CAACc,MAAM,CAACuF,OAAO,CAACe,IAAI,EAAEL,GAAG,CAAC;IAChC,IAAI,CAACM,UAAU,CAACnF,GAAG,CAAC6E,GAAG,EAAEV,OAAO,CAAC;IACjC,IAAI,CAACzF,eAAe,CAAC4F,QAAQ,GAAG,IAAI;EACxC,CAAC;EACD5G,WAAW,CAACyB,SAAS,CAACiG,aAAa,GAAG,UAAUC,QAAQ,EAAEC,MAAM,EAAE;IAC9D,IAAI7F,KAAK,GAAG,IAAI;IAChB,IAAI8F,MAAM,GAAIF,QAAQ,IAAIA,QAAQ,CAACtG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,GAAIuG,MAAM,CAACzD,KAAK,GAAGwD,QAAQ,CAACtG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;IACvF,IAAIyG,MAAM,GAAIH,QAAQ,IAAIA,QAAQ,CAACtG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,GAAIuG,MAAM,CAACxD,MAAM,GAAGuD,QAAQ,CAACtG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;IACxF,IAAI0G,SAAS,GAAG,EAAEF,MAAM,KAAK,CAAC,IAAIC,MAAM,KAAK,CAAC,CAAC;IAC/C,IAAIE,OAAO;IACX,IAAIC,QAAQ;IACZ,IAAI,IAAI,CAACxH,KAAK,EAAE;MACZuH,OAAO,GAAG,IAAI,CAACvH,KAAK,CAACuH,OAAO;MAC5BC,QAAQ,GAAG,IAAI,CAACxH,KAAK,CAACwH,QAAQ;MAC9B,IAAI,IAAI,CAACxH,KAAK,CAACD,eAAe,CAACK,GAAG,CAAC,SAAS,CAAC,IAAI,IAAI,CAACJ,KAAK,CAACD,eAAe,CAACK,GAAG,CAAC,UAAU,CAAC,EAAE;QACzF,IAAImH,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,IAAIA,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,IAAIC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,IAAIA,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;UACxE,IAAI,CAACC,kBAAkB,CAACF,OAAO,CAAC,CAAC,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC,CAAC,CAAC;UAChDJ,MAAM,CAAC3D,CAAC,GAAG,CAAC+D,OAAO,CAAC,CAAC,CAAC;UACtBJ,MAAM,CAAC1D,CAAC,GAAG8D,OAAO,CAAC,CAAC,CAAC;QACzB;MACJ;IACJ;IACA,IAAIxF,KAAK,GAAG,IAAI,CAACG,IAAI,CAAC,CAAC;IACvB,IAAIwD,MAAM,GAAG,IAAIvE,wBAAwB,CAAC,CAAC;IAC3C,IAAI,IAAI,CAACnB,KAAK,EAAE;MACZ,IAAI0H,aAAa,GAAI,IAAI,CAAC1H,KAAK,CAACD,eAAe,CAACK,GAAG,CAAC,SAAS,CAAC,IAC1D,IAAI,CAACJ,KAAK,CAACD,eAAe,CAACK,GAAG,CAAC,UAAU,CAAC,IAAImH,OAAO,IAAIC,QAAQ,IACjED,OAAO,CAAC,CAAC,CAAC,KAAKC,QAAQ,CAAC,CAAC,CAAC,IAAID,OAAO,CAAC,CAAC,CAAC,KAAKC,QAAQ,CAAC,CAAC,CAAC,IAAID,OAAO,CAAC,CAAC,CAAC,KAAKC,QAAQ,CAAC,CAAC,CAAC,IAAID,OAAO,CAAC,CAAC,CAAC,KAAKC,QAAQ,CAAC,CAAC,CAAC,IACnH,IAAI,CAACxH,KAAK,CAACD,eAAe,CAACK,GAAG,CAAC,UAAU,CAAC,IAAIoH,QAAQ,IAAIA,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAE;MACjF9B,MAAM,CAACiC,UAAU,CAACR,MAAM,CAAC3D,CAAC,EAAE,EAAE2D,MAAM,CAAC1D,CAAC,IAAK,IAAI,CAACzD,KAAK,CAAC4H,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAIF,aAAa,GAAIP,MAAM,CAACxD,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IAClH,CAAC,MACI;MACD+B,MAAM,CAACiC,UAAU,CAACR,MAAM,CAAC3D,CAAC,EAAE,EAAE2D,MAAM,CAAC1D,CAAC,GAAG0D,MAAM,CAACxD,MAAM,CAAC,CAAC;IAC5D;IACA,IAAI2D,SAAS,EAAE;MACX,IAAIJ,QAAQ,CAACW,qBAAqB,IAAIX,QAAQ,CAACY,UAAU,EAAE;QACvD,IAAIC,YAAY,GAAG,KAAK;QACxB,IAAIb,QAAQ,CAACjH,QAAQ,IAAIiH,QAAQ,CAACjH,QAAQ,CAACC,UAAU,EAAE;UACnD,IAAIA,UAAU,GAAGgH,QAAQ,CAACjH,QAAQ,CAACC,UAAU;UAC7C,IAAIA,UAAU,CAACE,GAAG,CAAC,QAAQ,CAAC,IAAIF,UAAU,CAACE,GAAG,CAAC,MAAM,CAAC,EAAE;YACpD,IAAI4H,cAAc,GAAG9H,UAAU,CAAC+H,QAAQ,CAAC,QAAQ,CAAC;YAClD,IAAIC,WAAW,GAAGhI,UAAU,CAAC+H,QAAQ,CAAC,MAAM,CAAC;YAC7C,IAAID,cAAc,IAAIE,WAAW,IAAIF,cAAc,CAAC/E,MAAM,GAAG,CAAC,IAAIiF,WAAW,CAACjF,MAAM,GAAG,CAAC,EAAE;cACtF,IAAIkF,cAAc,GAAG1D,MAAM,CAAC2D,UAAU,CAACtK,eAAe,CAAC,CAACkK,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;cAC3E,IAAIK,cAAc,GAAG5D,MAAM,CAAC2D,UAAU,CAACtK,eAAe,CAACkK,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;cAC1E,IAAIM,WAAW,GAAG7D,MAAM,CAAC2D,UAAU,CAACtK,eAAe,CAACsJ,MAAM,CAAC,CAAC;cAC5D,IAAImB,WAAW,GAAG9D,MAAM,CAAC2D,UAAU,CAACtK,eAAe,CAACuJ,MAAM,CAAC,CAAC;cAC5D,IAAIiB,WAAW,KAAKH,cAAc,IAC9BI,WAAW,KAAKF,cAAc,IAC9BH,WAAW,CAAC,CAAC,CAAC,KAAKhB,QAAQ,CAACtG,KAAK,CAAC,CAAC,CAAC,IACpCsH,WAAW,CAAC,CAAC,CAAC,KAAKhB,QAAQ,CAACtG,KAAK,CAAC,CAAC,CAAC,EAAE;gBACtC8E,MAAM,GAAG,IAAIvE,wBAAwB,CAAC,CAAC;gBACvCuE,MAAM,CAACiC,UAAU,CAACR,MAAM,CAAC3D,CAAC,GAAGwE,cAAc,CAAC,CAAC,CAAC,EAAEb,MAAM,CAAC1D,CAAC,GAAGuE,cAAc,CAAC,CAAC,CAAC,CAAC;gBAC7EtC,MAAM,CAAC8C,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;gBACnBT,YAAY,GAAG,IAAI;cACvB;YACJ;UACJ;QACJ;QACA,IAAI,CAACA,YAAY,EAAE;UACfrC,MAAM,CAAC8C,MAAM,CAACpB,MAAM,EAAEC,MAAM,CAAC;QACjC;MACJ,CAAC,MACI;QACD3B,MAAM,CAAC8C,MAAM,CAACpB,MAAM,EAAEC,MAAM,CAAC;MACjC;IACJ;IACA,IAAI,CAAC1G,GAAG,CAACmF,UAAU,CAACJ,MAAM,CAAC;IAC3B,IAAIK,gBAAgB;IACpB,IAAI0C,WAAW,GAAG,KAAK;IACvB,IAAIzC,OAAO;IACX,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAIS,GAAG;IACP,IAAI,IAAI,CAACnG,eAAe,CAACH,GAAG,CAAC,SAAS,CAAC,EAAE;MACrC,IAAIC,GAAG,GAAG,IAAI,CAACE,eAAe,CAACD,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;MAClD,IAAID,GAAG,YAAYnC,aAAa,EAAE;QAC9BuK,WAAW,GAAG,IAAI;QAClB1C,gBAAgB,GAAG,IAAI,CAACrF,eAAe,CAACF,MAAM,CAACH,GAAG,CAAC;MACvD,CAAC,MACI,IAAIA,GAAG,YAAYpC,cAAc,EAAE;QACpC8H,gBAAgB,GAAG1F,GAAG;MAC1B;MACA,IAAI0F,gBAAgB,EAAE;QAClBE,KAAK,GAAG,KAAK;QACb,IAAI,CAACe,UAAU,CAACtF,OAAO,CAAC,UAAUE,KAAK,EAAED,GAAG,EAAE;UAC1C,IAAIA,GAAG,IAAIA,GAAG,YAAYzD,aAAa,EAAE;YACrC,IAAIwK,IAAI,GAAGpH,KAAK,CAACZ,eAAe,CAACF,MAAM,CAACmB,GAAG,CAAC;YAC5C,IAAI+G,IAAI,IAAIxB,QAAQ,IAAIwB,IAAI,KAAKxB,QAAQ,CAACjH,QAAQ,EAAE;cAChD+F,OAAO,GAAGpE,KAAK;cACf8E,GAAG,GAAG/E,GAAG;YACb;UACJ;QACJ,CAAC,CAAC;MACN;IACJ;IACA,IAAIsE,KAAK,EAAE;MACPF,gBAAgB,GAAG,IAAI9H,cAAc,CAAC,IAAI,CAACyC,eAAe,CAAC;MAC3D,IAAI,CAACH,eAAe,CAACE,MAAM,CAAC,SAAS,EAAEsF,gBAAgB,CAAC;IAC5D;IACA,IAAI,OAAOC,OAAO,KAAK,WAAW,EAAE;MAChCA,OAAO,GAAG7H,QAAQ,CAAC8C,GAAG,CAACrD,iBAAiB,CAAC,CAAC,CAAC;MAC3C,IAAIsJ,QAAQ,IAAIA,QAAQ,CAACjH,QAAQ,CAAC0I,SAAS,EAAE;QACzCjC,GAAG,GAAGQ,QAAQ,CAACjH,QAAQ,CAAC0I,SAAS;MACrC,CAAC,MACI;QACDjC,GAAG,GAAG,IAAI,CAAChG,eAAe,CAACkG,iBAAiB,CAAC,CAAC;MAClD;MACA,IAAI,CAAC,IAAI,CAAClG,eAAe,CAACmG,SAAS,CAACzG,GAAG,CAACsG,GAAG,CAAC,EAAE;QAC1C,IAAIQ,QAAQ,IAAIA,QAAQ,CAACjH,QAAQ,EAAE;UAC/B,IAAI,CAACS,eAAe,CAACmG,SAAS,CAAChF,GAAG,CAAC6E,GAAG,EAAEQ,QAAQ,CAACjH,QAAQ,CAAC;QAC9D;MACJ;MACA8F,gBAAgB,CAACtF,MAAM,CAACuF,OAAO,CAACe,IAAI,EAAEL,GAAG,CAAC;MAC1C,IAAI,CAACM,UAAU,CAACnF,GAAG,CAAC6E,GAAG,EAAEV,OAAO,CAAC;MACjC,IAAI,CAACzF,eAAe,CAAC4F,QAAQ,GAAG,IAAI;IACxC;IACA,IAAIsC,WAAW,EAAE;MACb,IAAI,CAAClI,eAAe,CAAC4F,QAAQ,GAAG,IAAI;IACxC;IACA,IAAI,IAAI,CAACtG,qBAAqB,EAAE;MAC5B,IAAI,CAACC,OAAO,CAACqG,QAAQ,GAAG,IAAI;IAChC;IACA,IAAI,CAACxF,GAAG,CAACyF,cAAc,CAACJ,OAAO,CAAC;IAChC,IAAI,CAAChD,OAAO,CAACjB,KAAK,CAAC;IACnBtE,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC8C,eAAe,CAAC;IAC3C9C,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC8C,eAAe,CAAC;IAC3C9C,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC8C,eAAe,CAAC;IAC3C9C,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC8C,eAAe,CAAC;EAC7C,CAAC;EACDhB,WAAW,CAACyB,SAAS,CAAC4H,SAAS,GAAG,UAAUC,IAAI,EAAE/E,GAAG,EAAEC,KAAK,EAAE;IAC1D,IAAID,GAAG,IAAIC,KAAK,EAAE;MACd,IAAI,CAACE,aAAa,CAACH,GAAG,EAAEC,KAAK,EAAE,IAAI,CAAC;MACpC,IAAI,CAAC+E,YAAY,CAACD,IAAI,CAACE,OAAO,EAAEF,IAAI,CAACG,UAAU,CAAC;MAChD,IAAI,CAAC7E,iBAAiB,CAACL,GAAG,EAAEC,KAAK,EAAE8E,IAAI,CAACI,SAAS,EAAE,KAAK,CAAC;IAC7D;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI1J,WAAW,CAACyB,SAAS,CAACkI,oBAAoB,GAAG,UAAU1F,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAEwF,MAAM,EAAErF,GAAG,EAAEC,KAAK,EAAE;IAC5F,IAAID,GAAG,KAAK,IAAI,EAAE;MACd,MAAM,IAAIsF,KAAK,CAAC,KAAK,CAAC;IAC1B;IACA,IAAIrF,KAAK,KAAK,IAAI,EAAE;MAChB,MAAM,IAAIqF,KAAK,CAAC,OAAO,CAAC;IAC5B;IACA,IAAIjC,MAAM,GAAG,CAAC3D,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,MAAM,CAAC;IAClC,IAAI0F,QAAQ,GAAGF,MAAM,GAAG,CAAC;IACzB,IAAI3J,IAAI,GAAG,CAAC6J,QAAQ,EAAEA,QAAQ,CAAC;IAC/B,IAAIC,GAAG,GAAG,CAACnC,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAE3H,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;IAClD,IAAIqJ,IAAI,GAAG,IAAI3J,QAAQ,CAAC,CAAC;IACzB,IAAIiK,MAAM,KAAK,CAAC,EAAE;MACdN,IAAI,CAACU,aAAa,CAACpC,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;MAC9D,IAAI,CAACyB,SAAS,CAACC,IAAI,EAAE/E,GAAG,EAAEC,KAAK,CAAC;IACpC,CAAC,MACI;MACD8E,IAAI,CAACW,mBAAmB,GAAG,IAAI;MAC/BX,IAAI,CAACY,OAAO,CAACH,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC;MACrDA,GAAG,CAAC,CAAC,CAAC,GAAInC,MAAM,CAAC,CAAC,CAAC,GAAGA,MAAM,CAAC,CAAC,CAAC,GAAIkC,QAAQ;MAC3CR,IAAI,CAACY,OAAO,CAACH,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC;MACrDA,GAAG,CAAC,CAAC,CAAC,GAAInC,MAAM,CAAC,CAAC,CAAC,GAAGA,MAAM,CAAC,CAAC,CAAC,GAAIkC,QAAQ;MAC3CR,IAAI,CAACY,OAAO,CAACH,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;MACnDA,GAAG,CAAC,CAAC,CAAC,GAAGnC,MAAM,CAAC,CAAC,CAAC;MAClB0B,IAAI,CAACY,OAAO,CAACH,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;MACpDT,IAAI,CAACa,YAAY,CAAC,CAAC;MACnB,IAAI,CAACd,SAAS,CAACC,IAAI,EAAE/E,GAAG,EAAEC,KAAK,CAAC;IACpC;EACJ,CAAC;EACDxE,WAAW,CAACyB,SAAS,CAAC8D,iBAAiB,GAAG,UAAU6E,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,KAAK,EAAEC,KAAK,EAAE;IAC9E,IAAI3F,MAAM,GAAGxG,aAAa,CAAC8L,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,KAAK,EAAEC,KAAK,CAAC;IACxD,IAAI3F,MAAM,CAACpB,MAAM,KAAK,CAAC,EAAE;MACrB;IACJ;IACA,IAAIgH,KAAK,GAAG,CAAC5F,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;IACpG,IAAI,CAAC1D,GAAG,CAAC2D,UAAU,CAAC2F,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;IACvC,KAAK,IAAI1F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,CAACpB,MAAM,EAAEsB,CAAC,GAAGA,CAAC,GAAG,CAAC,EAAE;MAC1C0F,KAAK,GAAG,CAAC5F,MAAM,CAACI,MAAM,CAACC,QAAQ,CAACH,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAC9CN,MAAM,CAACE,CAAC,GAAG,CAAC,CAAC,EACbF,MAAM,CAACE,CAAC,GAAG,CAAC,CAAC,EACbF,MAAM,CAACE,CAAC,GAAG,CAAC,CAAC,EACbF,MAAM,CAACE,CAAC,GAAG,CAAC,CAAC,EACbF,MAAM,CAACE,CAAC,GAAG,CAAC,CAAC,EACbF,MAAM,CAACE,CAAC,GAAG,CAAC,CAAC,EACbF,MAAM,CAACE,CAAC,GAAG,CAAC,CAAC,CAAC;MAClB,IAAI,CAAC5D,GAAG,CAACuJ,oBAAoB,CAACD,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;IAC7F;EACJ,CAAC;EACD1K,WAAW,CAACyB,SAAS,CAACmJ,SAAS,GAAG,UAAUrG,GAAG,EAAE;IAC7C,IAAIsG,SAAS,GAAGtG,GAAG,CAACuG,MAAM;IAC1B,IAAIC,OAAO,GAAGxG,GAAG,CAACyG,YAAY;IAC9B,KAAK,IAAIhG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+F,OAAO,CAACrH,MAAM,EAAE,EAAEsB,CAAC,EAAE;MACrC+F,OAAO,CAAC/F,CAAC,CAAC,IAAIT,GAAG,CAACuG,MAAM,CAAC,CAAC;IAC9B;IACA,IAAI,CAAC1J,GAAG,CAAC6J,mBAAmB,CAACF,OAAO,EAAExG,GAAG,CAAC2G,WAAW,GAAGL,SAAS,CAAC;IAClE,IAAI,CAACzJ,GAAG,CAAC+J,aAAa,CAAC5G,GAAG,CAACuG,MAAM,CAAC;IAClC,IAAI,CAAC1J,GAAG,CAACgK,YAAY,CAAC7G,GAAG,CAAC8G,SAAS,CAAC;IACpC,IAAI,CAACjK,GAAG,CAACkK,WAAW,CAAC/G,GAAG,CAACgH,QAAQ,CAAC;IAClC,IAAIhH,GAAG,CAACiH,WAAW,GAAG,CAAC,EAAE;MACrB,IAAI,CAACpK,GAAG,CAACqK,cAAc,CAAClH,GAAG,CAACiH,WAAW,CAAC;IAC5C;IACA,IAAI,CAACpK,GAAG,CAACsK,SAAS,CAACnH,GAAG,CAACoH,MAAM,EAAE,IAAI,CAAC;EACxC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI3L,WAAW,CAACyB,SAAS,CAACmK,UAAU,GAAG,UAAUvJ,KAAK,EAAEwJ,IAAI,EAAEjE,MAAM,EAAErD,GAAG,EAAEC,KAAK,EAAEsH,MAAM,EAAE;IAClF,IAAIC,QAAQ,GAAG,IAAIjN,kBAAkB,CAAC,CAAC;IACvC,IAAIkN,MAAM,GAAGD,QAAQ,CAACE,OAAO,CAAC5J,KAAK,EAAEwJ,IAAI,EAAEC,MAAM,EAAE,CAAClE,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1E,IAAI,CAACoE,MAAM,CAACE,MAAM,EAAE;MAChB,IAAIC,IAAI,GAAG,IAAI,CAACC,4BAA4B,CAACJ,MAAM,CAACK,WAAW,EAAEzE,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEkE,MAAM,CAAC;MAC9F,IAAIlE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;QAChBA,MAAM,CAAC,CAAC,CAAC,GAAGuE,IAAI,CAAC,CAAC,CAAC;QACnBvE,MAAM,CAAC,CAAC,CAAC,GAAGuE,IAAI,CAAC,CAAC,CAAC;MACvB;MACA,IAAIvE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;QAChBA,MAAM,CAAC,CAAC,CAAC,GAAGuE,IAAI,CAAC,CAAC,CAAC;QACnBvE,MAAM,CAAC,CAAC,CAAC,GAAGuE,IAAI,CAAC,CAAC,CAAC;MACvB;MACA,IAAI,CAACG,uBAAuB,CAACN,MAAM,EAAEH,IAAI,EAAEtH,GAAG,EAAEC,KAAK,EAAEoD,MAAM,EAAEkE,MAAM,CAAC;IAC1E;IACA5N,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC8C,eAAe,CAAC;EAC7C,CAAC;EACDhB,WAAW,CAACyB,SAAS,CAAC8H,YAAY,GAAG,UAAUzE,MAAM,EAAEyH,KAAK,EAAE;IAC1D,KAAK,IAAIvH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,CAACpB,MAAM,EAAEsB,CAAC,EAAE,EAAE;MACpC,IAAI0F,KAAK,GAAG5F,MAAM,CAACI,MAAM,CAACC,QAAQ,CAACH,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;MACrD,IAAIoH,IAAI,GAAGD,KAAK,CAACrH,MAAM,CAACC,QAAQ,CAACH,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;MACnD,QAAQoH,IAAI,GAAG,GAAG;QACd,KAAK5M,cAAc,CAAC4K,KAAK;UACrB,IAAI,CAACpJ,GAAG,CAAC2D,UAAU,CAAC2F,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;UACvC;QACJ,KAAK9K,cAAc,CAAC6M,MAAM;UACtB,IAAIT,MAAM,GAAG,IAAI,CAACU,eAAe,CAAC5H,MAAM,EAAEyH,KAAK,EAAEvH,CAAC,CAAC,CAAC,CAAC;UACrDA,CAAC,GAAGgH,MAAM,CAACW,KAAK;UAChB,IAAItI,KAAK,GAAG2H,MAAM,CAACtB,KAAK,CAAC,CAAC;UAC1BsB,MAAM,GAAG,IAAI,CAACU,eAAe,CAAC5H,MAAM,EAAEyH,KAAK,EAAEvH,CAAC,CAAC;UAC/CA,CAAC,GAAGgH,MAAM,CAACW,KAAK;UAChB,IAAIrI,MAAM,GAAG0H,MAAM,CAACtB,KAAK,CAAC,CAAC;UAC3B,IAAI,CAACtJ,GAAG,CAACuJ,oBAAoB,CAACD,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,EAAErG,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,EAAEC,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;UAC3F;QACJ,KAAK1E,cAAc,CAACgN,IAAI;UACpB,IAAI,CAACxL,GAAG,CAAC6D,kBAAkB,CAACyF,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;UAC/C;QACJ;UACI,MAAM,IAAIb,KAAK,CAAC,2BAA2B,CAAC;MACpD;MACA2C,IAAI,GAAGD,KAAK,CAACrH,MAAM,CAACC,QAAQ,CAACH,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;MAC/C,IAAI,CAACoH,IAAI,GAAG5M,cAAc,CAACiN,SAAS,MAAMjN,cAAc,CAACiN,SAAS,EAAE;QAChE,IAAI,CAACzL,GAAG,CAAC0L,UAAU,CAAC,CAAC;MACzB;IACJ;EACJ,CAAC;EACD9M,WAAW,CAACyB,SAAS,CAACiL,eAAe,GAAG,UAAU5H,MAAM,EAAEyH,KAAK,EAAEI,KAAK,EAAE;IACpE,IAAIJ,KAAK,CAACrH,MAAM,CAACC,QAAQ,CAACwH,KAAK,CAACvH,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAKxF,cAAc,CAAC6M,MAAM,EAAE;MACxE,MAAM,IAAI5C,KAAK,CAAC,kBAAkB,CAAC;IACvC;IACA8C,KAAK,EAAE;IACP,OAAO;MAAE,OAAO,EAAEA,KAAK;MAAE,OAAO,EAAE7H,MAAM,CAACI,MAAM,CAACC,QAAQ,CAACwH,KAAK,CAACvH,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;IAAE,CAAC;EACrF,CAAC;EACDpF,WAAW,CAACyB,SAAS,CAACH,WAAW,GAAG,YAAY;IAC5C,IAAI,CAACyL,wBAAwB,GAAG,CAAC;IACjC,IAAI,CAAC/J,iBAAiB,GAAG,CAAC,CAAC;IAC3B,IAAI,CAACE,YAAY,GAAG,CAAC,CAAC;IACtB,IAAI,CAACD,YAAY,GAAG,CAAC,GAAG;IACxB,IAAI,CAACH,kBAAkB,GAAG,CAAC,CAAC;IAC5B,IAAI,CAACQ,cAAc,GAAG,EAAE;IACxB,IAAI,CAAC0J,WAAW,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC3L,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,CAAC;IACvD,IAAI,CAAC4L,sBAAsB,GAAG,KAAK;IACnC,IAAI,CAACC,cAAc,GAAG,CAAC,CAAC;EAC5B,CAAC;EACDlN,WAAW,CAACyB,SAAS,CAAC0L,4BAA4B,GAAG,YAAY;IAC7D,IAAI,CAAC,IAAI,CAACF,sBAAsB,EAAE;MAC9B,IAAI,CAAC7L,GAAG,CAACgM,cAAc,CAAC,WAAW,EAAE,IAAI,CAAC;MAC1C,IAAI,CAAChM,GAAG,CAACgM,cAAc,CAAC,WAAW,EAAE,KAAK,CAAC;MAC3C,IAAI,CAACH,sBAAsB,GAAG,IAAI;IACtC;EACJ,CAAC;EACDjN,WAAW,CAACyB,SAAS,CAAC4L,aAAa,GAAG,UAAU7I,KAAK,EAAE;IACnD,IAAI,CAACpD,GAAG,CAACsK,SAAS,CAAClH,KAAK,CAACmH,MAAM,EAAE,KAAK,CAAC;IACvC,IAAI,CAACxI,aAAa,GAAGqB,KAAK;EAC9B,CAAC;EACDxE,WAAW,CAACyB,SAAS,CAAC6L,WAAW,GAAG,UAAU/I,GAAG,EAAE;IAC/C,IAAI,CAACnB,WAAW,GAAGmB,GAAG;IACtB,IAAI,CAACqG,SAAS,CAACrG,GAAG,CAAC;IACnB,IAAI,CAACnB,WAAW,GAAGmB,GAAG;EAC1B,CAAC;EACDvE,WAAW,CAACyB,SAAS,CAAC8L,YAAY,GAAG,UAAU1B,IAAI,EAAEC,MAAM,EAAE;IACzD,IAAI/J,KAAK,GAAG,IAAI;IAChB,IAAI9B,IAAI,GAAG4L,IAAI,CAAC2B,QAAQ,CAACC,QAAQ,CAAC3B,MAAM,CAAC;IACzC,IAAI,CAACzI,YAAY,GAAGwI,IAAI;IACxB,IAAI6B,QAAQ;IACZ,IAAIxE,WAAW,GAAG,KAAK;IACvB,IAAIzC,OAAO;IACX,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAIS,GAAG;IACP,IAAI,IAAI,CAACnG,eAAe,CAACH,GAAG,CAAC,MAAM,CAAC,EAAE;MAClC,IAAIC,GAAG,GAAG,IAAI,CAACE,eAAe,CAACD,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;MAC/C,IAAID,GAAG,KAAK,IAAI,IAAI,OAAOA,GAAG,KAAK,WAAW,EAAE;QAC5C,IAAIA,GAAG,YAAYnC,aAAa,EAAE;UAC9BuK,WAAW,GAAG,IAAI;UAClBwE,QAAQ,GAAG,IAAI,CAACvM,eAAe,CAACF,MAAM,CAACH,GAAG,CAAC;QAC/C,CAAC,MACI,IAAIA,GAAG,YAAYpC,cAAc,EAAE;UACpCgP,QAAQ,GAAG5M,GAAG;QAClB;MACJ;MACA,IAAI,OAAO4M,QAAQ,KAAK,WAAW,IAAIA,QAAQ,KAAK,IAAI,EAAE;QACtDhH,KAAK,GAAG,KAAK;QACb,IAAI,CAACe,UAAU,CAACtF,OAAO,CAAC,UAAUE,KAAK,EAAED,GAAG,EAAE;UAC1C,IAAIA,GAAG,KAAK,IAAI,IAAI,OAAOA,GAAG,KAAK,WAAW,EAAE;YAC5C,IAAIzB,UAAU,GAAGoB,KAAK,CAACZ,eAAe,CAACF,MAAM,CAACmB,GAAG,CAAC;YAClD,IAAIzB,UAAU,IAAIA,UAAU,KAAKkL,IAAI,CAAC8B,WAAW,EAAE;cAC/ClH,OAAO,GAAGpE,KAAK;cACf8E,GAAG,GAAG/E,GAAG;YACb;UACJ;QACJ,CAAC,CAAC;MACN;IACJ;IACA,IAAIsE,KAAK,EAAE;MACPgH,QAAQ,GAAG,IAAIhP,cAAc,CAAC,IAAI,CAACyC,eAAe,CAAC;MACnD,IAAI,CAACH,eAAe,CAACE,MAAM,CAAC,MAAM,EAAEwM,QAAQ,CAAC;IACjD;IACA,IAAI,OAAOjH,OAAO,KAAK,WAAW,EAAE;MAChCA,OAAO,GAAG7H,QAAQ,CAAC8C,GAAG,CAACrD,iBAAiB,CAAC,CAAC,CAAC;MAC3C,IAAI,CAAC8I,GAAG,EAAE;QACNA,GAAG,GAAG,IAAI,CAAChG,eAAe,CAACkG,iBAAiB,CAAC,CAAC;MAClD;MACA,IAAIwE,IAAI,CAAC8B,WAAW,EAAE;QAClB,IAAI,CAACxM,eAAe,CAACmG,SAAS,CAAChF,GAAG,CAAC6E,GAAG,EAAE0E,IAAI,CAAC8B,WAAW,CAAC;QACzDD,QAAQ,CAACxM,MAAM,CAACuF,OAAO,CAACe,IAAI,EAAEL,GAAG,CAAC;QAClC,IAAI,CAACM,UAAU,CAACnF,GAAG,CAAC6E,GAAG,EAAEV,OAAO,CAAC;MACrC,CAAC,MACI,IAAIoF,IAAI,YAAYhN,eAAe,EAAE;QACtC,IAAI+O,QAAQ,GAAG/B,IAAI,CAACgC,aAAa;QACjC,IAAID,QAAQ,IAAIA,QAAQ,CAACE,eAAe,EAAE;UACtC,IAAI,CAAC3M,eAAe,CAACmG,SAAS,CAAChF,GAAG,CAAC6E,GAAG,EAAEyG,QAAQ,CAACE,eAAe,CAAC;QACrE;QACAJ,QAAQ,CAACxM,MAAM,CAACuF,OAAO,CAACe,IAAI,EAAEL,GAAG,CAAC;QAClC,IAAI,CAACM,UAAU,CAACnF,GAAG,CAAC6E,GAAG,EAAEV,OAAO,CAAC;MACrC;IACJ;IACA,IAAIyC,WAAW,EAAE;MACb,IAAI,CAAClI,eAAe,CAAC4F,QAAQ,GAAG,IAAI;IACxC;IACA,IAAI,IAAI,CAACtG,qBAAqB,EAAE;MAC5B,IAAI,CAACC,OAAO,CAACqG,QAAQ,GAAG,IAAI;IAChC;IACA,IAAI,CAACxF,GAAG,CAAC2M,QAAQ,CAACtH,OAAO,CAACe,IAAI,EAAEvH,IAAI,CAAC;EACzC,CAAC;EACDD,WAAW,CAACyB,SAAS,CAACiD,aAAa,GAAG,UAAUH,GAAG,EAAEC,KAAK,EAAEqH,IAAI,EAAEC,MAAM,EAAE;IACtE,IAAIvH,GAAG,IAAIC,KAAK,EAAE;MACd,IAAI,CAAC2I,4BAA4B,CAAC,CAAC;IACvC;IACA,IAAI5I,GAAG,EAAE;MACL,IAAI,CAAC+I,WAAW,CAAC/I,GAAG,CAAC;IACzB;IACA,IAAIC,KAAK,EAAE;MACP,IAAI,CAAC6I,aAAa,CAAC7I,KAAK,CAAC;IAC7B;IACA,IAAIqH,IAAI,EAAE;MACN,IAAI,CAAC0B,YAAY,CAAC1B,IAAI,EAAEC,MAAM,CAAC;IACnC;EACJ,CAAC;EACD9L,WAAW,CAACyB,SAAS,CAAC6K,uBAAuB,GAAG,UAAUN,MAAM,EAAEH,IAAI,EAAEtH,GAAG,EAAEC,KAAK,EAAEwJ,eAAe,EAAElC,MAAM,EAAE;IACzG,IAAI,CAACE,MAAM,CAACE,MAAM,EAAE;MAChB,IAAI+B,iBAAiB,GAAInC,MAAM,IAAI,OAAOA,MAAM,CAACoC,SAAS,KAAK,WAAW,IAAI,CAACpC,MAAM,CAACoC,SAAU;MAChG,IAAIC,UAAU,GAAI,OAAOrC,MAAM,KAAK,WAAW,IAAKA,MAAM,IAAI,OAAOA,MAAM,CAACsC,MAAM,KAAK,WAAW,IAC3F,CAACtC,MAAM,CAACsC,MAAQ;MACvB,IAAIC,UAAU,GAAGJ,iBAAiB,IAAIE,UAAU;MAChD,IAAI3L,KAAK,GAAG,KAAK,CAAC;MAClB,IAAI6L,UAAU,EAAE;QACZ7L,KAAK,GAAG,IAAI,CAACG,IAAI,CAAC,CAAC;QACnB,IAAI2L,UAAU,GAAG,CAACN,eAAe,CAAC,CAAC,CAAC,EAAEA,eAAe,CAAC,CAAC,CAAC,EAAEhC,MAAM,CAACK,WAAW,CAAC,CAAC,CAAC,EAAEL,MAAM,CAACK,WAAW,CAAC,CAAC,CAAC,CAAC;QACvG,IAAI2B,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;UACxBM,UAAU,CAAC,CAAC,CAAC,GAAGN,eAAe,CAAC,CAAC,CAAC;QACtC;QACA,IAAIlC,MAAM,CAACyC,aAAa,KAAK9O,oBAAoB,CAAC+O,MAAM,EAAE;UACtDF,UAAU,CAAC,CAAC,CAAC,IAAI,CAACN,eAAe,CAAC,CAAC,CAAC,GAAGM,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC;QAC7D,CAAC,MACI,IAAIxC,MAAM,CAACyC,aAAa,KAAK9O,oBAAoB,CAACgP,MAAM,EAAE;UAC3DH,UAAU,CAAC,CAAC,CAAC,IAAKN,eAAe,CAAC,CAAC,CAAC,GAAGM,UAAU,CAAC,CAAC,CAAE;QACzD;QACA,IAAI,CAACI,OAAO,CAACJ,UAAU,CAAC;MAC5B;MACA,IAAI,CAACK,oBAAoB,CAAC9C,IAAI,EAAEtH,GAAG,EAAEC,KAAK,EAAEsH,MAAM,CAAC;MACnD,IAAI8C,WAAW,GAAI,OAAO9C,MAAM,KAAK,WAAW,IAAIA,MAAM,KAAK,IAAI,GAAIA,MAAM,CAAC+C,uBAAuB,GAAG,KAAK;MAC7G,IAAID,WAAW,KAAK,IAAI,CAAC3L,YAAY,EAAE;QACnC,IAAI,CAAC7B,GAAG,CAAC0N,eAAe,CAACF,WAAW,CAAC;QACrC,IAAI,CAAC3L,YAAY,GAAG2L,WAAW;MACnC;MACA,IAAIG,kBAAkB,GAAG,IAAI,CAACC,0BAA0B,CAAChD,MAAM,CAACK,WAAW,CAAC,CAAC,CAAC,EAAE2B,eAAe,CAAC,CAAC,CAAC,EAAElC,MAAM,CAAC;MAC3G,IAAI1H,MAAM,GAAI,OAAO0H,MAAM,KAAK,WAAW,IAAIA,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACmD,WAAW,KAAK,CAAC,GACtFpD,IAAI,CAAC2B,QAAQ,CAAC0B,UAAU,CAACpD,MAAM,CAAC,GAChCA,MAAM,CAACmD,WAAW,GAAGpD,IAAI,CAAC2B,QAAQ,CAAC0B,UAAU,CAACpD,MAAM,CAAC;MACzD,IAAIqD,MAAM,GAAIrD,MAAM,KAAK,IAAI,IAAI,OAAOA,MAAM,KAAK,WAAW,IAC1DA,MAAM,CAACsD,cAAc,KAAKjQ,iBAAiB,CAACkQ,SAAU;MAC1D,IAAIC,KAAK,GAAG,CAAC;MACbA,KAAK,GAAIH,MAAM,GAAI/K,MAAM,IAAIyH,IAAI,CAACzH,MAAM,GAAGyH,IAAI,CAAC2B,QAAQ,CAAC+B,WAAW,CAACzD,MAAM,CAAC,CAAC,GAAI1H,MAAM,GAAGyH,IAAI,CAAC2B,QAAQ,CAACgC,UAAU,CAAC1D,MAAM,CAAE;MAC3H,IAAIA,MAAM,IAAIA,MAAM,CAACyC,aAAa,KAAK9O,oBAAoB,CAACgP,MAAM,EAAE;QAChE,IAAIT,eAAe,CAAC,CAAC,CAAC,GAAGhC,MAAM,CAACK,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,IAC/C2B,eAAe,CAAC,CAAC,CAAC,GAAGhC,MAAM,CAACK,WAAW,CAAC,CAAC,CAAC,GAAKR,IAAI,CAAC2B,QAAQ,CAACnM,KAAK,GAAG,CAAC,GAAI,CAAC,EAAE;UAC9E,IAAI6D,MAAM,CAAC2D,UAAU,CAACtK,eAAe,CAACyP,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,IACtD9I,MAAM,CAAC2D,UAAU,CAACtK,eAAe,CAACsN,IAAI,CAAC2B,QAAQ,CAAC0B,UAAU,CAACpD,MAAM,CAAC,CAAC,CAAC,EAAE;YACtEwD,KAAK,GAAG,EAAElL,MAAM,GAAGyH,IAAI,CAAC2B,QAAQ,CAACnM,KAAK,CAAC;UAC3C;QACJ;MACJ;MACA,IAAI8E,MAAM,GAAG,IAAIvE,wBAAwB,CAAC,CAAC;MAC3CuE,MAAM,CAACiC,UAAU,CAAC4F,eAAe,CAAC,CAAC,CAAC,EAAG,EAAEA,eAAe,CAAC,CAAC,CAAC,GAAGnC,IAAI,CAAC2B,QAAQ,CAAC0B,UAAU,CAACpD,MAAM,CAAC,CAAC,IAC1FD,IAAI,CAAC2B,QAAQ,CAAC+B,WAAW,CAACzD,MAAM,CAAC,GAAG,CAAC,GAAG,CAACD,IAAI,CAAC2B,QAAQ,CAAC+B,WAAW,CAACzD,MAAM,CAAC,GAAGD,IAAI,CAAC2B,QAAQ,CAAC+B,WAAW,CAACzD,MAAM,CAAC,CAAC,GAChHiD,kBAAkB,CAAC;MACvB,IAAI,CAAC3N,GAAG,CAACqO,SAAS,CAACtJ,MAAM,CAAC;MAC1B,IAAI6H,eAAe,CAAC,CAAC,CAAC,GAAGnC,IAAI,CAAC2B,QAAQ,CAACnM,KAAK,EAAE;QAC1C,IAAK2K,MAAM,CAACK,WAAW,CAAC,CAAC,CAAC,GAAG2B,eAAe,CAAC,CAAC,CAAC,GAAKnC,IAAI,CAAC2B,QAAQ,CAACnM,KAAK,GAAG,CAAC,GAAI,CAAC,EAAE;UAC9E0N,kBAAkB,GAAG,CAAC;QAC1B;MACJ;MACA,IAAIA,kBAAkB,KAAK,CAAC,EAAE;QAC1B,IAAIjD,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACyC,aAAa,KAAK9O,oBAAoB,CAACgP,MAAM,EAAE;UACzE,IAAIT,eAAe,CAAC,CAAC,CAAC,GAAGhC,MAAM,CAACK,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,IAC/C2B,eAAe,CAAC,CAAC,CAAC,GAAGhC,MAAM,CAACK,WAAW,CAAC,CAAC,CAAC,GAAKR,IAAI,CAAC2B,QAAQ,CAACnM,KAAK,GAAG,CAAC,GAAI,CAAC,EAAE;YAC9E0N,kBAAkB,IAAI,CAACO,KAAK,IAAIlL,MAAM,GAAGyH,IAAI,CAAC2B,QAAQ,CAACnM,KAAK,CAAC,IAAI,CAAC;UACtE;QACJ;MACJ;MACA,IAAI,CAACqO,iBAAiB,CAAC1D,MAAM,EAAEH,IAAI,EAAEC,MAAM,EAAEkC,eAAe,CAAC;MAC7D,IAAIe,kBAAkB,KAAK,CAAC,EAAE;QAC1B,IAAI,CAAC3N,GAAG,CAACuO,cAAc,CAAC,CAAC,EAAE,EAAEZ,kBAAkB,GAAG/C,MAAM,CAAC4D,WAAW,CAAC,CAAC;MAC1E;MACA1R,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC8C,eAAe,CAAC;MACzC,IAAI,CAACI,GAAG,CAACyO,QAAQ,CAAC,CAAC;MACnB,IAAI,CAACC,uBAAuB,CAACtL,KAAK,EAAEwH,MAAM,EAAEH,IAAI,EAAEmC,eAAe,EAAElC,MAAM,CAAC;MAC1E,IAAIuC,UAAU,EAAE;QACZ,IAAI,CAAC5K,OAAO,CAACjB,KAAK,CAAC;MACvB;IACJ;EACJ,CAAC;EACDxC,WAAW,CAACyB,SAAS,CAACsO,YAAY,GAAG,YAAY;IAC7C,IAAIC,IAAI;IACR,IAAIC,SAAS,GAAG,IAAI,CAAC9O,eAAe,CAAC+O,SAAS,CAACD,SAAS;IACxD,IAAI,IAAI,CAACxP,KAAK,CAAC0P,UAAU,GAAGF,SAAS,GAAG,CAAC,EAAE;MACvCD,IAAI,GAAG,IAAI,CAAC7O,eAAe,CAAC+O,SAAS,CAACE,OAAO,CAAC,IAAI,CAAC3P,KAAK,CAAC0P,UAAU,GAAG,CAAC,CAAC;IAC5E;IACA,OAAOH,IAAI;EACf,CAAC;EACDhQ,WAAW,CAACyB,SAAS,CAACkN,oBAAoB,GAAG,UAAU9C,IAAI,EAAEtH,GAAG,EAAEC,KAAK,EAAEsH,MAAM,EAAE;IAC7E,IAAIuE,EAAE,GAAGC,kBAAkB,CAACC,IAAI;IAChC,IAAIhM,GAAG,IAAI,IAAI,IAAIC,KAAK,IAAI,IAAI,EAAE;MAC9B6L,EAAE,GAAGC,kBAAkB,CAACE,UAAU;IACtC,CAAC,MACI,IAAIjM,GAAG,EAAE;MACV8L,EAAE,GAAGC,kBAAkB,CAACG,MAAM;IAClC,CAAC,MACI,IAAIjM,KAAK,EAAE;MACZ6L,EAAE,GAAGC,kBAAkB,CAACC,IAAI;IAChC;IACA,IAAIzE,MAAM,IAAIA,MAAM,CAAC4E,QAAQ,EAAE;MAC3BL,EAAE,IAAIC,kBAAkB,CAACK,QAAQ;IACrC;IACA,IAAI,CAACvP,GAAG,CAACwP,UAAU,CAAC,CAAC;IACrB,IAAI,CAAClM,aAAa,CAACH,GAAG,EAAEC,KAAK,EAAEqH,IAAI,EAAEC,MAAM,CAAC;IAC5C,IAAIuE,EAAE,KAAK,IAAI,CAACvN,kBAAkB,EAAE;MAChC,IAAI,CAAC1B,GAAG,CAACyP,qBAAqB,CAACR,EAAE,CAAC;MAClC,IAAI,CAACvN,kBAAkB,GAAGuN,EAAE;IAChC;IACA,IAAIS,EAAE,GAAI,OAAOhF,MAAM,KAAK,WAAW,IAAIA,MAAM,KAAK,IAAI,GAAIA,MAAM,CAACiF,gBAAgB,GAAG,CAAC;IACzF,IAAID,EAAE,KAAK,IAAI,CAAC9N,iBAAiB,EAAE;MAC/B,IAAI,CAAC5B,GAAG,CAAC4P,oBAAoB,CAACF,EAAE,CAAC;MACjC,IAAI,CAAC9N,iBAAiB,GAAG8N,EAAE;IAC/B;IACA,IAAIG,EAAE,GAAI,OAAOnF,MAAM,KAAK,WAAW,IAAIA,MAAM,KAAK,IAAI,GAAIA,MAAM,CAACoF,WAAW,GAAG,CAAC;IACpF,IAAID,EAAE,KAAK,IAAI,CAAC/N,YAAY,EAAE;MAC1B,IAAI,CAAC9B,GAAG,CAAC+P,eAAe,CAACF,EAAE,CAAC;MAC5B,IAAI,CAAC/N,YAAY,GAAG+N,EAAE;IAC1B;EACJ,CAAC;EACDjR,WAAW,CAACyB,SAAS,CAACiO,iBAAiB,GAAG,UAAU1D,MAAM,EAAEH,IAAI,EAAEC,MAAM,EAAEkC,eAAe,EAAE;IACvF,IAAI5J,MAAM,GAAI,OAAO0H,MAAM,KAAK,WAAW,IAAIA,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACmD,WAAW,KAAK,CAAC,GACtFpD,IAAI,CAAC2B,QAAQ,CAAC0B,UAAU,CAACpD,MAAM,CAAC,GAChCA,MAAM,CAACmD,WAAW,GAAGpD,IAAI,CAAC2B,QAAQ,CAAC0B,UAAU,CAACpD,MAAM,CAAC;IACzD,IAAIsF,KAAK,GAAGpF,MAAM,CAACqF,MAAM;IACzB,IAAIC,OAAO,GAAGzF,IAAI;IAClB,IAAI0F,OAAO,GAAID,OAAO,KAAK,IAAI,IAAIA,OAAO,CAACE,SAAU;IACrD,KAAK,IAAIxM,CAAC,GAAG,CAAC,EAAEyM,GAAG,GAAGL,KAAK,CAAC1N,MAAM,EAAGsB,CAAC,GAAGyM,GAAG,IAAIzM,CAAC,KAAK,IAAI,CAACkI,cAAc,EAAGlI,CAAC,EAAE,EAAE;MAC7E,IAAI0M,QAAQ,GAAGN,KAAK,CAAClM,MAAM,CAACC,QAAQ,CAACH,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;MACvD,IAAIyF,SAAS,GAAG6G,QAAQ,CAAC5G,MAAM;MAC/B,IAAI6G,WAAW,GAAG,IAAI,CAACC,wBAAwB,CAAC/G,SAAS,EAAEmD,eAAe,CAAC,CAAC,CAAC,EAAElC,MAAM,CAAC,GAClF,IAAI,CAAC+F,cAAc,CAACH,QAAQ,EAAE5F,MAAM,EAAEkC,eAAe,CAAC,CAAC,CAAC,EAAGhJ,CAAC,KAAK,CAAE,CAAC;MACxE,IAAI2M,WAAW,KAAK,CAAC,EAAE;QACnB,IAAI,CAACvQ,GAAG,CAACuO,cAAc,CAACgC,WAAW,EAAE,CAAC,CAAC;MAC3C;MACA,IAAIJ,OAAO,EAAE;QACT,IAAI,CAACO,gBAAgB,CAACJ,QAAQ,EAAE1D,eAAe,CAAC,CAAC,CAAC,EAAEnC,IAAI,EAAEC,MAAM,CAAC;MACrE,CAAC,MACI;QACD,IAAI,CAACiG,cAAc,CAACL,QAAQ,EAAE1D,eAAe,CAAC,CAAC,CAAC,EAAElC,MAAM,EAAED,IAAI,CAAC;MACnE;MACA,IAAK7G,CAAC,GAAG,CAAC,KAAKyM,GAAG,EAAG;QACjB,IAAIO,WAAW,GAAG,IAAI,CAAChD,0BAA0B,CAAChD,MAAM,CAACK,WAAW,CAAC,CAAC,CAAC,EAAE2B,eAAe,CAAC,CAAC,CAAC,EAAElC,MAAM,CAAC;QACpG,IAAI3F,MAAM,GAAG,IAAIvE,wBAAwB,CAAC,CAAC;QAC3C,IAAIqQ,QAAQ,GAAK,EAAEjE,eAAe,CAAC,CAAC,CAAC,GAAGnC,IAAI,CAAC2B,QAAQ,CAAC0B,UAAU,CAACpD,MAAM,CAAC,CAAC,GACrED,IAAI,CAAC2B,QAAQ,CAAC+B,WAAW,CAACzD,MAAM,CAAC,GACjCkG,WAAW,GACV5N,MAAM,IAAIY,CAAC,GAAG,CAAC,CAAE;QACtBmB,MAAM,CAACiC,UAAU,CAAC4F,eAAe,CAAC,CAAC,CAAC,EAAEiE,QAAQ,CAAC;QAC/C,IAAI,CAAC7Q,GAAG,CAACqO,SAAS,CAACtJ,MAAM,CAAC;MAC9B;IACJ;EACJ,CAAC;EACDnG,WAAW,CAACyB,SAAS,CAACqQ,gBAAgB,GAAG,UAAUJ,QAAQ,EAAEvN,KAAK,EAAE0H,IAAI,EAAEC,MAAM,EAAE;IAC9E,IAAIc,IAAI,GAAG8E,QAAQ,CAACQ,KAAK;IACzB,IAAIC,GAAG,GAAIrG,MAAM,KAAK,IAAI,IAAI,OAAOA,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACsG,WAAY;IAClF,IAAIC,YAAY,GAAIvG,MAAM,KAAK,IAAI,IAAI,OAAOA,MAAM,KAAK,WAAW,KAAKA,MAAM,CAACoF,WAAW,KAAK,CAAC,IAC7FpF,MAAM,CAACwG,SAAS,KAAKrT,gBAAgB,CAACsT,OAAO,CAAE;IACnD,IAAIjB,OAAO,GAAGzF,IAAI;IAClB,IAAIqF,WAAW,GAAG,IAAI,CAACsB,YAAY,CAACd,QAAQ,EAAEvN,KAAK,EAAE2H,MAAM,EAAEwF,OAAO,CAAC;IACrE,IAAImB,SAAS,GAAG,IAAI3S,YAAY,CAAC,CAAC;IAClC,IAAIqS,GAAG,IAAKrG,MAAM,KAAK,IAAI,IAAI,OAAOA,MAAM,KAAK,WAAW,IAAIA,MAAM,CAAC4G,aAAa,KAAKxT,gBAAgB,CAACyT,IAAK,EAAE;MAC7G,IAAIC,MAAM,GAAG,EAAE;MACf,IAAIC,UAAU,GAAI/G,MAAM,KAAK,IAAI,IAAI,OAAOA,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACwG,SAAS,KAAKrT,gBAAgB,CAAC6T,KAAM;MAClH,IAAIhH,MAAM,KAAK,IAAI,IAAI,OAAOA,MAAM,KAAK,WAAW,IAAIA,MAAM,CAAC4G,aAAa,KAAKxT,gBAAgB,CAACyT,IAAI,EAAE;QACpGC,MAAM,GAAGH,SAAS,CAACxG,OAAO,CAACW,IAAI,EAAE0E,OAAO,EAAGxF,MAAM,CAAC4G,aAAa,KAAKxT,gBAAgB,CAACkT,WAAW,GAAI,IAAI,GAAG,KAAK,EAAEC,YAAY,EAAEvG,MAAM,CAAC;MAC3I,CAAC,MACI;QACD8G,MAAM,GAAGH,SAAS,CAACxG,OAAO,CAACW,IAAI,EAAE0E,OAAO,EAAEuB,UAAU,EAAER,YAAY,EAAEvG,MAAM,CAAC;MAC/E;MACA,IAAIiH,KAAK,GAAG,EAAE;MACd,IAAIH,MAAM,CAAClP,MAAM,GAAG,CAAC,EAAE;QACnB,IAAIoI,MAAM,KAAK,IAAI,IAAI,OAAOA,MAAM,KAAK,WAAW,IAAIA,MAAM,CAAC4G,aAAa,KAAKxT,gBAAgB,CAACyT,IAAI,EAAE;UACpGI,KAAK,GAAGN,SAAS,CAACO,YAAY,CAACpG,IAAI,EAAE0E,OAAO,EAAGxF,MAAM,CAAC4G,aAAa,KAAKxT,gBAAgB,CAACkT,WAAW,GAAI,IAAI,GAAG,KAAK,EAAEC,YAAY,EAAEvG,MAAM,CAAC;QAC/I;MACJ,CAAC,MACI;QACDiH,KAAK,GAAG,CAACnG,IAAI,CAAC;MAClB;MACA,IAAI,CAACqG,kBAAkB,CAACL,MAAM,EAAEG,KAAK,EAAEzB,OAAO,EAAExF,MAAM,EAAEoF,WAAW,CAAC;IACxE,CAAC,MACI;MACD,IAAImB,YAAY,EAAE;QACd,IAAIrG,MAAM,GAAG,IAAI,CAACkH,iBAAiB,CAACtG,IAAI,EAAE0E,OAAO,EAAE,IAAI,CAAC;QACxD,IAAIsB,MAAM,GAAG5G,MAAM,CAACmH,MAAM;QAC1B,IAAIJ,KAAK,GAAG/G,MAAM,CAAC+G,KAAK;QACxB,IAAI,CAACE,kBAAkB,CAACL,MAAM,EAAEG,KAAK,EAAEzB,OAAO,EAAExF,MAAM,EAAEoF,WAAW,CAAC;MACxE,CAAC,MACI;QACD,IAAIkC,KAAK,GAAG,IAAI,CAACC,iBAAiB,CAACzG,IAAI,EAAE0E,OAAO,CAAC;QACjD,IAAI,CAAClQ,GAAG,CAACkS,iBAAiB,CAACF,KAAK,EAAE,IAAI,CAAC;MAC3C;IACJ;EACJ,CAAC;EACDpT,WAAW,CAACyB,SAAS,CAACwR,kBAAkB,GAAG,UAAUL,MAAM,EAAEG,KAAK,EAAElH,IAAI,EAAEC,MAAM,EAAEoF,WAAW,EAAE;IAC3F,IAAI0B,MAAM,KAAK,IAAI,IAAI,OAAOA,MAAM,KAAK,WAAW,IAAIA,MAAM,CAAClP,MAAM,GAAG,CAAC,IAAIqP,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,WAAW,IACvHA,KAAK,CAACrP,MAAM,GAAG,CAAC,IAAImI,IAAI,KAAK,IAAI,IAAI,OAAOA,IAAI,KAAK,WAAW,EAAE;MAClE,IAAI,CAACzK,GAAG,CAACuO,cAAc,CAAC,CAAC;MACzB,IAAI1L,CAAC,GAAG,CAAC;MACT,IAAIsP,MAAM,GAAG,CAAC;MACd,IAAIC,eAAe,GAAG,CAAC;MACvB,IAAIC,eAAe,GAAG,CAAC;MACvB,IAAI;QACA,IAAI3H,MAAM,KAAK,IAAI,IAAI,OAAOA,MAAM,KAAK,WAAW,EAAE;UAClD0H,eAAe,GAAG1H,MAAM,CAAC0H,eAAe;UACxCC,eAAe,GAAG3H,MAAM,CAAC2H,eAAe;UACxC3H,MAAM,CAAC0H,eAAe,GAAG,CAAC;UAC1B1H,MAAM,CAAC2H,eAAe,GAAG,CAAC;QAC9B;QACA,IAAIC,UAAU,GAAG7H,IAAI,CAAC8H,kBAAkB,CAAC3U,gBAAgB,CAAC4U,WAAW,EAAE9H,MAAM,CAAC,GAAGoF,WAAW;QAC5F,IAAIH,gBAAgB,GAAIjF,MAAM,IAAI,IAAI,GAAIA,MAAM,CAACiF,gBAAgB,GAAG,CAAC;QACrE,IAAI8C,SAAS,GAAI/H,MAAM,KAAK,IAAI,IAAI,OAAOA,MAAM,KAAK,WAAW,IAAIoF,WAAW,KAAK,CAAC,GAAIpF,MAAM,CAACoF,WAAW,GAAG,CAAC;QAChHwC,UAAU,IAAI3C,gBAAgB,GAAG8C,SAAS;QAC1C,KAAK,IAAI7O,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4N,MAAM,CAAClP,MAAM,EAAEsB,CAAC,EAAE,EAAE;UACpC,IAAIoO,KAAK,GAAGR,MAAM,CAAC5N,CAAC,CAAC,CAAC,CAAC;UACvB,IAAI8O,IAAI,GAAGf,KAAK,CAAC/N,CAAC,CAAC,CAAC,CAAC;UACrB,IAAI+O,UAAU,GAAG,CAAC;UAClB,IAAI9P,CAAC,KAAK,CAAC,EAAE;YACT,IAAI,CAAC7C,GAAG,CAACuO,cAAc,CAAC1L,CAAC,EAAE,CAAC,CAAC;UACjC;UACA,IAAI6P,IAAI,CAACpQ,MAAM,GAAG,CAAC,EAAE;YACjBqQ,UAAU,IAAIlI,IAAI,CAACmI,aAAa,CAACF,IAAI,EAAEhI,MAAM,CAAC,CAAC,CAAC,CAAC;YACjDiI,UAAU,IAAIhD,gBAAgB;YAC9B,IAAI,CAAC3P,GAAG,CAAC6S,SAAS,CAACb,KAAK,CAAC;UAC7B;UACA,IAAIpO,CAAC,KAAK4N,MAAM,CAAClP,MAAM,GAAG,CAAC,EAAE;YACzBO,CAAC,GAAG8P,UAAU,GAAGL,UAAU;YAC3BH,MAAM,IAAItP,CAAC;UACf;QACJ;QACA,IAAIsP,MAAM,GAAG,CAAC,EAAE;UACZ,IAAI,CAACnS,GAAG,CAACuO,cAAc,CAAC,CAAC4D,MAAM,EAAE,CAAC,CAAC;QACvC;MACJ,CAAC,SACO;QACJ,IAAIzH,MAAM,KAAK,IAAI,IAAI,OAAOA,MAAM,KAAK,WAAW,EAAE;UAClDA,MAAM,CAAC0H,eAAe,GAAGA,eAAe;UACxC1H,MAAM,CAAC2H,eAAe,GAAGA,eAAe;QAC5C;MACJ;IACJ;EACJ,CAAC;EACDzT,WAAW,CAACyB,SAAS,CAACyR,iBAAiB,GAAG,UAAUtG,IAAI,EAAE0E,OAAO,EAAEyB,KAAK,EAAE;IACtE,IAAII,MAAM,GAAG,EAAE;IACf,IAAIvG,IAAI,KAAK,IAAI,IAAI,OAAOA,IAAI,KAAK,WAAW,IAAIA,IAAI,CAAClJ,MAAM,GAAG,CAAC,EAAE;MACjEqP,KAAK,GAAGnG,IAAI,CAACsH,KAAK,CAAC,IAAI,CAAC;MACxB,KAAK,IAAIlP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+N,KAAK,CAACrP,MAAM,EAAEsB,CAAC,EAAE,EAAE;QACnC,IAAI8O,IAAI,GAAGf,KAAK,CAAC/N,CAAC,CAAC,CAAC,CAAC;QACrB,IAAIoO,KAAK,GAAG,IAAI,CAACC,iBAAiB,CAACS,IAAI,EAAExC,OAAO,CAAC;QACjD6B,MAAM,CAACjO,MAAM,CAACC,QAAQ,CAACH,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAGgO,KAAK;MACrD;IACJ;IACA,OAAO;MAAED,MAAM,EAAEA,MAAM;MAAEJ,KAAK,EAAEA;IAAM,CAAC;EAC3C,CAAC;EACD/S,WAAW,CAACyB,SAAS,CAAC4R,iBAAiB,GAAG,UAAUc,IAAI,EAAE7C,OAAO,EAAE;IAC/D,IAAI8B,KAAK,GAAG,IAAI;IAChB,IAAIe,IAAI,KAAK,IAAI,IAAI,OAAOA,IAAI,KAAK,WAAW,IAAI7C,OAAO,KAAK,IAAI,IAAI,OAAOA,OAAO,KAAK,WAAW,IAClGA,OAAO,CAACzD,aAAa,YAAYhO,oBAAoB,EAAE;MACvD,IAAIuU,SAAS,GAAG9C,OAAO,CAACzD,aAAa,CAACwG,UAAU;MAChD/C,OAAO,CAACgD,WAAW,CAACH,IAAI,CAAC;MACzBf,KAAK,GAAGgB,SAAS,CAACG,cAAc,CAACJ,IAAI,CAAC;MACtC,IAAIK,KAAK,GAAG/V,qBAAqB,CAAC2U,KAAK,CAAC;MACxCA,KAAK,GAAG5U,cAAc,CAACgW,KAAK,CAAC;IACjC;IACA,OAAOpB,KAAK;EAChB,CAAC;EACDpT,WAAW,CAACyB,SAAS,CAACuN,0BAA0B,GAAG,UAAUyF,UAAU,EAAEC,YAAY,EAAE5I,MAAM,EAAE;IAC3F,IAAIwD,KAAK,GAAG,CAAC;IACb,IAAIoF,YAAY,IAAI,CAAC,IAAK,OAAO5I,MAAM,KAAK,WAAW,IAAIA,MAAM,KAAK,IAAK,IAAIA,MAAM,CAACyC,aAAa,KAAK9O,oBAAoB,CAACkV,GAAG,EAAE;MAC9H,QAAQ7I,MAAM,CAACyC,aAAa;QACxB,KAAK9O,oBAAoB,CAAC+O,MAAM;UAC5Bc,KAAK,GAAG,CAACoF,YAAY,GAAGD,UAAU,IAAI,CAAC;UACvC;QACJ,KAAKhV,oBAAoB,CAACgP,MAAM;UAC5Ba,KAAK,GAAGoF,YAAY,GAAGD,UAAU;UACjC;MACR;IACJ;IACA,OAAOnF,KAAK;EAChB,CAAC;EACDtP,WAAW,CAACyB,SAAS,CAACmQ,wBAAwB,GAAG,UAAU/G,SAAS,EAAE+J,WAAW,EAAE9I,MAAM,EAAE;IACvF,IAAIwD,KAAK,GAAG,CAAC;IACb,IAAIsF,WAAW,IAAI,CAAC,IAAK,OAAO9I,MAAM,KAAK,WAAW,IAAIA,MAAM,KAAK,IAAK,IAAIA,MAAM,CAACwG,SAAS,KAAKrT,gBAAgB,CAAC4V,IAAI,EAAE;MACtH,QAAQ/I,MAAM,CAACwG,SAAS;QACpB,KAAKrT,gBAAgB,CAAC6V,MAAM;UACxBxF,KAAK,GAAG,CAACsF,WAAW,GAAG/J,SAAS,IAAI,CAAC;UACrC;QACJ,KAAK5L,gBAAgB,CAAC6T,KAAK;UACvBxD,KAAK,GAAGsF,WAAW,GAAG/J,SAAS;UAC/B;MACR;IACJ;IACA,OAAOyE,KAAK;EAChB,CAAC;EACDtP,WAAW,CAACyB,SAAS,CAACoQ,cAAc,GAAG,UAAUH,QAAQ,EAAE5F,MAAM,EAAE3H,KAAK,EAAE4Q,SAAS,EAAE;IACjF,IAAIC,UAAU,GAAG,CAAC;IAClB,IAAIC,kBAAkB,GAAI,CAACvD,QAAQ,CAACwD,SAAS,GAAGnW,SAAS,CAACkW,kBAAkB,IAAI,CAAE;IAClF,IAAInJ,MAAM,IAAImJ,kBAAkB,EAAE;MAC9BD,UAAU,GAAID,SAAS,GAAIjJ,MAAM,CAAC0H,eAAe,GAAG1H,MAAM,CAAC2H,eAAe;MAC1EuB,UAAU,GAAI7Q,KAAK,GAAG,CAAC,GAAIgR,IAAI,CAACC,GAAG,CAACjR,KAAK,EAAE6Q,UAAU,CAAC,GAAGA,UAAU;IACvE;IACA,OAAOA,UAAU;EACrB,CAAC;EACDhV,WAAW,CAACyB,SAAS,CAACsQ,cAAc,GAAG,UAAUL,QAAQ,EAAEvN,KAAK,EAAE2H,MAAM,EAAED,IAAI,EAAE;IAC5E,IAAI,CAAC2G,YAAY,CAACd,QAAQ,EAAEvN,KAAK,EAAE2H,MAAM,EAAED,IAAI,CAAC;IAChD,IAAIxJ,KAAK,GAAG,EAAE;IACd,IAAIqP,QAAQ,CAACQ,KAAK,CAACtO,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI8N,QAAQ,CAACQ,KAAK,CAACtO,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAC1E,KAAK,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0M,QAAQ,CAACQ,KAAK,CAACxO,MAAM,EAAEsB,CAAC,EAAE,EAAE;QAC5C,IAAI0M,QAAQ,CAACQ,KAAK,CAAChN,MAAM,CAACC,QAAQ,CAACH,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE;UAC3D/C,KAAK,IAAI,MAAM,CAAC,CAAC;QACrB,CAAC,MACI,IAAIqP,QAAQ,CAACQ,KAAK,CAAChN,MAAM,CAACC,QAAQ,CAACH,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE;UAChE/C,KAAK,IAAI,MAAM,CAAC,CAAC;QACrB,CAAC,MACI;UACDA,KAAK,IAAIqP,QAAQ,CAACQ,KAAK,CAAChN,MAAM,CAACC,QAAQ,CAACH,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAC9D;MACJ;IACJ;IACA,IAAI/C,KAAK,KAAK,EAAE,EAAE;MACdA,KAAK,GAAGqP,QAAQ,CAACQ,KAAK;IAC1B;IACA,IAAI,CAAC9Q,GAAG,CAACkS,iBAAiB,CAAC,GAAG,GAAGjR,KAAK,GAAG,GAAG,CAAC;EACjD,CAAC;EACDrC,WAAW,CAACyB,SAAS,CAAC+Q,YAAY,GAAG,UAAUd,QAAQ,EAAEkD,WAAW,EAAE9I,MAAM,EAAED,IAAI,EAAE;IAChF,IAAIe,IAAI,GAAG8E,QAAQ,CAACQ,KAAK;IACzB,IAAIrH,SAAS,GAAG6G,QAAQ,CAAC5G,MAAM;IAC/B,IAAIuK,aAAa,GAAG,IAAI,CAACC,cAAc,CAAC5D,QAAQ,EAAEkD,WAAW,EAAE9I,MAAM,EAAED,IAAI,CAAC;IAC5E,IAAI0J,cAAc,GAAIzJ,MAAM,IAAIA,MAAM,CAACoF,WAAW,KAAK,CAAE;IACzD,IAAIsE,gBAAgB,GAAG3J,IAAI,CAAC4J,kBAAkB,CAAC7I,IAAI,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACjE,IAAIiH,SAAS,GAAG,CAAC;IACjB,IAAIwB,aAAa,EAAE;MACf,IAAIE,cAAc,EAAE;QAChB1K,SAAS,IAAK2K,gBAAgB,GAAG1J,MAAM,CAACoF,WAAY;MACxD;MACA2C,SAAS,GAAG,CAACe,WAAW,GAAG/J,SAAS,IAAI2K,gBAAgB;MACxD,IAAI,CAACpU,GAAG,CAAC+P,eAAe,CAAC0C,SAAS,CAAC;IACvC,CAAC,MACI,IAAI/H,MAAM,IAAIA,MAAM,CAACwG,SAAS,KAAKrT,gBAAgB,CAACsT,OAAO,EAAE;MAC9D,IAAI,CAACnR,GAAG,CAAC+P,eAAe,CAAC,CAAC,CAAC;IAC/B;IACA,OAAO0C,SAAS;EACpB,CAAC;EACD7T,WAAW,CAACyB,SAAS,CAAC6T,cAAc,GAAG,UAAU5D,QAAQ,EAAEkD,WAAW,EAAE9I,MAAM,EAAED,IAAI,EAAE;IAClF,IAAIe,IAAI,GAAG8E,QAAQ,CAACQ,KAAK;IACzB,IAAIrH,SAAS,GAAG6G,QAAQ,CAAC5G,MAAM;IAC/B,IAAI4K,YAAY,GAAI5J,MAAM,IAAIA,MAAM,CAACwG,SAAS,KAAKrT,gBAAgB,CAACsT,OAAQ;IAC5E,IAAIoD,SAAS,GAAIf,WAAW,IAAI,CAAC,IAAI/J,SAAS,GAAG+J,WAAY;IAC7D,IAAIY,gBAAgB,GAAG3J,IAAI,CAAC4J,kBAAkB,CAAC7I,IAAI,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACjE,IAAIgJ,SAAS,GAAIJ,gBAAgB,GAAG,CAAC,IAAI5I,IAAI,CAAC,CAAC,CAAC,KAAK,GAAI;IACzD,IAAIiJ,kBAAkB,GAAI,CAACnE,QAAQ,CAACwD,SAAS,GAAGnW,SAAS,CAAC+W,WAAW,IAAI,CAAE;IAC3E,OAAQJ,YAAY,IAAIC,SAAS,IAAIC,SAAS,KAAKC,kBAAkB,IAAI/J,MAAM,CAACwG,SAAS,KAAKrT,gBAAgB,CAACsT,OAAO,CAAC;EAC3H,CAAC;EACDvS,WAAW,CAACyB,SAAS,CAACqO,uBAAuB,GAAG,UAAUtL,KAAK,EAAEwH,MAAM,EAAEH,IAAI,EAAEmC,eAAe,EAAElC,MAAM,EAAE;IACpG,IAAID,IAAI,CAACkK,WAAW,IAAIlK,IAAI,CAACmK,WAAW,EAAE;MACtC,IAAIC,OAAO,GAAG,IAAI,CAACC,4BAA4B,CAAC1R,KAAK,EAAEqH,IAAI,CAAC;MAC5D,IAAI,OAAOoK,OAAO,KAAK,WAAW,IAAIA,OAAO,KAAK,IAAI,EAAE;QACpD,IAAI3G,KAAK,GAAG,IAAI,CAACN,0BAA0B,CAAChD,MAAM,CAACK,WAAW,CAAC,CAAC,CAAC,EAAE2B,eAAe,CAAC,CAAC,CAAC,EAAElC,MAAM,CAAC;QAC9F,IAAIqK,gBAAgB,GAAGnI,eAAe,CAAC,CAAC,CAAC,GAAGsB,KAAK,GAAGzD,IAAI,CAAC2B,QAAQ,CAACgC,UAAU,CAAC1D,MAAM,CAAC,GAAG,GAAG,GAAGmK,OAAO,CAACnL,MAAM;QAC3G,IAAIsL,gBAAgB,GAAGpI,eAAe,CAAC,CAAC,CAAC,GAAGsB,KAAK,GAAGzD,IAAI,CAAC2B,QAAQ,CAAC0B,UAAU,CAACpD,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,GAAGmK,OAAO,CAACnL,MAAM;QAC/G,IAAIsG,KAAK,GAAGpF,MAAM,CAACqF,MAAM;QACzB,KAAK,IAAIrM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgH,MAAM,CAACqK,UAAU,EAAErR,CAAC,EAAE,EAAE;UACxC,IAAI0M,QAAQ,GAAGN,KAAK,CAAClM,MAAM,CAACC,QAAQ,CAACH,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;UACvD,IAAIyF,SAAS,GAAG6G,QAAQ,CAAC5G,MAAM;UAC/B,IAAIwL,MAAM,GAAG,IAAI,CAAC1E,wBAAwB,CAAC/G,SAAS,EAAEmD,eAAe,CAAC,CAAC,CAAC,EAAElC,MAAM,CAAC;UACjF,IAAIkJ,UAAU,GAAG,IAAI,CAACnD,cAAc,CAACH,QAAQ,EAAE5F,MAAM,EAAEkC,eAAe,CAAC,CAAC,CAAC,EAAGhJ,CAAC,KAAK,CAAE,CAAC;UACrF,IAAIoF,EAAE,GAAG4D,eAAe,CAAC,CAAC,CAAC,GAAGsI,MAAM;UACpC,IAAIhM,EAAE,GAAI,CAAC,IAAI,CAACgL,cAAc,CAAC5D,QAAQ,EAAE1D,eAAe,CAAC,CAAC,CAAC,EAAElC,MAAM,EAAED,IAAI,CAAC,GACtEzB,EAAE,GAAGS,SAAS,GAAGmK,UAAU,GAC3B5K,EAAE,GAAG4D,eAAe,CAAC,CAAC,CAAC,GAAGgH,UAAU;UACxC,IAAInJ,IAAI,CAACkK,WAAW,EAAE;YAClB,IAAI,CAACQ,QAAQ,CAACN,OAAO,EAAE7L,EAAE,EAAE+L,gBAAgB,EAAE7L,EAAE,EAAE6L,gBAAgB,CAAC;YAClEA,gBAAgB,IAAInK,MAAM,CAAC4D,WAAW;UAC1C;UACA,IAAI/D,IAAI,CAACmK,WAAW,EAAE;YAClB,IAAI,CAACO,QAAQ,CAACN,OAAO,EAAE7L,EAAE,EAAEgM,gBAAgB,EAAE9L,EAAE,EAAE8L,gBAAgB,CAAC;YAClEA,gBAAgB,IAAIpK,MAAM,CAAC4D,WAAW;UAC1C;QACJ;MACJ;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI5P,WAAW,CAACyB,SAAS,CAAC8U,QAAQ,GAAG,UAAUhS,GAAG,EAAE6F,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE;IAC5D,IAAI,CAAC7F,aAAa,CAACH,GAAG,CAAC;IACvB,IAAI,CAACnD,GAAG,CAAC2D,UAAU,CAACqF,EAAE,EAAEC,EAAE,CAAC;IAC3B,IAAI,CAACjJ,GAAG,CAAC6D,kBAAkB,CAACqF,EAAE,EAAEC,EAAE,CAAC;IACnC,IAAI,CAACnJ,GAAG,CAACoV,WAAW,CAAC,CAAC;IACtBtY,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC8C,eAAe,CAAC;EAC5C,CAAC;EACDhB,WAAW,CAACyB,SAAS,CAACyU,4BAA4B,GAAG,UAAU1R,KAAK,EAAEqH,IAAI,EAAE;IACxE,OAAO,IAAIpH,MAAM,CAACD,KAAK,CAACmH,MAAM,EAAEE,IAAI,CAAC2B,QAAQ,CAACnM,KAAK,GAAG,EAAE,CAAC;EAC7D,CAAC;EACDrB,WAAW,CAACyB,SAAS,CAAC2K,4BAA4B,GAAG,UAAUqK,QAAQ,EAAExS,CAAC,EAAEC,CAAC,EAAE4H,MAAM,EAAE;IACnF,IAAI4K,iBAAiB,GAAG,CAACzS,CAAC,EAAEC,CAAC,EAAEuS,QAAQ,CAAC,CAAC,CAAC,EAAEA,QAAQ,CAAC,CAAC,CAAC,CAAC;IACxD,IAAI3K,MAAM,EAAE;MACR,QAAQA,MAAM,CAACwG,SAAS;QACpB,KAAKrT,gBAAgB,CAAC6V,MAAM;UACxB4B,iBAAiB,CAAC,CAAC,CAAC,GAAGA,iBAAiB,CAAC,CAAC,CAAC,GAAGA,iBAAiB,CAAC,CAAC,CAAC,GAAG,CAAC;UACtE;QACJ,KAAKzX,gBAAgB,CAAC6T,KAAK;UACvB4D,iBAAiB,CAAC,CAAC,CAAC,GAAGA,iBAAiB,CAAC,CAAC,CAAC,GAAGA,iBAAiB,CAAC,CAAC,CAAC;UAClE;MACR;MACA,QAAQ5K,MAAM,CAACyC,aAAa;QACxB,KAAK9O,oBAAoB,CAAC+O,MAAM;UAC5BkI,iBAAiB,CAAC,CAAC,CAAC,GAAGA,iBAAiB,CAAC,CAAC,CAAC,GAAGA,iBAAiB,CAAC,CAAC,CAAC,GAAG,CAAC;UACtE;QACJ,KAAKjX,oBAAoB,CAACgP,MAAM;UAC5BiI,iBAAiB,CAAC,CAAC,CAAC,GAAGA,iBAAiB,CAAC,CAAC,CAAC,GAAGA,iBAAiB,CAAC,CAAC,CAAC;UAClE;MACR;IACJ;IACA,OAAOA,iBAAiB;EAC5B,CAAC;EACD1W,WAAW,CAACyB,SAAS,CAACmD,iBAAiB,GAAG,UAAUL,GAAG,EAAEC,KAAK,EAAEmS,QAAQ,EAAEC,WAAW,EAAE;IACnF,IAAI,OAAOD,QAAQ,KAAK,WAAW,EAAE;MACjCA,QAAQ,GAAGnX,WAAW,CAAC6F,OAAO;IAClC;IACA,IAAIwR,OAAO,GAAI,OAAOrS,KAAK,KAAK,WAAW,IAAIA,KAAK,KAAK,IAAK;IAC9D,IAAIsS,KAAK,GAAI,OAAOvS,GAAG,KAAK,WAAW,IAAIA,GAAG,KAAK,IAAK;IACxD,IAAIwS,SAAS,GAAGJ,QAAQ,KAAKnX,WAAW,CAACwX,SAAS;IAClD,IAAIF,KAAK,IAAID,OAAO,EAAE;MAClB,IAAID,WAAW,EAAE;QACb,IAAI,CAACxV,GAAG,CAAC6V,oBAAoB,CAACF,SAAS,CAAC;MAC5C,CAAC,MACI;QACD,IAAI,CAAC3V,GAAG,CAAC8V,eAAe,CAACH,SAAS,CAAC;MACvC;IACJ,CAAC,MACI,IAAI,CAACD,KAAK,IAAI,CAACD,OAAO,EAAE;MACzB,IAAI,CAACzV,GAAG,CAAC+V,QAAQ,CAAC,CAAC;IACvB,CAAC,MACI,IAAIL,KAAK,EAAE;MACZ,IAAIF,WAAW,EAAE;QACb,IAAI,CAACxV,GAAG,CAACgW,gBAAgB,CAAC,CAAC;MAC/B,CAAC,MACI;QACD,IAAI,CAAChW,GAAG,CAACoV,WAAW,CAAC,CAAC;MAC1B;IACJ,CAAC,MACI;MACD,IAAII,WAAW,EAAE;QACb,IAAI,CAACxV,GAAG,CAACiW,cAAc,CAACN,SAAS,CAAC;MACtC,CAAC,MACI;QACD,IAAI,CAAC3V,GAAG,CAACkW,SAAS,CAACP,SAAS,CAAC;MACjC;IACJ;EACJ,CAAC;EACD/W,WAAW,CAACyB,SAAS,CAAC8V,sBAAsB,GAAG,UAAUvH,IAAI,EAAE;IAC3D,IAAIwH,IAAI;IACR,IAAIxH,IAAI,EAAE;MACN,IAAIyH,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;MACvB,IAAIC,kBAAkB,GAAG,KAAK;MAC9B,IAAI1H,IAAI,CAACxP,eAAe,CAACK,GAAG,CAAC,SAAS,CAAC,IAAImP,IAAI,CAACxP,eAAe,CAACK,GAAG,CAAC,UAAU,CAAC,EAAE;QAC7E2W,IAAI,GAAGxH,IAAI,CAACxP,eAAe,CAACkI,QAAQ,CAAC,SAAS,CAAC;QAC/C,IAAIiP,IAAI,GAAG3H,IAAI,CAACxP,eAAe,CAACkI,QAAQ,CAAC,UAAU,CAAC;QACpD,IAAI8O,IAAI,CAAC,CAAC,CAAC,KAAKG,IAAI,CAAC,CAAC,CAAC,IAAIH,IAAI,CAAC,CAAC,CAAC,KAAKG,IAAI,CAAC,CAAC,CAAC,IAAIH,IAAI,CAAC,CAAC,CAAC,KAAKG,IAAI,CAAC,CAAC,CAAC,IAAIH,IAAI,CAAC,CAAC,CAAC,KAAKG,IAAI,CAAC,CAAC,CAAC,EAAE;UAC1FD,kBAAkB,GAAG,IAAI;QAC7B;QACA,IAAIF,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAIA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAIG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAIA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;UAC1D,IAAI,CAACzP,kBAAkB,CAACsP,IAAI,CAAC,CAAC,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC,CAAC,CAAC;UAC1CC,UAAU,CAAC,CAAC,CAAC,GAAG,CAACD,IAAI,CAAC,CAAC,CAAC;UACxBC,UAAU,CAAC,CAAC,CAAC,GAAGD,IAAI,CAAC,CAAC,CAAC;QAC3B,CAAC,MACI,IAAI,CAACxH,IAAI,CAACxP,eAAe,CAACK,GAAG,CAAC,SAAS,CAAC,EAAE;UAC3C6W,kBAAkB,GAAG,IAAI;QAC7B;QACA,IAAIA,kBAAkB,EAAE;UACpB,IAAI,CAACtW,GAAG,CAACwW,aAAa,CAAC,wCAAwC,CAAC;UAChE,IAAI,IAAI,CAACC,QAAQ,EAAE;YACf,IAAI,CAAC3P,kBAAkB,CAAC,IAAI,CAAC2P,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAACA,QAAQ,CAAC,CAAC,CAAC,CAAC;UAChE,CAAC,MACI;YACD,IAAI,CAAE7H,IAAI,CAAC3H,OAAO,CAAC,CAAC,CAAE,GAAG,IAAI,CAAC0E,wBAAwB,IAAI,IAAI,CAACA,wBAAwB,KAAK,CAAC,EAAE;cAC3F,IAAI,CAAC7E,kBAAkB,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC7G,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9C,CAAC,MACI;cACD,IAAI,CAAC6G,kBAAkB,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC6E,wBAAwB,CAAC;YAC9D;UACJ;QACJ;MACJ;IACJ,CAAC,MACI;MACD,IAAI,CAAC3L,GAAG,CAACwW,aAAa,CAAC,wCAAwC,CAAC;MAChE,IAAI,IAAI,CAAC7K,wBAAwB,KAAM,CAAC,IAAI,CAAC1L,KAAK,CAAC,CAAC,CAAE,EAAE;QACpD,IAAI,IAAI,CAACwW,QAAQ,EAAE;UACfL,IAAI,GAAG,IAAI,CAACK,QAAQ;UACpB,IAAIL,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAIA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,CAACnW,KAAK,CAAC,CAAC,CAAC,KAAKmW,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAACnW,KAAK,CAAC,CAAC,CAAC,KAAKmW,IAAI,CAAC,CAAC,CAAC,EAAE;YACtF,IAAI,CAACtP,kBAAkB,CAACsP,IAAI,CAAC,CAAC,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC,CAAC,CAAC;UAC9C,CAAC,MACI;YACD,IAAI,IAAI,CAACzK,wBAAwB,KAAK,IAAI,CAAC1L,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC0L,wBAAwB,KAAK,CAAC,EAAE;cACxF,IAAI,CAAC7E,kBAAkB,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC7G,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9C,CAAC,MACI;cACD,IAAI,CAAC6G,kBAAkB,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC6E,wBAAwB,CAAC;YAC9D;UACJ;QACJ,CAAC,MACI;UACD,IAAI,IAAI,CAACA,wBAAwB,KAAK,IAAI,CAAC1L,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC0L,wBAAwB,KAAK,CAAC,EAAE;YACxF,IAAI,CAAC7E,kBAAkB,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC7G,KAAK,CAAC,CAAC,CAAC,CAAC;UAC9C,CAAC,MACI;YACD,IAAI,CAAC6G,kBAAkB,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC6E,wBAAwB,CAAC;UAC9D;QACJ;MACJ;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI/M,WAAW,CAACyB,SAAS,CAACqW,cAAc,GAAG,UAAUjQ,MAAM,EAAEC,MAAM,EAAE;IAC7D,IAAI3B,MAAM,GAAG,IAAIvE,wBAAwB,CAAC,CAAC;IAC3CuE,MAAM,CAAC8C,MAAM,CAACpB,MAAM,EAAEC,MAAM,CAAC;IAC7B,IAAI,CAAC1G,GAAG,CAACmF,UAAU,CAACJ,MAAM,CAAC;IAC3B,IAAI,CAACtD,OAAO,CAACkV,SAAS,CAAC5R,MAAM,CAAC;EAClC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACInG,WAAW,CAACyB,SAAS,CAACyG,kBAAkB,GAAG,UAAUjE,CAAC,EAAEC,CAAC,EAAE;IACvD,IAAIiC,MAAM,GAAG,IAAIvE,wBAAwB,CAAC,CAAC;IAC3CuE,MAAM,CAACiC,UAAU,CAACnE,CAAC,EAAE,CAACC,CAAC,CAAC;IACxB,IAAI,CAAC9C,GAAG,CAACmF,UAAU,CAACJ,MAAM,CAAC;IAC3B,IAAI,CAACtD,OAAO,CAACkV,SAAS,CAAC5R,MAAM,CAAC;EAClC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACInG,WAAW,CAACyB,SAAS,CAACuW,eAAe,GAAG,UAAUC,KAAK,EAAE;IACrD,IAAI9R,MAAM,GAAG,IAAIvE,wBAAwB,CAAC,CAAC;IAC3CuE,MAAM,CAAC+R,OAAO,CAAC,CAACD,KAAK,CAAC;IACtB,IAAI,CAAC7W,GAAG,CAACmF,UAAU,CAACJ,MAAM,CAAC;IAC3B,IAAI,CAACtD,OAAO,CAACkV,SAAS,CAAC5R,MAAM,CAAC;EAClC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACInG,WAAW,CAACyB,SAAS,CAACiN,OAAO,GAAG,UAAU9G,MAAM,EAAEuQ,IAAI,EAAE;IACpD,IAAI,OAAOA,IAAI,KAAK,WAAW,E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"},"metadata":{},"sourceType":"module","externalDependencies":[]}