{"ast":null,"code":"import { Observer } from '@syncfusion/ej2-base';\nimport * as CONSTANT from './constant';\nimport { Lists } from './../plugin/lists';\nimport { NodeSelection } from './../../selection/index';\nimport { DOMNode } from './../plugin/dom-node';\nimport { Formats } from './../plugin/formats';\nimport { LinkCommand } from './../plugin/link';\nimport { Alignments } from './../plugin/alignments';\nimport { Indents } from './../plugin/indents';\nimport { ImageCommand } from './../plugin/image';\nimport { AudioCommand } from './../plugin/audio';\nimport { VideoCommand } from './../plugin/video';\nimport { TableCommand } from './../plugin/table';\nimport { SelectionBasedExec } from './../plugin/selection-exec';\nimport { InsertHtmlExec } from './../plugin/inserthtml-exec';\nimport { ClearFormatExec } from './../plugin/clearformat-exec';\nimport { UndoRedoManager } from './../plugin/undo';\nimport { MsWordPaste } from '../plugin/ms-word-clean-up';\nimport * as EVENTS from './../../common/constant';\nimport { InsertTextExec } from '../plugin/insert-text';\nimport { NodeCutter } from '../plugin/nodecutter';\nimport { FormatPainterActions } from '../plugin/format-painter-actions';\nimport { EmojiPickerAction } from '../plugin/emoji-picker-action';\n/**\n * EditorManager internal component\n *\n * @hidden\n\n */\nvar EditorManager = /** @class */function () {\n  /**\n   * Constructor for creating the component\n   *\n   * @hidden\n    * @param {ICommandModel} options - specifies the command Model\n   */\n  function EditorManager(options) {\n    this.currentDocument = options.document;\n    this.editableElement = options.editableElement;\n    this.nodeSelection = new NodeSelection();\n    this.nodeCutter = new NodeCutter();\n    this.domNode = new DOMNode(this.editableElement, this.currentDocument);\n    this.observer = new Observer(this);\n    this.listObj = new Lists(this);\n    this.formatObj = new Formats(this);\n    this.alignmentObj = new Alignments(this);\n    this.indentsObj = new Indents(this);\n    this.linkObj = new LinkCommand(this);\n    this.imgObj = new ImageCommand(this);\n    this.audioObj = new AudioCommand(this);\n    this.videoObj = new VideoCommand(this);\n    this.selectionObj = new SelectionBasedExec(this);\n    this.inserthtmlObj = new InsertHtmlExec(this);\n    this.insertTextObj = new InsertTextExec(this);\n    this.clearObj = new ClearFormatExec(this);\n    this.tableObj = new TableCommand(this);\n    this.undoRedoManager = new UndoRedoManager(this, options.options);\n    this.msWordPaste = new MsWordPaste(this);\n    this.formatPainterEditor = new FormatPainterActions(this, options.formatPainterSettings);\n    this.emojiPickerObj = new EmojiPickerAction(this);\n    this.wireEvents();\n  }\n  EditorManager.prototype.wireEvents = function () {\n    this.observer.on(EVENTS.KEY_DOWN, this.editorKeyDown, this);\n    this.observer.on(EVENTS.KEY_UP, this.editorKeyUp, this);\n    this.observer.on(EVENTS.KEY_UP, this.editorKeyUp, this);\n    this.observer.on(EVENTS.MODEL_CHANGED, this.onPropertyChanged, this);\n    this.observer.on(EVENTS.MS_WORD_CLEANUP, this.onWordPaste, this);\n    this.observer.on(EVENTS.ON_BEGIN, this.onBegin, this);\n    this.observer.on(EVENTS.MOUSE_DOWN, this.editorMouseDown, this);\n  };\n  EditorManager.prototype.onWordPaste = function (e) {\n    this.observer.notify(EVENTS.MS_WORD_CLEANUP_PLUGIN, e);\n  };\n  EditorManager.prototype.onPropertyChanged = function (props) {\n    this.observer.notify(EVENTS.MODEL_CHANGED_PLUGIN, props);\n  };\n  EditorManager.prototype.editorKeyDown = function (e) {\n    this.observer.notify(EVENTS.KEY_DOWN_HANDLER, e);\n  };\n  EditorManager.prototype.editorKeyUp = function (e) {\n    this.observer.notify(EVENTS.KEY_UP_HANDLER, e);\n  };\n  EditorManager.prototype.onBegin = function (e) {\n    this.observer.notify(EVENTS.SPACE_ACTION, e);\n  };\n  /* eslint-disable */\n  /**\n   * execCommand\n   *\n   * @param {ExecCommand} command - specifies the execution command\n   * @param {T} value - specifes the value.\n   * @param {Event} event - specifies the call back event\n   * @param {Function} callBack - specifies the function\n   * @param {string} text - specifies the string value\n   * @param {T} exeValue - specifies the values to be executed\n   * @param {string} selector - specifies the selector values\n   * @returns {void}\n   * @hidden\n    */\n  /* eslint-enable */\n  EditorManager.prototype.execCommand = function (command, value, event, callBack, text, exeValue, selector, enterAction) {\n    switch (command.toLowerCase()) {\n      case 'lists':\n        this.observer.notify(EVENTS.LIST_TYPE, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          selector: selector,\n          item: exeValue,\n          enterAction: enterAction\n        });\n        break;\n      case 'formats':\n        this.observer.notify(EVENTS.FORMAT_TYPE, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          selector: selector,\n          exeValue: exeValue,\n          enterAction: enterAction\n        });\n        break;\n      case 'alignments':\n        this.observer.notify(CONSTANT.ALIGNMENT_TYPE, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          selector: selector,\n          value: exeValue\n        });\n        break;\n      case 'indents':\n        this.observer.notify(CONSTANT.INDENT_TYPE, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          selector: selector\n        });\n        break;\n      case 'links':\n        this.observer.notify(CONSTANT.LINK, {\n          command: command,\n          value: value,\n          item: exeValue,\n          event: event,\n          callBack: callBack\n        });\n        break;\n      case 'files':\n        this.observer.notify(CONSTANT.IMAGE, {\n          command: command,\n          value: 'Image',\n          item: exeValue,\n          event: event,\n          callBack: callBack,\n          selector: selector\n        });\n        break;\n      case 'images':\n        this.observer.notify(CONSTANT.IMAGE, {\n          command: command,\n          value: value,\n          item: exeValue,\n          event: event,\n          callBack: callBack,\n          selector: selector\n        });\n        break;\n      case 'audios':\n        this.observer.notify(CONSTANT.AUDIO, {\n          command: command,\n          value: value,\n          item: exeValue,\n          event: event,\n          callBack: callBack,\n          selector: selector\n        });\n        break;\n      case 'videos':\n        this.observer.notify(CONSTANT.VIDEO, {\n          command: command,\n          value: value,\n          item: exeValue,\n          event: event,\n          callBack: callBack,\n          selector: selector\n        });\n        break;\n      case 'table':\n        switch (value.toString().toLocaleLowerCase()) {\n          case 'createtable':\n            this.observer.notify(CONSTANT.TABLE, {\n              item: exeValue,\n              event: event,\n              callBack: callBack,\n              enterAction: enterAction\n            });\n            break;\n          case 'insertrowbefore':\n          case 'insertrowafter':\n            this.observer.notify(CONSTANT.INSERT_ROW, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n          case 'insertcolumnleft':\n          case 'insertcolumnright':\n            this.observer.notify(CONSTANT.INSERT_COLUMN, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n          case 'deleterow':\n            this.observer.notify(CONSTANT.DELETEROW, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n          case 'deletecolumn':\n            this.observer.notify(CONSTANT.DELETECOLUMN, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n          case 'tableremove':\n            this.observer.notify(CONSTANT.REMOVETABLE, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n          case 'tableheader':\n            this.observer.notify(CONSTANT.TABLEHEADER, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n          case 'aligntop':\n          case 'alignmiddle':\n          case 'alignbottom':\n            this.observer.notify(CONSTANT.TABLE_VERTICAL_ALIGN, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n          case 'merge':\n            this.observer.notify(CONSTANT.TABLE_MERGE, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n          case 'horizontalsplit':\n            this.observer.notify(CONSTANT.TABLE_HORIZONTAL_SPLIT, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n          case 'verticalsplit':\n            this.observer.notify(CONSTANT.TABLE_VERTICAL_SPLIT, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n        }\n        break;\n      case 'font':\n      case 'style':\n      case 'effects':\n      case 'casing':\n        this.observer.notify(CONSTANT.SELECTION_TYPE, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          value: text,\n          selector: selector,\n          enterAction: enterAction\n        });\n        break;\n      case 'inserthtml':\n        this.observer.notify(CONSTANT.INSERTHTML_TYPE, {\n          subCommand: value,\n          callBack: callBack,\n          value: text,\n          enterAction: enterAction\n        });\n        break;\n      case 'inserttext':\n        this.observer.notify(CONSTANT.INSERT_TEXT_TYPE, {\n          subCommand: value,\n          callBack: callBack,\n          value: text\n        });\n        break;\n      case 'clear':\n        this.observer.notify(CONSTANT.CLEAR_TYPE, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          selector: selector,\n          enterAction: enterAction\n        });\n        break;\n      case 'actions':\n        this.observer.notify(EVENTS.ACTION, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          selector: selector\n        });\n        break;\n      case 'formatpainter':\n        this.observer.notify(EVENTS.FORMAT_PAINTER_ACTIONS, {\n          item: exeValue,\n          subCommand: value,\n          event: event,\n          callBack: callBack\n        });\n        break;\n      case 'emojipicker':\n        this.observer.notify(EVENTS.EMOJI_PICKER_ACTIONS, {\n          item: exeValue,\n          subCommand: value,\n          value: text,\n          event: event,\n          callBack: callBack\n        });\n    }\n  };\n  EditorManager.prototype.editorMouseDown = function (e) {\n    if (e.args.detail === 3) {\n      this.tripleClickSelection(e.args);\n    }\n  };\n  EditorManager.prototype.tripleClickSelection = function (e) {\n    var range = this.nodeSelection.getRange(this.currentDocument);\n    var selection = this.nodeSelection.get(this.currentDocument);\n    if (selection.rangeCount > 0 && selection.toString() !== '') {\n      var startBlockNode = this.getParentBlockNode(range.startContainer);\n      var endBlockNode = this.getParentBlockNode(range.endContainer);\n      if (startBlockNode && endBlockNode && startBlockNode === endBlockNode) {\n        var newRange = this.currentDocument.createRange();\n        var startTextNode = this.getFirstTextNode(startBlockNode);\n        var endTextNode = this.getLastTextNode(endBlockNode);\n        if (startTextNode && endTextNode) {\n          newRange.setStart(startTextNode, 0);\n          newRange.setEnd(endTextNode, endTextNode.textContent.length);\n          this.nodeSelection.setRange(this.currentDocument, newRange);\n          e.preventDefault();\n        }\n      }\n    }\n  };\n  EditorManager.prototype.getParentBlockNode = function (node) {\n    var treeWalker = this.currentDocument.createTreeWalker(this.editableElement,\n    // root\n    NodeFilter.SHOW_ELEMENT,\n    // whatToShow\n    {\n      acceptNode: function (currentNode) {\n        // Check if the node is a block element\n        var displayStyle = window.getComputedStyle(currentNode).display;\n        if (displayStyle.indexOf('inline') < 0) {\n          return NodeFilter.FILTER_ACCEPT;\n        } else {\n          return NodeFilter.FILTER_SKIP;\n        }\n      }\n    });\n    treeWalker.currentNode = node;\n    var blockParent = treeWalker.parentNode();\n    return blockParent;\n  };\n  EditorManager.prototype.getLastTextNode = function (node) {\n    var treeWalker = this.currentDocument.createTreeWalker(node, NodeFilter.SHOW_TEXT, null);\n    var lastTextNode = null;\n    var currentNode = treeWalker.nextNode();\n    while (currentNode) {\n      lastTextNode = currentNode;\n      currentNode = treeWalker.nextNode();\n    }\n    return lastTextNode;\n  };\n  EditorManager.prototype.getFirstTextNode = function (node) {\n    var treeWalker = this.currentDocument.createTreeWalker(node, NodeFilter.SHOW_TEXT, null);\n    var firstTextNode = treeWalker.nextNode();\n    return firstTextNode;\n  };\n  return EditorManager;\n}();\nexport { EditorManager };","map":{"version":3,"names":["Observer","CONSTANT","Lists","NodeSelection","DOMNode","Formats","LinkCommand","Alignments","Indents","ImageCommand","AudioCommand","VideoCommand","TableCommand","SelectionBasedExec","InsertHtmlExec","ClearFormatExec","UndoRedoManager","MsWordPaste","EVENTS","InsertTextExec","NodeCutter","FormatPainterActions","EmojiPickerAction","EditorManager","options","currentDocument","document","editableElement","nodeSelection","nodeCutter","domNode","observer","listObj","formatObj","alignmentObj","indentsObj","linkObj","imgObj","audioObj","videoObj","selectionObj","inserthtmlObj","insertTextObj","clearObj","tableObj","undoRedoManager","msWordPaste","formatPainterEditor","formatPainterSettings","emojiPickerObj","wireEvents","prototype","on","KEY_DOWN","editorKeyDown","KEY_UP","editorKeyUp","MODEL_CHANGED","onPropertyChanged","MS_WORD_CLEANUP","onWordPaste","ON_BEGIN","onBegin","MOUSE_DOWN","editorMouseDown","e","notify","MS_WORD_CLEANUP_PLUGIN","props","MODEL_CHANGED_PLUGIN","KEY_DOWN_HANDLER","KEY_UP_HANDLER","SPACE_ACTION","execCommand","command","value","event","callBack","text","exeValue","selector","enterAction","toLowerCase","LIST_TYPE","subCommand","item","FORMAT_TYPE","ALIGNMENT_TYPE","INDENT_TYPE","LINK","IMAGE","AUDIO","VIDEO","toString","toLocaleLowerCase","TABLE","INSERT_ROW","INSERT_COLUMN","DELETEROW","DELETECOLUMN","REMOVETABLE","TABLEHEADER","TABLE_VERTICAL_ALIGN","TABLE_MERGE","TABLE_HORIZONTAL_SPLIT","TABLE_VERTICAL_SPLIT","SELECTION_TYPE","INSERTHTML_TYPE","INSERT_TEXT_TYPE","CLEAR_TYPE","ACTION","FORMAT_PAINTER_ACTIONS","EMOJI_PICKER_ACTIONS","args","detail","tripleClickSelection","range","getRange","selection","get","rangeCount","startBlockNode","getParentBlockNode","startContainer","endBlockNode","endContainer","newRange","createRange","startTextNode","getFirstTextNode","endTextNode","getLastTextNode","setStart","setEnd","textContent","length","setRange","preventDefault","node","treeWalker","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","currentNode","displayStyle","window","getComputedStyle","display","indexOf","FILTER_ACCEPT","FILTER_SKIP","blockParent","parentNode","SHOW_TEXT","lastTextNode","nextNode","firstTextNode"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/base/editor-manager.js"],"sourcesContent":["import { Observer } from '@syncfusion/ej2-base';\nimport * as CONSTANT from './constant';\nimport { Lists } from './../plugin/lists';\nimport { NodeSelection } from './../../selection/index';\nimport { DOMNode } from './../plugin/dom-node';\nimport { Formats } from './../plugin/formats';\nimport { LinkCommand } from './../plugin/link';\nimport { Alignments } from './../plugin/alignments';\nimport { Indents } from './../plugin/indents';\nimport { ImageCommand } from './../plugin/image';\nimport { AudioCommand } from './../plugin/audio';\nimport { VideoCommand } from './../plugin/video';\nimport { TableCommand } from './../plugin/table';\nimport { SelectionBasedExec } from './../plugin/selection-exec';\nimport { InsertHtmlExec } from './../plugin/inserthtml-exec';\nimport { ClearFormatExec } from './../plugin/clearformat-exec';\nimport { UndoRedoManager } from './../plugin/undo';\nimport { MsWordPaste } from '../plugin/ms-word-clean-up';\nimport * as EVENTS from './../../common/constant';\nimport { InsertTextExec } from '../plugin/insert-text';\nimport { NodeCutter } from '../plugin/nodecutter';\nimport { FormatPainterActions } from '../plugin/format-painter-actions';\nimport { EmojiPickerAction } from '../plugin/emoji-picker-action';\n/**\n * EditorManager internal component\n *\n * @hidden\n\n */\nvar EditorManager = /** @class */ (function () {\n    /**\n     * Constructor for creating the component\n     *\n     * @hidden\n\n     * @param {ICommandModel} options - specifies the command Model\n     */\n    function EditorManager(options) {\n        this.currentDocument = options.document;\n        this.editableElement = options.editableElement;\n        this.nodeSelection = new NodeSelection();\n        this.nodeCutter = new NodeCutter();\n        this.domNode = new DOMNode(this.editableElement, this.currentDocument);\n        this.observer = new Observer(this);\n        this.listObj = new Lists(this);\n        this.formatObj = new Formats(this);\n        this.alignmentObj = new Alignments(this);\n        this.indentsObj = new Indents(this);\n        this.linkObj = new LinkCommand(this);\n        this.imgObj = new ImageCommand(this);\n        this.audioObj = new AudioCommand(this);\n        this.videoObj = new VideoCommand(this);\n        this.selectionObj = new SelectionBasedExec(this);\n        this.inserthtmlObj = new InsertHtmlExec(this);\n        this.insertTextObj = new InsertTextExec(this);\n        this.clearObj = new ClearFormatExec(this);\n        this.tableObj = new TableCommand(this);\n        this.undoRedoManager = new UndoRedoManager(this, options.options);\n        this.msWordPaste = new MsWordPaste(this);\n        this.formatPainterEditor = new FormatPainterActions(this, options.formatPainterSettings);\n        this.emojiPickerObj = new EmojiPickerAction(this);\n        this.wireEvents();\n    }\n    EditorManager.prototype.wireEvents = function () {\n        this.observer.on(EVENTS.KEY_DOWN, this.editorKeyDown, this);\n        this.observer.on(EVENTS.KEY_UP, this.editorKeyUp, this);\n        this.observer.on(EVENTS.KEY_UP, this.editorKeyUp, this);\n        this.observer.on(EVENTS.MODEL_CHANGED, this.onPropertyChanged, this);\n        this.observer.on(EVENTS.MS_WORD_CLEANUP, this.onWordPaste, this);\n        this.observer.on(EVENTS.ON_BEGIN, this.onBegin, this);\n        this.observer.on(EVENTS.MOUSE_DOWN, this.editorMouseDown, this);\n    };\n    EditorManager.prototype.onWordPaste = function (e) {\n        this.observer.notify(EVENTS.MS_WORD_CLEANUP_PLUGIN, e);\n    };\n    EditorManager.prototype.onPropertyChanged = function (props) {\n        this.observer.notify(EVENTS.MODEL_CHANGED_PLUGIN, props);\n    };\n    EditorManager.prototype.editorKeyDown = function (e) {\n        this.observer.notify(EVENTS.KEY_DOWN_HANDLER, e);\n    };\n    EditorManager.prototype.editorKeyUp = function (e) {\n        this.observer.notify(EVENTS.KEY_UP_HANDLER, e);\n    };\n    EditorManager.prototype.onBegin = function (e) {\n        this.observer.notify(EVENTS.SPACE_ACTION, e);\n    };\n    /* eslint-disable */\n    /**\n     * execCommand\n     *\n     * @param {ExecCommand} command - specifies the execution command\n     * @param {T} value - specifes the value.\n     * @param {Event} event - specifies the call back event\n     * @param {Function} callBack - specifies the function\n     * @param {string} text - specifies the string value\n     * @param {T} exeValue - specifies the values to be executed\n     * @param {string} selector - specifies the selector values\n     * @returns {void}\n     * @hidden\n\n     */\n    /* eslint-enable */\n    EditorManager.prototype.execCommand = function (command, value, event, callBack, text, exeValue, selector, enterAction) {\n        switch (command.toLowerCase()) {\n            case 'lists':\n                this.observer.notify(EVENTS.LIST_TYPE, { subCommand: value, event: event, callBack: callBack,\n                    selector: selector, item: exeValue, enterAction: enterAction });\n                break;\n            case 'formats':\n                this.observer.notify(EVENTS.FORMAT_TYPE, { subCommand: value, event: event, callBack: callBack,\n                    selector: selector, exeValue: exeValue, enterAction: enterAction\n                });\n                break;\n            case 'alignments':\n                this.observer.notify(CONSTANT.ALIGNMENT_TYPE, {\n                    subCommand: value, event: event, callBack: callBack,\n                    selector: selector,\n                    value: exeValue\n                });\n                break;\n            case 'indents':\n                this.observer.notify(CONSTANT.INDENT_TYPE, { subCommand: value, event: event, callBack: callBack, selector: selector });\n                break;\n            case 'links':\n                this.observer.notify(CONSTANT.LINK, { command: command, value: value, item: exeValue, event: event, callBack: callBack });\n                break;\n            case 'files':\n                this.observer.notify(CONSTANT.IMAGE, {\n                    command: command, value: 'Image', item: exeValue, event: event, callBack: callBack, selector: selector\n                });\n                break;\n            case 'images':\n                this.observer.notify(CONSTANT.IMAGE, {\n                    command: command, value: value, item: exeValue, event: event, callBack: callBack, selector: selector\n                });\n                break;\n            case 'audios':\n                this.observer.notify(CONSTANT.AUDIO, {\n                    command: command, value: value, item: exeValue, event: event, callBack: callBack, selector: selector\n                });\n                break;\n            case 'videos':\n                this.observer.notify(CONSTANT.VIDEO, {\n                    command: command, value: value, item: exeValue, event: event, callBack: callBack, selector: selector\n                });\n                break;\n            case 'table':\n                switch (value.toString().toLocaleLowerCase()) {\n                    case 'createtable':\n                        this.observer.notify(CONSTANT.TABLE, { item: exeValue, event: event, callBack: callBack, enterAction: enterAction });\n                        break;\n                    case 'insertrowbefore':\n                    case 'insertrowafter':\n                        this.observer.notify(CONSTANT.INSERT_ROW, { item: exeValue, event: event, callBack: callBack });\n                        break;\n                    case 'insertcolumnleft':\n                    case 'insertcolumnright':\n                        this.observer.notify(CONSTANT.INSERT_COLUMN, { item: exeValue, event: event, callBack: callBack });\n                        break;\n                    case 'deleterow':\n                        this.observer.notify(CONSTANT.DELETEROW, { item: exeValue, event: event, callBack: callBack });\n                        break;\n                    case 'deletecolumn':\n                        this.observer.notify(CONSTANT.DELETECOLUMN, { item: exeValue, event: event, callBack: callBack });\n                        break;\n                    case 'tableremove':\n                        this.observer.notify(CONSTANT.REMOVETABLE, { item: exeValue, event: event, callBack: callBack });\n                        break;\n                    case 'tableheader':\n                        this.observer.notify(CONSTANT.TABLEHEADER, { item: exeValue, event: event, callBack: callBack });\n                        break;\n                    case 'aligntop':\n                    case 'alignmiddle':\n                    case 'alignbottom':\n                        this.observer.notify(CONSTANT.TABLE_VERTICAL_ALIGN, { item: exeValue, event: event, callBack: callBack });\n                        break;\n                    case 'merge':\n                        this.observer.notify(CONSTANT.TABLE_MERGE, { item: exeValue, event: event, callBack: callBack });\n                        break;\n                    case 'horizontalsplit':\n                        this.observer.notify(CONSTANT.TABLE_HORIZONTAL_SPLIT, { item: exeValue, event: event, callBack: callBack });\n                        break;\n                    case 'verticalsplit':\n                        this.observer.notify(CONSTANT.TABLE_VERTICAL_SPLIT, { item: exeValue, event: event, callBack: callBack });\n                        break;\n                }\n                break;\n            case 'font':\n            case 'style':\n            case 'effects':\n            case 'casing':\n                this.observer.notify(CONSTANT.SELECTION_TYPE, { subCommand: value, event: event, callBack: callBack, value: text, selector: selector, enterAction: enterAction });\n                break;\n            case 'inserthtml':\n                this.observer.notify(CONSTANT.INSERTHTML_TYPE, { subCommand: value, callBack: callBack, value: text, enterAction: enterAction });\n                break;\n            case 'inserttext':\n                this.observer.notify(CONSTANT.INSERT_TEXT_TYPE, { subCommand: value, callBack: callBack, value: text });\n                break;\n            case 'clear':\n                this.observer.notify(CONSTANT.CLEAR_TYPE, { subCommand: value, event: event, callBack: callBack, selector: selector, enterAction: enterAction });\n                break;\n            case 'actions':\n                this.observer.notify(EVENTS.ACTION, { subCommand: value, event: event, callBack: callBack, selector: selector });\n                break;\n            case 'formatpainter':\n                this.observer.notify(EVENTS.FORMAT_PAINTER_ACTIONS, { item: exeValue, subCommand: value, event: event, callBack: callBack });\n                break;\n            case 'emojipicker':\n                this.observer.notify(EVENTS.EMOJI_PICKER_ACTIONS, { item: exeValue, subCommand: value, value: text,\n                    event: event, callBack: callBack });\n        }\n    };\n    EditorManager.prototype.editorMouseDown = function (e) {\n        if (e.args.detail === 3) {\n            this.tripleClickSelection(e.args);\n        }\n    };\n    EditorManager.prototype.tripleClickSelection = function (e) {\n        var range = this.nodeSelection.getRange(this.currentDocument);\n        var selection = this.nodeSelection.get(this.currentDocument);\n        if (selection.rangeCount > 0 && selection.toString() !== '') {\n            var startBlockNode = this.getParentBlockNode(range.startContainer);\n            var endBlockNode = this.getParentBlockNode(range.endContainer);\n            if (startBlockNode && endBlockNode && startBlockNode === endBlockNode) {\n                var newRange = this.currentDocument.createRange();\n                var startTextNode = this.getFirstTextNode(startBlockNode);\n                var endTextNode = this.getLastTextNode(endBlockNode);\n                if (startTextNode && endTextNode) {\n                    newRange.setStart(startTextNode, 0);\n                    newRange.setEnd(endTextNode, endTextNode.textContent.length);\n                    this.nodeSelection.setRange(this.currentDocument, newRange);\n                    e.preventDefault();\n                }\n            }\n        }\n    };\n    EditorManager.prototype.getParentBlockNode = function (node) {\n        var treeWalker = this.currentDocument.createTreeWalker(this.editableElement, // root\n        NodeFilter.SHOW_ELEMENT, // whatToShow\n        {\n            acceptNode: function (currentNode) {\n                // Check if the node is a block element\n                var displayStyle = window.getComputedStyle(currentNode).display;\n                if (displayStyle.indexOf('inline') < 0) {\n                    return NodeFilter.FILTER_ACCEPT;\n                }\n                else {\n                    return NodeFilter.FILTER_SKIP;\n                }\n            }\n        });\n        treeWalker.currentNode = node;\n        var blockParent = treeWalker.parentNode();\n        return blockParent;\n    };\n    EditorManager.prototype.getLastTextNode = function (node) {\n        var treeWalker = this.currentDocument.createTreeWalker(node, NodeFilter.SHOW_TEXT, null);\n        var lastTextNode = null;\n        var currentNode = treeWalker.nextNode();\n        while (currentNode) {\n            lastTextNode = currentNode;\n            currentNode = treeWalker.nextNode();\n        }\n        return lastTextNode;\n    };\n    EditorManager.prototype.getFirstTextNode = function (node) {\n        var treeWalker = this.currentDocument.createTreeWalker(node, NodeFilter.SHOW_TEXT, null);\n        var firstTextNode = treeWalker.nextNode();\n        return firstTextNode;\n    };\n    return EditorManager;\n}());\nexport { EditorManager };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}