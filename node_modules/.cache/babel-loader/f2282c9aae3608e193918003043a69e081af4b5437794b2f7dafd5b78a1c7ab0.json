{"ast":null,"code":"import { _PdfName } from './../pdf-primitives';\nimport { _PdfBaseStream, _PdfContentStream } from './../base-stream';\nimport { PdfGraphics } from './pdf-graphics';\nimport { _toRectangle } from './../utils';\n/**\n * `PdfTemplate` class represents the template of the PDF.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Get the first page\n * let page: PdfPage = document.getPage(0) as PdfPage;\n * // Create a new rubber stamp annotation\n * const annotation: PdfRubberStampAnnotation = new PdfRubberStampAnnotation(50, 100, 100, 50);\n * // Get the normal appearance of the annotation\n * let normalAppearance: PdfTemplate = annotation.appearance.normal;\n * // Create new image object by using JPEG image data as Base64 string format\n * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n * // Draw the image as the custom appearance for the annotation\n * normalAppearance.graphics.drawImage(image, 0, 0, 100, 50);\n * // Add annotation to the page\n * page.annotations.add(annotation);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfTemplate = /** @class */function () {\n  function PdfTemplate(value, crossReference) {\n    this._crossReference = crossReference;\n    if (value instanceof _PdfBaseStream) {\n      this._content = value;\n      if (!this._content.dictionary.has('Type') || !this._content.dictionary.has('Subtype')) {\n        this._initialize();\n      }\n      var bounds = this._content.dictionary.getArray('BBox');\n      if (bounds && bounds.length > 3) {\n        var rect = _toRectangle(bounds);\n        this._size = [rect.width, rect.height];\n      }\n      this._isReadOnly = true;\n    } else {\n      this._size = [value[2], value[3]];\n      this._content = new _PdfContentStream([]);\n      this._content.dictionary._crossReference = this._crossReference;\n      this._initialize();\n      this._content.dictionary.set('BBox', [value[0], value[1], value[0] + value[2], value[1] + value[3]]);\n    }\n    this._writeTransformation = true;\n  }\n  Object.defineProperty(PdfTemplate.prototype, \"graphics\", {\n    /**\n     * Get the graphics of the PDF template.\n     *\n     * @returns {PdfGraphics} The graphics object of the PDF template.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Get the first page\n     * let page: PdfPage = document.getPage(0) as PdfPage;\n     * // Create a new rubber stamp annotation\n     * const annotation: PdfRubberStampAnnotation = new PdfRubberStampAnnotation(50, 100, 100, 50);\n     * // Access the graphics of the normal appearance\n     * let graphics: PdfGraphics = annotation.appearance.normal.graphics;\n     * // Create new image object by using JPEG image data as Base64 string format\n     * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n     * // Draw the image as the custom appearance for the annotation\n     * graphics.drawImage(image, 0, 0, 100, 50);\n     * // Add annotation to the page\n     * page.annotations.add(annotation);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (this._isReadOnly) {\n        return null;\n      }\n      if (typeof this._g === 'undefined') {\n        this._g = new PdfGraphics(this._size, this._content, this._crossReference, this);\n        if (this._writeTransformation) {\n          this._g._initializeCoordinates();\n        }\n        this._g._isTemplateGraphics = true;\n      }\n      return this._g;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfTemplate.prototype._initialize = function () {\n    this._content.dictionary.set('Type', _PdfName.get('XObject'));\n    this._content.dictionary.set('Subtype', _PdfName.get('Form'));\n  };\n  return PdfTemplate;\n}();\nexport { PdfTemplate };","map":{"version":3,"names":["_PdfName","_PdfBaseStream","_PdfContentStream","PdfGraphics","_toRectangle","PdfTemplate","value","crossReference","_crossReference","_content","dictionary","has","_initialize","bounds","getArray","length","rect","_size","width","height","_isReadOnly","set","_writeTransformation","Object","defineProperty","prototype","get","_g","_initializeCoordinates","_isTemplateGraphics","enumerable","configurable"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/pdf-template.js"],"sourcesContent":["import { _PdfName } from './../pdf-primitives';\nimport { _PdfBaseStream, _PdfContentStream } from './../base-stream';\nimport { PdfGraphics } from './pdf-graphics';\nimport { _toRectangle } from './../utils';\n/**\n * `PdfTemplate` class represents the template of the PDF.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Get the first page\n * let page: PdfPage = document.getPage(0) as PdfPage;\n * // Create a new rubber stamp annotation\n * const annotation: PdfRubberStampAnnotation = new PdfRubberStampAnnotation(50, 100, 100, 50);\n * // Get the normal appearance of the annotation\n * let normalAppearance: PdfTemplate = annotation.appearance.normal;\n * // Create new image object by using JPEG image data as Base64 string format\n * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n * // Draw the image as the custom appearance for the annotation\n * normalAppearance.graphics.drawImage(image, 0, 0, 100, 50);\n * // Add annotation to the page\n * page.annotations.add(annotation);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfTemplate = /** @class */ (function () {\n    function PdfTemplate(value, crossReference) {\n        this._crossReference = crossReference;\n        if (value instanceof _PdfBaseStream) {\n            this._content = value;\n            if (!this._content.dictionary.has('Type') || !this._content.dictionary.has('Subtype')) {\n                this._initialize();\n            }\n            var bounds = this._content.dictionary.getArray('BBox');\n            if (bounds && bounds.length > 3) {\n                var rect = _toRectangle(bounds);\n                this._size = [rect.width, rect.height];\n            }\n            this._isReadOnly = true;\n        }\n        else {\n            this._size = [value[2], value[3]];\n            this._content = new _PdfContentStream([]);\n            this._content.dictionary._crossReference = this._crossReference;\n            this._initialize();\n            this._content.dictionary.set('BBox', [value[0], value[1], value[0] + value[2], value[1] + value[3]]);\n        }\n        this._writeTransformation = true;\n    }\n    Object.defineProperty(PdfTemplate.prototype, \"graphics\", {\n        /**\n         * Get the graphics of the PDF template.\n         *\n         * @returns {PdfGraphics} The graphics object of the PDF template.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the first page\n         * let page: PdfPage = document.getPage(0) as PdfPage;\n         * // Create a new rubber stamp annotation\n         * const annotation: PdfRubberStampAnnotation = new PdfRubberStampAnnotation(50, 100, 100, 50);\n         * // Access the graphics of the normal appearance\n         * let graphics: PdfGraphics = annotation.appearance.normal.graphics;\n         * // Create new image object by using JPEG image data as Base64 string format\n         * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n         * // Draw the image as the custom appearance for the annotation\n         * graphics.drawImage(image, 0, 0, 100, 50);\n         * // Add annotation to the page\n         * page.annotations.add(annotation);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (this._isReadOnly) {\n                return null;\n            }\n            if (typeof this._g === 'undefined') {\n                this._g = new PdfGraphics(this._size, this._content, this._crossReference, this);\n                if (this._writeTransformation) {\n                    this._g._initializeCoordinates();\n                }\n                this._g._isTemplateGraphics = true;\n            }\n            return this._g;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfTemplate.prototype._initialize = function () {\n        this._content.dictionary.set('Type', _PdfName.get('XObject'));\n        this._content.dictionary.set('Subtype', _PdfName.get('Form'));\n    };\n    return PdfTemplate;\n}());\nexport { PdfTemplate };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}