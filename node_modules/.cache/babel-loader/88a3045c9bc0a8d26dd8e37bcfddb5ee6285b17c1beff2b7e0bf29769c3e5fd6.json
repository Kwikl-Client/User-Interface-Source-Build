{"ast":null,"code":"import * as events from '../base/constant';\nimport { Workbook } from '@syncfusion/ej2-excel-export';\nimport { isNullOrUndefined, getEnumValue, compile, getValue, detach, extend } from '@syncfusion/ej2-base';\nimport { Data } from '../actions/data';\nimport { ExportHelper, ExportValueFormatter } from './export-helper';\nimport { SummaryModelGenerator, GroupSummaryModelGenerator, CaptionSummaryModelGenerator } from '../services/summary-model-generator';\nimport { CellType } from '../base/enum';\nimport { Query, DataManager } from '@syncfusion/ej2-data';\nimport { getPrintGridModel, getUid, isExportColumns, updateColumnTypeForExportColumns, prepareColumns, measureColumnDepth } from '../base/util';\nimport { defaultCurrencyCode } from '@syncfusion/ej2-base';\n/**\n * @hidden\n * `ExcelExport` module is used to handle the Excel export action.\n */\nvar ExcelExport = /** @class */function () {\n  /**\n   * Constructor for the Grid Excel Export module.\n   *\n   * @param {IGrid} parent - specifies the IGrid\n   * @param {ServiceLocator} locator - specifies the ServiceLocator\n   * @hidden\n   */\n  function ExcelExport(parent, locator) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.book = {};\n    this.workSheet = [];\n    this.rows = [];\n    this.columns = [];\n    this.styles = [];\n    this.rowLength = 1;\n    this.expType = 'AppendToSheet';\n    this.includeHiddenColumn = false;\n    this.isCsvExport = false;\n    this.isChild = false;\n    this.isElementIdChanged = false;\n    this.gridPool = {};\n    this.sheet = {};\n    this.grpFooterTemplates = [];\n    this.footerTemplates = [];\n    this.aggIndex = 0;\n    this.totalAggregates = 0;\n    this.parent = parent;\n    this.helper = new ExportHelper(parent);\n    this.locator = locator;\n    this.l10n = this.locator.getService('localization');\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {string} returns the module name\n   */\n  ExcelExport.prototype.getModuleName = function () {\n    return 'ExcelExport';\n  };\n  ExcelExport.prototype.init = function (gObj) {\n    if (gObj.element !== null && gObj.element.id === '') {\n      gObj.element.id = new Date().toISOString();\n      this.isElementIdChanged = true;\n    }\n    this.parent = gObj;\n    if (this.parent.isDestroyed) {\n      return;\n    }\n    this.isExporting = undefined;\n    this.book = {};\n    this.workSheet = [];\n    this.rows = [];\n    this.columns = [];\n    this.styles = [];\n    this.rowLength = 1;\n    this.footer = undefined;\n    this.expType = 'AppendToSheet';\n    this.includeHiddenColumn = false;\n    this.exportValueFormatter = new ExportValueFormatter(gObj.locale);\n    gObj.id = getUid('main-grid');\n    this.gridPool[gObj.id] = false;\n  };\n  /**\n   * Export Grid to Excel file.\n   *\n   * @param {IGrid} grid - Defines the grid.\n   * @param  {exportProperties} exportProperties - Defines the export properties of the Grid.\n   * @param  {isMultipleExport} isMultipleExport - Defines is multiple Grid's are exported.\n   * @param  {Workbook} workbook - Defined the Workbook if multiple Grid is exported.\n   * @param  {boolean} isCsv - true if export to CSV.\n   * @param {boolean} isBlob - true if isBlob is enabled.\n   * @returns {Promise<any>} - Returns the map for export.\n   */\n  // eslint-disable-next-line\n  ExcelExport.prototype.Map = function (grid, exportProperties, isMultipleExport, workbook, isCsv, isBlob) {\n    var gObj = grid;\n    var cancel = 'cancel';\n    var isBlb = 'isBlob';\n    var Child = 'isChild';\n    var csv = 'isCsv';\n    var workbk = 'workbook';\n    var isMultiEx = 'isMultipleExport';\n    this.gridPool = {};\n    if ((grid.childGrid || grid.detailTemplate) && !(!isNullOrUndefined(exportProperties) && exportProperties.hierarchyExportMode === 'None')) {\n      grid.expandedRows = getPrintGridModel(grid).expandedRows;\n    }\n    var args = {\n      requestType: 'beforeExcelExport',\n      gridObject: gObj,\n      cancel: false,\n      isMultipleExport: isMultipleExport,\n      workbook: workbook,\n      isCsv: isCsv,\n      isBlob: isBlob,\n      isChild: this.isChild,\n      grpFooterTemplates: this.grpFooterTemplates\n    };\n    gObj.trigger(events.beforeExcelExport, args);\n    if (args[\"\" + cancel]) {\n      return new Promise(function (resolve) {\n        return resolve();\n      });\n    }\n    this.parent.log('exporting_begin', this.getModuleName());\n    this.data = new Data(gObj);\n    this.isExporting = true;\n    this.isBlob = args[\"\" + isBlb];\n    this.isChild = args[\"\" + Child];\n    this.grpFooterTemplates = args['grpFooterTemplates'];\n    if (args[\"\" + csv]) {\n      this.isCsvExport = args[\"\" + csv];\n    } else {\n      this.isCsvExport = false;\n    }\n    if (isExportColumns(exportProperties)) {\n      updateColumnTypeForExportColumns(exportProperties, gObj);\n    }\n    return this.processRecords(gObj, exportProperties, args[\"\" + isMultiEx], args[\"\" + workbk]);\n  };\n  ExcelExport.prototype.exportingSuccess = function (resolve) {\n    this.isExporting = false;\n    this.parent.trigger(events.excelExportComplete, this.isBlob ? {\n      promise: this.blobPromise\n    } : {\n      gridInstance: this.parent\n    });\n    this.parent.log('exporting_complete', this.getModuleName());\n    resolve(this.book);\n  };\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ExcelExport.prototype.processRecords = function (gObj, exportProperties, isMultipleExport, workbook) {\n    var _this = this;\n    if (gObj.allowGrouping && gObj.groupSettings.enableLazyLoading && gObj.groupSettings.columns.length) {\n      if (isNullOrUndefined(exportProperties)) {\n        exportProperties = {\n          hierarchyExportMode: 'All'\n        };\n      } else {\n        exportProperties.hierarchyExportMode = exportProperties.hierarchyExportMode || 'All';\n      }\n    }\n    if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource)) {\n      exportProperties.dataSource = exportProperties.dataSource instanceof DataManager ? exportProperties.dataSource : new DataManager(exportProperties.dataSource);\n      var query_1 = exportProperties.query ? exportProperties.query : new Query();\n      if (isNullOrUndefined(query_1.isCountRequired) || gObj.aggregates) {\n        query_1.isCountRequired = true;\n      }\n      return new Promise(function (resolve) {\n        var dataManager = exportProperties.dataSource.executeQuery(query_1);\n        dataManager.then(function (r) {\n          _this.init(gObj);\n          _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, r).then(function () {\n            _this.exportingSuccess(resolve);\n          });\n        });\n      });\n    } else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n      return new Promise(function (resolve) {\n        _this.init(gObj);\n        _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, _this.parent.getCurrentViewRecords());\n        _this.exportingSuccess(resolve);\n      });\n    } else {\n      var allPromise_1 = [];\n      allPromise_1.push(this.data.getData({}, ExportHelper.getQuery(gObj, this.data)));\n      allPromise_1.push(this.helper.getColumnData(gObj));\n      return new Promise(function (resolve, reject) {\n        Promise.all(allPromise_1).then(function (e) {\n          _this.init(gObj);\n          _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, e[0]).then(function () {\n            _this.exportingSuccess(resolve);\n          });\n        }).catch(function (e) {\n          reject(_this.book);\n          _this.parent.trigger(events.actionFailure, e);\n        });\n      });\n    }\n  };\n  ExcelExport.prototype.processInnerRecords = function (gObj, exportProperties,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  isMultipleExport, workbook, r) {\n    var _this = this;\n    this.groupedColLength = gObj.groupSettings.columns.length;\n    var blankRows = 5;\n    var separator;\n    var rows = [];\n    var colDepth = measureColumnDepth(gObj.columns);\n    var isExportPropertiesPresent = !isNullOrUndefined(exportProperties);\n    if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.multipleExport)) {\n      this.expType = !isNullOrUndefined(exportProperties.multipleExport.type) ? exportProperties.multipleExport.type : 'AppendToSheet';\n      if (!isNullOrUndefined(exportProperties.multipleExport.blankRows)) {\n        blankRows = exportProperties.multipleExport.blankRows;\n      }\n    }\n    if (isNullOrUndefined(workbook)) {\n      this.workSheet = [];\n      this.rows = [];\n      this.columns = [];\n      this.styles = [];\n      this.sheet.images = [];\n    } else if (this.expType === 'NewSheet') {\n      this.workSheet = workbook.worksheets;\n      this.rows = [];\n      this.columns = [];\n      this.sheet.images = [];\n      this.styles = workbook.styles;\n    } else {\n      this.workSheet = [];\n      this.rows = workbook.worksheets[0].rows;\n      this.columns = workbook.worksheets[0].columns;\n      this.styles = workbook.styles;\n      this.sheet.images = workbook.worksheets[0].images;\n      this.rowLength = this.rows[this.rows.length - 1].index + blankRows;\n      this.rowLength++;\n    }\n    if (isExportPropertiesPresent) {\n      if (!isNullOrUndefined(isMultipleExport)) {\n        if (!isNullOrUndefined(exportProperties.header) && (isMultipleExport || this.expType === 'NewSheet')) {\n          this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n        }\n        if (!isNullOrUndefined(exportProperties.footer)) {\n          if (this.expType === 'AppendToSheet') {\n            if (!isMultipleExport) {\n              this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n            }\n          } else {\n            this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n          }\n        }\n      } else {\n        if (!isNullOrUndefined(exportProperties.header)) {\n          this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n        }\n        if (!isNullOrUndefined(exportProperties.footer)) {\n          this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n        }\n      }\n    }\n    this.includeHiddenColumn = isExportPropertiesPresent ? exportProperties.includeHiddenColumn : false;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    return new Promise(function (resolve, reject) {\n      gObj.childGridLevel = 0;\n      rows = _this.processGridExport(gObj, exportProperties, r);\n      _this.globalResolve = resolve;\n      _this.gridPool[gObj.id] = true;\n      _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n    }).then(function () {\n      var organisedRows = [];\n      _this.organiseRows(rows, rows[0].index, organisedRows);\n      _this.rows = _this.rows.concat(organisedRows);\n      //footer template add\n      if (!isNullOrUndefined(_this.footer)) {\n        if (_this.expType === 'AppendToSheet' && !isMultipleExport || _this.expType === 'NewSheet') {\n          _this.processExcelFooter(_this.footer);\n        }\n      }\n      if (_this.columns.length > 0) {\n        _this.sheet.columns = _this.columns;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      _this.sheet.rows = _this.rows;\n      _this.sheet.enableRtl = _this.parent.enableRtl;\n      if (_this.parent.allowFiltering && gObj.getVisibleColumns().length && isExportPropertiesPresent && exportProperties.enableFilter) {\n        var headerRowLen = exportProperties.header ? exportProperties.header.headerRows || exportProperties.header.rows.length : 0;\n        var autoFilters = {\n          row: colDepth + headerRowLen,\n          column: _this.groupedColLength ? _this.groupedColLength + 1 : _this.sheet.columns[0].index,\n          lastRow: _this.sheet.rows.length,\n          lastColumn: _this.sheet.columns.length\n        };\n        _this.sheet.autoFilters = autoFilters;\n      }\n      _this.workSheet.push(_this.sheet);\n      _this.book.worksheets = _this.workSheet;\n      _this.book.styles = _this.styles;\n      gObj.notify('finalPageSetup', _this.book);\n      if (!isMultipleExport) {\n        if (_this.isCsvExport) {\n          if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.separator) && exportProperties.separator !== ',') {\n            separator = exportProperties.separator;\n          }\n          var book = new Workbook(_this.book, 'csv', gObj.locale, defaultCurrencyCode, separator);\n          if (!_this.isBlob) {\n            if (isExportPropertiesPresent && exportProperties.fileName) {\n              book.save(exportProperties.fileName);\n            } else {\n              book.save('Export.csv');\n            }\n          } else {\n            _this.blobPromise = book.saveAsBlob('text/csv');\n          }\n        } else {\n          var book = new Workbook(_this.book, 'xlsx', gObj.locale, defaultCurrencyCode);\n          if (!_this.isBlob) {\n            if (isExportPropertiesPresent && exportProperties.fileName) {\n              book.save(exportProperties.fileName);\n            } else {\n              book.save('Export.xlsx');\n            }\n          } else {\n            _this.blobPromise = book.saveAsBlob('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n          }\n        }\n        if (_this.isElementIdChanged) {\n          gObj.element.id = '';\n        }\n        delete gObj.expandedRows;\n      }\n      return workbook;\n    });\n  };\n  ExcelExport.prototype.organiseRows = function (rows, initialIndex, organisedRows) {\n    if (!rows.length) {\n      return initialIndex;\n    }\n    for (var i = 0; i < rows.length; i++) {\n      var row = rows[parseInt(i.toString(), 10)];\n      var childRows = row.childRows;\n      if (childRows) {\n        row.index = initialIndex++;\n        delete row.childRows;\n        organisedRows.push(row);\n        initialIndex = this.organiseRows(childRows, initialIndex, organisedRows);\n      } else {\n        row.index = initialIndex++;\n        organisedRows.push(row);\n      }\n    }\n    return initialIndex;\n  };\n  ExcelExport.prototype.processGridExport = function (gObj, exportProperties, r) {\n    var excelRows = [];\n    if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.theme)) {\n      this.theme = exportProperties.theme;\n    }\n    if ((gObj.childGrid || gObj.detailTemplate) && !isNullOrUndefined(exportProperties)) {\n      gObj.hierarchyPrintMode = exportProperties.hierarchyExportMode || 'Expanded';\n    }\n    var helper = new ExportHelper(gObj, this.helper.getForeignKeyData());\n    var gColumns = isExportColumns(exportProperties) ? prepareColumns(exportProperties.columns, gObj.enableColumnVirtualization) : helper.getGridExportColumns(gObj.columns);\n    var headerRow = helper.getHeaders(gColumns, this.includeHiddenColumn);\n    var groupIndent = gObj.groupSettings.columns.length ? gObj.groupSettings.columns.length - 1 : 0;\n    excelRows = this.processHeaderContent(gObj, headerRow, groupIndent, excelRows);\n    if (!isNullOrUndefined(exportProperties) && Object.keys(exportProperties).length && isNullOrUndefined(exportProperties.dataSource)) {\n      if (exportProperties.exportType === 'CurrentPage' && (!gObj.groupSettings.enableLazyLoading || gObj.getDataModule().isRemote())) {\n        excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, gObj.currentViewData, excelRows, helper);\n      } else if (gObj.groupSettings.enableLazyLoading && !gObj.getDataModule().isRemote()) {\n        var groupData = void 0;\n        if (!isNullOrUndefined(exportProperties) && Object.keys(exportProperties).length) {\n          var isAllPage = exportProperties.exportType === 'CurrentPage' ? false : true;\n          var groupQuery = gObj.getDataModule().generateQuery(isAllPage);\n          var lazyloadData = gObj.getDataModule().dataManager.executeLocal(groupQuery);\n          groupQuery.lazyLoad = [];\n          var fName = 'fn';\n          if (!isAllPage) {\n            for (var i = 0; i < groupQuery.queries.length; i++) {\n              if (groupQuery.queries[parseInt(i.toString(), 10)]['' + fName] === 'onPage') {\n                groupQuery.queries[parseInt(i.toString(), 10)].e.pageSize = lazyloadData.reduce(function (acc, curr) {\n                  return acc + curr['count'];\n                }, 0);\n              }\n            }\n          }\n          if (exportProperties.hierarchyExportMode === 'All') {\n            groupData = gObj.getDataModule().dataManager.executeLocal(groupQuery);\n          } else if (exportProperties.hierarchyExportMode === 'Expanded' || exportProperties.hierarchyExportMode === 'None' || isNullOrUndefined(exportProperties.hierarchyExportMode)) {\n            groupData = gObj.getDataModule().dataManager.executeLocal(groupQuery);\n            var lazQuery = this.parent.contentModule.lazyLoadQuery;\n            for (var i = 0; i < lazQuery.length; i++) {\n              var query = lazQuery[parseInt(i.toString(), 10)];\n              var where = query[0];\n              for (var j = 0; j < groupData.length; j++) {\n                var data = groupData[parseInt(j.toString(), 10)];\n                if (data['key'] === where['value']) {\n                  lazyloadData[parseInt(i.toString(), 10)] = groupData[parseInt(j.toString(), 10)];\n                }\n              }\n            }\n            groupData = lazyloadData;\n          }\n        } else {\n          groupData = gObj.currentViewData;\n        }\n        excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, groupData, excelRows, helper);\n      } else {\n        excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, undefined, excelRows, helper);\n      }\n    } else {\n      excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, undefined, excelRows, helper);\n    }\n    gObj.notify(events.exportDataBound, {\n      excelRows: excelRows,\n      type: 'excel'\n    });\n    this.capTemplate = undefined;\n    this.footerTemplates = [];\n    this.grpFooterTemplates = [];\n    this.aggIndex = 0;\n    this.totalAggregates = 0;\n    return excelRows;\n  };\n  ExcelExport.prototype.processRecordContent = function (gObj, returnType, headerRow, exportProperties, currentViewRecords, excelRow, helper) {\n    var record;\n    if (!isNullOrUndefined(currentViewRecords) && currentViewRecords.length) {\n      record = currentViewRecords;\n    } else {\n      record = returnType.result;\n    }\n    if (!isNullOrUndefined(record.level)) {\n      this.processGroupedRows(gObj, record, headerRow, record.level, 0, exportProperties, excelRow, helper);\n    } else {\n      this.processRecordRows(gObj, record, headerRow, 0, 0, exportProperties, excelRow, helper);\n    }\n    if (!isNullOrUndefined(returnType.aggregates) && Object.keys(returnType.aggregates).length > 0) {\n      if (!isNullOrUndefined(currentViewRecords) && !this.parent.groupSettings.enableLazyLoading) {\n        this.processAggregates(gObj, returnType.result, excelRow, currentViewRecords);\n      } else {\n        var result = returnType.result.GroupGuid ? returnType.result.records : returnType.result;\n        this.processAggregates(gObj, result, excelRow);\n      }\n    }\n    return excelRow;\n  };\n  ExcelExport.prototype.processGroupedRows = function (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  gObj, dataSource, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n    for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {\n      var item = dataSource_1[_i];\n      var cells = [];\n      var index = 1;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var cell = {};\n      cell.index = index + level - 1;\n      var col = gObj.getColumnByField(item.field);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var args = {\n        value: item.key,\n        column: col,\n        style: undefined,\n        isForeignKey: col.isForeignColumn()\n      };\n      var value = gObj.getColumnByField(item.field).headerText + ': ' + (!col.enableGroupByFormat ? this.exportValueFormatter.formatCellValue(args) : item.key) + ' - ';\n      if (item.count > 1) {\n        value += item.count + ' items';\n      } else {\n        value += item.count + ' item';\n      }\n      var cArgs = {\n        captionText: value,\n        type: this.isCsvExport ? 'CSV' : 'Excel',\n        data: item\n      };\n      this.parent.trigger(events.exportGroupCaption, cArgs);\n      cell.value = cArgs.captionText;\n      cell.style = this.getCaptionThemeStyle(this.theme);\n      if (!isNullOrUndefined(cArgs.style)) {\n        cell.style = this.mergeOptions(cell.style, cArgs.style);\n      }\n      var captionModelGen = new CaptionSummaryModelGenerator(gObj);\n      var groupCaptionSummaryRows = captionModelGen.generateRows(item);\n      this.fillAggregates(gObj, groupCaptionSummaryRows, dataSource.level + dataSource.childLevels - 1, excelRows, this.rowLength);\n      cells.push(cell);\n      if (excelRows[excelRows.length - 1].cells.length > 0) {\n        var lIndex = dataSource.level + dataSource.childLevels + groupCaptionSummaryRows[0].cells.length;\n        var hIndex = 0;\n        for (var _a = 0, _b = excelRows[excelRows.length - 1].cells; _a < _b.length; _a++) {\n          var tCell = _b[_a];\n          if (tCell.index < lIndex) {\n            lIndex = tCell.index;\n          }\n          if (tCell.index > hIndex) {\n            hIndex = tCell.index;\n          }\n          if (cells[cells.length - 1].index !== tCell.index) {\n            cells.push(tCell);\n          }\n        }\n        if (lIndex - cell.index > 1) {\n          cell.colSpan = lIndex - cell.index;\n        }\n        while (hIndex < headerRow.columns.length + level + dataSource.childLevels) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          var sCell = {};\n          sCell.index = hIndex + 1;\n          sCell.style = this.getCaptionThemeStyle(this.theme);\n          cells.push(sCell);\n          hIndex++;\n        }\n      } else {\n        var span = 0;\n        //Calculation for column span when group caption dont have aggregates\n        for (var _c = 0, _d = headerRow.columns; _c < _d.length; _c++) {\n          var col_1 = _d[_c];\n          if (col_1.visible) {\n            span++;\n          }\n        }\n        cell.colSpan = dataSource.childLevels + span;\n      }\n      excelRows[excelRows.length - 1].cells = cells;\n      this.rowLength++;\n      if (this.groupedColLength < 8 && level > 1) {\n        var grouping = {\n          outlineLevel: level - 1,\n          isCollapsed: true\n        };\n        excelRows[excelRows.length - 1].grouping = grouping;\n      }\n      if (!isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {\n        this.processGroupedRows(gObj, item.items, headerRow, item.items.level, startIndex, excelExportProperties, excelRows, helper);\n        this.processAggregates(gObj, item, excelRows, undefined, level - 1 + dataSource.childLevels, true);\n      } else {\n        startIndex = this.processRecordRows(gObj, item.items, headerRow, level - 1, startIndex, excelExportProperties, excelRows, helper);\n        this.processAggregates(gObj, item, excelRows, undefined, level - 1, true);\n      }\n    }\n  };\n  ExcelExport.prototype.processRecordRows = function (gObj, record, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n    var index = 1;\n    var cells = [];\n    var columns = headerRow.columns;\n    var rows = helper.getGridRowModel(columns, record, gObj, startIndex);\n    for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n      var row = rows_1[_i];\n      cells = [];\n      startIndex++;\n      index = 1;\n      var templateRowHeight = void 0;\n      for (var c = 0, len = row.cells.length; c < len; c++) {\n        var gCell = row.cells[parseInt(c.toString(), 10)];\n        if (gCell.cellType !== CellType.Data) {\n          continue;\n        }\n        var column = gCell.column;\n        var field = column.field;\n        var cellValue = !isNullOrUndefined(field) ? column.valueAccessor(field, row.data, column) : '';\n        var value = !isNullOrUndefined(cellValue) ? cellValue : '';\n        if (column.type === 'dateonly' && typeof value === 'string' && value) {\n          var arr = value.split(/[^0-9.]/);\n          value = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10));\n        }\n        var fkData = void 0;\n        if (column.isForeignColumn && column.isForeignColumn()) {\n          fkData = helper.getFData(value, column);\n          value = getValue(column.foreignKeyValue, fkData);\n        }\n        if (!isNullOrUndefined(value)) {\n          var cell = {};\n          var idx = index + level + gObj.childGridLevel;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          var excelCellArgs = {\n            data: row.data,\n            column: column,\n            foreignKeyData: fkData,\n            value: value,\n            style: undefined,\n            colSpan: 1,\n            cell: cell\n          };\n          gObj.trigger(events.excelQueryCellInfo, excelCellArgs);\n          if (!isNullOrUndefined(excelCellArgs.image) && !isNullOrUndefined(excelCellArgs.image.base64)) {\n            templateRowHeight = this.setImage(excelCellArgs, idx);\n            if (excelCellArgs.image.height && excelCellArgs.value !== '') {\n              templateRowHeight += 30;\n            }\n          }\n          if (!isNullOrUndefined(excelCellArgs.hyperLink)) {\n            excelCellArgs.cell.hyperlink = {\n              target: excelCellArgs.hyperLink.target\n            };\n            excelCellArgs.value = excelCellArgs.hyperLink.displayText || excelCellArgs.value;\n          }\n          cell = excelCellArgs.cell;\n          cell.index = idx;\n          cell.value = excelCellArgs.value;\n          if (excelCellArgs.data === '' && gObj.childGridLevel && index === 1) {\n            var style = {};\n            style.hAlign = 'left';\n            excelCellArgs = {\n              style: style\n            };\n            cell.colSpan = gObj.getVisibleColumns().length;\n            cell.value = this.l10n.getConstant('EmptyRecord');\n          }\n          if (excelCellArgs.colSpan > 1) {\n            cell.colSpan = excelCellArgs.colSpan;\n          }\n          if (!isNullOrUndefined(excelCellArgs.style)) {\n            var styleIndex = this.getColumnStyle(gObj, index + level);\n            cell.style = this.mergeOptions(this.styles[parseInt(styleIndex.toString(), 10)], excelCellArgs.style);\n          } else {\n            cell.style = {\n              name: gObj.element.id + 'column' + (index + level)\n            };\n          }\n          cells.push(cell);\n        }\n        index++;\n      }\n      var excelRow = {\n        index: this.rowLength++,\n        cells: cells\n      };\n      if (!isNullOrUndefined(templateRowHeight)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        excelRow.height = templateRowHeight;\n      }\n      if (this.groupedColLength && this.groupedColLength < 8 && level + 1 > 0) {\n        excelRow.grouping = {\n          outlineLevel: level + 1,\n          isCollapsed: true\n        };\n        excelRows.push(excelRow);\n      } else {\n        excelRows.push(excelRow);\n      }\n      if ((row.isExpand || this.isChild) && (!isNullOrUndefined(gObj.childGrid) || !isNullOrUndefined(gObj.detailTemplate))) {\n        if (!isNullOrUndefined(gObj.childGrid)) {\n          gObj.isPrinting = true;\n          var exportType = !isNullOrUndefined(excelExportProperties) && excelExportProperties.exportType ? excelExportProperties.exportType : 'AllPages';\n          var returnVal = this.helper.createChildGrid(gObj, row, exportType, this.gridPool);\n          var childGridObj = returnVal.childGrid;\n          var element = returnVal.element;\n          childGridObj.actionFailure = helper.failureHandler(this.gridPool, childGridObj, this.globalResolve);\n          childGridObj.childGridLevel = gObj.childGridLevel + 1;\n          var args = {\n            childGrid: childGridObj,\n            row: row,\n            exportProperties: excelExportProperties\n          };\n          this.parent.trigger(events.exportDetailDataBound, args);\n          childGridObj.beforeDataBound = this.childGridCell(excelRow, childGridObj, excelExportProperties, row);\n          childGridObj.appendTo(element);\n        } else {\n          var args = {\n            parentRow: row,\n            row: excelRow,\n            value: {},\n            action: 'excelexport',\n            gridInstance: gObj\n          };\n          this.parent.trigger(events.exportDetailTemplate, args);\n          excelRow.childRows = this.processDetailTemplate(args);\n        }\n      }\n      gObj.notify(events.exportRowDataBound, {\n        rowObj: row,\n        type: 'excel',\n        excelRows: excelRows\n      });\n    }\n    return startIndex;\n  };\n  ExcelExport.prototype.processDetailTemplate = function (templateData) {\n    var _this = this;\n    var rows = [];\n    var templateRowHeight;\n    var detailIndent = 2;\n    var detailCellIndex;\n    if (templateData.value.columnHeader || templateData.value.rows) {\n      var processCell_1 = function (currentCell, isHeader) {\n        var cell = {};\n        if (isNullOrUndefined(currentCell.index)) {\n          currentCell.index = detailCellIndex;\n          detailCellIndex++;\n        }\n        cell.index = currentCell.index + detailIndent;\n        if (!isNullOrUndefined(currentCell.value)) {\n          cell.value = currentCell.value;\n        }\n        if (!isNullOrUndefined(currentCell.colSpan)) {\n          cell.colSpan = currentCell.colSpan;\n        }\n        if (!isNullOrUndefined(currentCell.rowSpan)) {\n          cell.rowSpan = currentCell.rowSpan;\n        }\n        if (isHeader) {\n          cell.style = _this.getHeaderThemeStyle(_this.theme);\n        } else {\n          cell.style = _this.getRecordThemeStyle(_this.theme);\n        }\n        if (!isNullOrUndefined(currentCell.style)) {\n          var cellStyle = {\n            fontColor: currentCell.style.fontColor,\n            fontName: currentCell.style.fontName,\n            fontSize: currentCell.style.fontSize,\n            hAlign: currentCell.style.excelHAlign,\n            vAlign: currentCell.style.excelVAlign,\n            rotation: currentCell.style.excelRotation,\n            bold: currentCell.style.bold,\n            indent: currentCell.style.indent,\n            italic: currentCell.style.italic,\n            underline: currentCell.style.underline,\n            backColor: currentCell.style.backColor,\n            wrapText: currentCell.style.wrapText,\n            borders: currentCell.style.excelBorders,\n            numberFormat: currentCell.style.excelNumberFormat,\n            type: currentCell.style.excelType,\n            strikeThrough: currentCell.style.strikeThrough\n          };\n          cell.style = _this.mergeOptions(cellStyle, cell.style);\n        }\n        if (!isNullOrUndefined(currentCell.image) && !isNullOrUndefined(currentCell.image.base64)) {\n          if (currentCell.rowSpan > 1) {\n            _this.setImage(currentCell, cell.index);\n          } else {\n            templateRowHeight = _this.setImage(currentCell, cell.index);\n            if (currentCell.image.height && currentCell.value !== '') {\n              templateRowHeight += 30;\n            }\n          }\n        }\n        if (!isNullOrUndefined(currentCell.hyperLink)) {\n          cell.hyperlink = {\n            target: currentCell.hyperLink.target\n          };\n          cell.value = currentCell.hyperLink.displayText;\n        }\n        return cell;\n      };\n      var processRow = function (currentRow, isHeader) {\n        var excelDetailCells = [];\n        detailCellIndex = 0;\n        for (var j = 0; j < currentRow.cells.length; j++) {\n          var currentCell = currentRow.cells[parseInt(j.toString(), 10)];\n          var detailCell = processCell_1(currentCell, isHeader);\n          excelDetailCells.push(detailCell);\n        }\n        var row = {\n          index: _this.rowLength++,\n          cells: excelDetailCells\n        };\n        if (!isNullOrUndefined(templateRowHeight)) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          row.height = templateRowHeight;\n          templateRowHeight = null;\n        }\n        rows.push(row);\n      };\n      if (templateData.value.columnHeader) {\n        for (var i = 0; i < templateData.value.columnHeader.length; i++) {\n          processRow(templateData.value.columnHeader[parseInt(i.toString(), 10)], true);\n        }\n      }\n      if (templateData.value.rows) {\n        for (var i = 0; i < templateData.value.rows.length; i++) {\n          processRow(templateData.value.rows[parseInt(i.toString(), 10)]);\n        }\n      }\n    } else if (templateData.value.image) {\n      templateRowHeight = this.setImage(templateData.value, detailIndent);\n      var row = {\n        index: this.rowLength++,\n        cells: [{\n          index: detailIndent,\n          style: this.getRecordThemeStyle(this.theme)\n        }]\n      };\n      if (!isNullOrUndefined(templateRowHeight)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        row.height = templateRowHeight;\n        templateRowHeight = null;\n      }\n      rows.push(row);\n    } else if (templateData.value.text) {\n      var row = {\n        index: this.rowLength++,\n        cells: [{\n          index: detailIndent,\n          value: templateData.value.text,\n          style: this.getRecordThemeStyle(this.theme)\n        }]\n      };\n      rows.push(row);\n    } else if (templateData.value.hyperLink) {\n      var row = {\n        index: this.rowLength++,\n        cells: [{\n          index: 2,\n          hyperlink: {\n            target: templateData.value.hyperLink.target\n          },\n          value: templateData.value.hyperLink.displayText,\n          style: this.getRecordThemeStyle(this.theme)\n        }]\n      };\n      rows.push(row);\n    }\n    for (var i = 0; i < rows.length; i++) {\n      rows[parseInt(i.toString(), 10)].grouping = {\n        outlineLevel: 1,\n        isCollapsed: !templateData.parentRow.isExpand,\n        isHidden: !templateData.parentRow.isExpand\n      };\n    }\n    return rows;\n  };\n  ExcelExport.prototype.setImage = function (args, idx) {\n    if (isNullOrUndefined(this.sheet.images)) {\n      this.sheet.images = [];\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var excelImage = {\n      image: args.image.base64,\n      row: this.rowLength,\n      column: idx,\n      lastRow: this.rowLength,\n      lastColumn: idx\n    };\n    if (args.image.width && args.image.height) {\n      excelImage.width = args.image.width;\n      excelImage.height = args.image.height;\n    }\n    this.sheet.images.push(excelImage);\n    this.columns[idx - 1].width = args.image.width || this.columns[idx - 1].width;\n    return args.image.height || 50;\n  };\n  ExcelExport.prototype.childGridCell = function (excelRow, childGridObj, excelExportProps, gRow) {\n    var _this = this;\n    return function (result) {\n      childGridObj.beforeDataBound = null;\n      result.cancel = true;\n      if (result.result.length === 0) {\n        result.result = [''];\n      }\n      excelRow.childRows = _this.processGridExport(childGridObj, excelExportProps, result);\n      var intent = _this.parent.groupSettings.columns.length;\n      var rows = excelRow.childRows;\n      for (var i = 0; i < rows.length; i++) {\n        rows[parseInt(i.toString(), 10)].grouping = {\n          outlineLevel: intent + childGridObj.childGridLevel,\n          isCollapsed: !gRow.isExpand,\n          isHidden: !gRow.isExpand\n        };\n      }\n      childGridObj.destroy();\n      detach(childGridObj.element);\n      _this.gridPool[childGridObj.id] = true;\n      _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n      return excelRow;\n    };\n  };\n  ExcelExport.prototype.processAggregates = function (gObj, rec, excelRows, currentViewRecords, indent, byGroup) {\n    var summaryModel = new SummaryModelGenerator(gObj);\n    var columns = summaryModel.getColumns();\n    columns = columns.filter(function (col) {\n      return isNullOrUndefined(col.commands) && col.type !== 'checkbox';\n    });\n    if (gObj.aggregates.length && this.parent !== gObj) {\n      gObj.aggregateModule.prepareSummaryInfo();\n    }\n    var data = undefined;\n    if (!isNullOrUndefined(currentViewRecords)) {\n      data = currentViewRecords;\n    } else {\n      data = rec;\n    }\n    if (indent === undefined) {\n      indent = 0;\n    }\n    if (gObj.groupSettings.columns.length > 0 && byGroup) {\n      var groupSummaryModel = new GroupSummaryModelGenerator(gObj);\n      var groupSummaryRows = groupSummaryModel.generateRows(data, {\n        level: data.level\n      });\n      if (groupSummaryRows.length > 0) {\n        excelRows = this.fillAggregates(gObj, groupSummaryRows, indent, excelRows);\n      }\n    } else {\n      indent = gObj.groupSettings.columns.length > 0 && !byGroup ? gObj.groupSettings.columns.length : indent;\n      var sRows = summaryModel.generateRows(data, rec.aggregates, null, null, columns);\n      if (sRows.length > 0 && !byGroup) {\n        indent = gObj.groupSettings.columns.length ? indent - 1 : indent;\n        excelRows = this.fillAggregates(gObj, sRows, indent, excelRows);\n      }\n    }\n    return excelRows;\n  };\n  ExcelExport.prototype.fillAggregates = function (gObj, rows, indent, excelRows, customIndex) {\n    for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {\n      var row = rows_2[_i];\n      var cells = [];\n      var isEmpty = true;\n      var index = 0;\n      for (var _a = 0, _b = row.cells; _a < _b.length; _a++) {\n        var cell = _b[_a];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var eCell = {};\n        var columnsDetails = {};\n        if (!isNullOrUndefined(cell.attributes.index)) {\n          columnsDetails = this.parent.getColumnByIndex(cell.attributes.index);\n        }\n        if (cell.cellType === CellType.DetailFooterIntent || columnsDetails.type === 'checkbox') {\n          continue;\n        }\n        if (cell.visible || this.includeHiddenColumn) {\n          index++;\n          if (cell.isDataCell) {\n            isEmpty = false;\n            var footerTemplate = !isNullOrUndefined(cell.column.footerTemplate);\n            var groupFooterTemplate = !isNullOrUndefined(cell.column.groupFooterTemplate);\n            var groupCaptionTemplate = !isNullOrUndefined(cell.column.groupCaptionTemplate);\n            eCell.index = index + indent + gObj.childGridLevel;\n            if (footerTemplate) {\n              eCell.value = this.getAggreateValue(gObj, CellType.Summary, cell.column.footerTemplate, cell, row);\n            } else if (groupFooterTemplate) {\n              eCell.value = this.getAggreateValue(gObj, CellType.GroupSummary, cell.column.groupFooterTemplate, cell, row);\n            } else if (groupCaptionTemplate) {\n              eCell.value = this.getAggreateValue(gObj, CellType.CaptionSummary, cell.column.groupCaptionTemplate, cell, row);\n            } else {\n              for (var _c = 0, _d = Object.keys(row.data[cell.column.field]); _c < _d.length; _c++) {\n                var key = _d[_c];\n                if (key === cell.column.type) {\n                  if (!isNullOrUndefined(row.data[cell.column.field].Sum)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - sum\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Average)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - average\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Max)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - max\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Min)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - min\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Count)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - count\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].TrueCount)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - truecount\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].FalseCount)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - falsecount\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Custom)) {\n                    eCell.value = row.data[cell.column.field].Custom;\n                  }\n                }\n              }\n            }\n            eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n            this.aggregateStyle(cell.column, eCell.style, cell.column.field);\n            var gridCellStyle = cell.attributes.style;\n            if (gridCellStyle.textAlign) {\n              eCell.style.hAlign = gridCellStyle.textAlign.toLowerCase();\n            }\n            var args = {\n              row: row,\n              type: footerTemplate ? 'Footer' : groupFooterTemplate ? 'GroupFooter' : 'GroupCaption',\n              style: eCell,\n              cell: cell\n            };\n            this.parent.trigger(events.excelAggregateQueryCellInfo, args);\n            cells.push(eCell);\n          } else {\n            if (customIndex === undefined) {\n              eCell.index = index + indent + gObj.childGridLevel;\n              eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n              cells.push(eCell);\n            }\n          }\n        }\n      }\n      if (!isNullOrUndefined(customIndex)) {\n        excelRows.push({\n          index: customIndex,\n          cells: cells\n        });\n      } else {\n        var row_1 = {};\n        var dummyOutlineLevel = 'outlineLevel';\n        var dummyGrouping = 'grouping';\n        if (this.groupedColLength < 8 && this.groupedColLength > 0 && !(gObj.groupSettings.enableLazyLoading && isNullOrUndefined(excelRows[excelRows.length - 1][\"\" + dummyGrouping]))) {\n          var level = excelRows[excelRows.length - 1][\"\" + dummyGrouping][\"\" + dummyOutlineLevel];\n          var grouping = {\n            outlineLevel: level,\n            isCollapsed: true\n          };\n          row_1 = {\n            index: this.rowLength++,\n            cells: cells,\n            grouping: grouping\n          };\n        } else {\n          row_1 = {\n            index: this.rowLength++,\n            cells: cells\n          };\n        }\n        if (!isEmpty) {\n          excelRows.push(row_1);\n        }\n      }\n    }\n    return excelRows;\n  };\n  ExcelExport.prototype.aggregateStyle = function (col, style, field) {\n    var column = this.parent.getColumnByField(field);\n    if (typeof col.format === 'object') {\n      var format = col.format;\n      style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n      if (!isNullOrUndefined(format.type)) {\n        style.type = format.type.toLowerCase();\n      }\n    } else {\n      style.numberFormat = col.format;\n    }\n    if (!isNullOrUndefined(column) && isNullOrUndefined(style.type)) {\n      style.type = column.type.toLowerCase();\n    }\n  };\n  ExcelExport.prototype.getAggreateValue = function (gObj, cellType, template, cell, row) {\n    var templateFn = {};\n    templateFn[getEnumValue(CellType, cell.cellType)] = compile(template);\n    var txt;\n    var data = row.data[cell.column.field ? cell.column.field : cell.column.columnName];\n    if ((this.parent.isReact || this.parent.isVue || this.parent.isVue3 || this.parent.isAngular) && !(typeof cell.column.footerTemplate === 'string' || typeof cell.column.groupFooterTemplate === 'string' || typeof cell.column.groupCaptionTemplate === 'string')) {\n      txt = data[cell.column.type];\n      return !isNullOrUndefined(txt) ? txt : '';\n    } else {\n      txt = templateFn[getEnumValue(CellType, cell.cellType)](data);\n    }\n    return !isNullOrUndefined(txt[0]) ? txt[0].textContent : '';\n  };\n  ExcelExport.prototype.mergeOptions = function (JSON1, JSON2) {\n    var result = {};\n    var attrname = Object.keys(JSON1);\n    for (var index = 0; index < attrname.length; index++) {\n      if (attrname[parseInt(index.toString(), 10)] !== 'name') {\n        result[attrname[parseInt(index.toString(), 10)]] = JSON1[attrname[parseInt(index.toString(), 10)]];\n      }\n    }\n    attrname = Object.keys(JSON2);\n    for (var index = 0; index < attrname.length; index++) {\n      if (attrname[parseInt(index.toString(), 10)] !== 'name') {\n        result[attrname[parseInt(index.toString(), 10)]] = JSON2[attrname[parseInt(index.toString(), 10)]];\n      }\n    }\n    return result;\n  };\n  ExcelExport.prototype.getColumnStyle = function (gObj, columnIndex) {\n    var index = 0;\n    for (var _i = 0, _a = this.styles; _i < _a.length; _i++) {\n      var style = _a[_i];\n      if (style.name === gObj.element.id + 'column' + columnIndex) {\n        return index;\n      }\n      index++;\n    }\n    return undefined;\n  };\n  ExcelExport.prototype.headerRotation = function (args) {\n    var degree = args.style.rotation;\n    if (degree <= 90 && degree >= 0) {\n      args.style.hAlign = 'Left';\n    } else if (degree > 90 && degree <= 180) {\n      args.style.hAlign = 'Right';\n    } else {\n      degree = 180;\n      args.style.hAlign = 'Right';\n    }\n    args.style.rotation = degree;\n  };\n  ExcelExport.prototype.processHeaderContent = function (gObj, headerRow, indent, excelRows) {\n    var rowIndex = 1;\n    var gridRows = headerRow.rows;\n    // Column collection with respect to the records in the grid\n    var gridColumns = headerRow.columns;\n    var spannedCells = [];\n    if (indent > 0) {\n      var index = 0;\n      while (index !== indent) {\n        this.columns.push({\n          index: index + 1,\n          width: 30\n        });\n        index++;\n      }\n    }\n    for (var col = 0; col < gridColumns.length; col++) {\n      this.parseStyles(gObj, gridColumns[parseInt(col.toString(), 10)], this.getRecordThemeStyle(this.theme), indent + col + 1);\n    }\n    var templateRowHeight;\n    for (var row = 0; row < gridRows.length; row++) {\n      var currentCellIndex = 1 + indent;\n      var cells = [];\n      for (var column = 0; column < gridRows[parseInt(row.toString(), 10)].cells.length; column++) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var style = {};\n        var cell = {};\n        var gridCell = gridRows[parseInt(row.toString(), 10)].cells[parseInt(column.toString(), 10)];\n        if (gridCell.cellType === CellType.HeaderIndent || gridCell.cellType === CellType.DetailHeader) {\n          continue;\n        }\n        var result = {\n          contains: true,\n          index: 1\n        };\n        while (result.contains) {\n          result = this.getIndex(spannedCells, rowIndex, currentCellIndex);\n          currentCellIndex = result.index;\n          if (!result.contains) {\n            cell.index = result.index + gObj.childGridLevel;\n            break;\n          }\n        }\n        if (!isNullOrUndefined(gridCell.rowSpan) && gridCell.rowSpan !== 1) {\n          cell.rowSpan = gridCell.rowSpan;\n          for (var i = rowIndex; i < gridCell.rowSpan + rowIndex; i++) {\n            var spannedCell = {\n              rowIndex: 0,\n              columnIndex: 0\n            };\n            spannedCell.rowIndex = i;\n            spannedCell.columnIndex = currentCellIndex;\n            spannedCells.push(spannedCell);\n          }\n        }\n        if (!isNullOrUndefined(gridCell.colSpan) && gridCell.colSpan !== 1) {\n          cell.colSpan = gridCell.colSpan;\n          currentCellIndex = currentCellIndex + cell.colSpan - 1;\n        }\n        cell.value = gridCell.column.headerText;\n        style = this.getHeaderThemeStyle(this.theme);\n        if (!isNullOrUndefined(gridCell.column.textAlign)) {\n          style.hAlign = gridCell.column.textAlign.toLowerCase();\n        }\n        if (!isNullOrUndefined(gridCell.column.headerTextAlign)) {\n          style.hAlign = gridCell.column.headerTextAlign.toLowerCase();\n        }\n        var excelHeaderCellArgs = {\n          cell: cell,\n          gridCell: gridCell,\n          style: style\n        };\n        gObj.trigger(events.excelHeaderQueryCellInfo, excelHeaderCellArgs);\n        if (excelHeaderCellArgs.style.rotation) {\n          this.headerRotation(excelHeaderCellArgs);\n        }\n        if (!isNullOrUndefined(excelHeaderCellArgs.image) && !isNullOrUndefined(excelHeaderCellArgs.image.base64)) {\n          templateRowHeight = this.setImage(excelHeaderCellArgs, currentCellIndex);\n        }\n        if (!isNullOrUndefined(excelHeaderCellArgs.hyperLink)) {\n          excelHeaderCellArgs.cell.hyperlink = {\n            target: excelHeaderCellArgs.hyperLink.target\n          };\n          cell.value = excelHeaderCellArgs.hyperLink.displayText || cell.value;\n        }\n        cell.style = excelHeaderCellArgs.style;\n        cells.push(cell);\n        currentCellIndex++;\n      }\n      var excelRow = {\n        index: this.rowLength++,\n        cells: cells\n      };\n      if (!isNullOrUndefined(templateRowHeight)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        excelRow.height = templateRowHeight;\n      }\n      excelRows.push(excelRow);\n    }\n    return excelRows;\n  };\n  ExcelExport.prototype.getHeaderThemeStyle = function (theme) {\n    var style = {};\n    style.fontSize = 12;\n    style.borders = {\n      color: '#E0E0E0'\n    };\n    style.bold = true;\n    if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.header)) {\n      style = this.updateThemeStyle(theme.header, style);\n    }\n    return style;\n  };\n  ExcelExport.prototype.updateThemeStyle = function (themestyle, style) {\n    return extend(style, themestyle);\n  };\n  ExcelExport.prototype.getCaptionThemeStyle = function (theme) {\n    var style = {};\n    style.fontSize = 13;\n    style.backColor = '#F6F6F6';\n    if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.caption)) {\n      style = this.updateThemeStyle(theme.caption, style);\n    }\n    return style;\n  };\n  ExcelExport.prototype.getRecordThemeStyle = function (theme) {\n    var style = {};\n    style.fontSize = 13;\n    style.borders = {\n      color: '#E0E0E0'\n    };\n    if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.record)) {\n      style = this.updateThemeStyle(theme.record, style);\n    }\n    return style;\n  };\n  ExcelExport.prototype.processExcelHeader = function (header) {\n    if (!isNullOrUndefined(header.rows) && (this.expType === 'NewSheet' || this.rowLength === 1)) {\n      var noRows = void 0;\n      if (header.headerRows === undefined) {\n        this.rowLength = header.rows.length;\n      } else {\n        this.rowLength = header.headerRows;\n      }\n      if (this.rowLength < header.rows.length) {\n        noRows = this.rowLength;\n      } else {\n        noRows = header.rows.length;\n      }\n      this.rowLength++;\n      for (var row = 0; row < noRows; row++) {\n        var json = header.rows[parseInt(row.toString(), 10)];\n        //Row index\n        if (!(json.index !== null && !isNullOrUndefined(json.index))) {\n          json.index = row + 1;\n        }\n        this.updatedCellIndex(json);\n      }\n    }\n  };\n  ExcelExport.prototype.updatedCellIndex = function (json) {\n    var cellsLength = json.cells.length;\n    for (var cellId = 0; cellId < cellsLength; cellId++) {\n      var jsonCell = json.cells[parseInt(cellId.toString(), 10)];\n      //cell index\n      if (!(jsonCell.index !== null && !isNullOrUndefined(jsonCell.index))) {\n        jsonCell.index = cellId + 1;\n      }\n    }\n    this.rows.push(json);\n  };\n  ExcelExport.prototype.processExcelFooter = function (footer) {\n    if (!isNullOrUndefined(footer.rows)) {\n      var noRows = void 0;\n      if (footer.footerRows === undefined) {\n        this.rowLength += footer.rows.length;\n      } else {\n        if (footer.footerRows > footer.rows.length) {\n          this.rowLength += footer.footerRows - footer.rows.length;\n          noRows = footer.rows.length;\n        } else {\n          noRows = footer.footerRows;\n        }\n      }\n      for (var row = 0; row < noRows; row++) {\n        var json = footer.rows[parseInt(row.toString(), 10)];\n        //Row index\n        if (json.index === null || json.index === undefined) {\n          json.index = this.rowLength++;\n        } else {\n          json.index += this.rowLength;\n        }\n        this.updatedCellIndex(json);\n      }\n    }\n  };\n  ExcelExport.prototype.getIndex = function (spannedCells, rowIndex, columnIndex) {\n    for (var _i = 0, spannedCells_1 = spannedCells; _i < spannedCells_1.length; _i++) {\n      var spannedCell = spannedCells_1[_i];\n      if (spannedCell.rowIndex === rowIndex && spannedCell.columnIndex === columnIndex) {\n        columnIndex = columnIndex + 1;\n        return {\n          contains: true,\n          index: columnIndex\n        };\n      }\n    }\n    return {\n      contains: false,\n      index: columnIndex\n    };\n  };\n  ExcelExport.prototype.parseStyles = function (gObj, col, style, index) {\n    if (!isNullOrUndefined(col.format)) {\n      if (typeof col.format === 'object') {\n        var format = col.format;\n        style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n        if (!isNullOrUndefined(format.type)) {\n          style.type = format.type === 'dateonly' ? 'date' : format.type.toLowerCase();\n        }\n      } else {\n        style.numberFormat = col.format;\n        style.type = col.type === 'dateonly' ? 'date' : col.type;\n      }\n    }\n    if (!isNullOrUndefined(col.textAlign)) {\n      style.hAlign = col.textAlign.toLowerCase();\n    }\n    if (Object.keys(style).length > 0) {\n      style.name = gObj.element.id + 'column' + index;\n      this.styles.push(style);\n    }\n    if (!isNullOrUndefined(col.width) && col.width !== 'auto' && !gObj.childGridLevel) {\n      this.columns.push({\n        index: index + gObj.childGridLevel,\n        width: typeof col.width === 'number' ? col.width : this.helper.getConvertedWidth(col.width)\n      });\n    }\n  };\n  ExcelExport.prototype.destroy = function () {\n    //destroy for exporting\n  };\n  return ExcelExport;\n}();\nexport { ExcelExport };","map":{"version":3,"names":["events","Workbook","isNullOrUndefined","getEnumValue","compile","getValue","detach","extend","Data","ExportHelper","ExportValueFormatter","SummaryModelGenerator","GroupSummaryModelGenerator","CaptionSummaryModelGenerator","CellType","Query","DataManager","getPrintGridModel","getUid","isExportColumns","updateColumnTypeForExportColumns","prepareColumns","measureColumnDepth","defaultCurrencyCode","ExcelExport","parent","locator","book","workSheet","rows","columns","styles","rowLength","expType","includeHiddenColumn","isCsvExport","isChild","isElementIdChanged","gridPool","sheet","grpFooterTemplates","footerTemplates","aggIndex","totalAggregates","helper","l10n","getService","prototype","getModuleName","init","gObj","element","id","Date","toISOString","isDestroyed","isExporting","undefined","footer","exportValueFormatter","locale","Map","grid","exportProperties","isMultipleExport","workbook","isCsv","isBlob","cancel","isBlb","Child","csv","workbk","isMultiEx","childGrid","detailTemplate","hierarchyExportMode","expandedRows","args","requestType","gridObject","trigger","beforeExcelExport","Promise","resolve","log","data","processRecords","exportingSuccess","excelExportComplete","promise","blobPromise","gridInstance","_this","allowGrouping","groupSettings","enableLazyLoading","length","dataSource","query_1","query","isCountRequired","aggregates","dataManager","executeQuery","then","r","processInnerRecords","exportType","getCurrentViewRecords","allPromise_1","push","getData","getQuery","getColumnData","reject","all","e","catch","actionFailure","groupedColLength","blankRows","separator","colDepth","isExportPropertiesPresent","multipleExport","type","images","worksheets","index","header","processExcelHeader","JSON","parse","stringify","childGridLevel","processGridExport","globalResolve","checkAndExport","organisedRows","organiseRows","concat","processExcelFooter","enableRtl","allowFiltering","getVisibleColumns","enableFilter","headerRowLen","headerRows","autoFilters","row","column","lastRow","lastColumn","notify","fileName","save","saveAsBlob","initialIndex","i","parseInt","toString","childRows","excelRows","theme","hierarchyPrintMode","getForeignKeyData","gColumns","enableColumnVirtualization","getGridExportColumns","headerRow","getHeaders","groupIndent","processHeaderContent","Object","keys","getDataModule","isRemote","processRecordContent","currentViewData","groupData","isAllPage","groupQuery","generateQuery","lazyloadData","executeLocal","lazyLoad","fName","queries","pageSize","reduce","acc","curr","lazQuery","contentModule","lazyLoadQuery","where","j","exportDataBound","capTemplate","returnType","currentViewRecords","excelRow","record","result","level","processGroupedRows","processRecordRows","processAggregates","GroupGuid","records","startIndex","excelExportProperties","_i","dataSource_1","item","cells","cell","col","getColumnByField","field","value","key","style","isForeignKey","isForeignColumn","headerText","enableGroupByFormat","formatCellValue","count","cArgs","captionText","exportGroupCaption","getCaptionThemeStyle","mergeOptions","captionModelGen","groupCaptionSummaryRows","generateRows","fillAggregates","childLevels","lIndex","hIndex","_a","_b","tCell","colSpan","sCell","span","_c","_d","col_1","visible","grouping","outlineLevel","isCollapsed","items","getGridRowModel","rows_1","templateRowHeight","c","len","gCell","cellType","cellValue","valueAccessor","arr","split","fkData","getFData","foreignKeyValue","idx","excelCellArgs","foreignKeyData","excelQueryCellInfo","image","base64","setImage","height","hyperLink","hyperlink","target","displayText","hAlign","getConstant","styleIndex","getColumnStyle","name","isExpand","isPrinting","returnVal","createChildGrid","childGridObj","failureHandler","exportDetailDataBound","beforeDataBound","childGridCell","appendTo","parentRow","action","exportDetailTemplate","processDetailTemplate","exportRowDataBound","rowObj","templateData","detailIndent","detailCellIndex","columnHeader","processCell_1","currentCell","isHeader","rowSpan","getHeaderThemeStyle","getRecordThemeStyle","cellStyle","fontColor","fontName","fontSize","excelHAlign","vAlign","excelVAlign","rotation","excelRotation","bold","indent","italic","underline","backColor","wrapText","borders","excelBorders","numberFormat","excelNumberFormat","excelType","strikeThrough","processRow","currentRow","excelDetailCells","detailCell","text","isHidden","excelImage","width","excelExportProps","gRow","intent","destroy","rec","byGroup","summaryModel","getColumns","filter","commands","aggregateModule","prepareSummaryInfo","groupSummaryModel","groupSummaryRows","sRows","customIndex","rows_2","isEmpty","eCell","columnsDetails","attributes","getColumnByIndex","DetailFooterIntent","isDataCell","footerTemplate","groupFooterTemplate","groupCaptionTemplate","getAggreateValue","Summary","GroupSummary","CaptionSummary","Sum","Average","Max","Min","Count","TrueCount","FalseCount","Custom","aggregateStyle","gridCellStyle","textAlign","toLowerCase","excelAggregateQueryCellInfo","row_1","dummyOutlineLevel","dummyGrouping","format","skeleton","template","templateFn","txt","columnName","isReact","isVue","isVue3","isAngular","textContent","JSON1","JSON2","attrname","columnIndex","headerRotation","degree","rowIndex","gridRows","gridColumns","spannedCells","parseStyles","currentCellIndex","gridCell","HeaderIndent","DetailHeader","contains","getIndex","spannedCell","headerTextAlign","excelHeaderCellArgs","excelHeaderQueryCellInfo","color","updateThemeStyle","themestyle","caption","noRows","json","updatedCellIndex","cellsLength","cellId","jsonCell","footerRows","spannedCells_1","getConvertedWidth"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-grids/src/grid/actions/excel-export.js"],"sourcesContent":["import * as events from '../base/constant';\nimport { Workbook } from '@syncfusion/ej2-excel-export';\nimport { isNullOrUndefined, getEnumValue, compile, getValue, detach, extend } from '@syncfusion/ej2-base';\nimport { Data } from '../actions/data';\nimport { ExportHelper, ExportValueFormatter } from './export-helper';\nimport { SummaryModelGenerator, GroupSummaryModelGenerator, CaptionSummaryModelGenerator } from '../services/summary-model-generator';\nimport { CellType } from '../base/enum';\nimport { Query, DataManager } from '@syncfusion/ej2-data';\nimport { getPrintGridModel, getUid, isExportColumns, updateColumnTypeForExportColumns, prepareColumns, measureColumnDepth } from '../base/util';\nimport { defaultCurrencyCode } from '@syncfusion/ej2-base';\n/**\n * @hidden\n * `ExcelExport` module is used to handle the Excel export action.\n */\nvar ExcelExport = /** @class */ (function () {\n    /**\n     * Constructor for the Grid Excel Export module.\n     *\n     * @param {IGrid} parent - specifies the IGrid\n     * @param {ServiceLocator} locator - specifies the ServiceLocator\n     * @hidden\n     */\n    function ExcelExport(parent, locator) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.book = {};\n        this.workSheet = [];\n        this.rows = [];\n        this.columns = [];\n        this.styles = [];\n        this.rowLength = 1;\n        this.expType = 'AppendToSheet';\n        this.includeHiddenColumn = false;\n        this.isCsvExport = false;\n        this.isChild = false;\n        this.isElementIdChanged = false;\n        this.gridPool = {};\n        this.sheet = {};\n        this.grpFooterTemplates = [];\n        this.footerTemplates = [];\n        this.aggIndex = 0;\n        this.totalAggregates = 0;\n        this.parent = parent;\n        this.helper = new ExportHelper(parent);\n        this.locator = locator;\n        this.l10n = this.locator.getService('localization');\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @returns {string} returns the module name\n     */\n    ExcelExport.prototype.getModuleName = function () {\n        return 'ExcelExport';\n    };\n    ExcelExport.prototype.init = function (gObj) {\n        if (gObj.element !== null && gObj.element.id === '') {\n            gObj.element.id = new Date().toISOString();\n            this.isElementIdChanged = true;\n        }\n        this.parent = gObj;\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.isExporting = undefined;\n        this.book = {};\n        this.workSheet = [];\n        this.rows = [];\n        this.columns = [];\n        this.styles = [];\n        this.rowLength = 1;\n        this.footer = undefined;\n        this.expType = 'AppendToSheet';\n        this.includeHiddenColumn = false;\n        this.exportValueFormatter = new ExportValueFormatter(gObj.locale);\n        gObj.id = getUid('main-grid');\n        this.gridPool[gObj.id] = false;\n    };\n    /**\n     * Export Grid to Excel file.\n     *\n     * @param {IGrid} grid - Defines the grid.\n     * @param  {exportProperties} exportProperties - Defines the export properties of the Grid.\n     * @param  {isMultipleExport} isMultipleExport - Defines is multiple Grid's are exported.\n     * @param  {Workbook} workbook - Defined the Workbook if multiple Grid is exported.\n     * @param  {boolean} isCsv - true if export to CSV.\n     * @param {boolean} isBlob - true if isBlob is enabled.\n     * @returns {Promise<any>} - Returns the map for export.\n     */\n    // eslint-disable-next-line\n    ExcelExport.prototype.Map = function (grid, exportProperties, isMultipleExport, workbook, isCsv, isBlob) {\n        var gObj = grid;\n        var cancel = 'cancel';\n        var isBlb = 'isBlob';\n        var Child = 'isChild';\n        var csv = 'isCsv';\n        var workbk = 'workbook';\n        var isMultiEx = 'isMultipleExport';\n        this.gridPool = {};\n        if ((grid.childGrid || grid.detailTemplate) && !(!isNullOrUndefined(exportProperties) && exportProperties.hierarchyExportMode === 'None')) {\n            grid.expandedRows = getPrintGridModel(grid).expandedRows;\n        }\n        var args = {\n            requestType: 'beforeExcelExport', gridObject: gObj, cancel: false,\n            isMultipleExport: isMultipleExport, workbook: workbook, isCsv: isCsv, isBlob: isBlob, isChild: this.isChild,\n            grpFooterTemplates: this.grpFooterTemplates\n        };\n        gObj.trigger(events.beforeExcelExport, args);\n        if (args[\"\" + cancel]) {\n            return new Promise(function (resolve) {\n                return resolve();\n            });\n        }\n        this.parent.log('exporting_begin', this.getModuleName());\n        this.data = new Data(gObj);\n        this.isExporting = true;\n        this.isBlob = args[\"\" + isBlb];\n        this.isChild = args[\"\" + Child];\n        this.grpFooterTemplates = args['grpFooterTemplates'];\n        if (args[\"\" + csv]) {\n            this.isCsvExport = args[\"\" + csv];\n        }\n        else {\n            this.isCsvExport = false;\n        }\n        if (isExportColumns(exportProperties)) {\n            updateColumnTypeForExportColumns(exportProperties, gObj);\n        }\n        return this.processRecords(gObj, exportProperties, args[\"\" + isMultiEx], args[\"\" + workbk]);\n    };\n    ExcelExport.prototype.exportingSuccess = function (resolve) {\n        this.isExporting = false;\n        this.parent.trigger(events.excelExportComplete, this.isBlob ? { promise: this.blobPromise } : { gridInstance: this.parent });\n        this.parent.log('exporting_complete', this.getModuleName());\n        resolve(this.book);\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ExcelExport.prototype.processRecords = function (gObj, exportProperties, isMultipleExport, workbook) {\n        var _this = this;\n        if (gObj.allowGrouping && gObj.groupSettings.enableLazyLoading && gObj.groupSettings.columns.length) {\n            if (isNullOrUndefined(exportProperties)) {\n                exportProperties = { hierarchyExportMode: 'All' };\n            }\n            else {\n                exportProperties.hierarchyExportMode = exportProperties.hierarchyExportMode || 'All';\n            }\n        }\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource)) {\n            exportProperties.dataSource = exportProperties.dataSource instanceof DataManager ?\n                exportProperties.dataSource : new DataManager(exportProperties.dataSource);\n            var query_1 = exportProperties.query ? exportProperties.query : new Query();\n            if (isNullOrUndefined(query_1.isCountRequired) || gObj.aggregates) {\n                query_1.isCountRequired = true;\n            }\n            return new Promise(function (resolve) {\n                var dataManager = exportProperties.dataSource.executeQuery(query_1);\n                dataManager.then(function (r) {\n                    _this.init(gObj);\n                    _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, r).then(function () {\n                        _this.exportingSuccess(resolve);\n                    });\n                });\n            });\n        }\n        else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n            return new Promise(function (resolve) {\n                _this.init(gObj);\n                _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, _this.parent.getCurrentViewRecords());\n                _this.exportingSuccess(resolve);\n            });\n        }\n        else {\n            var allPromise_1 = [];\n            allPromise_1.push(this.data.getData({}, ExportHelper.getQuery(gObj, this.data)));\n            allPromise_1.push(this.helper.getColumnData(gObj));\n            return new Promise(function (resolve, reject) {\n                Promise.all(allPromise_1).then(function (e) {\n                    _this.init(gObj);\n                    _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, e[0]).then(function () {\n                        _this.exportingSuccess(resolve);\n                    });\n                }).catch(function (e) {\n                    reject(_this.book);\n                    _this.parent.trigger(events.actionFailure, e);\n                });\n            });\n        }\n    };\n    ExcelExport.prototype.processInnerRecords = function (gObj, exportProperties, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    isMultipleExport, workbook, r) {\n        var _this = this;\n        this.groupedColLength = gObj.groupSettings.columns.length;\n        var blankRows = 5;\n        var separator;\n        var rows = [];\n        var colDepth = measureColumnDepth(gObj.columns);\n        var isExportPropertiesPresent = !isNullOrUndefined(exportProperties);\n        if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.multipleExport)) {\n            this.expType = (!isNullOrUndefined(exportProperties.multipleExport.type) ? exportProperties.multipleExport.type : 'AppendToSheet');\n            if (!isNullOrUndefined(exportProperties.multipleExport.blankRows)) {\n                blankRows = exportProperties.multipleExport.blankRows;\n            }\n        }\n        if (isNullOrUndefined(workbook)) {\n            this.workSheet = [];\n            this.rows = [];\n            this.columns = [];\n            this.styles = [];\n            this.sheet.images = [];\n        }\n        else if (this.expType === 'NewSheet') {\n            this.workSheet = workbook.worksheets;\n            this.rows = [];\n            this.columns = [];\n            this.sheet.images = [];\n            this.styles = workbook.styles;\n        }\n        else {\n            this.workSheet = [];\n            this.rows = workbook.worksheets[0].rows;\n            this.columns = workbook.worksheets[0].columns;\n            this.styles = workbook.styles;\n            this.sheet.images = workbook.worksheets[0].images;\n            this.rowLength = (this.rows[this.rows.length - 1].index + blankRows);\n            this.rowLength++;\n        }\n        if (isExportPropertiesPresent) {\n            if (!isNullOrUndefined(isMultipleExport)) {\n                if (!isNullOrUndefined(exportProperties.header) && (isMultipleExport || this.expType === 'NewSheet')) {\n                    this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n                }\n                if (!isNullOrUndefined(exportProperties.footer)) {\n                    if (this.expType === 'AppendToSheet') {\n                        if (!isMultipleExport) {\n                            this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n                        }\n                    }\n                    else {\n                        this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n                    }\n                }\n            }\n            else {\n                if (!isNullOrUndefined(exportProperties.header)) {\n                    this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n                }\n                if (!isNullOrUndefined(exportProperties.footer)) {\n                    this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n                }\n            }\n        }\n        this.includeHiddenColumn = (isExportPropertiesPresent ? exportProperties.includeHiddenColumn : false);\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        return new Promise(function (resolve, reject) {\n            gObj.childGridLevel = 0;\n            rows = _this.processGridExport(gObj, exportProperties, r);\n            _this.globalResolve = resolve;\n            _this.gridPool[gObj.id] = true;\n            _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n        }).then(function () {\n            var organisedRows = [];\n            _this.organiseRows(rows, rows[0].index, organisedRows);\n            _this.rows = _this.rows.concat(organisedRows);\n            //footer template add\n            if (!isNullOrUndefined(_this.footer)) {\n                if ((_this.expType === 'AppendToSheet' && !isMultipleExport) || (_this.expType === 'NewSheet')) {\n                    _this.processExcelFooter(_this.footer);\n                }\n            }\n            if (_this.columns.length > 0) {\n                _this.sheet.columns = _this.columns;\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            _this.sheet.rows = _this.rows;\n            _this.sheet.enableRtl = _this.parent.enableRtl;\n            if (_this.parent.allowFiltering && gObj.getVisibleColumns().length && isExportPropertiesPresent &&\n                exportProperties.enableFilter) {\n                var headerRowLen = exportProperties.header ? exportProperties.header.headerRows ||\n                    exportProperties.header.rows.length : 0;\n                var autoFilters = {\n                    row: colDepth + headerRowLen, column: _this.groupedColLength ? _this.groupedColLength + 1 :\n                        _this.sheet.columns[0].index, lastRow: _this.sheet.rows.length, lastColumn: _this.sheet.columns.length\n                };\n                _this.sheet.autoFilters = autoFilters;\n            }\n            _this.workSheet.push(_this.sheet);\n            _this.book.worksheets = _this.workSheet;\n            _this.book.styles = _this.styles;\n            gObj.notify('finalPageSetup', _this.book);\n            if (!isMultipleExport) {\n                if (_this.isCsvExport) {\n                    if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.separator)\n                        && exportProperties.separator !== ',') {\n                        separator = exportProperties.separator;\n                    }\n                    var book = new Workbook(_this.book, 'csv', gObj.locale, defaultCurrencyCode, separator);\n                    if (!_this.isBlob) {\n                        if (isExportPropertiesPresent && exportProperties.fileName) {\n                            book.save(exportProperties.fileName);\n                        }\n                        else {\n                            book.save('Export.csv');\n                        }\n                    }\n                    else {\n                        _this.blobPromise = book.saveAsBlob('text/csv');\n                    }\n                }\n                else {\n                    var book = new Workbook(_this.book, 'xlsx', gObj.locale, defaultCurrencyCode);\n                    if (!_this.isBlob) {\n                        if (isExportPropertiesPresent && exportProperties.fileName) {\n                            book.save(exportProperties.fileName);\n                        }\n                        else {\n                            book.save('Export.xlsx');\n                        }\n                    }\n                    else {\n                        _this.blobPromise = book.saveAsBlob('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n                    }\n                }\n                if (_this.isElementIdChanged) {\n                    gObj.element.id = '';\n                }\n                delete gObj.expandedRows;\n            }\n            return workbook;\n        });\n    };\n    ExcelExport.prototype.organiseRows = function (rows, initialIndex, organisedRows) {\n        if (!rows.length) {\n            return initialIndex;\n        }\n        for (var i = 0; i < rows.length; i++) {\n            var row = rows[parseInt(i.toString(), 10)];\n            var childRows = row.childRows;\n            if (childRows) {\n                row.index = initialIndex++;\n                delete row.childRows;\n                organisedRows.push(row);\n                initialIndex = this.organiseRows(childRows, initialIndex, organisedRows);\n            }\n            else {\n                row.index = initialIndex++;\n                organisedRows.push(row);\n            }\n        }\n        return initialIndex;\n    };\n    ExcelExport.prototype.processGridExport = function (gObj, exportProperties, r) {\n        var excelRows = [];\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.theme)) {\n            this.theme = exportProperties.theme;\n        }\n        if ((gObj.childGrid || gObj.detailTemplate) && !isNullOrUndefined(exportProperties)) {\n            gObj.hierarchyPrintMode = exportProperties.hierarchyExportMode || 'Expanded';\n        }\n        var helper = new ExportHelper(gObj, this.helper.getForeignKeyData());\n        var gColumns = isExportColumns(exportProperties) ?\n            prepareColumns(exportProperties.columns, gObj.enableColumnVirtualization) :\n            helper.getGridExportColumns(gObj.columns);\n        var headerRow = helper.getHeaders(gColumns, this.includeHiddenColumn);\n        var groupIndent = gObj.groupSettings.columns.length ? gObj.groupSettings.columns.length - 1 : 0;\n        excelRows = this.processHeaderContent(gObj, headerRow, groupIndent, excelRows);\n        if (!isNullOrUndefined(exportProperties) && Object.keys(exportProperties).length &&\n            isNullOrUndefined(exportProperties.dataSource)) {\n            if (exportProperties.exportType === 'CurrentPage' && (!gObj.groupSettings.enableLazyLoading\n                || gObj.getDataModule().isRemote())) {\n                excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, gObj.currentViewData, excelRows, helper);\n            }\n            else if (gObj.groupSettings.enableLazyLoading && !gObj.getDataModule().isRemote()) {\n                var groupData = void 0;\n                if (!isNullOrUndefined(exportProperties) && Object.keys(exportProperties).length) {\n                    var isAllPage = exportProperties.exportType === 'CurrentPage'\n                        ? false : true;\n                    var groupQuery = gObj.getDataModule().generateQuery(isAllPage);\n                    var lazyloadData = gObj.getDataModule().dataManager.executeLocal(groupQuery);\n                    groupQuery.lazyLoad = [];\n                    var fName = 'fn';\n                    if (!isAllPage) {\n                        for (var i = 0; i < groupQuery.queries.length; i++) {\n                            if (groupQuery.queries[parseInt(i.toString(), 10)]['' + fName] === 'onPage') {\n                                groupQuery.queries[parseInt(i.toString(), 10)].e.pageSize = lazyloadData.reduce(function (acc, curr) { return acc + curr['count']; }, 0);\n                            }\n                        }\n                    }\n                    if (exportProperties.hierarchyExportMode === 'All') {\n                        groupData = gObj.getDataModule().dataManager.executeLocal(groupQuery);\n                    }\n                    else if (exportProperties.hierarchyExportMode === 'Expanded' || exportProperties.hierarchyExportMode === 'None' ||\n                        isNullOrUndefined(exportProperties.hierarchyExportMode)) {\n                        groupData = gObj.getDataModule().dataManager.executeLocal(groupQuery);\n                        var lazQuery = this.parent.contentModule.lazyLoadQuery;\n                        for (var i = 0; i < lazQuery.length; i++) {\n                            var query = lazQuery[parseInt(i.toString(), 10)];\n                            var where = query[0];\n                            for (var j = 0; j < groupData.length; j++) {\n                                var data = groupData[parseInt(j.toString(), 10)];\n                                if (data['key'] === where['value']) {\n                                    lazyloadData[parseInt(i.toString(), 10)] = groupData[parseInt(j.toString(), 10)];\n                                }\n                            }\n                        }\n                        groupData = lazyloadData;\n                    }\n                }\n                else {\n                    groupData = gObj.currentViewData;\n                }\n                excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, groupData, excelRows, helper);\n            }\n            else {\n                excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, undefined, excelRows, helper);\n            }\n        }\n        else {\n            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, undefined, excelRows, helper);\n        }\n        gObj.notify(events.exportDataBound, { excelRows: excelRows, type: 'excel' });\n        this.capTemplate = undefined;\n        this.footerTemplates = [];\n        this.grpFooterTemplates = [];\n        this.aggIndex = 0;\n        this.totalAggregates = 0;\n        return excelRows;\n    };\n    ExcelExport.prototype.processRecordContent = function (gObj, returnType, headerRow, exportProperties, currentViewRecords, excelRow, helper) {\n        var record;\n        if (!isNullOrUndefined(currentViewRecords) && currentViewRecords.length) {\n            record = currentViewRecords;\n        }\n        else {\n            record = returnType.result;\n        }\n        if (!isNullOrUndefined(record.level)) {\n            this.processGroupedRows(gObj, record, headerRow, record.level, 0, exportProperties, excelRow, helper);\n        }\n        else {\n            this.processRecordRows(gObj, record, headerRow, 0, 0, exportProperties, excelRow, helper);\n        }\n        if (!isNullOrUndefined(returnType.aggregates) && Object.keys(returnType.aggregates).length > 0) {\n            if (!isNullOrUndefined(currentViewRecords) && !this.parent.groupSettings.enableLazyLoading) {\n                this.processAggregates(gObj, returnType.result, excelRow, currentViewRecords);\n            }\n            else {\n                var result = returnType.result.GroupGuid ?\n                    returnType.result.records : returnType.result;\n                this.processAggregates(gObj, result, excelRow);\n            }\n        }\n        return excelRow;\n    };\n    ExcelExport.prototype.processGroupedRows = function (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    gObj, dataSource, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n        for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {\n            var item = dataSource_1[_i];\n            var cells = [];\n            var index = 1;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var cell = {};\n            cell.index = (index + level) - 1;\n            var col = gObj.getColumnByField(item.field);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var args = {\n                value: item.key,\n                column: col,\n                style: undefined,\n                isForeignKey: col.isForeignColumn()\n            };\n            var value = gObj.getColumnByField(item.field).headerText +\n                ': ' + (!col.enableGroupByFormat ? this.exportValueFormatter.formatCellValue(args) : item.key) + ' - ';\n            if (item.count > 1) {\n                value += item.count + ' items';\n            }\n            else {\n                value += item.count + ' item';\n            }\n            var cArgs = { captionText: value, type: this.isCsvExport ? 'CSV' : 'Excel', data: item };\n            this.parent.trigger(events.exportGroupCaption, cArgs);\n            cell.value = cArgs.captionText;\n            cell.style = this.getCaptionThemeStyle(this.theme);\n            if (!isNullOrUndefined(cArgs.style)) {\n                cell.style = this.mergeOptions(cell.style, cArgs.style);\n            }\n            var captionModelGen = new CaptionSummaryModelGenerator(gObj);\n            var groupCaptionSummaryRows = captionModelGen.generateRows(item);\n            this.fillAggregates(gObj, groupCaptionSummaryRows, (dataSource.level + dataSource.childLevels) - 1, excelRows, this.rowLength);\n            cells.push(cell);\n            if (excelRows[excelRows.length - 1].cells.length > 0) {\n                var lIndex = dataSource.level + dataSource.childLevels + groupCaptionSummaryRows[0].cells.length;\n                var hIndex = 0;\n                for (var _a = 0, _b = excelRows[excelRows.length - 1].cells; _a < _b.length; _a++) {\n                    var tCell = _b[_a];\n                    if (tCell.index < lIndex) {\n                        lIndex = tCell.index;\n                    }\n                    if (tCell.index > hIndex) {\n                        hIndex = tCell.index;\n                    }\n                    if (cells[cells.length - 1].index !== tCell.index) {\n                        cells.push(tCell);\n                    }\n                }\n                if ((lIndex - cell.index) > 1) {\n                    cell.colSpan = lIndex - cell.index;\n                }\n                while (hIndex < (headerRow.columns.length + level + dataSource.childLevels)) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    var sCell = {};\n                    sCell.index = (hIndex + 1);\n                    sCell.style = this.getCaptionThemeStyle(this.theme);\n                    cells.push(sCell);\n                    hIndex++;\n                }\n            }\n            else {\n                var span = 0;\n                //Calculation for column span when group caption dont have aggregates\n                for (var _c = 0, _d = headerRow.columns; _c < _d.length; _c++) {\n                    var col_1 = _d[_c];\n                    if (col_1.visible) {\n                        span++;\n                    }\n                }\n                cell.colSpan = (dataSource.childLevels + span);\n            }\n            excelRows[excelRows.length - 1].cells = cells;\n            this.rowLength++;\n            if (this.groupedColLength < 8 && level > 1) {\n                var grouping = { outlineLevel: level - 1, isCollapsed: true };\n                excelRows[excelRows.length - 1].grouping = grouping;\n            }\n            if (!isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {\n                this.processGroupedRows(gObj, item.items, headerRow, item.items.level, startIndex, excelExportProperties, excelRows, helper);\n                this.processAggregates(gObj, item, excelRows, undefined, (level - 1) + dataSource.childLevels, true);\n            }\n            else {\n                startIndex = this.processRecordRows(gObj, item.items, headerRow, (level - 1), startIndex, excelExportProperties, excelRows, helper);\n                this.processAggregates(gObj, item, excelRows, undefined, (level - 1), true);\n            }\n        }\n    };\n    ExcelExport.prototype.processRecordRows = function (gObj, record, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n        var index = 1;\n        var cells = [];\n        var columns = headerRow.columns;\n        var rows = helper.getGridRowModel(columns, record, gObj, startIndex);\n        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n            var row = rows_1[_i];\n            cells = [];\n            startIndex++;\n            index = 1;\n            var templateRowHeight = void 0;\n            for (var c = 0, len = row.cells.length; c < len; c++) {\n                var gCell = row.cells[parseInt(c.toString(), 10)];\n                if (gCell.cellType !== CellType.Data) {\n                    continue;\n                }\n                var column = gCell.column;\n                var field = column.field;\n                var cellValue = !isNullOrUndefined(field) ? column.valueAccessor(field, row.data, column) : '';\n                var value = !isNullOrUndefined(cellValue) ? cellValue : '';\n                if (column.type === 'dateonly' && typeof value === 'string' && value) {\n                    var arr = value.split(/[^0-9.]/);\n                    value = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10));\n                }\n                var fkData = void 0;\n                if (column.isForeignColumn && column.isForeignColumn()) {\n                    fkData = helper.getFData(value, column);\n                    value = getValue(column.foreignKeyValue, fkData);\n                }\n                if (!isNullOrUndefined(value)) {\n                    var cell = {};\n                    var idx = index + level + gObj.childGridLevel;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    var excelCellArgs = {\n                        data: row.data, column: column, foreignKeyData: fkData,\n                        value: value, style: undefined, colSpan: 1, cell: cell\n                    };\n                    gObj.trigger(events.excelQueryCellInfo, excelCellArgs);\n                    if (!isNullOrUndefined(excelCellArgs.image) && !isNullOrUndefined(excelCellArgs.image.base64)) {\n                        templateRowHeight = this.setImage(excelCellArgs, idx);\n                        if (excelCellArgs.image.height && excelCellArgs.value !== '') {\n                            templateRowHeight += 30;\n                        }\n                    }\n                    if (!isNullOrUndefined(excelCellArgs.hyperLink)) {\n                        excelCellArgs.cell.hyperlink = { target: excelCellArgs.hyperLink.target };\n                        excelCellArgs.value = excelCellArgs.hyperLink.displayText || excelCellArgs.value;\n                    }\n                    cell = excelCellArgs.cell;\n                    cell.index = idx;\n                    cell.value = excelCellArgs.value;\n                    if (excelCellArgs.data === '' && gObj.childGridLevel && index === 1) {\n                        var style = {};\n                        style.hAlign = 'left';\n                        excelCellArgs = { style: style };\n                        cell.colSpan = gObj.getVisibleColumns().length;\n                        cell.value = this.l10n.getConstant('EmptyRecord');\n                    }\n                    if (excelCellArgs.colSpan > 1) {\n                        cell.colSpan = excelCellArgs.colSpan;\n                    }\n                    if (!isNullOrUndefined(excelCellArgs.style)) {\n                        var styleIndex = this.getColumnStyle(gObj, index + level);\n                        cell.style = this.mergeOptions(this.styles[parseInt(styleIndex.toString(), 10)], excelCellArgs.style);\n                    }\n                    else {\n                        cell.style = { name: gObj.element.id + 'column' + (index + level) };\n                    }\n                    cells.push(cell);\n                }\n                index++;\n            }\n            var excelRow = { index: this.rowLength++, cells: cells };\n            if (!isNullOrUndefined(templateRowHeight)) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                excelRow.height = templateRowHeight;\n            }\n            if (this.groupedColLength && this.groupedColLength < 8 && (level + 1) > 0) {\n                excelRow.grouping = { outlineLevel: (level + 1), isCollapsed: true };\n                excelRows.push(excelRow);\n            }\n            else {\n                excelRows.push(excelRow);\n            }\n            if ((row.isExpand || this.isChild) && (!isNullOrUndefined(gObj.childGrid) || !isNullOrUndefined(gObj.detailTemplate))) {\n                if (!isNullOrUndefined(gObj.childGrid)) {\n                    gObj.isPrinting = true;\n                    var exportType = (!isNullOrUndefined(excelExportProperties) && excelExportProperties.exportType) ?\n                        excelExportProperties.exportType : 'AllPages';\n                    var returnVal = this.helper.createChildGrid(gObj, row, exportType, this.gridPool);\n                    var childGridObj = returnVal.childGrid;\n                    var element = returnVal.element;\n                    childGridObj.actionFailure =\n                        helper.failureHandler(this.gridPool, childGridObj, this.globalResolve);\n                    childGridObj.childGridLevel = gObj.childGridLevel + 1;\n                    var args = { childGrid: childGridObj, row: row, exportProperties: excelExportProperties };\n                    this.parent.trigger(events.exportDetailDataBound, args);\n                    childGridObj.beforeDataBound = this.childGridCell(excelRow, childGridObj, excelExportProperties, row);\n                    childGridObj.appendTo(element);\n                }\n                else {\n                    var args = { parentRow: row, row: excelRow, value: {}, action: 'excelexport', gridInstance: gObj };\n                    this.parent.trigger(events.exportDetailTemplate, args);\n                    excelRow.childRows = this.processDetailTemplate(args);\n                }\n            }\n            gObj.notify(events.exportRowDataBound, { rowObj: row, type: 'excel', excelRows: excelRows });\n        }\n        return startIndex;\n    };\n    ExcelExport.prototype.processDetailTemplate = function (templateData) {\n        var _this = this;\n        var rows = [];\n        var templateRowHeight;\n        var detailIndent = 2;\n        var detailCellIndex;\n        if (templateData.value.columnHeader || templateData.value.rows) {\n            var processCell_1 = function (currentCell, isHeader) {\n                var cell = {};\n                if (isNullOrUndefined(currentCell.index)) {\n                    currentCell.index = detailCellIndex;\n                    detailCellIndex++;\n                }\n                cell.index = currentCell.index + detailIndent;\n                if (!isNullOrUndefined(currentCell.value)) {\n                    cell.value = currentCell.value;\n                }\n                if (!isNullOrUndefined(currentCell.colSpan)) {\n                    cell.colSpan = currentCell.colSpan;\n                }\n                if (!isNullOrUndefined(currentCell.rowSpan)) {\n                    cell.rowSpan = currentCell.rowSpan;\n                }\n                if (isHeader) {\n                    cell.style = _this.getHeaderThemeStyle(_this.theme);\n                }\n                else {\n                    cell.style = _this.getRecordThemeStyle(_this.theme);\n                }\n                if (!isNullOrUndefined(currentCell.style)) {\n                    var cellStyle = {\n                        fontColor: currentCell.style.fontColor,\n                        fontName: currentCell.style.fontName,\n                        fontSize: currentCell.style.fontSize,\n                        hAlign: currentCell.style.excelHAlign,\n                        vAlign: currentCell.style.excelVAlign,\n                        rotation: currentCell.style.excelRotation,\n                        bold: currentCell.style.bold,\n                        indent: currentCell.style.indent,\n                        italic: currentCell.style.italic,\n                        underline: currentCell.style.underline,\n                        backColor: currentCell.style.backColor,\n                        wrapText: currentCell.style.wrapText,\n                        borders: currentCell.style.excelBorders,\n                        numberFormat: currentCell.style.excelNumberFormat,\n                        type: currentCell.style.excelType,\n                        strikeThrough: currentCell.style.strikeThrough\n                    };\n                    cell.style = _this.mergeOptions(cellStyle, cell.style);\n                }\n                if (!isNullOrUndefined(currentCell.image) && !isNullOrUndefined(currentCell.image.base64)) {\n                    if (currentCell.rowSpan > 1) {\n                        _this.setImage(currentCell, cell.index);\n                    }\n                    else {\n                        templateRowHeight = _this.setImage(currentCell, cell.index);\n                        if (currentCell.image.height && currentCell.value !== '') {\n                            templateRowHeight += 30;\n                        }\n                    }\n                }\n                if (!isNullOrUndefined(currentCell.hyperLink)) {\n                    cell.hyperlink = { target: currentCell.hyperLink.target };\n                    cell.value = currentCell.hyperLink.displayText;\n                }\n                return cell;\n            };\n            var processRow = function (currentRow, isHeader) {\n                var excelDetailCells = [];\n                detailCellIndex = 0;\n                for (var j = 0; j < currentRow.cells.length; j++) {\n                    var currentCell = currentRow.cells[parseInt(j.toString(), 10)];\n                    var detailCell = processCell_1(currentCell, isHeader);\n                    excelDetailCells.push(detailCell);\n                }\n                var row = { index: _this.rowLength++, cells: excelDetailCells };\n                if (!isNullOrUndefined(templateRowHeight)) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    row.height = templateRowHeight;\n                    templateRowHeight = null;\n                }\n                rows.push(row);\n            };\n            if (templateData.value.columnHeader) {\n                for (var i = 0; i < templateData.value.columnHeader.length; i++) {\n                    processRow(templateData.value.columnHeader[parseInt(i.toString(), 10)], true);\n                }\n            }\n            if (templateData.value.rows) {\n                for (var i = 0; i < templateData.value.rows.length; i++) {\n                    processRow(templateData.value.rows[parseInt(i.toString(), 10)]);\n                }\n            }\n        }\n        else if (templateData.value.image) {\n            templateRowHeight = this.setImage(templateData.value, detailIndent);\n            var row = {\n                index: this.rowLength++,\n                cells: [{\n                        index: detailIndent,\n                        style: this.getRecordThemeStyle(this.theme)\n                    }]\n            };\n            if (!isNullOrUndefined(templateRowHeight)) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                row.height = templateRowHeight;\n                templateRowHeight = null;\n            }\n            rows.push(row);\n        }\n        else if (templateData.value.text) {\n            var row = {\n                index: this.rowLength++,\n                cells: [{\n                        index: detailIndent,\n                        value: templateData.value.text,\n                        style: this.getRecordThemeStyle(this.theme)\n                    }]\n            };\n            rows.push(row);\n        }\n        else if (templateData.value.hyperLink) {\n            var row = {\n                index: this.rowLength++,\n                cells: [{\n                        index: 2,\n                        hyperlink: { target: templateData.value.hyperLink.target },\n                        value: templateData.value.hyperLink.displayText,\n                        style: this.getRecordThemeStyle(this.theme)\n                    }]\n            };\n            rows.push(row);\n        }\n        for (var i = 0; i < rows.length; i++) {\n            rows[parseInt(i.toString(), 10)].grouping = {\n                outlineLevel: 1, isCollapsed: !templateData.parentRow.isExpand, isHidden: !templateData.parentRow.isExpand\n            };\n        }\n        return rows;\n    };\n    ExcelExport.prototype.setImage = function (args, idx) {\n        if (isNullOrUndefined(this.sheet.images)) {\n            this.sheet.images = [];\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var excelImage = {\n            image: args.image.base64, row: this.rowLength, column: idx,\n            lastRow: this.rowLength, lastColumn: idx\n        };\n        if (args.image.width && args.image.height) {\n            excelImage.width = args.image.width;\n            excelImage.height = args.image.height;\n        }\n        this.sheet.images.push(excelImage);\n        this.columns[idx - 1].width = args.image.width || this.columns[idx - 1].width;\n        return args.image.height || 50;\n    };\n    ExcelExport.prototype.childGridCell = function (excelRow, childGridObj, excelExportProps, gRow) {\n        var _this = this;\n        return function (result) {\n            childGridObj.beforeDataBound = null;\n            result.cancel = true;\n            if (result.result.length === 0) {\n                result.result = [''];\n            }\n            excelRow.childRows = _this.processGridExport(childGridObj, excelExportProps, result);\n            var intent = _this.parent.groupSettings.columns.length;\n            var rows = excelRow.childRows;\n            for (var i = 0; i < rows.length; i++) {\n                rows[parseInt(i.toString(), 10)].grouping = { outlineLevel: intent + childGridObj\n                        .childGridLevel, isCollapsed: !gRow.isExpand, isHidden: !gRow.isExpand };\n            }\n            childGridObj.destroy();\n            detach(childGridObj.element);\n            _this.gridPool[childGridObj.id] = true;\n            _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n            return excelRow;\n        };\n    };\n    ExcelExport.prototype.processAggregates = function (gObj, rec, excelRows, currentViewRecords, indent, byGroup) {\n        var summaryModel = new SummaryModelGenerator(gObj);\n        var columns = summaryModel.getColumns();\n        columns = columns.filter(function (col) { return isNullOrUndefined(col.commands) && col.type !== 'checkbox'; });\n        if (gObj.aggregates.length && this.parent !== gObj) {\n            gObj.aggregateModule.prepareSummaryInfo();\n        }\n        var data = undefined;\n        if (!isNullOrUndefined(currentViewRecords)) {\n            data = currentViewRecords;\n        }\n        else {\n            data = rec;\n        }\n        if (indent === undefined) {\n            indent = 0;\n        }\n        if (gObj.groupSettings.columns.length > 0 && byGroup) {\n            var groupSummaryModel = new GroupSummaryModelGenerator(gObj);\n            var groupSummaryRows = groupSummaryModel.generateRows(data, { level: data.level });\n            if (groupSummaryRows.length > 0) {\n                excelRows = this.fillAggregates(gObj, groupSummaryRows, indent, excelRows);\n            }\n        }\n        else {\n            indent = gObj.groupSettings.columns.length > 0 && !byGroup ? gObj.groupSettings.columns.length : indent;\n            var sRows = summaryModel.generateRows(data, rec.aggregates, null, null, columns);\n            if (sRows.length > 0 && !byGroup) {\n                indent = gObj.groupSettings.columns.length ? indent - 1 : indent;\n                excelRows = this.fillAggregates(gObj, sRows, indent, excelRows);\n            }\n        }\n        return excelRows;\n    };\n    ExcelExport.prototype.fillAggregates = function (gObj, rows, indent, excelRows, customIndex) {\n        for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {\n            var row = rows_2[_i];\n            var cells = [];\n            var isEmpty = true;\n            var index = 0;\n            for (var _a = 0, _b = row.cells; _a < _b.length; _a++) {\n                var cell = _b[_a];\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var eCell = {};\n                var columnsDetails = {};\n                if (!isNullOrUndefined(cell.attributes.index)) {\n                    columnsDetails = this.parent.getColumnByIndex(cell.attributes.index);\n                }\n                if (cell.cellType === CellType.DetailFooterIntent || columnsDetails.type === 'checkbox') {\n                    continue;\n                }\n                if ((cell.visible || this.includeHiddenColumn)) {\n                    index++;\n                    if (cell.isDataCell) {\n                        isEmpty = false;\n                        var footerTemplate = !isNullOrUndefined(cell.column.footerTemplate);\n                        var groupFooterTemplate = !isNullOrUndefined(cell.column.groupFooterTemplate);\n                        var groupCaptionTemplate = !isNullOrUndefined(cell.column.groupCaptionTemplate);\n                        eCell.index = index + indent + gObj.childGridLevel;\n                        if (footerTemplate) {\n                            eCell.value = this.getAggreateValue(gObj, CellType.Summary, cell.column.footerTemplate, cell, row);\n                        }\n                        else if (groupFooterTemplate) {\n                            eCell.value = this.getAggreateValue(gObj, CellType.GroupSummary, cell.column.groupFooterTemplate, cell, row);\n                        }\n                        else if (groupCaptionTemplate) {\n                            eCell.value = this.getAggreateValue(gObj, CellType.CaptionSummary, cell.column.groupCaptionTemplate, cell, row);\n                        }\n                        else {\n                            for (var _c = 0, _d = Object.keys(row.data[cell.column.field]); _c < _d.length; _c++) {\n                                var key = _d[_c];\n                                if (key === cell.column.type) {\n                                    if (!isNullOrUndefined(row.data[cell.column.field].Sum)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - sum\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Average)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - average\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Max)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - max\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Min)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - min\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Count)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - count\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].TrueCount)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - truecount\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].FalseCount)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - falsecount\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Custom)) {\n                                        eCell.value = row.data[cell.column.field].Custom;\n                                    }\n                                }\n                            }\n                        }\n                        eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n                        this.aggregateStyle(cell.column, eCell.style, cell.column.field);\n                        var gridCellStyle = cell.attributes.style;\n                        if (gridCellStyle.textAlign) {\n                            eCell.style.hAlign = gridCellStyle.textAlign.toLowerCase();\n                        }\n                        var args = {\n                            row: row,\n                            type: footerTemplate ? 'Footer' : groupFooterTemplate ? 'GroupFooter' : 'GroupCaption',\n                            style: eCell,\n                            cell: cell\n                        };\n                        this.parent.trigger(events.excelAggregateQueryCellInfo, args);\n                        cells.push(eCell);\n                    }\n                    else {\n                        if (customIndex === undefined) {\n                            eCell.index = index + indent + gObj.childGridLevel;\n                            eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n                            cells.push(eCell);\n                        }\n                    }\n                }\n            }\n            if (!isNullOrUndefined(customIndex)) {\n                excelRows.push({ index: customIndex, cells: cells });\n            }\n            else {\n                var row_1 = {};\n                var dummyOutlineLevel = 'outlineLevel';\n                var dummyGrouping = 'grouping';\n                if (this.groupedColLength < 8 && this.groupedColLength > 0 && !(gObj.groupSettings.enableLazyLoading && isNullOrUndefined(excelRows[excelRows.length - 1][\"\" + dummyGrouping]))) {\n                    var level = excelRows[excelRows.length - 1][\"\" + dummyGrouping][\"\" + dummyOutlineLevel];\n                    var grouping = { outlineLevel: level, isCollapsed: true };\n                    row_1 = { index: this.rowLength++, cells: cells, grouping: grouping };\n                }\n                else {\n                    row_1 = { index: this.rowLength++, cells: cells };\n                }\n                if (!isEmpty) {\n                    excelRows.push(row_1);\n                }\n            }\n        }\n        return excelRows;\n    };\n    ExcelExport.prototype.aggregateStyle = function (col, style, field) {\n        var column = this.parent.getColumnByField(field);\n        if (typeof col.format === 'object') {\n            var format = col.format;\n            style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n            if (!isNullOrUndefined(format.type)) {\n                style.type = format.type.toLowerCase();\n            }\n        }\n        else {\n            style.numberFormat = col.format;\n        }\n        if (!isNullOrUndefined(column) && isNullOrUndefined(style.type)) {\n            style.type = column.type.toLowerCase();\n        }\n    };\n    ExcelExport.prototype.getAggreateValue = function (gObj, cellType, template, cell, row) {\n        var templateFn = {};\n        templateFn[getEnumValue(CellType, cell.cellType)] = compile(template);\n        var txt;\n        var data = row.data[cell.column.field ? cell.column.field : cell.column.columnName];\n        if ((this.parent.isReact || this.parent.isVue || this.parent.isVue3 || this.parent.isAngular) &&\n            !(typeof cell.column.footerTemplate === 'string' || typeof cell.column.groupFooterTemplate === 'string' || typeof cell.column.groupCaptionTemplate === 'string')) {\n            txt = data[(cell.column.type)];\n            return !isNullOrUndefined(txt) ? (txt) : '';\n        }\n        else {\n            txt = (templateFn[getEnumValue(CellType, cell.cellType)](data));\n        }\n        return !isNullOrUndefined(txt[0]) ? txt[0].textContent : '';\n    };\n    ExcelExport.prototype.mergeOptions = function (JSON1, JSON2) {\n        var result = {};\n        var attrname = Object.keys(JSON1);\n        for (var index = 0; index < attrname.length; index++) {\n            if (attrname[parseInt(index.toString(), 10)] !== 'name') {\n                result[attrname[parseInt(index.toString(), 10)]] = JSON1[attrname[parseInt(index.toString(), 10)]];\n            }\n        }\n        attrname = Object.keys(JSON2);\n        for (var index = 0; index < attrname.length; index++) {\n            if (attrname[parseInt(index.toString(), 10)] !== 'name') {\n                result[attrname[parseInt(index.toString(), 10)]] = JSON2[attrname[parseInt(index.toString(), 10)]];\n            }\n        }\n        return result;\n    };\n    ExcelExport.prototype.getColumnStyle = function (gObj, columnIndex) {\n        var index = 0;\n        for (var _i = 0, _a = this.styles; _i < _a.length; _i++) {\n            var style = _a[_i];\n            if (style.name === gObj.element.id + 'column' + columnIndex) {\n                return index;\n            }\n            index++;\n        }\n        return undefined;\n    };\n    ExcelExport.prototype.headerRotation = function (args) {\n        var degree = args.style.rotation;\n        if (degree <= 90 && degree >= 0) {\n            args.style.hAlign = 'Left';\n        }\n        else if (degree > 90 && degree <= 180) {\n            args.style.hAlign = 'Right';\n        }\n        else {\n            degree = 180;\n            args.style.hAlign = 'Right';\n        }\n        args.style.rotation = degree;\n    };\n    ExcelExport.prototype.processHeaderContent = function (gObj, headerRow, indent, excelRows) {\n        var rowIndex = 1;\n        var gridRows = headerRow.rows;\n        // Column collection with respect to the records in the grid\n        var gridColumns = headerRow.columns;\n        var spannedCells = [];\n        if (indent > 0) {\n            var index = 0;\n            while (index !== indent) {\n                this.columns.push({ index: index + 1, width: 30 });\n                index++;\n            }\n        }\n        for (var col = 0; col < gridColumns.length; col++) {\n            this.parseStyles(gObj, gridColumns[parseInt(col.toString(), 10)], this.getRecordThemeStyle(this.theme), indent + col + 1);\n        }\n        var templateRowHeight;\n        for (var row = 0; row < gridRows.length; row++) {\n            var currentCellIndex = 1 + indent;\n            var cells = [];\n            for (var column = 0; column < gridRows[parseInt(row.toString(), 10)].cells.length; column++) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var style = {};\n                var cell = {};\n                var gridCell = gridRows[parseInt(row.toString(), 10)].cells[parseInt(column.toString(), 10)];\n                if (gridCell.cellType === CellType.HeaderIndent || gridCell.cellType === CellType.DetailHeader) {\n                    continue;\n                }\n                var result = { contains: true, index: 1 };\n                while (result.contains) {\n                    result = this.getIndex(spannedCells, rowIndex, currentCellIndex);\n                    currentCellIndex = result.index;\n                    if (!result.contains) {\n                        cell.index = result.index + gObj.childGridLevel;\n                        break;\n                    }\n                }\n                if (!isNullOrUndefined(gridCell.rowSpan) && gridCell.rowSpan !== 1) {\n                    cell.rowSpan = gridCell.rowSpan;\n                    for (var i = rowIndex; i < gridCell.rowSpan + rowIndex; i++) {\n                        var spannedCell = { rowIndex: 0, columnIndex: 0 };\n                        spannedCell.rowIndex = i;\n                        spannedCell.columnIndex = currentCellIndex;\n                        spannedCells.push(spannedCell);\n                    }\n                }\n                if (!isNullOrUndefined(gridCell.colSpan) && gridCell.colSpan !== 1) {\n                    cell.colSpan = gridCell.colSpan;\n                    currentCellIndex = currentCellIndex + cell.colSpan - 1;\n                }\n                cell.value = gridCell.column.headerText;\n                style = this.getHeaderThemeStyle(this.theme);\n                if (!isNullOrUndefined(gridCell.column.textAlign)) {\n                    style.hAlign = gridCell.column.textAlign.toLowerCase();\n                }\n                if (!isNullOrUndefined(gridCell.column.headerTextAlign)) {\n                    style.hAlign = gridCell.column.headerTextAlign.toLowerCase();\n                }\n                var excelHeaderCellArgs = { cell: cell, gridCell: gridCell, style: style };\n                gObj.trigger(events.excelHeaderQueryCellInfo, excelHeaderCellArgs);\n                if (excelHeaderCellArgs.style.rotation) {\n                    this.headerRotation(excelHeaderCellArgs);\n                }\n                if (!isNullOrUndefined(excelHeaderCellArgs.image) && !isNullOrUndefined(excelHeaderCellArgs.image.base64)) {\n                    templateRowHeight = this.setImage(excelHeaderCellArgs, currentCellIndex);\n                }\n                if (!isNullOrUndefined(excelHeaderCellArgs.hyperLink)) {\n                    excelHeaderCellArgs.cell.hyperlink = { target: excelHeaderCellArgs.hyperLink.target };\n                    cell.value = excelHeaderCellArgs.hyperLink.displayText || cell.value;\n                }\n                cell.style = excelHeaderCellArgs.style;\n                cells.push(cell);\n                currentCellIndex++;\n            }\n            var excelRow = { index: this.rowLength++, cells: cells };\n            if (!isNullOrUndefined(templateRowHeight)) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                excelRow.height = templateRowHeight;\n            }\n            excelRows.push(excelRow);\n        }\n        return excelRows;\n    };\n    ExcelExport.prototype.getHeaderThemeStyle = function (theme) {\n        var style = {};\n        style.fontSize = 12;\n        style.borders = { color: '#E0E0E0' };\n        style.bold = true;\n        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.header)) {\n            style = this.updateThemeStyle(theme.header, style);\n        }\n        return style;\n    };\n    ExcelExport.prototype.updateThemeStyle = function (themestyle, style) {\n        return extend(style, themestyle);\n    };\n    ExcelExport.prototype.getCaptionThemeStyle = function (theme) {\n        var style = {};\n        style.fontSize = 13;\n        style.backColor = '#F6F6F6';\n        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.caption)) {\n            style = this.updateThemeStyle(theme.caption, style);\n        }\n        return style;\n    };\n    ExcelExport.prototype.getRecordThemeStyle = function (theme) {\n        var style = {};\n        style.fontSize = 13;\n        style.borders = { color: '#E0E0E0' };\n        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.record)) {\n            style = this.updateThemeStyle(theme.record, style);\n        }\n        return style;\n    };\n    ExcelExport.prototype.processExcelHeader = function (header) {\n        if (!isNullOrUndefined(header.rows) && (this.expType === 'NewSheet' || this.rowLength === 1)) {\n            var noRows = void 0;\n            if (header.headerRows === undefined) {\n                this.rowLength = header.rows.length;\n            }\n            else {\n                this.rowLength = header.headerRows;\n            }\n            if (this.rowLength < header.rows.length) {\n                noRows = this.rowLength;\n            }\n            else {\n                noRows = header.rows.length;\n            }\n            this.rowLength++;\n            for (var row = 0; row < noRows; row++) {\n                var json = header.rows[parseInt(row.toString(), 10)];\n                //Row index\n                if (!(json.index !== null && !isNullOrUndefined(json.index))) {\n                    json.index = (row + 1);\n                }\n                this.updatedCellIndex(json);\n            }\n        }\n    };\n    ExcelExport.prototype.updatedCellIndex = function (json) {\n        var cellsLength = json.cells.length;\n        for (var cellId = 0; cellId < cellsLength; cellId++) {\n            var jsonCell = json.cells[parseInt(cellId.toString(), 10)];\n            //cell index\n            if (!(jsonCell.index !== null && !isNullOrUndefined(jsonCell.index))) {\n                jsonCell.index = (cellId + 1);\n            }\n        }\n        this.rows.push(json);\n    };\n    ExcelExport.prototype.processExcelFooter = function (footer) {\n        if (!isNullOrUndefined(footer.rows)) {\n            var noRows = void 0;\n            if (footer.footerRows === undefined) {\n                this.rowLength += footer.rows.length;\n            }\n            else {\n                if (footer.footerRows > footer.rows.length) {\n                    this.rowLength += (footer.footerRows - footer.rows.length);\n                    noRows = footer.rows.length;\n                }\n                else {\n                    noRows = footer.footerRows;\n                }\n            }\n            for (var row = 0; row < noRows; row++) {\n                var json = footer.rows[parseInt(row.toString(), 10)];\n                //Row index\n                if (json.index === null || json.index === undefined) {\n                    json.index = this.rowLength++;\n                }\n                else {\n                    json.index += this.rowLength;\n                }\n                this.updatedCellIndex(json);\n            }\n        }\n    };\n    ExcelExport.prototype.getIndex = function (spannedCells, rowIndex, columnIndex) {\n        for (var _i = 0, spannedCells_1 = spannedCells; _i < spannedCells_1.length; _i++) {\n            var spannedCell = spannedCells_1[_i];\n            if ((spannedCell.rowIndex === rowIndex) && (spannedCell.columnIndex === columnIndex)) {\n                columnIndex = columnIndex + 1;\n                return { contains: true, index: columnIndex };\n            }\n        }\n        return { contains: false, index: columnIndex };\n    };\n    ExcelExport.prototype.parseStyles = function (gObj, col, style, index) {\n        if (!isNullOrUndefined(col.format)) {\n            if (typeof col.format === 'object') {\n                var format = col.format;\n                style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n                if (!isNullOrUndefined(format.type)) {\n                    style.type = format.type === 'dateonly' ? 'date' : format.type.toLowerCase();\n                }\n            }\n            else {\n                style.numberFormat = col.format;\n                style.type = col.type === 'dateonly' ? 'date' : col.type;\n            }\n        }\n        if (!isNullOrUndefined(col.textAlign)) {\n            style.hAlign = col.textAlign.toLowerCase();\n        }\n        if (Object.keys(style).length > 0) {\n            style.name = gObj.element.id + 'column' + index;\n            this.styles.push(style);\n        }\n        if (!isNullOrUndefined(col.width) && col.width !== 'auto' && !gObj.childGridLevel) {\n            this.columns.push({ index: index + gObj.childGridLevel, width: typeof col.width === 'number' ?\n                    col.width : this.helper.getConvertedWidth(col.width) });\n        }\n    };\n    ExcelExport.prototype.destroy = function () {\n        //destroy for exporting\n    };\n    return ExcelExport;\n}());\nexport { ExcelExport };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}