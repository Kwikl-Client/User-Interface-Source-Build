{"ast":null,"code":"import { _PdfDictionary } from './../pdf-primitives';\nimport { PdfTemplate } from './../graphics/pdf-template';\n/**\n * `PdfAppearance` class represents the appearance of the annotation.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Get the first page\n * let page: PdfPage = document.getPage(0) as PdfPage;\n * // Create a new rubber stamp annotation\n * const annotation: PdfRubberStampAnnotation = new PdfRubberStampAnnotation(50, 100, 100, 50);\n * // Get the appearance of the annotation\n * let appearance: PdfAppearance = annotation.appearance;\n * // Create new image object by using JPEG image data as Base64 string format\n * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n * // Draw the image as the custom appearance for the annotation\n * appearance.normal.graphics.drawImage(image, 0, 0, 100, 50);\n * // Add annotation to the page\n * page.annotations.add(annotation);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfAppearance = /** @class */function () {\n  /**\n   * Initializes a new instance of the `PdfAppearance` class.\n   *\n   * @param {PdfAnnotation} annot - The annotation.\n   * @param {number[]} bounds - The bounds.\n   * @private\n   */\n  function PdfAppearance(annot, bounds) {\n    this._dictionary = new _PdfDictionary();\n    this._annotations = annot;\n    this._crossReference = annot._crossReference;\n    if (typeof bounds !== 'undefined') {\n      this._bounds = bounds;\n    }\n    this._initialize();\n  }\n  Object.defineProperty(PdfAppearance.prototype, \"normal\", {\n    /**\n     * Get the normal appearance of the annotation.\n     *\n     * @returns {PdfTemplate} Returns the normal appearance of the annotation.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Get the first page\n     * let page: PdfPage = document.getPage(0) as PdfPage;\n     * // Create a new rubber stamp annotation\n     * const annotation: PdfRubberStampAnnotation = new PdfRubberStampAnnotation(50, 100, 100, 50);\n     * // Get the appearance of the annotation\n     * let appearance: PdfAppearance = annotation.appearance;\n     * // Access the normal template of the appearance\n     * let template: PdfTemplate = appearance.normal;\n     * // Create new image object by using JPEG image data as Base64 string format\n     * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n     * // Draw the image as the custom appearance for the annotation\n     * template.graphics.drawImage(image, 0, 0, 100, 50);\n     * // Add annotation to the page\n     * page.annotations.add(annotation);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (!this._templateNormal && this._dictionary.has('AP')) {\n        this._templateNormal = this._dictionary.get('N');\n      }\n      return this._templateNormal;\n    },\n    /**\n     * Set the normal appearance of the annotation.\n     *\n     * @param {PdfTemplate} value The normal appearance of the annotation.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Get the first page\n     * let page: PdfPage = document.getPage(0) as PdfPage;\n     * // Create a new rubber stamp annotation\n     * const annotation: PdfRubberStampAnnotation = new PdfRubberStampAnnotation(50, 100, 100, 50);\n     * // Get the appearance of the annotation\n     * let appearance: PdfAppearance = annotation.appearance;\n     * // Access the normal template of the appearance\n     * let template: PdfTemplate = appearance.normal;\n     * // Create new image object by using JPEG image data as Base64 string format\n     * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n     * // Draw the image as the custom appearance for the annotation\n     * template.graphics.drawImage(image, 0, 0, 100, 50);\n     * // Add annotation to the page\n     * page.annotations.add(annotation);\n     * // Add a new rubber stamp annotation to the page\n     * const annotation2: PdfRubberStampAnnotation = new PdfRubberStampAnnotation(50, 200, 100, 50);\n     * // Set the normal appearance of the annotation\n     * annotation2.appearance.normal = annotation.appearance.normal;\n     * // Add annotation to the page\n     * page.annotations.add(annotation2);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      if (value) {\n        this._templateNormal = value;\n        this._dictionary.set('N', this._templateNormal);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfAppearance.prototype._initialize = function () {\n    this.normal = new PdfTemplate(this._bounds, this._crossReference);\n  };\n  return PdfAppearance;\n}();\nexport { PdfAppearance };","map":{"version":3,"names":["_PdfDictionary","PdfTemplate","PdfAppearance","annot","bounds","_dictionary","_annotations","_crossReference","_bounds","_initialize","Object","defineProperty","prototype","get","_templateNormal","has","set","value","enumerable","configurable","normal"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-pdf/src/pdf/core/annotations/pdf-appearance.js"],"sourcesContent":["import { _PdfDictionary } from './../pdf-primitives';\nimport { PdfTemplate } from './../graphics/pdf-template';\n/**\n * `PdfAppearance` class represents the appearance of the annotation.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Get the first page\n * let page: PdfPage = document.getPage(0) as PdfPage;\n * // Create a new rubber stamp annotation\n * const annotation: PdfRubberStampAnnotation = new PdfRubberStampAnnotation(50, 100, 100, 50);\n * // Get the appearance of the annotation\n * let appearance: PdfAppearance = annotation.appearance;\n * // Create new image object by using JPEG image data as Base64 string format\n * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n * // Draw the image as the custom appearance for the annotation\n * appearance.normal.graphics.drawImage(image, 0, 0, 100, 50);\n * // Add annotation to the page\n * page.annotations.add(annotation);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfAppearance = /** @class */ (function () {\n    /**\n     * Initializes a new instance of the `PdfAppearance` class.\n     *\n     * @param {PdfAnnotation} annot - The annotation.\n     * @param {number[]} bounds - The bounds.\n     * @private\n     */\n    function PdfAppearance(annot, bounds) {\n        this._dictionary = new _PdfDictionary();\n        this._annotations = annot;\n        this._crossReference = annot._crossReference;\n        if (typeof bounds !== 'undefined') {\n            this._bounds = bounds;\n        }\n        this._initialize();\n    }\n    Object.defineProperty(PdfAppearance.prototype, \"normal\", {\n        /**\n         * Get the normal appearance of the annotation.\n         *\n         * @returns {PdfTemplate} Returns the normal appearance of the annotation.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the first page\n         * let page: PdfPage = document.getPage(0) as PdfPage;\n         * // Create a new rubber stamp annotation\n         * const annotation: PdfRubberStampAnnotation = new PdfRubberStampAnnotation(50, 100, 100, 50);\n         * // Get the appearance of the annotation\n         * let appearance: PdfAppearance = annotation.appearance;\n         * // Access the normal template of the appearance\n         * let template: PdfTemplate = appearance.normal;\n         * // Create new image object by using JPEG image data as Base64 string format\n         * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n         * // Draw the image as the custom appearance for the annotation\n         * template.graphics.drawImage(image, 0, 0, 100, 50);\n         * // Add annotation to the page\n         * page.annotations.add(annotation);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (!this._templateNormal && this._dictionary.has('AP')) {\n                this._templateNormal = this._dictionary.get('N');\n            }\n            return this._templateNormal;\n        },\n        /**\n         * Set the normal appearance of the annotation.\n         *\n         * @param {PdfTemplate} value The normal appearance of the annotation.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the first page\n         * let page: PdfPage = document.getPage(0) as PdfPage;\n         * // Create a new rubber stamp annotation\n         * const annotation: PdfRubberStampAnnotation = new PdfRubberStampAnnotation(50, 100, 100, 50);\n         * // Get the appearance of the annotation\n         * let appearance: PdfAppearance = annotation.appearance;\n         * // Access the normal template of the appearance\n         * let template: PdfTemplate = appearance.normal;\n         * // Create new image object by using JPEG image data as Base64 string format\n         * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');\n         * // Draw the image as the custom appearance for the annotation\n         * template.graphics.drawImage(image, 0, 0, 100, 50);\n         * // Add annotation to the page\n         * page.annotations.add(annotation);\n         * // Add a new rubber stamp annotation to the page\n         * const annotation2: PdfRubberStampAnnotation = new PdfRubberStampAnnotation(50, 200, 100, 50);\n         * // Set the normal appearance of the annotation\n         * annotation2.appearance.normal = annotation.appearance.normal;\n         * // Add annotation to the page\n         * page.annotations.add(annotation2);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (value) {\n                this._templateNormal = value;\n                this._dictionary.set('N', this._templateNormal);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfAppearance.prototype._initialize = function () {\n        this.normal = new PdfTemplate(this._bounds, this._crossReference);\n    };\n    return PdfAppearance;\n}());\nexport { PdfAppearance };\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,qBAAqB;AACpD,SAASC,WAAW,QAAQ,4BAA4B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAa,GAAG,aAAe,YAAY;EAC3C;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,aAAaA,CAACC,KAAK,EAAEC,MAAM,EAAE;IAClC,IAAI,CAACC,WAAW,GAAG,IAAIL,cAAc,CAAC,CAAC;IACvC,IAAI,CAACM,YAAY,GAAGH,KAAK;IACzB,IAAI,CAACI,eAAe,GAAGJ,KAAK,CAACI,eAAe;IAC5C,IAAI,OAAOH,MAAM,KAAK,WAAW,EAAE;MAC/B,IAAI,CAACI,OAAO,GAAGJ,MAAM;IACzB;IACA,IAAI,CAACK,WAAW,CAAC,CAAC;EACtB;EACAC,MAAM,CAACC,cAAc,CAACT,aAAa,CAACU,SAAS,EAAE,QAAQ,EAAE;IACrD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI,CAAC,IAAI,CAACC,eAAe,IAAI,IAAI,CAACT,WAAW,CAACU,GAAG,CAAC,IAAI,CAAC,EAAE;QACrD,IAAI,CAACD,eAAe,GAAG,IAAI,CAACT,WAAW,CAACQ,GAAG,CAAC,GAAG,CAAC;MACpD;MACA,OAAO,IAAI,CAACC,eAAe;IAC/B,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQE,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAIA,KAAK,EAAE;QACP,IAAI,CAACH,eAAe,GAAGG,KAAK;QAC5B,IAAI,CAACZ,WAAW,CAACW,GAAG,CAAC,GAAG,EAAE,IAAI,CAACF,eAAe,CAAC;MACnD;IACJ,CAAC;IACDI,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFjB,aAAa,CAACU,SAAS,CAACH,WAAW,GAAG,YAAY;IAC9C,IAAI,CAACW,MAAM,GAAG,IAAInB,WAAW,CAAC,IAAI,CAACO,OAAO,EAAE,IAAI,CAACD,eAAe,CAAC;EACrE,CAAC;EACD,OAAOL,aAAa;AACxB,CAAC,CAAC,CAAE;AACJ,SAASA,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}