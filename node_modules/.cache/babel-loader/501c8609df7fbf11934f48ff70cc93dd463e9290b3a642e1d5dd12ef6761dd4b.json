{"ast":null,"code":"import { _PdfStream } from './base-stream';\nimport { _PdfCrossReference } from './pdf-cross-reference';\nimport { _Linearization } from './pdf-parser';\nimport { _isWhiteSpace, FormatError, _decode } from './utils';\nimport { _PdfCatalog } from './pdf-catalog';\nimport { _PdfDictionary, _PdfReference, _isName, _clearPrimitiveCaches } from './pdf-primitives';\nimport { PdfPage } from './pdf-page';\nimport { Save } from '@syncfusion/ej2-file-utils';\nimport { DataFormat, PdfPermissionFlag, PdfTextAlignment } from './enumerator';\nimport { PdfForm } from './form/form';\nimport { PdfBrush } from './graphics/pdf-graphics';\nimport { PdfFontFamily, PdfFontStyle, PdfStandardFont } from './fonts/pdf-standard-font';\nimport { PdfStringFormat, PdfVerticalAlignment } from './fonts/pdf-string-format';\nimport { _XfdfDocument } from './import-export/xfdf-document';\nimport { _JsonDocument } from './import-export/json-document';\nimport { _FdfDocument } from './import-export/fdf-document';\nimport { PdfBookmarkBase, _PdfNamedDestinationCollection } from './pdf-outline';\nimport { _XmlDocument } from './import-export/xml-document';\nimport { PdfFileStructure } from './pdf-file-structure';\n/**\n * Represents a PDF document and can be used to parse an existing PDF document.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Access first page\n * let page: PdfPage = document.getPage(0);\n * // Flatten annotations and form fields\n * document.flatten = true;\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfDocument = /** @class */function () {\n  function PdfDocument(data, password) {\n    this._headerSignature = new Uint8Array([0x25, 0x50, 0x44, 0x46, 0x2d]);\n    this._startXrefSignature = new Uint8Array([0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, 0x66]);\n    this._endObjSignature = new Uint8Array([0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a]);\n    this._version = '';\n    this._permissions = PdfPermissionFlag.default;\n    this._isEncrypted = false;\n    this._isUserPassword = false;\n    this._hasUserPasswordOnly = false;\n    this._encryptOnlyAttachment = false;\n    this._encryptMetaData = false;\n    this._isExport = false;\n    this._allowCustomData = false;\n    if (!data) {\n      throw new Error('PDF data cannot be undefined or null');\n    }\n    this._stream = new _PdfStream(typeof data === 'string' ? _decode(data) : data);\n    this._fileStructure = new PdfFileStructure();\n    this._crossReference = new _PdfCrossReference(this, password);\n    this._pages = new Map();\n    this._checkHeader();\n    this._crossReference._setStartXRef(this._startXRef);\n    try {\n      this._parse(false);\n    } catch (e) {\n      if (e.name === 'XRefParseException') {\n        this._parse(true);\n      } else {\n        throw e;\n      }\n    }\n    this._crossReference._version = this._version;\n  }\n  Object.defineProperty(PdfDocument.prototype, \"_allowImportCustomData\", {\n    get: function () {\n      return this._allowCustomData;\n    },\n    set: function (value) {\n      this._allowCustomData = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocument.prototype, \"_linearization\", {\n    get: function () {\n      if (!this._linear) {\n        var value = void 0;\n        try {\n          value = new _Linearization(this._stream);\n        } catch (err) {} // eslint-disable-line\n        this._linear = value;\n      }\n      return this._linear;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocument.prototype, \"_startXRef\", {\n    get: function () {\n      var stream = this._stream;\n      var startXRef = 0;\n      if (this._linearization && this._linearization.isValid) {\n        stream.reset();\n        if (this._find(stream, this._endObjSignature)) {\n          startXRef = stream.position + 6 - stream.start;\n        }\n      } else {\n        var step = 1024;\n        var startXRefLength = this._startXrefSignature.length;\n        var found = false;\n        var position = stream.end;\n        while (!found && position > 0) {\n          position -= step - startXRefLength;\n          if (position < 0) {\n            position = 0;\n          }\n          stream.position = position;\n          found = this._find(stream, this._startXrefSignature, step, true);\n        }\n        if (found) {\n          stream.skip(9);\n          var ch = void 0;\n          do {\n            ch = stream.getByte();\n          } while (_isWhiteSpace(ch));\n          var str = '';\n          while (ch >= 0x20 && ch <= 0x39) {\n            str += String.fromCharCode(ch);\n            ch = stream.getByte();\n          }\n          startXRef = parseInt(str, 10);\n          if (isNaN(startXRef)) {\n            startXRef = 0;\n          }\n        }\n      }\n      return startXRef;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocument.prototype, \"isEncrypted\", {\n    /**\n     * Gets a value indicating whether the document is encrypted. (Read Only).\n     *\n     * @returns {boolean} A boolean value indicates whether the document is encrypted.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Gets a value indicating whether the document is encrypted.\n     * let isEncrypted: boolean = document.isEncrypted;\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._isEncrypted;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocument.prototype, \"isUserPassword\", {\n    /**\n     * Gets a value indicating whether the document is decrypted using the user password. (Read only).\n     *\n     * @returns {boolean} A boolean value indicates whether the document is decrypted using the user password.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Gets a value indicating whether the document is decrypted using the user password\n     * let isUserPassword: boolean = document.isUserPassword;\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._isUserPassword;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocument.prototype, \"pageCount\", {\n    /**\n     * Gets the page count (Read only).\n     *\n     * @returns {number} Number of pages\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Gets the page count\n     * let count: number = document.pageCount;\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (typeof this._pageCount === 'undefined') {\n        this._pageCount = 0;\n        if (this._linearization && this._linearization.isValid) {\n          this._pageCount = this._linearization.pageCount;\n        } else {\n          this._pageCount = this._catalog.pageCount;\n        }\n      }\n      return this._pageCount;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocument.prototype, \"form\", {\n    /**\n     * Gets the PDF form fields included in the document (Read only).\n     *\n     * @returns {PdfForm} Form object\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access loaded form\n     * let form: PdfForm = document.form;\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (typeof this._form === 'undefined') {\n        this._form = new PdfForm(this._catalog.acroForm, this._crossReference);\n      }\n      return this._form;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocument.prototype, \"flatten\", {\n    /**\n     * Gets the boolean flag to flatten the annotations and form fields.\n     *\n     * @returns {boolean} Flag to flatten\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Gets the flatten value applied\n     * let flatten: boolean = document.flatten;\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._flatten;\n    },\n    /**\n     * Sets the boolean flag to flatten the annotations and form fields.\n     *\n     * @param {boolean} value to flatten\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Flatten PDF annotations and form fields\n     * document.flatten = true;\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      this._flatten = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocument.prototype, \"permissions\", {\n    /**\n     * Gets the permission flag of the PDF document (Read only).\n     *\n     * @returns {PdfPermissionFlag} permission flag. Default value is PdfPermissionFlag.default.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Gets the permission flag\n     * let permission: PdfPermissionFlag = document.permissions;\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (this._crossReference) {\n        var flag = this._crossReference._permissionFlags;\n        if (typeof flag !== 'undefined') {\n          this._permissions = flag & ~-3904;\n        }\n      }\n      return this._permissions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocument.prototype, \"bookmarks\", {\n    /**\n     * Gets the bookmarks (Read only).\n     *\n     * @returns {PdfBookmarkBase} Bookmarks.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Get bookmarks\n     * let bookmarks: PdfBookmarkBase = document.bookmarks;\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      var catalog = this._catalog;\n      if (catalog && catalog._catalogDictionary.has('Outlines')) {\n        var outlines = catalog._catalogDictionary.get('Outlines');\n        if (outlines) {\n          this._bookmarkBase = new PdfBookmarkBase(outlines, this._crossReference);\n          if (outlines.has('First')) {\n            this._bookmarkBase._reproduceTree();\n          }\n        }\n      }\n      return this._bookmarkBase;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocument.prototype, \"fileStructure\", {\n    /**\n     * Gets the internal structure of the PDF document.\n     *\n     * @returns {PdfFileStructure} The internal structure of the PDF document.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access the internal file structure of the PDF document\n     * let fileStructure: PdfFileStructure = document.fileStructure;\n     * // Get the cross reference type\n     * let type: PdfCrossReferenceType = fileStructure.crossReferenceType;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._fileStructure;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Gets the `PdfPage` at the specified index.\n   *\n   * @param {number} pageIndex Page index.\n   * @returns {PdfPage} PDF page at the specified index.\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access first page\n   * let page: PdfPage = document.getPage(0);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfDocument.prototype.getPage = function (pageIndex) {\n    var cachedPage = this._pages.get(pageIndex);\n    if (cachedPage) {\n      return cachedPage;\n    }\n    var _a = this,\n      _catalog = _a._catalog,\n      _linearization = _a._linearization;\n    var promise;\n    if (_linearization && _linearization.isValid && _linearization.pageFirst === pageIndex) {\n      promise = this._getLinearizationPage(pageIndex);\n    } else {\n      promise = _catalog.getPageDictionary(pageIndex);\n    }\n    var page = new PdfPage(this._crossReference, pageIndex, promise.dictionary, promise.reference);\n    this._pages.set(pageIndex, page);\n    return page;\n  };\n  PdfDocument.prototype.save = function (filename) {\n    this._doPostProcess(this._flatten);\n    if (typeof filename === 'string') {\n      Save.save(filename, new Blob([this._crossReference._save()], {\n        type: 'application/pdf'\n      }));\n    } else {\n      return this._crossReference._save();\n    }\n  };\n  /**\n   * Saves the document to the specified output stream and return the stream as Blob.\n   *\n   * @returns {Promise<{ blobData: Blob }>} Saved PDF data as `Blob`.\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data);\n   * // Save the document\n   * let data: Promise<{ blobData: Blob }> = document.saveAsBlob();\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfDocument.prototype.saveAsBlob = function () {\n    var _this = this;\n    return new Promise(function (resolve) {\n      var obj = {\n        blobData: new Blob([_this._crossReference._save()], {\n          type: 'application/pdf'\n        })\n      };\n      resolve(obj);\n    });\n  };\n  PdfDocument.prototype.exportAnnotations = function (arg1, arg2) {\n    this._isExport = true;\n    this._doPostProcessOnAnnotations();\n    var helper;\n    var settings;\n    if (arg1 && arg1 instanceof PdfAnnotationExportSettings) {\n      settings = arg1;\n    } else if (arg2 && arg2 instanceof PdfAnnotationExportSettings) {\n      settings = arg2;\n    }\n    if (settings) {\n      if (settings.dataFormat === DataFormat.xfdf) {\n        helper = new _XfdfDocument();\n      } else if (settings.dataFormat === DataFormat.json) {\n        helper = new _JsonDocument();\n      } else if (settings.dataFormat === DataFormat.fdf) {\n        helper = new _FdfDocument();\n      } else {\n        return undefined;\n      }\n      helper.exportAppearance = settings.exportAppearance;\n    } else {\n      helper = new _XfdfDocument();\n    }\n    var result = helper._exportAnnotations(this);\n    if (arg1 && typeof arg1 === 'string') {\n      Save.save(arg1, new Blob([result], {\n        type: 'text/plain'\n      }));\n    } else {\n      return result;\n    }\n  };\n  PdfDocument.prototype.exportFormData = function (arg1, arg2) {\n    this._doPostProcessOnFormFields();\n    var helper;\n    var settings;\n    if (arg1 && arg1 instanceof PdfFormFieldExportSettings) {\n      settings = arg1;\n    } else if (arg2 && arg2 instanceof PdfFormFieldExportSettings) {\n      settings = arg2;\n    }\n    if (settings) {\n      if (settings.dataFormat === DataFormat.xfdf) {\n        helper = new _XfdfDocument(settings.exportName);\n      } else if (settings.dataFormat === DataFormat.json) {\n        helper = new _JsonDocument(settings.exportName);\n      } else if (settings.dataFormat === DataFormat.fdf) {\n        helper = new _FdfDocument(settings.exportName);\n      } else if (settings.dataFormat === DataFormat.xml) {\n        helper = new _XmlDocument(settings.exportName);\n      } else {\n        return undefined;\n      }\n      helper._asPerSpecification = settings.asPerSpecification;\n    } else {\n      helper = new _XfdfDocument();\n      helper._asPerSpecification = false;\n    }\n    if (arg1 && typeof arg1 === 'string') {\n      Save.save(arg1, new Blob([helper._exportFormFields(this)], {\n        type: 'text/plain'\n      }));\n    } else {\n      return helper._exportFormFields(this);\n    }\n  };\n  PdfDocument.prototype.importAnnotations = function (data, dataFormat) {\n    if (dataFormat === DataFormat.xfdf) {\n      var xfdf = new _XfdfDocument();\n      xfdf._importAnnotations(this, typeof data === 'string' ? _decode(data) : data);\n    } else if (dataFormat === DataFormat.json) {\n      var json = new _JsonDocument();\n      json._importAnnotations(this, typeof data === 'string' ? _decode(data) : data);\n    } else if (dataFormat === DataFormat.fdf) {\n      var fdf = new _FdfDocument();\n      fdf._importAnnotations(this, typeof data === 'string' ? _decode(data) : data);\n    }\n  };\n  PdfDocument.prototype.importFormData = function (data, dataFormat) {\n    if (this.form.count > 0) {\n      if (dataFormat === DataFormat.xfdf) {\n        var xfdf = new _XfdfDocument();\n        xfdf._importFormData(this, typeof data === 'string' ? _decode(data) : data);\n      } else if (dataFormat === DataFormat.json) {\n        var json = new _JsonDocument();\n        json._importFormData(this, typeof data === 'string' ? _decode(data) : data);\n      } else if (dataFormat === DataFormat.fdf) {\n        var fdf = new _FdfDocument();\n        fdf._importFormData(this, typeof data === 'string' ? _decode(data) : data);\n      } else if (dataFormat === DataFormat.xml) {\n        var xml = new _XmlDocument();\n        xml._importFormData(this, typeof data === 'string' ? _decode(data) : data);\n      }\n    }\n  };\n  /**\n   * Disposes the current instance of `PdfDocument` class.\n   *\n   * @returns {void} Nothing.\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data);\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfDocument.prototype.destroy = function () {\n    if (this._crossReference) {\n      this._crossReference._destroy();\n      this._crossReference = undefined;\n    }\n    if (this._catalog) {\n      this._catalog._destroy();\n      this._catalog = undefined;\n    }\n    this._endObjSignature = undefined;\n    this._headerSignature = undefined;\n    if (this._pages && this._pages.size > 0) {\n      this._pages.forEach(function (value) {\n        value._destroy();\n      });\n    }\n    this._pages.clear();\n    this._pages = undefined;\n    this._startXrefSignature = undefined;\n    this._stream = undefined;\n    this._form = undefined;\n    _clearPrimitiveCaches();\n  };\n  Object.defineProperty(PdfDocument.prototype, \"_destinationCollection\", {\n    get: function () {\n      if (this._namedDestinationCollection === null || typeof this._namedDestinationCollection === 'undefined') {\n        if (this._catalog._catalogDictionary.has('Names')) {\n          var names = this._catalog._catalogDictionary.get('Names');\n          this._namedDestinationCollection = new _PdfNamedDestinationCollection(names, this._crossReference);\n        } else {\n          this._namedDestinationCollection = new _PdfNamedDestinationCollection();\n        }\n      }\n      return this._namedDestinationCollection;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfDocument.prototype._getLinearizationPage = function (pageIndex) {\n    var _a = this,\n      _catalog = _a._catalog,\n      _linearization = _a._linearization,\n      _crossReference = _a._crossReference;\n    var ref = _PdfReference.get(_linearization.objectNumberFirst, 0);\n    try {\n      var obj = _crossReference._fetch(ref); // eslint-disable-line\n      if (obj instanceof _PdfDictionary) {\n        var type = obj.get('Type');\n        if (_isName(type, 'Page') || !obj.has('Type') && !obj.has('Kids')) {\n          if (!_catalog.pageKidsCountCache.has(ref)) {\n            _catalog.pageKidsCountCache.put(ref, 1);\n          }\n          if (!_catalog.pageIndexCache.has(ref)) {\n            _catalog.pageIndexCache.put(ref, 0);\n          }\n          return {\n            dictionary: obj,\n            reference: ref\n          };\n        }\n      }\n      throw new FormatError('The Linearization dictionary does not point to a valid Page dictionary.');\n    } catch (reason) {\n      return _catalog.getPageDictionary(pageIndex);\n    }\n  };\n  PdfDocument.prototype._checkHeader = function () {\n    var stream = this._stream;\n    stream.reset();\n    if (!this._find(stream, this._headerSignature)) {\n      return;\n    }\n    stream.moveStart();\n    var version = '';\n    var ch = stream.getByte();\n    while (ch > 0x20) {\n      if (version.length >= 12) {\n        break;\n      }\n      version += String.fromCharCode(ch);\n      ch = stream.getByte();\n    }\n    if (!this._version) {\n      this._version = version.substring(5);\n    }\n  };\n  PdfDocument.prototype._parse = function (recoveryMode) {\n    this._crossReference._parse(recoveryMode);\n    this._catalog = new _PdfCatalog(this._crossReference);\n    if (this._catalog.version) {\n      this._version = this._catalog.version;\n    }\n  };\n  PdfDocument.prototype._find = function (stream, signature, limit, backwards) {\n    if (limit === void 0) {\n      limit = 1024;\n    }\n    if (backwards === void 0) {\n      backwards = false;\n    }\n    var signatureLength = signature.length;\n    var scanBytes = stream.peekBytes(limit);\n    var scanLength = scanBytes.length - signatureLength;\n    if (scanLength <= 0) {\n      return false;\n    }\n    if (backwards) {\n      var signatureEnd = signatureLength - 1;\n      var position = scanBytes.length - 1;\n      while (position >= signatureEnd) {\n        var j = 0;\n        while (j < signatureLength && scanBytes[position - j] === signature[signatureEnd - j]) {\n          j++;\n        }\n        if (j >= signatureLength) {\n          stream.position += position - signatureEnd;\n          return true;\n        }\n        position--;\n      }\n    } else {\n      var position = 0;\n      while (position <= scanLength) {\n        var j = 0;\n        while (j < signatureLength && scanBytes[position + j] === signature[j]) {\n          // eslint-disable-line\n          j++;\n        }\n        if (j >= signatureLength) {\n          stream.position += position;\n          return true;\n        }\n        position++;\n      }\n    }\n    return false;\n  };\n  PdfDocument.prototype._doPostProcess = function (isFlatten) {\n    if (isFlatten === void 0) {\n      isFlatten = false;\n    }\n    this._doPostProcessOnFormFields(isFlatten);\n    this._doPostProcessOnAnnotations(isFlatten);\n  };\n  PdfDocument.prototype._doPostProcessOnFormFields = function (isFlatten) {\n    if (isFlatten === void 0) {\n      isFlatten = false;\n    }\n    this.form._doPostProcess(isFlatten);\n    if (isFlatten) {\n      var formObject = this._catalog._catalogDictionary.getRaw('AcroForm');\n      var dictionary = new _PdfDictionary(this._crossReference);\n      dictionary._updated = true;\n      if (formObject instanceof _PdfReference) {\n        this._crossReference._cacheMap.set(formObject, dictionary);\n      } else {\n        this.form._dictionary = dictionary;\n        this._crossReference._allowCatalog = true;\n      }\n      this.form._clear();\n    }\n  };\n  PdfDocument.prototype._doPostProcessOnAnnotations = function (isFlatten) {\n    if (isFlatten === void 0) {\n      isFlatten = false;\n    }\n    for (var i = 0; i < this.pageCount; i++) {\n      var page = this.getPage(i);\n      page.annotations._isExport = this._isExport;\n      page.annotations._doPostProcess(isFlatten);\n      if (isFlatten) {\n        if (page._pageDictionary.has('Annots')) {\n          delete page._pageDictionary._map.Annots;\n          page._pageDictionary._updated = true;\n        }\n        page.annotations._clear();\n      }\n    }\n  };\n  PdfDocument.prototype._addWatermarkText = function () {\n    if (this.pageCount > 0) {\n      for (var index = 0; index < this._pageCount; index++) {\n        var page = this.getPage(index);\n        if (page) {\n          try {\n            var graphics = page.graphics;\n            graphics.save();\n            graphics.setTransparency(0.20);\n            graphics.drawRectangle(0, 0, page.size[0], 33.75, new PdfBrush([255, 255, 255]));\n            graphics.restore();\n            graphics.save();\n            graphics.setTransparency(0.50);\n            var font = new PdfStandardFont(PdfFontFamily.helvetica, 12, PdfFontStyle.regular);\n            var format = new PdfStringFormat(PdfTextAlignment.center, PdfVerticalAlignment.middle);\n            graphics.drawString('Created with a trial version of Syncfusion Essential PDF', font, [0, 0, page.size[0], 33.75], null, new PdfBrush([0, 0, 0]), format);\n            graphics.restore();\n          } catch (e) {} // eslint-disable-line\n        }\n      }\n    }\n  };\n  return PdfDocument;\n}();\nexport { PdfDocument };\n/**\n * Represents annotation export settings.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Sets export data format as JSON type to annotation export settings\n * let settings: PdfAnnotationExportSettings = new PdfAnnotationExportSettings();\n * // Set the data format defined in annotation export settings\n * settings.dataFormat = DataFormat.json;\n * // Export annotations to JSON format\n * let json: Uint8Array = document.exportAnnotations(settings);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfAnnotationExportSettings = /** @class */function () {\n  function PdfAnnotationExportSettings() {\n    this._format = DataFormat.xfdf;\n    this._exportAppearance = false;\n  }\n  Object.defineProperty(PdfAnnotationExportSettings.prototype, \"dataFormat\", {\n    /**\n     * Gets the data format defined in annotation export settings.\n     *\n     * @returns {DataFormat} - Returns the data format.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Sets export data format as JSON type to annotation export settings\n     * let settings: PdfAnnotationExportSettings = new PdfAnnotationExportSettings();\n     * // Export annotations to JSON format\n     * let json: Uint8Array = document.exportAnnotations(settings);\n     * // Get the data format defined in annotation export settings\n     * let dataFormat: DataFormat = settings.dataFormat;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._format;\n    },\n    /**\n     * Sets the data format defined in annotation export settings.\n     *\n     * @param {DataFormat} format - Specifies the data format.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Sets export data format as JSON type to annotation export settings\n     * let settings: PdfAnnotationExportSettings = new PdfAnnotationExportSettings();\n     * // Set the data format defined in annotation export settings\n     * settings.dataFormat = DataFormat.json;\n     * // Export annotations to JSON format\n     * let json: Uint8Array = document.exportAnnotations(settings);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (format) {\n      this._format = format;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfAnnotationExportSettings.prototype, \"exportAppearance\", {\n    /**\n     * Gets the boolean value indicating whether the appearance of a particular object can be exported or not.\n     *\n     * @returns {boolean} - Returns the boolean value.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Sets the annotation export settings with enabled export appearance.\n     * let settings: PdfAnnotationExportSettings = new PdfAnnotationExportSettings();\n     * // Export annotations to XFDF format\n     * let xfdf: Uint8Array = document.exportAnnotations(settings);\n     * // Get the boolean value indicating whether the appearance of a particular object can be exported or not\n     * let appearance: boolean = settings.exportAppearance;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._exportAppearance;\n    },\n    /**\n     * Sets the boolean value indicating whether the appearance of a particular object can be exported or not.\n     *\n     * @param {boolean} value - The boolean value.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Sets the annotation export settings with enabled export appearance.\n     * let settings: PdfAnnotationExportSettings = new PdfAnnotationExportSettings();\n     * // Set the boolean value indicating whether the appearance of a particular object can be exported or not\n     * settings.exportAppearance = true;\n     * // Export annotations to XFDF format\n     * let xfdf: Uint8Array = document.exportAnnotations(settings);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      this._exportAppearance = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfAnnotationExportSettings;\n}();\nexport { PdfAnnotationExportSettings };\n/**\n * Represents form fields export settings.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Sets the form field data export settings with output data format.\n * let settings: PdfFormFieldExportSettings = new PdfFormFieldExportSettings();\n * // Set the data format defined in form field export settings.\n * settings.dataFormat = DataFormat.json;\n * // Export form field to JSON format\n * let json: Uint8Array = document.exportFormData(settings);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfFormFieldExportSettings = /** @class */function () {\n  function PdfFormFieldExportSettings() {\n    this._format = DataFormat.xfdf;\n    this._exportName = '';\n    this._asPerSpecification = true;\n  }\n  Object.defineProperty(PdfFormFieldExportSettings.prototype, \"dataFormat\", {\n    /**\n     * Gets the data format defined in form field export settings.\n     *\n     * @returns {DataFormat} - Returns the data format.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Sets the form field data export settings with output data format.\n     * let settings: PdfFormFieldExportSettings = new PdfFormFieldExportSettings();\n     * // Export form field to JSON format\n     * let json: Uint8Array = document.exportFormData(settings);\n     * // Get the data format defined in form field export settings\n     * let dataFormat: DataFormat = settings.dataFormat;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._format;\n    },\n    /**\n     * Sets the data format defined in form field export settings.\n     *\n     * @param {DataFormat} format - Specifies the data format.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Sets the form field data export settings with output data format.\n     * let settings: PdfFormFieldExportSettings = new PdfFormFieldExportSettings();\n     * // Set the data format defined in form field export settings.\n     * settings.dataFormat = DataFormat.json;\n     * // Export form field to JSON format\n     * let json: Uint8Array = document.exportFormData(settings);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (format) {\n      this._format = format;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFormFieldExportSettings.prototype, \"exportName\", {\n    /**\n     * Gets the export name defined in form field export settings.\n     *\n     * @returns {string} - Returns the string value.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Sets the form field data export settings with export name.\n     * let settings: PdfFormFieldExportSettings = new PdfFormFieldExportSettings();\n     * // Export form field to JSON format\n     * let json: Uint8Array = document.exportFormData(settings);\n     * // Get the export name defined in form field export settings\n     * let name: boolean = settings.exportName;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._exportName;\n    },\n    /**\n     * Sets the export name defined in form field export settings.\n     *\n     * @param {string} name - Specifies the export name of the form.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Sets the form field data export settings with export name.\n     * let settings: PdfFormFieldExportSettings = new PdfFormFieldExportSettings();\n     * // Set the export name defined in form field export settings.\n     * settings.exportName = ‘JobApplication’.\n     * // Export form field to JSON format\n     * let json: Uint8Array = document.exportFormData(settings);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (name) {\n      this._exportName = name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFormFieldExportSettings.prototype, \"asPerSpecification\", {\n    /**\n     * Gets the boolean value indicating whether the data in a form field can be exported based on a certain specification.\n     *\n     * @returns {boolean} - Returns the boolean value.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Sets the boolean value indicating whether the data in a form field can be exported based on a certain specification.\n     * let settings: PdfFormFieldExportSettings = new PdfFormFieldExportSettings();\n     * // Export form field to JSON format\n     * let json: Uint8Array = document.exportFormData(settings);\n     * // Get the boolean value indicating whether the data in a form field can be exported based on a certain specification.\n     * let asPerSpecification: boolean = settings.asPerSpecification;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._asPerSpecification;\n    },\n    /**\n     * Sets the boolean value indicating whether the data in a form field can be exported based on a certain specification.\n     *\n     * @param {boolean} value - The boolean value.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Sets the boolean value indicating whether the data in a form field can be exported based on a certain specification.\n     * let settings: PdfFormFieldExportSettings = new PdfFormFieldExportSettings();\n     * // Set the boolean value indicating whether the data in a form field can be exported based on a certain specification.\n     * settings.asPerSpecification = true;\n     * // Export form field to JSON format\n     * let json: Uint8Array = document.exportFormData(settings);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      this._asPerSpecification = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfFormFieldExportSettings;\n}();\nexport { PdfFormFieldExportSettings };","map":{"version":3,"names":["_PdfStream","_PdfCrossReference","_Linearization","_isWhiteSpace","FormatError","_decode","_PdfCatalog","_PdfDictionary","_PdfReference","_isName","_clearPrimitiveCaches","PdfPage","Save","DataFormat","PdfPermissionFlag","PdfTextAlignment","PdfForm","PdfBrush","PdfFontFamily","PdfFontStyle","PdfStandardFont","PdfStringFormat","PdfVerticalAlignment","_XfdfDocument","_JsonDocument","_FdfDocument","PdfBookmarkBase","_PdfNamedDestinationCollection","_XmlDocument","PdfFileStructure","PdfDocument","data","password","_headerSignature","Uint8Array","_startXrefSignature","_endObjSignature","_version","_permissions","default","_isEncrypted","_isUserPassword","_hasUserPasswordOnly","_encryptOnlyAttachment","_encryptMetaData","_isExport","_allowCustomData","Error","_stream","_fileStructure","_crossReference","_pages","Map","_checkHeader","_setStartXRef","_startXRef","_parse","e","name","Object","defineProperty","prototype","get","set","value","enumerable","configurable","_linear","err","stream","startXRef","_linearization","isValid","reset","_find","position","start","step","startXRefLength","length","found","end","skip","ch","getByte","str","String","fromCharCode","parseInt","isNaN","_pageCount","pageCount","_catalog","_form","acroForm","_flatten","flag","_permissionFlags","catalog","_catalogDictionary","has","outlines","_bookmarkBase","_reproduceTree","getPage","pageIndex","cachedPage","_a","promise","pageFirst","_getLinearizationPage","getPageDictionary","page","dictionary","reference","save","filename","_doPostProcess","Blob","_save","type","saveAsBlob","_this","Promise","resolve","obj","blobData","exportAnnotations","arg1","arg2","_doPostProcessOnAnnotations","helper","settings","PdfAnnotationExportSettings","dataFormat","xfdf","json","fdf","undefined","exportAppearance","result","_exportAnnotations","exportFormData","_doPostProcessOnFormFields","PdfFormFieldExportSettings","exportName","xml","_asPerSpecification","asPerSpecification","_exportFormFields","importAnnotations","_importAnnotations","importFormData","form","count","_importFormData","destroy","_destroy","size","forEach","clear","_namedDestinationCollection","names","ref","objectNumberFirst","_fetch","pageKidsCountCache","put","pageIndexCache","reason","moveStart","version","substring","recoveryMode","signature","limit","backwards","signatureLength","scanBytes","peekBytes","scanLength","signatureEnd","j","isFlatten","formObject","getRaw","_updated","_cacheMap","_dictionary","_allowCatalog","_clear","i","annotations","_pageDictionary","_map","Annots","_addWatermarkText","index","graphics","setTransparency","drawRectangle","restore","font","helvetica","regular","format","center","middle","drawString","_format","_exportAppearance","_exportName"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-pdf/src/pdf/core/pdf-document.js"],"sourcesContent":["import { _PdfStream } from './base-stream';\nimport { _PdfCrossReference } from './pdf-cross-reference';\nimport { _Linearization } from './pdf-parser';\nimport { _isWhiteSpace, FormatError, _decode } from './utils';\nimport { _PdfCatalog } from './pdf-catalog';\nimport { _PdfDictionary, _PdfReference, _isName, _clearPrimitiveCaches } from './pdf-primitives';\nimport { PdfPage } from './pdf-page';\nimport { Save } from '@syncfusion/ej2-file-utils';\nimport { DataFormat, PdfPermissionFlag, PdfTextAlignment } from './enumerator';\nimport { PdfForm } from './form/form';\nimport { PdfBrush } from './graphics/pdf-graphics';\nimport { PdfFontFamily, PdfFontStyle, PdfStandardFont } from './fonts/pdf-standard-font';\nimport { PdfStringFormat, PdfVerticalAlignment } from './fonts/pdf-string-format';\nimport { _XfdfDocument } from './import-export/xfdf-document';\nimport { _JsonDocument } from './import-export/json-document';\nimport { _FdfDocument } from './import-export/fdf-document';\nimport { PdfBookmarkBase, _PdfNamedDestinationCollection } from './pdf-outline';\nimport { _XmlDocument } from './import-export/xml-document';\nimport { PdfFileStructure } from './pdf-file-structure';\n/**\n * Represents a PDF document and can be used to parse an existing PDF document.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Access first page\n * let page: PdfPage = document.getPage(0);\n * // Flatten annotations and form fields\n * document.flatten = true;\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfDocument = /** @class */ (function () {\n    function PdfDocument(data, password) {\n        this._headerSignature = new Uint8Array([0x25, 0x50, 0x44, 0x46, 0x2d]);\n        this._startXrefSignature = new Uint8Array([0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, 0x66]);\n        this._endObjSignature = new Uint8Array([0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a]);\n        this._version = '';\n        this._permissions = PdfPermissionFlag.default;\n        this._isEncrypted = false;\n        this._isUserPassword = false;\n        this._hasUserPasswordOnly = false;\n        this._encryptOnlyAttachment = false;\n        this._encryptMetaData = false;\n        this._isExport = false;\n        this._allowCustomData = false;\n        if (!data) {\n            throw new Error('PDF data cannot be undefined or null');\n        }\n        this._stream = new _PdfStream(typeof data === 'string' ? _decode(data) : data);\n        this._fileStructure = new PdfFileStructure();\n        this._crossReference = new _PdfCrossReference(this, password);\n        this._pages = new Map();\n        this._checkHeader();\n        this._crossReference._setStartXRef(this._startXRef);\n        try {\n            this._parse(false);\n        }\n        catch (e) {\n            if (e.name === 'XRefParseException') {\n                this._parse(true);\n            }\n            else {\n                throw e;\n            }\n        }\n        this._crossReference._version = this._version;\n    }\n    Object.defineProperty(PdfDocument.prototype, \"_allowImportCustomData\", {\n        get: function () {\n            return this._allowCustomData;\n        },\n        set: function (value) {\n            this._allowCustomData = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument.prototype, \"_linearization\", {\n        get: function () {\n            if (!this._linear) {\n                var value = void 0;\n                try {\n                    value = new _Linearization(this._stream);\n                }\n                catch (err) { } // eslint-disable-line\n                this._linear = value;\n            }\n            return this._linear;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument.prototype, \"_startXRef\", {\n        get: function () {\n            var stream = this._stream;\n            var startXRef = 0;\n            if (this._linearization && this._linearization.isValid) {\n                stream.reset();\n                if (this._find(stream, this._endObjSignature)) {\n                    startXRef = stream.position + 6 - stream.start;\n                }\n            }\n            else {\n                var step = 1024;\n                var startXRefLength = this._startXrefSignature.length;\n                var found = false;\n                var position = stream.end;\n                while (!found && position > 0) {\n                    position -= step - startXRefLength;\n                    if (position < 0) {\n                        position = 0;\n                    }\n                    stream.position = position;\n                    found = this._find(stream, this._startXrefSignature, step, true);\n                }\n                if (found) {\n                    stream.skip(9);\n                    var ch = void 0;\n                    do {\n                        ch = stream.getByte();\n                    } while (_isWhiteSpace(ch));\n                    var str = '';\n                    while (ch >= 0x20 && ch <= 0x39) {\n                        str += String.fromCharCode(ch);\n                        ch = stream.getByte();\n                    }\n                    startXRef = parseInt(str, 10);\n                    if (isNaN(startXRef)) {\n                        startXRef = 0;\n                    }\n                }\n            }\n            return startXRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument.prototype, \"isEncrypted\", {\n        /**\n         * Gets a value indicating whether the document is encrypted. (Read Only).\n         *\n         * @returns {boolean} A boolean value indicates whether the document is encrypted.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Gets a value indicating whether the document is encrypted.\n         * let isEncrypted: boolean = document.isEncrypted;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._isEncrypted;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument.prototype, \"isUserPassword\", {\n        /**\n         * Gets a value indicating whether the document is decrypted using the user password. (Read only).\n         *\n         * @returns {boolean} A boolean value indicates whether the document is decrypted using the user password.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Gets a value indicating whether the document is decrypted using the user password\n         * let isUserPassword: boolean = document.isUserPassword;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._isUserPassword;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument.prototype, \"pageCount\", {\n        /**\n         * Gets the page count (Read only).\n         *\n         * @returns {number} Number of pages\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Gets the page count\n         * let count: number = document.pageCount;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this._pageCount === 'undefined') {\n                this._pageCount = 0;\n                if (this._linearization && this._linearization.isValid) {\n                    this._pageCount = this._linearization.pageCount;\n                }\n                else {\n                    this._pageCount = this._catalog.pageCount;\n                }\n            }\n            return this._pageCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument.prototype, \"form\", {\n        /**\n         * Gets the PDF form fields included in the document (Read only).\n         *\n         * @returns {PdfForm} Form object\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access loaded form\n         * let form: PdfForm = document.form;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this._form === 'undefined') {\n                this._form = new PdfForm(this._catalog.acroForm, this._crossReference);\n            }\n            return this._form;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument.prototype, \"flatten\", {\n        /**\n         * Gets the boolean flag to flatten the annotations and form fields.\n         *\n         * @returns {boolean} Flag to flatten\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Gets the flatten value applied\n         * let flatten: boolean = document.flatten;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._flatten;\n        },\n        /**\n         * Sets the boolean flag to flatten the annotations and form fields.\n         *\n         * @param {boolean} value to flatten\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Flatten PDF annotations and form fields\n         * document.flatten = true;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._flatten = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument.prototype, \"permissions\", {\n        /**\n         * Gets the permission flag of the PDF document (Read only).\n         *\n         * @returns {PdfPermissionFlag} permission flag. Default value is PdfPermissionFlag.default.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Gets the permission flag\n         * let permission: PdfPermissionFlag = document.permissions;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (this._crossReference) {\n                var flag = this._crossReference._permissionFlags;\n                if (typeof flag !== 'undefined') {\n                    this._permissions = (flag & ~-3904);\n                }\n            }\n            return this._permissions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument.prototype, \"bookmarks\", {\n        /**\n         * Gets the bookmarks (Read only).\n         *\n         * @returns {PdfBookmarkBase} Bookmarks.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get bookmarks\n         * let bookmarks: PdfBookmarkBase = document.bookmarks;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            var catalog = this._catalog;\n            if (catalog && catalog._catalogDictionary.has('Outlines')) {\n                var outlines = catalog._catalogDictionary.get('Outlines');\n                if (outlines) {\n                    this._bookmarkBase = new PdfBookmarkBase(outlines, this._crossReference);\n                    if (outlines.has('First')) {\n                        this._bookmarkBase._reproduceTree();\n                    }\n                }\n            }\n            return this._bookmarkBase;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument.prototype, \"fileStructure\", {\n        /**\n         * Gets the internal structure of the PDF document.\n         *\n         * @returns {PdfFileStructure} The internal structure of the PDF document.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the internal file structure of the PDF document\n         * let fileStructure: PdfFileStructure = document.fileStructure;\n         * // Get the cross reference type\n         * let type: PdfCrossReferenceType = fileStructure.crossReferenceType;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._fileStructure;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the `PdfPage` at the specified index.\n     *\n     * @param {number} pageIndex Page index.\n     * @returns {PdfPage} PDF page at the specified index.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfDocument.prototype.getPage = function (pageIndex) {\n        var cachedPage = this._pages.get(pageIndex);\n        if (cachedPage) {\n            return cachedPage;\n        }\n        var _a = this, _catalog = _a._catalog, _linearization = _a._linearization;\n        var promise;\n        if (_linearization && _linearization.isValid && _linearization.pageFirst === pageIndex) {\n            promise = this._getLinearizationPage(pageIndex);\n        }\n        else {\n            promise = _catalog.getPageDictionary(pageIndex);\n        }\n        var page = new PdfPage(this._crossReference, pageIndex, promise.dictionary, promise.reference);\n        this._pages.set(pageIndex, page);\n        return page;\n    };\n    PdfDocument.prototype.save = function (filename) {\n        this._doPostProcess(this._flatten);\n        if (typeof filename === 'string') {\n            Save.save(filename, new Blob([this._crossReference._save()], { type: 'application/pdf' }));\n        }\n        else {\n            return this._crossReference._save();\n        }\n    };\n    /**\n     * Saves the document to the specified output stream and return the stream as Blob.\n     *\n     * @returns {Promise<{ blobData: Blob }>} Saved PDF data as `Blob`.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Save the document\n     * let data: Promise<{ blobData: Blob }> = document.saveAsBlob();\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfDocument.prototype.saveAsBlob = function () {\n        var _this = this;\n        return new Promise(function (resolve) {\n            var obj = { blobData: new Blob([_this._crossReference._save()], { type: 'application/pdf' }) };\n            resolve(obj);\n        });\n    };\n    PdfDocument.prototype.exportAnnotations = function (arg1, arg2) {\n        this._isExport = true;\n        this._doPostProcessOnAnnotations();\n        var helper;\n        var settings;\n        if (arg1 && arg1 instanceof PdfAnnotationExportSettings) {\n            settings = arg1;\n        }\n        else if (arg2 && arg2 instanceof PdfAnnotationExportSettings) {\n            settings = arg2;\n        }\n        if (settings) {\n            if (settings.dataFormat === DataFormat.xfdf) {\n                helper = new _XfdfDocument();\n            }\n            else if (settings.dataFormat === DataFormat.json) {\n                helper = new _JsonDocument();\n            }\n            else if (settings.dataFormat === DataFormat.fdf) {\n                helper = new _FdfDocument();\n            }\n            else {\n                return undefined;\n            }\n            helper.exportAppearance = settings.exportAppearance;\n        }\n        else {\n            helper = new _XfdfDocument();\n        }\n        var result = helper._exportAnnotations(this);\n        if (arg1 && typeof arg1 === 'string') {\n            Save.save(arg1, new Blob([result], { type: 'text/plain' }));\n        }\n        else {\n            return result;\n        }\n    };\n    PdfDocument.prototype.exportFormData = function (arg1, arg2) {\n        this._doPostProcessOnFormFields();\n        var helper;\n        var settings;\n        if (arg1 && arg1 instanceof PdfFormFieldExportSettings) {\n            settings = arg1;\n        }\n        else if (arg2 && arg2 instanceof PdfFormFieldExportSettings) {\n            settings = arg2;\n        }\n        if (settings) {\n            if (settings.dataFormat === DataFormat.xfdf) {\n                helper = new _XfdfDocument(settings.exportName);\n            }\n            else if (settings.dataFormat === DataFormat.json) {\n                helper = new _JsonDocument(settings.exportName);\n            }\n            else if (settings.dataFormat === DataFormat.fdf) {\n                helper = new _FdfDocument(settings.exportName);\n            }\n            else if (settings.dataFormat === DataFormat.xml) {\n                helper = new _XmlDocument(settings.exportName);\n            }\n            else {\n                return undefined;\n            }\n            helper._asPerSpecification = settings.asPerSpecification;\n        }\n        else {\n            helper = new _XfdfDocument();\n            helper._asPerSpecification = false;\n        }\n        if (arg1 && typeof arg1 === 'string') {\n            Save.save(arg1, new Blob([helper._exportFormFields(this)], { type: 'text/plain' }));\n        }\n        else {\n            return helper._exportFormFields(this);\n        }\n    };\n    PdfDocument.prototype.importAnnotations = function (data, dataFormat) {\n        if (dataFormat === DataFormat.xfdf) {\n            var xfdf = new _XfdfDocument();\n            xfdf._importAnnotations(this, (typeof data === 'string') ? _decode(data) : data);\n        }\n        else if (dataFormat === DataFormat.json) {\n            var json = new _JsonDocument();\n            json._importAnnotations(this, (typeof data === 'string') ? _decode(data) : data);\n        }\n        else if (dataFormat === DataFormat.fdf) {\n            var fdf = new _FdfDocument();\n            fdf._importAnnotations(this, (typeof data === 'string') ? _decode(data) : data);\n        }\n    };\n    PdfDocument.prototype.importFormData = function (data, dataFormat) {\n        if (this.form.count > 0) {\n            if (dataFormat === DataFormat.xfdf) {\n                var xfdf = new _XfdfDocument();\n                xfdf._importFormData(this, (typeof data === 'string') ? _decode(data) : data);\n            }\n            else if (dataFormat === DataFormat.json) {\n                var json = new _JsonDocument();\n                json._importFormData(this, (typeof data === 'string') ? _decode(data) : data);\n            }\n            else if (dataFormat === DataFormat.fdf) {\n                var fdf = new _FdfDocument();\n                fdf._importFormData(this, (typeof data === 'string') ? _decode(data) : data);\n            }\n            else if (dataFormat === DataFormat.xml) {\n                var xml = new _XmlDocument();\n                xml._importFormData(this, (typeof data === 'string') ? _decode(data) : data);\n            }\n        }\n    };\n    /**\n     * Disposes the current instance of `PdfDocument` class.\n     *\n     * @returns {void} Nothing.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfDocument.prototype.destroy = function () {\n        if (this._crossReference) {\n            this._crossReference._destroy();\n            this._crossReference = undefined;\n        }\n        if (this._catalog) {\n            this._catalog._destroy();\n            this._catalog = undefined;\n        }\n        this._endObjSignature = undefined;\n        this._headerSignature = undefined;\n        if (this._pages && this._pages.size > 0) {\n            this._pages.forEach(function (value) {\n                value._destroy();\n            });\n        }\n        this._pages.clear();\n        this._pages = undefined;\n        this._startXrefSignature = undefined;\n        this._stream = undefined;\n        this._form = undefined;\n        _clearPrimitiveCaches();\n    };\n    Object.defineProperty(PdfDocument.prototype, \"_destinationCollection\", {\n        get: function () {\n            if (this._namedDestinationCollection === null || typeof this._namedDestinationCollection === 'undefined') {\n                if (this._catalog._catalogDictionary.has('Names')) {\n                    var names = this._catalog._catalogDictionary.get('Names');\n                    this._namedDestinationCollection = new _PdfNamedDestinationCollection(names, this._crossReference);\n                }\n                else {\n                    this._namedDestinationCollection = new _PdfNamedDestinationCollection();\n                }\n            }\n            return this._namedDestinationCollection;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfDocument.prototype._getLinearizationPage = function (pageIndex) {\n        var _a = this, _catalog = _a._catalog, _linearization = _a._linearization, _crossReference = _a._crossReference;\n        var ref = _PdfReference.get(_linearization.objectNumberFirst, 0);\n        try {\n            var obj = _crossReference._fetch(ref); // eslint-disable-line\n            if (obj instanceof _PdfDictionary) {\n                var type = obj.get('Type');\n                if (_isName(type, 'Page') || (!obj.has('Type') && !obj.has('Kids'))) {\n                    if (!_catalog.pageKidsCountCache.has(ref)) {\n                        _catalog.pageKidsCountCache.put(ref, 1);\n                    }\n                    if (!_catalog.pageIndexCache.has(ref)) {\n                        _catalog.pageIndexCache.put(ref, 0);\n                    }\n                    return { dictionary: obj, reference: ref };\n                }\n            }\n            throw new FormatError('The Linearization dictionary does not point to a valid Page dictionary.');\n        }\n        catch (reason) {\n            return _catalog.getPageDictionary(pageIndex);\n        }\n    };\n    PdfDocument.prototype._checkHeader = function () {\n        var stream = this._stream;\n        stream.reset();\n        if (!this._find(stream, this._headerSignature)) {\n            return;\n        }\n        stream.moveStart();\n        var version = '';\n        var ch = stream.getByte();\n        while (ch > 0x20) {\n            if (version.length >= 12) {\n                break;\n            }\n            version += String.fromCharCode(ch);\n            ch = stream.getByte();\n        }\n        if (!this._version) {\n            this._version = version.substring(5);\n        }\n    };\n    PdfDocument.prototype._parse = function (recoveryMode) {\n        this._crossReference._parse(recoveryMode);\n        this._catalog = new _PdfCatalog(this._crossReference);\n        if (this._catalog.version) {\n            this._version = this._catalog.version;\n        }\n    };\n    PdfDocument.prototype._find = function (stream, signature, limit, backwards) {\n        if (limit === void 0) { limit = 1024; }\n        if (backwards === void 0) { backwards = false; }\n        var signatureLength = signature.length;\n        var scanBytes = stream.peekBytes(limit);\n        var scanLength = scanBytes.length - signatureLength;\n        if (scanLength <= 0) {\n            return false;\n        }\n        if (backwards) {\n            var signatureEnd = signatureLength - 1;\n            var position = scanBytes.length - 1;\n            while (position >= signatureEnd) {\n                var j = 0;\n                while (j < signatureLength && scanBytes[position - j] === signature[signatureEnd - j]) {\n                    j++;\n                }\n                if (j >= signatureLength) {\n                    stream.position += position - signatureEnd;\n                    return true;\n                }\n                position--;\n            }\n        }\n        else {\n            var position = 0;\n            while (position <= scanLength) {\n                var j = 0;\n                while (j < signatureLength && scanBytes[position + j] === signature[j]) { // eslint-disable-line\n                    j++;\n                }\n                if (j >= signatureLength) {\n                    stream.position += position;\n                    return true;\n                }\n                position++;\n            }\n        }\n        return false;\n    };\n    PdfDocument.prototype._doPostProcess = function (isFlatten) {\n        if (isFlatten === void 0) { isFlatten = false; }\n        this._doPostProcessOnFormFields(isFlatten);\n        this._doPostProcessOnAnnotations(isFlatten);\n    };\n    PdfDocument.prototype._doPostProcessOnFormFields = function (isFlatten) {\n        if (isFlatten === void 0) { isFlatten = false; }\n        this.form._doPostProcess(isFlatten);\n        if (isFlatten) {\n            var formObject = this._catalog._catalogDictionary.getRaw('AcroForm');\n            var dictionary = new _PdfDictionary(this._crossReference);\n            dictionary._updated = true;\n            if (formObject instanceof _PdfReference) {\n                this._crossReference._cacheMap.set(formObject, dictionary);\n            }\n            else {\n                this.form._dictionary = dictionary;\n                this._crossReference._allowCatalog = true;\n            }\n            this.form._clear();\n        }\n    };\n    PdfDocument.prototype._doPostProcessOnAnnotations = function (isFlatten) {\n        if (isFlatten === void 0) { isFlatten = false; }\n        for (var i = 0; i < this.pageCount; i++) {\n            var page = this.getPage(i);\n            page.annotations._isExport = this._isExport;\n            page.annotations._doPostProcess(isFlatten);\n            if (isFlatten) {\n                if (page._pageDictionary.has('Annots')) {\n                    delete page._pageDictionary._map.Annots;\n                    page._pageDictionary._updated = true;\n                }\n                page.annotations._clear();\n            }\n        }\n    };\n    PdfDocument.prototype._addWatermarkText = function () {\n        if (this.pageCount > 0) {\n            for (var index = 0; index < this._pageCount; index++) {\n                var page = this.getPage(index);\n                if (page) {\n                    try {\n                        var graphics = page.graphics;\n                        graphics.save();\n                        graphics.setTransparency(0.20);\n                        graphics.drawRectangle(0, 0, page.size[0], 33.75, new PdfBrush([255, 255, 255]));\n                        graphics.restore();\n                        graphics.save();\n                        graphics.setTransparency(0.50);\n                        var font = new PdfStandardFont(PdfFontFamily.helvetica, 12, PdfFontStyle.regular);\n                        var format = new PdfStringFormat(PdfTextAlignment.center, PdfVerticalAlignment.middle);\n                        graphics.drawString('Created with a trial version of Syncfusion Essential PDF', font, [0, 0, page.size[0], 33.75], null, new PdfBrush([0, 0, 0]), format);\n                        graphics.restore();\n                    }\n                    catch (e) { } // eslint-disable-line\n                }\n            }\n        }\n    };\n    return PdfDocument;\n}());\nexport { PdfDocument };\n/**\n * Represents annotation export settings.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Sets export data format as JSON type to annotation export settings\n * let settings: PdfAnnotationExportSettings = new PdfAnnotationExportSettings();\n * // Set the data format defined in annotation export settings\n * settings.dataFormat = DataFormat.json;\n * // Export annotations to JSON format\n * let json: Uint8Array = document.exportAnnotations(settings);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfAnnotationExportSettings = /** @class */ (function () {\n    function PdfAnnotationExportSettings() {\n        this._format = DataFormat.xfdf;\n        this._exportAppearance = false;\n    }\n    Object.defineProperty(PdfAnnotationExportSettings.prototype, \"dataFormat\", {\n        /**\n         * Gets the data format defined in annotation export settings.\n         *\n         * @returns {DataFormat} - Returns the data format.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Sets export data format as JSON type to annotation export settings\n         * let settings: PdfAnnotationExportSettings = new PdfAnnotationExportSettings();\n         * // Export annotations to JSON format\n         * let json: Uint8Array = document.exportAnnotations(settings);\n         * // Get the data format defined in annotation export settings\n         * let dataFormat: DataFormat = settings.dataFormat;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._format;\n        },\n        /**\n         * Sets the data format defined in annotation export settings.\n         *\n         * @param {DataFormat} format - Specifies the data format.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Sets export data format as JSON type to annotation export settings\n         * let settings: PdfAnnotationExportSettings = new PdfAnnotationExportSettings();\n         * // Set the data format defined in annotation export settings\n         * settings.dataFormat = DataFormat.json;\n         * // Export annotations to JSON format\n         * let json: Uint8Array = document.exportAnnotations(settings);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (format) {\n            this._format = format;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfAnnotationExportSettings.prototype, \"exportAppearance\", {\n        /**\n         * Gets the boolean value indicating whether the appearance of a particular object can be exported or not.\n         *\n         * @returns {boolean} - Returns the boolean value.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Sets the annotation export settings with enabled export appearance.\n         * let settings: PdfAnnotationExportSettings = new PdfAnnotationExportSettings();\n         * // Export annotations to XFDF format\n         * let xfdf: Uint8Array = document.exportAnnotations(settings);\n         * // Get the boolean value indicating whether the appearance of a particular object can be exported or not\n         * let appearance: boolean = settings.exportAppearance;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._exportAppearance;\n        },\n        /**\n         * Sets the boolean value indicating whether the appearance of a particular object can be exported or not.\n         *\n         * @param {boolean} value - The boolean value.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Sets the annotation export settings with enabled export appearance.\n         * let settings: PdfAnnotationExportSettings = new PdfAnnotationExportSettings();\n         * // Set the boolean value indicating whether the appearance of a particular object can be exported or not\n         * settings.exportAppearance = true;\n         * // Export annotations to XFDF format\n         * let xfdf: Uint8Array = document.exportAnnotations(settings);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._exportAppearance = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfAnnotationExportSettings;\n}());\nexport { PdfAnnotationExportSettings };\n/**\n * Represents form fields export settings.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Sets the form field data export settings with output data format.\n * let settings: PdfFormFieldExportSettings = new PdfFormFieldExportSettings();\n * // Set the data format defined in form field export settings.\n * settings.dataFormat = DataFormat.json;\n * // Export form field to JSON format\n * let json: Uint8Array = document.exportFormData(settings);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfFormFieldExportSettings = /** @class */ (function () {\n    function PdfFormFieldExportSettings() {\n        this._format = DataFormat.xfdf;\n        this._exportName = '';\n        this._asPerSpecification = true;\n    }\n    Object.defineProperty(PdfFormFieldExportSettings.prototype, \"dataFormat\", {\n        /**\n         * Gets the data format defined in form field export settings.\n         *\n         * @returns {DataFormat} - Returns the data format.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Sets the form field data export settings with output data format.\n         * let settings: PdfFormFieldExportSettings = new PdfFormFieldExportSettings();\n         * // Export form field to JSON format\n         * let json: Uint8Array = document.exportFormData(settings);\n         * // Get the data format defined in form field export settings\n         * let dataFormat: DataFormat = settings.dataFormat;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._format;\n        },\n        /**\n         * Sets the data format defined in form field export settings.\n         *\n         * @param {DataFormat} format - Specifies the data format.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Sets the form field data export settings with output data format.\n         * let settings: PdfFormFieldExportSettings = new PdfFormFieldExportSettings();\n         * // Set the data format defined in form field export settings.\n         * settings.dataFormat = DataFormat.json;\n         * // Export form field to JSON format\n         * let json: Uint8Array = document.exportFormData(settings);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (format) {\n            this._format = format;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfFormFieldExportSettings.prototype, \"exportName\", {\n        /**\n         * Gets the export name defined in form field export settings.\n         *\n         * @returns {string} - Returns the string value.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Sets the form field data export settings with export name.\n         * let settings: PdfFormFieldExportSettings = new PdfFormFieldExportSettings();\n         * // Export form field to JSON format\n         * let json: Uint8Array = document.exportFormData(settings);\n         * // Get the export name defined in form field export settings\n         * let name: boolean = settings.exportName;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._exportName;\n        },\n        /**\n         * Sets the export name defined in form field export settings.\n         *\n         * @param {string} name - Specifies the export name of the form.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Sets the form field data export settings with export name.\n         * let settings: PdfFormFieldExportSettings = new PdfFormFieldExportSettings();\n         * // Set the export name defined in form field export settings.\n         * settings.exportName = ‘JobApplication’.\n         * // Export form field to JSON format\n         * let json: Uint8Array = document.exportFormData(settings);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (name) {\n            this._exportName = name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfFormFieldExportSettings.prototype, \"asPerSpecification\", {\n        /**\n         * Gets the boolean value indicating whether the data in a form field can be exported based on a certain specification.\n         *\n         * @returns {boolean} - Returns the boolean value.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Sets the boolean value indicating whether the data in a form field can be exported based on a certain specification.\n         * let settings: PdfFormFieldExportSettings = new PdfFormFieldExportSettings();\n         * // Export form field to JSON format\n         * let json: Uint8Array = document.exportFormData(settings);\n         * // Get the boolean value indicating whether the data in a form field can be exported based on a certain specification.\n         * let asPerSpecification: boolean = settings.asPerSpecification;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._asPerSpecification;\n        },\n        /**\n         * Sets the boolean value indicating whether the data in a form field can be exported based on a certain specification.\n         *\n         * @param {boolean} value - The boolean value.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Sets the boolean value indicating whether the data in a form field can be exported based on a certain specification.\n         * let settings: PdfFormFieldExportSettings = new PdfFormFieldExportSettings();\n         * // Set the boolean value indicating whether the data in a form field can be exported based on a certain specification.\n         * settings.asPerSpecification = true;\n         * // Export form field to JSON format\n         * let json: Uint8Array = document.exportFormData(settings);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._asPerSpecification = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfFormFieldExportSettings;\n}());\nexport { PdfFormFieldExportSettings };\n"],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIuG,2BAA2B,GAAG,aAAe,YAAY;EACzD,SAASA,2BAA2BA,CAAA,EAAG;IACnC,IAAI,CAAC4E,OAAO,GAAGpM,UAAU,CAAC0H,IAAI;IAC9B,IAAI,CAAC2E,iBAAiB,GAAG,KAAK;EAClC;EACAvJ,MAAM,CAACC,cAAc,CAACyE,2BAA2B,CAACxE,SAAS,EAAE,YAAY,EAAE;IACvE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACmJ,OAAO;IACvB,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQlJ,GAAG,EAAE,SAAAA,CAAU8I,MAAM,EAAE;MACnB,IAAI,CAACI,OAAO,GAAGJ,MAAM;IACzB,CAAC;IACD5I,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFP,MAAM,CAACC,cAAc,CAACyE,2BAA2B,CAACxE,SAAS,EAAE,kBAAkB,EAAE;IAC7E;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACoJ,iBAAiB;IACjC,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQnJ,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACkJ,iBAAiB,GAAGlJ,KAAK;IAClC,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,OAAOmE,2BAA2B;AACtC,CAAC,CAAC,CAAE;AACJ,SAASA,2BAA2B;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIW,0BAA0B,GAAG,aAAe,YAAY;EACxD,SAASA,0BAA0BA,CAAA,EAAG;IAClC,IAAI,CAACiE,OAAO,GAAGpM,UAAU,CAAC0H,IAAI;IAC9B,IAAI,CAAC4E,WAAW,GAAG,EAAE;IACrB,IAAI,CAAChE,mBAAmB,GAAG,IAAI;EACnC;EACAxF,MAAM,CAACC,cAAc,CAACoF,0BAA0B,CAACnF,SAAS,EAAE,YAAY,EAAE;IACtE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACmJ,OAAO;IACvB,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQlJ,GAAG,EAAE,SAAAA,CAAU8I,MAAM,EAAE;MACnB,IAAI,CAACI,OAAO,GAAGJ,MAAM;IACzB,CAAC;IACD5I,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFP,MAAM,CAACC,cAAc,CAACoF,0BAA0B,CAACnF,SAAS,EAAE,YAAY,EAAE;IACtE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACqJ,WAAW;IAC3B,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQpJ,GAAG,EAAE,SAAAA,CAAUL,IAAI,EAAE;MACjB,IAAI,CAACyJ,WAAW,GAAGzJ,IAAI;IAC3B,CAAC;IACDO,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFP,MAAM,CAACC,cAAc,CAACoF,0BAA0B,CAACnF,SAAS,EAAE,oBAAoB,EAAE;IAC9E;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACqF,mBAAmB;IACnC,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQpF,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACmF,mBAAmB,GAAGnF,KAAK;IACpC,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,OAAO8E,0BAA0B;AACrC,CAAC,CAAC,CAAE;AACJ,SAASA,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}