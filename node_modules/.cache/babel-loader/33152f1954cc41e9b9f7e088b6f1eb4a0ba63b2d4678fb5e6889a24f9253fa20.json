{"ast":null,"code":"import { _PdfDictionary, _PdfReference } from './../pdf-primitives';\nimport { _checkReview } from './../utils';\nimport { PdfLineAnnotation, PdfCircleAnnotation, PdfEllipseAnnotation, PdfAngleMeasurementAnnotation, PdfRectangleAnnotation, PdfSquareAnnotation, PdfPolyLineAnnotation, PdfPolygonAnnotation, PdfInkAnnotation, PdfPopupAnnotation, PdfAttachmentAnnotation, Pdf3DAnnotation, PdfFileLinkAnnotation, PdfWatermarkAnnotation, PdfRubberStampAnnotation, PdfSoundAnnotation, PdfFreeTextAnnotation, PdfRedactionAnnotation, PdfRichMediaAnnotation, PdfTextMarkupAnnotation, PdfDocumentLinkAnnotation, PdfTextWebLinkAnnotation, PdfUriAnnotation, PdfComment } from './annotation';\nimport { PdfAnnotationFlag } from './../enumerator';\n/**\n * The class provides methods and properties to handle the collection of `PdfAnnotation`.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Access annotation coolection from first page\n * let annotations: PdfAnnotationCollection = document.getPage(0).annotations;\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfAnnotationCollection = /** @class */function () {\n  /**\n   * Represents a annotation collection.\n   *\n   * @private\n   * @param {Array<_PdfReference>} array Annotation references.\n   * @param {_PdfCrossReference} xref Cross reference object.\n   * @param {PdfPage} page PDF page object.\n   */\n  function PdfAnnotationCollection(array, xref, page) {\n    this._isExport = false;\n    this._annotations = array;\n    this._page = page;\n    this._crossReference = xref;\n    this._parsedAnnotations = new Map();\n    this._comments = [];\n  }\n  Object.defineProperty(PdfAnnotationCollection.prototype, \"count\", {\n    /**\n     * Gets the annotation count (Read only).\n     *\n     * @returns {number} Number of annotations.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Gets the annotation count\n     * let count: number = page.annotations.count;\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._annotations.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Gets the `PdfAnnotation` at the specified index.\n   *\n   * @param {number} index Field index.\n   * @returns {PdfAnnotation} Annotation at the specified index.\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access first page\n   * let page: PdfPage = document.getPage(0);\n   * // Access the annotation at index 0\n   * let annotation: PdfAnnotation = page.annotations.at(0);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfAnnotationCollection.prototype.at = function (index) {\n    if (index < 0 || index >= this._annotations.length) {\n      throw Error('Index out of range.');\n    }\n    if (!this._parsedAnnotations.has(index)) {\n      var dictionary = this._annotations[Number.parseInt(index.toString(), 10)];\n      if (typeof dictionary !== 'undefined' && dictionary instanceof _PdfReference) {\n        dictionary = this._crossReference._fetch(dictionary);\n      }\n      if (typeof dictionary !== 'undefined' && dictionary instanceof _PdfDictionary) {\n        var annotation = this._parseAnnotation(dictionary);\n        if (annotation) {\n          annotation._ref = this._annotations[Number.parseInt(index.toString(), 10)];\n          this._parsedAnnotations.set(index, annotation);\n        }\n      }\n    }\n    return this._parsedAnnotations.get(index);\n  };\n  /**\n   * Add a new `PdfAnnotation` into the collection.\n   *\n   * @param {PdfAnnotation} annotation Annotation to add.\n   * @returns {number} Annotation index.\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access first page\n   * let page: PdfPage = document.getPage(0);\n   * // Add a new annotation into the collection\n   * page.annotations.add(annotation);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfAnnotationCollection.prototype.add = function (annotation) {\n    if (typeof annotation === 'undefined' || annotation === null) {\n      throw Error('annotation cannot be null or undefined');\n    }\n    if (annotation._isLoaded) {\n      throw Error('cannot add an existing annotation');\n    }\n    annotation._initialize(this._page);\n    var reference;\n    if (typeof annotation._ref !== 'undefined' && annotation._ref._isNew) {\n      reference = annotation._ref;\n    } else {\n      reference = this._crossReference._getNextReference();\n      this._crossReference._cacheMap.set(reference, annotation._dictionary);\n      annotation._ref = reference;\n    }\n    var index = this._annotations.length;\n    this._annotations.push(reference);\n    this._parsedAnnotations.set(index, annotation);\n    var isAdded = false;\n    if (this._page._pageDictionary.has('Annots')) {\n      var collection = this._page._pageDictionary.get('Annots');\n      if (collection !== null && typeof collection !== 'undefined' && collection.indexOf(reference) === -1) {\n        collection.push(reference);\n        this._page._pageDictionary.set('Annots', collection);\n        isAdded = true;\n      }\n    }\n    if (!isAdded) {\n      this._page._pageDictionary.set('Annots', this._annotations);\n    }\n    this._page._pageDictionary._updated = true;\n    if (annotation instanceof PdfComment) {\n      this._addCommentsAndReview(annotation, annotation._dictionary.get('F'));\n    }\n    this._updateCustomAppearanceResource(annotation);\n    return index;\n  };\n  /**\n   * Remove an annotation from the collection.\n   *\n   * @param {PdfAnnotation} annotation Annotation to remove.\n   * @returns {void} Nothing.\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data);\n   * // Access first page\n   * let page: PdfPage = document.getPage(0);\n   * // Access first annotation from the PDF page\n   * let annotation: PdfAnnotation = page.annotations.at(0);\n   * // Remove an annotation from the collection\n   * page.annotations.remove(annotation);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfAnnotationCollection.prototype.remove = function (annotation) {\n    if (annotation._ref) {\n      var index = this._annotations.indexOf(annotation._ref);\n      if (index > -1) {\n        this.removeAt(index);\n      }\n    }\n  };\n  /**\n   * Remove an annotation from the collection at the specified index.\n   *\n   * @param {number} index Annotation index.\n   * @returns {void} Nothing.\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data);\n   * // Access first page\n   * let page: PdfPage = document.getPage(0);\n   * // Remove an annotation from the collection\n   * page.annotations.removeAt(0);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfAnnotationCollection.prototype.removeAt = function (index) {\n    if (index < 0 || index >= this._annotations.length) {\n      throw Error('Index out of range.');\n    }\n    var reference = this._annotations[Number.parseInt(index.toString(), 10)];\n    if (reference && this._page) {\n      var array = this._page._getProperty('Annots');\n      var actualIndex = array.indexOf(reference);\n      if (actualIndex > -1) {\n        array.splice(actualIndex, 1);\n      }\n      this._page._pageDictionary.set('Annots', array);\n      this._page._pageDictionary._updated = true;\n      if (this._annotations.indexOf(reference) > -1) {\n        this._annotations.splice(index, 1);\n      }\n      if (this._parsedAnnotations.has(index)) {\n        this._parsedAnnotations.delete(index);\n        this._reorderParsedAnnotations(index);\n      }\n      var crossReference = this._page._crossReference;\n      if (crossReference && crossReference._cacheMap.has(reference)) {\n        crossReference._cacheMap.delete(reference);\n      }\n    }\n  };\n  PdfAnnotationCollection.prototype._reorderParsedAnnotations = function (index) {\n    var result = new Map();\n    this._parsedAnnotations.forEach(function (value, key) {\n      if (key > index) {\n        result.set(key - 1, value);\n      } else {\n        result.set(key, value);\n      }\n    });\n    this._parsedAnnotations = result;\n  };\n  PdfAnnotationCollection.prototype._updateCustomAppearanceResource = function (annotation) {\n    if (annotation instanceof PdfRubberStampAnnotation && typeof annotation._appearance !== 'undefined') {\n      annotation._appearance.normal.graphics._processResources(annotation._crossReference);\n    }\n  };\n  PdfAnnotationCollection.prototype._addCommentsAndReview = function (annotation, flag) {\n    this._updateChildReference(annotation, annotation.comments, flag);\n    this._updateChildReference(annotation, annotation.reviewHistory, flag);\n  };\n  PdfAnnotationCollection.prototype._updateChildReference = function (annotation, collection, flag) {\n    if (collection && collection.count > 0) {\n      if (flag !== 30) {\n        for (var i = 0; i < collection.count; i++) {\n          var childAnnotation = collection._collection[Number.parseInt(i.toString(), 10)];\n          if (childAnnotation && !childAnnotation._dictionary.has('IRT')) {\n            if (i === 0 || !collection._isReview) {\n              childAnnotation._dictionary.update('IRT', annotation._ref);\n            } else {\n              childAnnotation._dictionary.update('IRT', collection._collection[i - 1]._ref);\n            }\n            if (collection._isReview) {\n              childAnnotation._isReview = true;\n            } else {\n              childAnnotation._isComment = true;\n            }\n            this.add(childAnnotation);\n          }\n        }\n      } else {\n        throw new Error('Could not add comments/reviews to the review');\n      }\n    }\n  };\n  PdfAnnotationCollection.prototype._parseAnnotation = function (dictionary) {\n    var annot;\n    if (dictionary.has('Subtype')) {\n      var key = dictionary.get('Subtype');\n      var size = dictionary.get('Rect');\n      if (key) {\n        var link = void 0;\n        switch (key.name) {\n          case 'Line':\n            annot = PdfLineAnnotation._load(this._page, dictionary);\n            break;\n          case 'Circle':\n            if (dictionary.has('Measure')) {\n              annot = PdfCircleAnnotation._load(this._page, dictionary);\n            } else {\n              var width = size[2] - size[0];\n              var height = size[3] - size[1];\n              if (width === height) {\n                annot = PdfCircleAnnotation._load(this._page, dictionary);\n              } else {\n                annot = PdfEllipseAnnotation._load(this._page, dictionary);\n              }\n            }\n            break;\n          case 'Square':\n            if (size[2] === size[3]) {\n              annot = PdfSquareAnnotation._load(this._page, dictionary);\n            } else {\n              annot = PdfRectangleAnnotation._load(this._page, dictionary);\n            }\n            break;\n          case 'Polygon':\n            annot = PdfPolygonAnnotation._load(this._page, dictionary);\n            break;\n          case 'PolyLine':\n            if (dictionary.has('Measure') && dictionary.has('IT')) {\n              var type = dictionary.get('IT');\n              if (type && type.name === 'PolyLineAngle') {\n                annot = PdfAngleMeasurementAnnotation._load(this._page, dictionary);\n              }\n            }\n            if (!annot) {\n              annot = PdfPolyLineAnnotation._load(this._page, dictionary);\n            }\n            break;\n          case 'Ink':\n            annot = PdfInkAnnotation._load(this._page, dictionary);\n            break;\n          case 'Popup':\n            annot = PdfPopupAnnotation._load(this._page, dictionary);\n            break;\n          case 'Text':\n            annot = PdfPopupAnnotation._load(this._page, dictionary);\n            break;\n          case 'Link':\n            if (dictionary.has('A')) {\n              link = dictionary.get('A');\n            }\n            if (link && link.has('S')) {\n              var type = link.get('S').name;\n              if (type) {\n                var isTextWebLink = this._hasValidBorder(dictionary.getArray('Border'));\n                if (type === 'URI') {\n                  annot = isTextWebLink ? PdfTextWebLinkAnnotation._load(this._page, dictionary) : this._getLinkAnnotation(dictionary);\n                } else if (type === 'Launch') {\n                  annot = PdfFileLinkAnnotation._load(this._page, dictionary);\n                } else if (type === 'GoToR') {\n                  annot = this._getLinkAnnotation(dictionary);\n                } else if (type === 'GoTo') {\n                  annot = PdfDocumentLinkAnnotation._load(this._page, dictionary);\n                }\n              }\n            } else if (key.name === 'Link') {\n              annot = PdfDocumentLinkAnnotation._load(this._page, dictionary);\n            }\n            break;\n          case 'FileAttachment':\n            annot = PdfAttachmentAnnotation._load(this._page, dictionary);\n            break;\n          case '3D':\n            annot = Pdf3DAnnotation._load(this._page, dictionary);\n            break;\n          case 'FreeText':\n            annot = PdfFreeTextAnnotation._load(this._page, dictionary);\n            break;\n          case 'Redact':\n            annot = PdfRedactionAnnotation._load(this._page, dictionary);\n            break;\n          case 'RichMedia':\n            annot = PdfRichMediaAnnotation._load(this._page, dictionary);\n            break;\n          case 'Watermark':\n            annot = PdfWatermarkAnnotation._load(this._page, dictionary);\n            break;\n          case 'Stamp':\n            annot = PdfRubberStampAnnotation._load(this._page, dictionary);\n            break;\n          case 'Sound':\n            annot = PdfSoundAnnotation._load(this._page, dictionary);\n            break;\n          case 'Highlight':\n          case 'Squiggly':\n          case 'StrikeOut':\n          case 'Underline':\n            annot = PdfTextMarkupAnnotation._load(this._page, dictionary);\n            break;\n        }\n      }\n    }\n    return annot;\n  };\n  PdfAnnotationCollection.prototype._getLinkAnnotation = function (dictionary) {\n    var annot;\n    if (dictionary.has('A')) {\n      var remote = dictionary.get('A');\n      if (remote && remote.has('S')) {\n        var link = remote.get('S');\n        if (link && link.name === 'GoToR' && remote.has('F')) {\n          annot = PdfFileLinkAnnotation._load(this._page, dictionary);\n        } else if (link && link.name === 'URI') {\n          annot = PdfUriAnnotation._load(this._page, dictionary);\n        }\n      }\n    } else {\n      annot = PdfUriAnnotation._load(this._page, dictionary);\n    }\n    return annot;\n  };\n  PdfAnnotationCollection.prototype._hasValidBorder = function (border) {\n    if (typeof border === 'undefined' || border === null) {\n      return false;\n    }\n    for (var i = 0; i < border.length; i++) {\n      var val = 0;\n      var value = border[Number.parseInt(i.toString(), 10)];\n      if (value !== null && typeof value !== 'undefined') {\n        val = value;\n      }\n      if (val > 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  PdfAnnotationCollection.prototype._doPostProcess = function (isFlatten) {\n    for (var i = this.count - 1; i >= 0; i--) {\n      var annotation = this.at(i);\n      if (annotation) {\n        annotation._isExport = this._isExport;\n        annotation._doPostProcess(annotation.flatten || isFlatten);\n      }\n    }\n  };\n  PdfAnnotationCollection.prototype._reArrange = function (ref, tabIndex, index) {\n    if (this._annotations) {\n      if (tabIndex > this._annotations.length) {\n        tabIndex = 0;\n      }\n      if (index >= this._annotations.length) {\n        index = this._annotations.indexOf(ref);\n      }\n      var annotationDictionary = this._crossReference._fetch(this._annotations[Number.parseInt(index.toString(), 10)]);\n      if (annotationDictionary.has('Parent')) {\n        var parentReference = annotationDictionary.getRaw('Parent');\n        if (parentReference && parentReference === ref || ref === this._annotations[Number.parseInt(index.toString(), 10)]) {\n          var temp = this._annotations[Number.parseInt(index.toString(), 10)];\n          this._annotations[Number.parseInt(index.toString(), 10)] = this._annotations[Number.parseInt(tabIndex.toString(), 10)];\n          this._annotations[Number.parseInt(tabIndex.toString(), 10)] = temp;\n        }\n      }\n    }\n    return this._annotations;\n  };\n  PdfAnnotationCollection.prototype._clear = function () {\n    this._annotations = [];\n    this._parsedAnnotations = new Map();\n    this._comments = [];\n  };\n  return PdfAnnotationCollection;\n}();\nexport { PdfAnnotationCollection };\n/**\n * Represents the collection of `PdfPopupAnnotation`\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Access annotation collection from first page\n * let annotations: PdfRectangleAnnotation = document.getPage(0).annotations;\n * // Gets the comments of annotation\n * let comments: PdfPopupAnnotationCollection = annotation.comments;\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfPopupAnnotationCollection = /** @class */function () {\n  /**\n   * Initializes a new instance of the `PdfPopupAnnotationCollection` class\n   *\n   * @private\n   * @param {PdfAnnotation} annotation Annotation reference\n   * @param {boolean} isReview Boolean flag to set review\n   */\n  function PdfPopupAnnotationCollection(annotation, isReview) {\n    this._collection = [];\n    this._annotation = annotation;\n    this._isReview = isReview;\n    if (this._annotation._isLoaded || typeof annotation._page !== 'undefined') {\n      this._page = annotation._page;\n      this._parentDictionary = annotation._dictionary;\n      if (this._annotation._isLoaded) {\n        this._parseCommentsOrReview();\n      }\n    }\n  }\n  Object.defineProperty(PdfPopupAnnotationCollection.prototype, \"count\", {\n    /**\n     * Gets the annotation count (Read only).\n     *\n     * @private\n     * @returns {number} Number of annotations\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access annotation collection from first page\n     * let annotations: PdfRectangleAnnotation = document.getPage(0).annotations;\n     * // Gets the comments of annotation\n     * let comments: PdfPopupAnnotationCollection = annotation.comments;\n     * // Gets the count of comments\n     * let count: number = comments.count;\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this._collection.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Gets the popup annotation at the specified index.\n   *\n   * @private\n   * @param {number} index Index of the annotation\n   * @returns {number} Annotation at the specified index\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data);\n   * // Access annotation collection from first page\n   * let annotations: PdfRectangleAnnotation = document.getPage(0).annotations;\n   * // Gets the comments of annotation\n   * let comments: PdfPopupAnnotationCollection = annotation.comments;\n   * // Gets the first comment\n   * let comment: PdfPopupAnnotation = comments.at(0);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfPopupAnnotationCollection.prototype.at = function (index) {\n    if (index < 0 || index >= this._collection.length) {\n      throw Error('Index out of range.');\n    }\n    return this._collection[Number.parseInt(index.toString(), 10)];\n  };\n  /**\n   * Add a new popup annotation into the collection\n   *\n   * @param {PdfPopupAnnotation} annotation Annotation to add\n   * @returns {void} Nothing\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data, password);\n   * // Access first page\n   * let page: PdfPage = document.getPage(0);\n   * // Create a new popup annotation\n   * const popupAnnotation: PdfPopupAnnotation = new PdfPopupAnnotation('Test popup annotation', 10, 40, 30, 30);\n   * popupAnnotation.author = 'Syncfusion';\n   * // Add a new popup annotation into the collection\n   * annotation.comments.add(popupAnnotation);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfPopupAnnotationCollection.prototype.add = function (annotation) {\n    if (this._annotation._dictionary.get('F') === 30) {\n      throw new Error('Could not add comments/reviews to the review');\n    }\n    annotation._dictionary.update('F', this._annotation.flags === PdfAnnotationFlag.locked ? 128 : this._isReview ? 30 : 28);\n    if (this._annotation && (this._annotation._isLoaded || this._page && this._annotation._ref)) {\n      this._page.annotations.add(annotation);\n      var length_1 = this._collection.length;\n      if (length_1 === 0 || !this._isReview) {\n        annotation._dictionary.update('IRT', this._annotation._ref);\n      } else {\n        annotation._dictionary.update('IRT', this._collection[Number.parseInt((length_1 - 1).toString(), 10)]._ref);\n      }\n      if (this._isReview) {\n        annotation._isReview = true;\n      } else {\n        annotation._isComment = true;\n      }\n    }\n    this._collection.push(annotation);\n  };\n  /**\n   * Remove an annotation from the collection\n   *\n   * @param {PdfPopupAnnotation} annotation Annotation to remove\n   * @returns {void} Nothing\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data);\n   * // Access annotation collection from first page\n   * let annotations: PdfRectangleAnnotation = document.getPage(0).annotations;\n   * // Gets the comments of annotation\n   * let comments: PdfPopupAnnotationCollection = annotation.comments;\n   * // Gets the first comment\n   * let comment: PdfPopupAnnotation = comments.at(0);\n   * // Remove the comment\n   * comments.remove(comment);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfPopupAnnotationCollection.prototype.remove = function (annotation) {\n    var index = this._collection.indexOf(annotation);\n    if (index > -1) {\n      this.removeAt(index);\n    }\n  };\n  /**\n   * Remove an annotation from the collection at the specified index\n   *\n   * @param {number} index Annotation index to remove\n   * @returns {void} Nothing\n   *\n   * ```typescript\n   * // Load an existing PDF document\n   * let document: PdfDocument = new PdfDocument(data);\n   * // Access annotation collection from first page\n   * let annotations: PdfRectangleAnnotation = document.getPage(0).annotations;\n   * // Gets the comments of annotation\n   * let comments: PdfPopupAnnotationCollection = annotation.comments;\n   * // Remove the first comment\n   * comments.removeAt(0);\n   * // Save the document\n   * document.save('output.pdf');\n   * // Destroy the document\n   * document.destroy();\n   * ```\n   */\n  PdfPopupAnnotationCollection.prototype.removeAt = function (index) {\n    if (index > -1 && index < this._collection.length) {\n      var annotation = this._collection[Number.parseInt(index.toString(), 10)];\n      if (this._isReview && index < this._collection.length - 1) {\n        var nextAnnotation = this._collection[Number.parseInt((index + 1).toString(), 10)];\n        var previous = annotation._dictionary._get('IRT');\n        nextAnnotation._dictionary.set('IRT', previous);\n        nextAnnotation._dictionary._updated = true;\n      }\n      this._collection.splice(index, 1);\n      this._page.annotations.remove(annotation);\n    } else {\n      throw new Error('Index out of range.');\n    }\n  };\n  PdfPopupAnnotationCollection.prototype._parseCommentsOrReview = function () {\n    if (this._isReview) {\n      this._parseReview();\n    } else {\n      this._parseComments();\n    }\n  };\n  PdfPopupAnnotationCollection.prototype._parseReview = function () {\n    var collection = this._page.annotations;\n    var map = new Map();\n    map.set(this._annotation._ref, this._annotation);\n    if (collection._comments && collection._comments.length > 0) {\n      var remaining = [];\n      for (var i = 0; i < collection._comments.length; i++) {\n        var annotation = collection._comments[Number.parseInt(i.toString(), 10)];\n        var reference = annotation._dictionary._get('IRT');\n        if (annotation._isReview && reference && map.has(reference)) {\n          this._collection.push(annotation);\n          map.set(annotation._ref, annotation);\n        } else {\n          remaining.push(annotation);\n        }\n      }\n      if (remaining.length > 0) {\n        collection._comments = remaining;\n      } else {\n        collection._comments = [];\n      }\n    } else {\n      var count = collection.count;\n      for (var i = 0; i < count; i++) {\n        var annotation = collection.at(i);\n        if (annotation && annotation instanceof PdfPopupAnnotation) {\n          var dictionary = annotation._dictionary;\n          if (annotation._dictionary.has('IRT')) {\n            var reference = dictionary._get('IRT');\n            if (annotation._isReview && reference && map.has(reference)) {\n              this._collection.push(annotation);\n              map.set(annotation._ref, annotation);\n            } else {\n              collection._comments.push(annotation);\n            }\n          }\n        }\n      }\n    }\n    map.clear();\n  };\n  PdfPopupAnnotationCollection.prototype._parseComments = function () {\n    var collection = this._page.annotations;\n    if (collection._comments && collection._comments.length > 0) {\n      var remaining = [];\n      for (var i = 0; i < collection._comments.length; i++) {\n        var annotation = collection._comments[Number.parseInt(i.toString(), 10)];\n        var dictionary = annotation._dictionary;\n        var isReview = _checkReview(dictionary);\n        var reference = dictionary._get('IRT');\n        if (reference && reference === this._annotation._ref && !isReview) {\n          this._collection.push(annotation);\n        } else {\n          remaining.push(annotation);\n        }\n      }\n      if (remaining.length > 0) {\n        collection._comments = remaining;\n      } else {\n        collection._comments = [];\n      }\n    } else {\n      var count = collection.count;\n      for (var i = 0; i < count; i++) {\n        var annotation = collection.at(i);\n        if (annotation && annotation instanceof PdfPopupAnnotation) {\n          var dictionary = annotation._dictionary;\n          if (annotation._dictionary.has('IRT')) {\n            var isReview = _checkReview(dictionary);\n            var reference = dictionary._get('IRT');\n            if (reference && reference === this._annotation._ref && !isReview) {\n              this._collection.push(annotation);\n            } else {\n              collection._comments.push(annotation);\n            }\n          }\n        }\n      }\n    }\n  };\n  return PdfPopupAnnotationCollection;\n}();\nexport { PdfPopupAnnotationCollection };","map":{"version":3,"names":["_PdfDictionary","_PdfReference","_checkReview","PdfLineAnnotation","PdfCircleAnnotation","PdfEllipseAnnotation","PdfAngleMeasurementAnnotation","PdfRectangleAnnotation","PdfSquareAnnotation","PdfPolyLineAnnotation","PdfPolygonAnnotation","PdfInkAnnotation","PdfPopupAnnotation","PdfAttachmentAnnotation","Pdf3DAnnotation","PdfFileLinkAnnotation","PdfWatermarkAnnotation","PdfRubberStampAnnotation","PdfSoundAnnotation","PdfFreeTextAnnotation","PdfRedactionAnnotation","PdfRichMediaAnnotation","PdfTextMarkupAnnotation","PdfDocumentLinkAnnotation","PdfTextWebLinkAnnotation","PdfUriAnnotation","PdfComment","PdfAnnotationFlag","PdfAnnotationCollection","array","xref","page","_isExport","_annotations","_page","_crossReference","_parsedAnnotations","Map","_comments","Object","defineProperty","prototype","get","length","enumerable","configurable","at","index","Error","has","dictionary","Number","parseInt","toString","_fetch","annotation","_parseAnnotation","_ref","set","add","_isLoaded","_initialize","reference","_isNew","_getNextReference","_cacheMap","_dictionary","push","isAdded","_pageDictionary","collection","indexOf","_updated","_addCommentsAndReview","_updateCustomAppearanceResource","remove","removeAt","_getProperty","actualIndex","splice","delete","_reorderParsedAnnotations","crossReference","result","forEach","value","key","_appearance","normal","graphics","_processResources","flag","_updateChildReference","comments","reviewHistory","count","i","childAnnotation","_collection","_isReview","update","_isComment","annot","size","link","name","_load","width","height","type","isTextWebLink","_hasValidBorder","getArray","_getLinkAnnotation","remote","border","val","_doPostProcess","isFlatten","flatten","_reArrange","ref","tabIndex","annotationDictionary","parentReference","getRaw","temp","_clear","PdfPopupAnnotationCollection","isReview","_annotation","_parentDictionary","_parseCommentsOrReview","flags","locked","annotations","length_1","nextAnnotation","previous","_get","_parseReview","_parseComments","map","remaining","clear"],"sources":["/Users/saleem/Desktop/KClient/Web App/Ver_3.6/User Interface/website_Source files/node_modules/@syncfusion/ej2-pdf/src/pdf/core/annotations/annotation-collection.js"],"sourcesContent":["import { _PdfDictionary, _PdfReference } from './../pdf-primitives';\nimport { _checkReview } from './../utils';\nimport { PdfLineAnnotation, PdfCircleAnnotation, PdfEllipseAnnotation, PdfAngleMeasurementAnnotation, PdfRectangleAnnotation, PdfSquareAnnotation, PdfPolyLineAnnotation, PdfPolygonAnnotation, PdfInkAnnotation, PdfPopupAnnotation, PdfAttachmentAnnotation, Pdf3DAnnotation, PdfFileLinkAnnotation, PdfWatermarkAnnotation, PdfRubberStampAnnotation, PdfSoundAnnotation, PdfFreeTextAnnotation, PdfRedactionAnnotation, PdfRichMediaAnnotation, PdfTextMarkupAnnotation, PdfDocumentLinkAnnotation, PdfTextWebLinkAnnotation, PdfUriAnnotation, PdfComment } from './annotation';\nimport { PdfAnnotationFlag } from './../enumerator';\n/**\n * The class provides methods and properties to handle the collection of `PdfAnnotation`.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Access annotation coolection from first page\n * let annotations: PdfAnnotationCollection = document.getPage(0).annotations;\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfAnnotationCollection = /** @class */ (function () {\n    /**\n     * Represents a annotation collection.\n     *\n     * @private\n     * @param {Array<_PdfReference>} array Annotation references.\n     * @param {_PdfCrossReference} xref Cross reference object.\n     * @param {PdfPage} page PDF page object.\n     */\n    function PdfAnnotationCollection(array, xref, page) {\n        this._isExport = false;\n        this._annotations = array;\n        this._page = page;\n        this._crossReference = xref;\n        this._parsedAnnotations = new Map();\n        this._comments = [];\n    }\n    Object.defineProperty(PdfAnnotationCollection.prototype, \"count\", {\n        /**\n         * Gets the annotation count (Read only).\n         *\n         * @returns {number} Number of annotations.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access first page\n         * let page: PdfPage = document.getPage(0);\n         * // Gets the annotation count\n         * let count: number = page.annotations.count;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._annotations.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the `PdfAnnotation` at the specified index.\n     *\n     * @param {number} index Field index.\n     * @returns {PdfAnnotation} Annotation at the specified index.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Access the annotation at index 0\n     * let annotation: PdfAnnotation = page.annotations.at(0);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfAnnotationCollection.prototype.at = function (index) {\n        if (index < 0 || index >= this._annotations.length) {\n            throw Error('Index out of range.');\n        }\n        if (!this._parsedAnnotations.has(index)) {\n            var dictionary = this._annotations[Number.parseInt(index.toString(), 10)];\n            if (typeof dictionary !== 'undefined' && dictionary instanceof _PdfReference) {\n                dictionary = this._crossReference._fetch(dictionary);\n            }\n            if (typeof dictionary !== 'undefined' && dictionary instanceof _PdfDictionary) {\n                var annotation = this._parseAnnotation(dictionary);\n                if (annotation) {\n                    annotation._ref = this._annotations[Number.parseInt(index.toString(), 10)];\n                    this._parsedAnnotations.set(index, annotation);\n                }\n            }\n        }\n        return this._parsedAnnotations.get(index);\n    };\n    /**\n     * Add a new `PdfAnnotation` into the collection.\n     *\n     * @param {PdfAnnotation} annotation Annotation to add.\n     * @returns {number} Annotation index.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Add a new annotation into the collection\n     * page.annotations.add(annotation);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfAnnotationCollection.prototype.add = function (annotation) {\n        if (typeof annotation === 'undefined' || annotation === null) {\n            throw Error('annotation cannot be null or undefined');\n        }\n        if (annotation._isLoaded) {\n            throw Error('cannot add an existing annotation');\n        }\n        annotation._initialize(this._page);\n        var reference;\n        if (typeof annotation._ref !== 'undefined' && annotation._ref._isNew) {\n            reference = annotation._ref;\n        }\n        else {\n            reference = this._crossReference._getNextReference();\n            this._crossReference._cacheMap.set(reference, annotation._dictionary);\n            annotation._ref = reference;\n        }\n        var index = this._annotations.length;\n        this._annotations.push(reference);\n        this._parsedAnnotations.set(index, annotation);\n        var isAdded = false;\n        if (this._page._pageDictionary.has('Annots')) {\n            var collection = this._page._pageDictionary.get('Annots');\n            if (collection !== null && typeof collection !== 'undefined' && collection.indexOf(reference) === -1) {\n                collection.push(reference);\n                this._page._pageDictionary.set('Annots', collection);\n                isAdded = true;\n            }\n        }\n        if (!isAdded) {\n            this._page._pageDictionary.set('Annots', this._annotations);\n        }\n        this._page._pageDictionary._updated = true;\n        if (annotation instanceof PdfComment) {\n            this._addCommentsAndReview(annotation, annotation._dictionary.get('F'));\n        }\n        this._updateCustomAppearanceResource(annotation);\n        return index;\n    };\n    /**\n     * Remove an annotation from the collection.\n     *\n     * @param {PdfAnnotation} annotation Annotation to remove.\n     * @returns {void} Nothing.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Access first annotation from the PDF page\n     * let annotation: PdfAnnotation = page.annotations.at(0);\n     * // Remove an annotation from the collection\n     * page.annotations.remove(annotation);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfAnnotationCollection.prototype.remove = function (annotation) {\n        if (annotation._ref) {\n            var index = this._annotations.indexOf(annotation._ref);\n            if (index > -1) {\n                this.removeAt(index);\n            }\n        }\n    };\n    /**\n     * Remove an annotation from the collection at the specified index.\n     *\n     * @param {number} index Annotation index.\n     * @returns {void} Nothing.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Remove an annotation from the collection\n     * page.annotations.removeAt(0);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfAnnotationCollection.prototype.removeAt = function (index) {\n        if (index < 0 || index >= this._annotations.length) {\n            throw Error('Index out of range.');\n        }\n        var reference = this._annotations[Number.parseInt(index.toString(), 10)];\n        if (reference && this._page) {\n            var array = this._page._getProperty('Annots');\n            var actualIndex = array.indexOf(reference);\n            if (actualIndex > -1) {\n                array.splice(actualIndex, 1);\n            }\n            this._page._pageDictionary.set('Annots', array);\n            this._page._pageDictionary._updated = true;\n            if (this._annotations.indexOf(reference) > -1) {\n                this._annotations.splice(index, 1);\n            }\n            if (this._parsedAnnotations.has(index)) {\n                this._parsedAnnotations.delete(index);\n                this._reorderParsedAnnotations(index);\n            }\n            var crossReference = this._page._crossReference;\n            if (crossReference && crossReference._cacheMap.has(reference)) {\n                crossReference._cacheMap.delete(reference);\n            }\n        }\n    };\n    PdfAnnotationCollection.prototype._reorderParsedAnnotations = function (index) {\n        var result = new Map();\n        this._parsedAnnotations.forEach(function (value, key) {\n            if (key > index) {\n                result.set(key - 1, value);\n            }\n            else {\n                result.set(key, value);\n            }\n        });\n        this._parsedAnnotations = result;\n    };\n    PdfAnnotationCollection.prototype._updateCustomAppearanceResource = function (annotation) {\n        if (annotation instanceof PdfRubberStampAnnotation && typeof annotation._appearance !== 'undefined') {\n            annotation._appearance.normal.graphics._processResources(annotation._crossReference);\n        }\n    };\n    PdfAnnotationCollection.prototype._addCommentsAndReview = function (annotation, flag) {\n        this._updateChildReference(annotation, annotation.comments, flag);\n        this._updateChildReference(annotation, annotation.reviewHistory, flag);\n    };\n    PdfAnnotationCollection.prototype._updateChildReference = function (annotation, collection, flag) {\n        if (collection && collection.count > 0) {\n            if (flag !== 30) {\n                for (var i = 0; i < collection.count; i++) {\n                    var childAnnotation = collection._collection[Number.parseInt(i.toString(), 10)];\n                    if (childAnnotation && !childAnnotation._dictionary.has('IRT')) {\n                        if (i === 0 || !collection._isReview) {\n                            childAnnotation._dictionary.update('IRT', annotation._ref);\n                        }\n                        else {\n                            childAnnotation._dictionary.update('IRT', collection._collection[i - 1]._ref);\n                        }\n                        if (collection._isReview) {\n                            childAnnotation._isReview = true;\n                        }\n                        else {\n                            childAnnotation._isComment = true;\n                        }\n                        this.add(childAnnotation);\n                    }\n                }\n            }\n            else {\n                throw new Error('Could not add comments/reviews to the review');\n            }\n        }\n    };\n    PdfAnnotationCollection.prototype._parseAnnotation = function (dictionary) {\n        var annot;\n        if (dictionary.has('Subtype')) {\n            var key = dictionary.get('Subtype');\n            var size = dictionary.get('Rect');\n            if (key) {\n                var link = void 0;\n                switch (key.name) {\n                    case 'Line':\n                        annot = PdfLineAnnotation._load(this._page, dictionary);\n                        break;\n                    case 'Circle':\n                        if (dictionary.has('Measure')) {\n                            annot = PdfCircleAnnotation._load(this._page, dictionary);\n                        }\n                        else {\n                            var width = size[2] - size[0];\n                            var height = size[3] - size[1];\n                            if (width === height) {\n                                annot = PdfCircleAnnotation._load(this._page, dictionary);\n                            }\n                            else {\n                                annot = PdfEllipseAnnotation._load(this._page, dictionary);\n                            }\n                        }\n                        break;\n                    case 'Square':\n                        if (size[2] === size[3]) {\n                            annot = PdfSquareAnnotation._load(this._page, dictionary);\n                        }\n                        else {\n                            annot = PdfRectangleAnnotation._load(this._page, dictionary);\n                        }\n                        break;\n                    case 'Polygon':\n                        annot = PdfPolygonAnnotation._load(this._page, dictionary);\n                        break;\n                    case 'PolyLine':\n                        if (dictionary.has('Measure') && dictionary.has('IT')) {\n                            var type = dictionary.get('IT');\n                            if (type && type.name === 'PolyLineAngle') {\n                                annot = PdfAngleMeasurementAnnotation._load(this._page, dictionary);\n                            }\n                        }\n                        if (!annot) {\n                            annot = PdfPolyLineAnnotation._load(this._page, dictionary);\n                        }\n                        break;\n                    case 'Ink':\n                        annot = PdfInkAnnotation._load(this._page, dictionary);\n                        break;\n                    case 'Popup':\n                        annot = PdfPopupAnnotation._load(this._page, dictionary);\n                        break;\n                    case 'Text':\n                        annot = PdfPopupAnnotation._load(this._page, dictionary);\n                        break;\n                    case 'Link':\n                        if (dictionary.has('A')) {\n                            link = dictionary.get('A');\n                        }\n                        if (link && link.has('S')) {\n                            var type = link.get('S').name;\n                            if (type) {\n                                var isTextWebLink = this._hasValidBorder(dictionary.getArray('Border'));\n                                if (type === 'URI') {\n                                    annot = isTextWebLink ?\n                                        PdfTextWebLinkAnnotation._load(this._page, dictionary) :\n                                        this._getLinkAnnotation(dictionary);\n                                }\n                                else if (type === 'Launch') {\n                                    annot = PdfFileLinkAnnotation._load(this._page, dictionary);\n                                }\n                                else if (type === 'GoToR') {\n                                    annot = this._getLinkAnnotation(dictionary);\n                                }\n                                else if (type === 'GoTo') {\n                                    annot = PdfDocumentLinkAnnotation._load(this._page, dictionary);\n                                }\n                            }\n                        }\n                        else if (key.name === 'Link') {\n                            annot = PdfDocumentLinkAnnotation._load(this._page, dictionary);\n                        }\n                        break;\n                    case 'FileAttachment':\n                        annot = PdfAttachmentAnnotation._load(this._page, dictionary);\n                        break;\n                    case '3D':\n                        annot = Pdf3DAnnotation._load(this._page, dictionary);\n                        break;\n                    case 'FreeText':\n                        annot = PdfFreeTextAnnotation._load(this._page, dictionary);\n                        break;\n                    case 'Redact':\n                        annot = PdfRedactionAnnotation._load(this._page, dictionary);\n                        break;\n                    case 'RichMedia':\n                        annot = PdfRichMediaAnnotation._load(this._page, dictionary);\n                        break;\n                    case 'Watermark':\n                        annot = PdfWatermarkAnnotation._load(this._page, dictionary);\n                        break;\n                    case 'Stamp':\n                        annot = PdfRubberStampAnnotation._load(this._page, dictionary);\n                        break;\n                    case 'Sound':\n                        annot = PdfSoundAnnotation._load(this._page, dictionary);\n                        break;\n                    case 'Highlight':\n                    case 'Squiggly':\n                    case 'StrikeOut':\n                    case 'Underline':\n                        annot = PdfTextMarkupAnnotation._load(this._page, dictionary);\n                        break;\n                }\n            }\n        }\n        return annot;\n    };\n    PdfAnnotationCollection.prototype._getLinkAnnotation = function (dictionary) {\n        var annot;\n        if (dictionary.has('A')) {\n            var remote = dictionary.get('A');\n            if (remote && remote.has('S')) {\n                var link = remote.get('S');\n                if (link && link.name === 'GoToR' && remote.has('F')) {\n                    annot = PdfFileLinkAnnotation._load(this._page, dictionary);\n                }\n                else if (link && link.name === 'URI') {\n                    annot = PdfUriAnnotation._load(this._page, dictionary);\n                }\n            }\n        }\n        else {\n            annot = PdfUriAnnotation._load(this._page, dictionary);\n        }\n        return annot;\n    };\n    PdfAnnotationCollection.prototype._hasValidBorder = function (border) {\n        if (typeof border === 'undefined' || border === null) {\n            return false;\n        }\n        for (var i = 0; i < border.length; i++) {\n            var val = 0;\n            var value = border[Number.parseInt(i.toString(), 10)];\n            if (value !== null && typeof value !== 'undefined') {\n                val = value;\n            }\n            if (val > 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    PdfAnnotationCollection.prototype._doPostProcess = function (isFlatten) {\n        for (var i = this.count - 1; i >= 0; i--) {\n            var annotation = this.at(i);\n            if (annotation) {\n                annotation._isExport = this._isExport;\n                annotation._doPostProcess(annotation.flatten || isFlatten);\n            }\n        }\n    };\n    PdfAnnotationCollection.prototype._reArrange = function (ref, tabIndex, index) {\n        if (this._annotations) {\n            if (tabIndex > this._annotations.length) {\n                tabIndex = 0;\n            }\n            if (index >= this._annotations.length) {\n                index = this._annotations.indexOf(ref);\n            }\n            var annotationDictionary = this._crossReference.\n                _fetch(this._annotations[Number.parseInt(index.toString(), 10)]);\n            if (annotationDictionary.has('Parent')) {\n                var parentReference = annotationDictionary.getRaw('Parent');\n                if ((parentReference && parentReference === ref) || ref ===\n                    this._annotations[Number.parseInt(index.toString(), 10)]) {\n                    var temp = this._annotations[Number.parseInt(index.toString(), 10)];\n                    this._annotations[Number.parseInt(index.toString(), 10)] = this._annotations[Number.parseInt(tabIndex.toString(), 10)];\n                    this._annotations[Number.parseInt(tabIndex.toString(), 10)] = temp;\n                }\n            }\n        }\n        return this._annotations;\n    };\n    PdfAnnotationCollection.prototype._clear = function () {\n        this._annotations = [];\n        this._parsedAnnotations = new Map();\n        this._comments = [];\n    };\n    return PdfAnnotationCollection;\n}());\nexport { PdfAnnotationCollection };\n/**\n * Represents the collection of `PdfPopupAnnotation`\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Access annotation collection from first page\n * let annotations: PdfRectangleAnnotation = document.getPage(0).annotations;\n * // Gets the comments of annotation\n * let comments: PdfPopupAnnotationCollection = annotation.comments;\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfPopupAnnotationCollection = /** @class */ (function () {\n    /**\n     * Initializes a new instance of the `PdfPopupAnnotationCollection` class\n     *\n     * @private\n     * @param {PdfAnnotation} annotation Annotation reference\n     * @param {boolean} isReview Boolean flag to set review\n     */\n    function PdfPopupAnnotationCollection(annotation, isReview) {\n        this._collection = [];\n        this._annotation = annotation;\n        this._isReview = isReview;\n        if (this._annotation._isLoaded || typeof annotation._page !== 'undefined') {\n            this._page = annotation._page;\n            this._parentDictionary = annotation._dictionary;\n            if (this._annotation._isLoaded) {\n                this._parseCommentsOrReview();\n            }\n        }\n    }\n    Object.defineProperty(PdfPopupAnnotationCollection.prototype, \"count\", {\n        /**\n         * Gets the annotation count (Read only).\n         *\n         * @private\n         * @returns {number} Number of annotations\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access annotation collection from first page\n         * let annotations: PdfRectangleAnnotation = document.getPage(0).annotations;\n         * // Gets the comments of annotation\n         * let comments: PdfPopupAnnotationCollection = annotation.comments;\n         * // Gets the count of comments\n         * let count: number = comments.count;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._collection.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the popup annotation at the specified index.\n     *\n     * @private\n     * @param {number} index Index of the annotation\n     * @returns {number} Annotation at the specified index\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access annotation collection from first page\n     * let annotations: PdfRectangleAnnotation = document.getPage(0).annotations;\n     * // Gets the comments of annotation\n     * let comments: PdfPopupAnnotationCollection = annotation.comments;\n     * // Gets the first comment\n     * let comment: PdfPopupAnnotation = comments.at(0);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfPopupAnnotationCollection.prototype.at = function (index) {\n        if (index < 0 || index >= this._collection.length) {\n            throw Error('Index out of range.');\n        }\n        return this._collection[Number.parseInt(index.toString(), 10)];\n    };\n    /**\n     * Add a new popup annotation into the collection\n     *\n     * @param {PdfPopupAnnotation} annotation Annotation to add\n     * @returns {void} Nothing\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Access first page\n     * let page: PdfPage = document.getPage(0);\n     * // Create a new popup annotation\n     * const popupAnnotation: PdfPopupAnnotation = new PdfPopupAnnotation('Test popup annotation', 10, 40, 30, 30);\n     * popupAnnotation.author = 'Syncfusion';\n     * // Add a new popup annotation into the collection\n     * annotation.comments.add(popupAnnotation);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfPopupAnnotationCollection.prototype.add = function (annotation) {\n        if (this._annotation._dictionary.get('F') === 30) {\n            throw new Error('Could not add comments/reviews to the review');\n        }\n        annotation._dictionary.update('F', ((this._annotation.flags === PdfAnnotationFlag.locked) ? 128 : (this._isReview ? 30 : 28)));\n        if (this._annotation && (this._annotation._isLoaded || (this._page && this._annotation._ref))) {\n            this._page.annotations.add(annotation);\n            var length_1 = this._collection.length;\n            if (length_1 === 0 || !this._isReview) {\n                annotation._dictionary.update('IRT', this._annotation._ref);\n            }\n            else {\n                annotation._dictionary.update('IRT', this._collection[Number.parseInt((length_1 - 1).toString(), 10)]._ref);\n            }\n            if (this._isReview) {\n                annotation._isReview = true;\n            }\n            else {\n                annotation._isComment = true;\n            }\n        }\n        this._collection.push(annotation);\n    };\n    /**\n     * Remove an annotation from the collection\n     *\n     * @param {PdfPopupAnnotation} annotation Annotation to remove\n     * @returns {void} Nothing\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access annotation collection from first page\n     * let annotations: PdfRectangleAnnotation = document.getPage(0).annotations;\n     * // Gets the comments of annotation\n     * let comments: PdfPopupAnnotationCollection = annotation.comments;\n     * // Gets the first comment\n     * let comment: PdfPopupAnnotation = comments.at(0);\n     * // Remove the comment\n     * comments.remove(comment);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfPopupAnnotationCollection.prototype.remove = function (annotation) {\n        var index = this._collection.indexOf(annotation);\n        if (index > -1) {\n            this.removeAt(index);\n        }\n    };\n    /**\n     * Remove an annotation from the collection at the specified index\n     *\n     * @param {number} index Annotation index to remove\n     * @returns {void} Nothing\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access annotation collection from first page\n     * let annotations: PdfRectangleAnnotation = document.getPage(0).annotations;\n     * // Gets the comments of annotation\n     * let comments: PdfPopupAnnotationCollection = annotation.comments;\n     * // Remove the first comment\n     * comments.removeAt(0);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfPopupAnnotationCollection.prototype.removeAt = function (index) {\n        if (index > -1 && index < this._collection.length) {\n            var annotation = this._collection[Number.parseInt(index.toString(), 10)];\n            if (this._isReview && index < this._collection.length - 1) {\n                var nextAnnotation = this._collection[Number.parseInt((index + 1).toString(), 10)];\n                var previous = annotation._dictionary._get('IRT');\n                nextAnnotation._dictionary.set('IRT', previous);\n                nextAnnotation._dictionary._updated = true;\n            }\n            this._collection.splice(index, 1);\n            this._page.annotations.remove(annotation);\n        }\n        else {\n            throw new Error('Index out of range.');\n        }\n    };\n    PdfPopupAnnotationCollection.prototype._parseCommentsOrReview = function () {\n        if (this._isReview) {\n            this._parseReview();\n        }\n        else {\n            this._parseComments();\n        }\n    };\n    PdfPopupAnnotationCollection.prototype._parseReview = function () {\n        var collection = this._page.annotations;\n        var map = new Map();\n        map.set(this._annotation._ref, this._annotation);\n        if (collection._comments && collection._comments.length > 0) {\n            var remaining = [];\n            for (var i = 0; i < collection._comments.length; i++) {\n                var annotation = collection._comments[Number.parseInt(i.toString(), 10)];\n                var reference = annotation._dictionary._get('IRT');\n                if (annotation._isReview && reference && map.has(reference)) {\n                    this._collection.push(annotation);\n                    map.set(annotation._ref, annotation);\n                }\n                else {\n                    remaining.push(annotation);\n                }\n            }\n            if (remaining.length > 0) {\n                collection._comments = remaining;\n            }\n            else {\n                collection._comments = [];\n            }\n        }\n        else {\n            var count = collection.count;\n            for (var i = 0; i < count; i++) {\n                var annotation = collection.at(i);\n                if (annotation && annotation instanceof PdfPopupAnnotation) {\n                    var dictionary = annotation._dictionary;\n                    if (annotation._dictionary.has('IRT')) {\n                        var reference = dictionary._get('IRT');\n                        if (annotation._isReview && reference && map.has(reference)) {\n                            this._collection.push(annotation);\n                            map.set(annotation._ref, annotation);\n                        }\n                        else {\n                            collection._comments.push(annotation);\n                        }\n                    }\n                }\n            }\n        }\n        map.clear();\n    };\n    PdfPopupAnnotationCollection.prototype._parseComments = function () {\n        var collection = this._page.annotations;\n        if (collection._comments && collection._comments.length > 0) {\n            var remaining = [];\n            for (var i = 0; i < collection._comments.length; i++) {\n                var annotation = collection._comments[Number.parseInt(i.toString(), 10)];\n                var dictionary = annotation._dictionary;\n                var isReview = _checkReview(dictionary);\n                var reference = dictionary._get('IRT');\n                if (reference && reference === this._annotation._ref && !isReview) {\n                    this._collection.push(annotation);\n                }\n                else {\n                    remaining.push(annotation);\n                }\n            }\n            if (remaining.length > 0) {\n                collection._comments = remaining;\n            }\n            else {\n                collection._comments = [];\n            }\n        }\n        else {\n            var count = collection.count;\n            for (var i = 0; i < count; i++) {\n                var annotation = collection.at(i);\n                if (annotation && annotation instanceof PdfPopupAnnotation) {\n                    var dictionary = annotation._dictionary;\n                    if (annotation._dictionary.has('IRT')) {\n                        var isReview = _checkReview(dictionary);\n                        var reference = dictionary._get('IRT');\n                        if (reference && reference === this._annotation._ref && !isReview) {\n                            this._collection.push(annotation);\n                        }\n                        else {\n                            collection._comments.push(annotation);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    return PdfPopupAnnotationCollection;\n}());\nexport { PdfPopupAnnotationCollection };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}